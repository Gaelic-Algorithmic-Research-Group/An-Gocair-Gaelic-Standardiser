! function(e) {
	function r(r) {
		for (var n, a, p = r[0], l = r[1], i = r[2], c = 0, s = []; c < p.length; c++) a = p[c], Object.prototype.hasOwnProperty.call(o, a) && o[a] && s.push(o[a][0]), o[a] = 0;
		for (n in l) Object.prototype.hasOwnProperty.call(l, n) && (e[n] = l[n]);
		for (f && f(r); s.length;) s.shift()();
		return u.push.apply(u, i || []), t()
	}

	function t() {
		for (var e, r = 0; r < u.length; r++) {
			for (var t = u[r], n = !0, p = 1; p < t.length; p++) {
				var l = t[p];
				0 !== o[l] && (n = !1)
			}
			n && (u.splice(r--, 1), e = a(a.s = t[0]))
		}
		return e
	}
	var n = {},
		o = {
			1: 0
		},
		u = [];

	function a(r) {
		if (n[r]) return n[r].exports;
		var t = n[r] = {
			i: r,
			l: !1,
			exports: {}
		};
		return e[r].call(t.exports, t, t.exports, a), t.l = !0, t.exports
	}
	a.m = e, a.c = n, a.d = function(e, r, t) {
		a.o(e, r) || Object.defineProperty(e, r, {
			enumerable: !0,
			get: t
		})
	}, a.r = function(e) {
		"undefined" !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
			value: "Module"
		}), Object.defineProperty(e, "__esModule", {
			value: !0
		})
	}, a.t = function(e, r) {
		if (1 & r && (e = a(e)), 8 & r) return e;
		if (4 & r && "object" === typeof e && e && e.__esModule) return e;
		var t = Object.create(null);
		if (a.r(t), Object.defineProperty(t, "default", {
				enumerable: !0,
				value: e
			}), 2 & r && "string" != typeof e)
			for (var n in e) a.d(t, n, function(r) {
				return e[r]
			}.bind(null, n));
		return t
	}, a.n = function(e) {
		var r = e && e.__esModule ? function() {
			return e.default
		} : function() {
			return e
		};
		return a.d(r, "a", r), r
	}, a.o = function(e, r) {
		return Object.prototype.hasOwnProperty.call(e, r)
	}, a.p = "./";
	var p = this["webpackJsonplanding-page-app"] = this["webpackJsonplanding-page-app"] || [],
		l = p.push.bind(p);
	p.push = r, p = p.slice();
	for (var i = 0; i < p.length; i++) r(p[i]);
	var f = l;
	t()
}([]);
(this["webpackJsonplanding-page-app"] = this["webpackJsonplanding-page-app"] || []).push([
	[0], {
		105: function(e, t, n) {},
		106: function(e, t, n) {},
		187: function(e, t, n) {
			"use strict";
			n.r(t), n.d(t, "QUOTA_VALUE", (function() {
				return Ge
			})), n.d(t, "FIRST_PLATFORM", (function() {
				return Me
			}));
			var r = n(0),
				o = n.n(r),
				i = n(11),
				a = n.n(i),
				c = (n(105), n(106), n(19)),
				l = n(3),
				s = n(12),
				d = {
					cursor: "default",
					" -webkit-user-select": "none",
					"-khtml-user-select": "none",
					"-moz-user-select": "none",
					"-ms-user-select": "none",
					"-o-user-select": "none",
					"user-select": "none"
				},
				u = Object(l.c)((function(e) {
					return {
						selected: {},
						mobile: {
							opacity: "100%"
						},
						row: Object(s.a)(Object(s.a)({}, d), {}, {
							minHeight: 40,
							position: "relative",
							border: "solid 1px #eceef4",
							fontFamily: "Roboto",
							fontSize: 18,
							display: "flex",
							alignItems: "center",
							justifyContent: "flex-start",
							color: "#000000",
							padding: "16px 12px 16px 32px",
							backgroundColor: "#ffffff",
							transition: "all 0.12s ease",
							"@media (max-width: 480px)": {
								fontSize: "16px",
								padding: "16px 12px 16px 20px"
							},
							"& $mobile": {
								opacity: "100%",
								width: "40px",
								height: "40px"
							}
						}),
						loadingRow: {
							minHeight: 40,
							extend: "row",
							"&:nth-child(2)": {
								"& span": {
									animationDelay: "".concat(.1, "s")
								}
							},
							"&:nth-child(3)": {
								"& span": {
									animationDelay: "".concat(.2, "s")
								}
							},
							"&:nth-child(4)": {
								"& span": {
									animationDelay: "".concat(.1 * 3, "s")
								}
							}
						},
						marked: {
							color: "rgba(160, 34, 234, 1)",
							background: "rgba(160, 34, 234, 0.1)"
						},
						clicked: {
							color: ["#ffffff", "!important"],
							background: ["#8b0abe", "!important"]
						},
						changedText: Object(s.a)({
							color: "#a022ea"
						}, d)
					}
				})),
				p = .1,
				b = Object(l.c)((function(e) {
					return {
						loadingOption: {
							extend: "optionWrap",
							"&:nth-child(2)": {
								"& span": {
									animationDelay: "".concat(p, "s")
								}
							},
							"&:nth-child(3)": {
								"& span": {
									animationDelay: "".concat(.2, "s")
								}
							},
							"&:nth-child(4)": {
								"& span": {
									animationDelay: "".concat(.2, "s")
								}
							},
							"&:nth-child(5)": {
								"& span": {
									animationDelay: "".concat(.30000000000000004, "s")
								}
							}
						},
						"@keyframes rewriteLoadingAnimation": {
							from: {
								backgroundPosition: "-800px 0"
							},
							to: {
								backgroundPosition: "800px 0"
							}
						},
						spinner: {
							animation: "rotation 2s infinite linear",
							animationName: "$Spinner",
							animationDuration: ".8s"
						},
						"@keyframes Spinner": {
							from: {
								transform: "rotate(0deg)"
							},
							to: {
								transform: "rotate(359deg)"
							}
						},
						loadingSpan: {
							backgroundColor: "rgba(160, 34, 234, 0.1)",
							backgroundImage: "linear-gradient(90deg, rgba(160, 34, 234, 0), rgba(160, 34, 234, 0.2), rgba(160, 34, 234, 0))",
							color: [
								["transparent"], "!important"
							],
							animationName: "$rewriteLoadingAnimation",
							animationDuration: "1.2s",
							animationTimingFunction: "ease-in",
							animationIterationCount: "infinite",
							userSelect: "none",
							backgroundSize: "800px 100%",
							backgroundRepeat: "no-repeat",
							display: "inline-block",
							position: "relative",
							borderRadius: 20,
							"&:before, &:after": {
								content: '""',
								position: "absolute",
								left: 0,
								right: 0,
								height: 2,
								background: "white",
								zIndex: 1
							},
							"&:before": {
								top: 0
							},
							"&:after": {
								bottom: 0
							}
						},
						hoverFeedback: {
							transition: "0.1s all",
							"&:hover": {
								opacity: .85
							}
						}
					}
				})),
				f = n(2);

			function g(e) {
				var t = e.width,
					n = Object(l.d)(),
					r = u(n),
					o = b(n);
				return Object(f.jsx)("div", {
					className: r.loadingRow,
					children: Object(f.jsx)("span", {
						className: o.loadingSpan,
						style: {
							width: t + "%"
						},
						children: "\xa0"
					})
				})
			}

			function h(e) {
				var t = e.rowId,
					n = e.row,
					o = (e.ref, Object(r.useState)(!1)),
					i = Object(c.a)(o, 2),
					a = i[0],
					s = (i[1], Object(r.useState)(!1)),
					d = Object(c.a)(s, 2),
					p = (d[0], d[1]),
					b = Object(l.d)(),
					g = u(b),
					h = [g.row],
					m = Object(r.useCallback)((function(e) {
						return e.added ? g.changedText : ""
					}), [g]);
				return Object(r.useEffect)((function() {
					a ? setTimeout((function() {
						p(!0)
					}), 500) : p(!1)
				}), [a]), Object(f.jsx)("div", {
					className: h.join(" "),
					children: Object(f.jsx)("div", {
						style: {
							paddingRight: 46
						},
						children: n.map((function(e, n) {
							return Object(f.jsx)("span", {
								className: m(e),
								children: e.value
							}, t + "_" + n)
						}))
					})
				}, t)
			}
			var m = Object(r.forwardRef)(h),
				x = Object(l.c)((function(e) {
					return {
						rewriteCard: {
							width: "100%",
							borderRadius: 3,
							boxShadow: "rgba(63, 62, 77, 0.2) 0px 2px 14px 0px",
							border: "1px solid rgb(230, 232, 238)",
							backgroundColor: "rgb(255, 255, 255)",
							transition: "height 0.1s ease 0s",
							position: "relative",
							display: "flex",
							flexDirection: "column"
						},
						scrollWrap: {
							width: "100%",
							maxHeight: 280,
							overflowY: "auto",
							transition: "height 0.1s ease",
							position: "relative",
							background: "white",
							loading: {
								pointerEvents: "none",
								borderBottom: "solid 1px #eceef4",
								borderTop: "solid 1px #eceef4"
							},
							"@media (max-width: 480px)": {
								maxHeight: 320
							},
							"&::-webkit-scrollbar": {
								width: 8,
								height: 8
							},
							"&::-webkit-scrollbar-button": {
								width: 8,
								height: 8
							},
							"&::-webkit-scrollbar-thumb": {
								background: "rgba(139, 10, 190, 0.34)",
								border: "0px solid #FFFFFF",
								borderRadius: 50
							},
							"&::-webkit-scrollbar-thumb:hover": {
								background: "rgba(139, 10, 190, 0.5)"
							},
							"&::-webkit-scrollbar-thumb:active": {
								background: "rgba(139, 10, 190, 0.5)"
							},
							"&::-webkit-scrollbar-track": {
								background: "white",
								border: "28px none #75498D",
								borderRadius: 8
							},
							"&::-webkit-scrollbar-track:hover": {
								background: "white"
							},
							"&::-webkit-scrollbar-track:active": {
								background: "rgba(139, 10, 190, 0.5)"
							},
							"&::-webkit-scrollbar-corner": {
								background: "transparent"
							}
						},
						resultsWrap: {
							flexShrink: 0,
							position: "relative",
							zIndex: 2,
							overflow: "hidden",
							minHeight: 280
						}
					}
				})),
				w = n(13),
				j = n(90);
			var v = function(e) {
					return e.rewrite.fetching
				},
				O = function(e) {
					return e.rewrite.counter >= Ge
				},
				y = function(e) {
					return !0
				},
				k = function(e) {
					var t = e.rewrite.results;
					return t && t.length > 0 && 2 !== t[0].length && (t = t.map((function(e) {
						return [e, [0, e.length]]
					}))), t.map((function(t) {
						return n = e.rewrite.wholeText, r = t[0], j.diffWords(n, r, {
							ignoreCase: !0
						}).filter((function(e) {
							return !e.removed
						}));
						var n, r
					}))
				},
				S = function(e) {
					return e.rewrite.error
				},
				I = function(e) {
					return e.rewrite.landingPageVisible
				},
				T = "Good writing is about finding the best words to convey your message.",
				C = Object(f.jsxs)(f.Fragment, {
					children: [Object(f.jsx)("div", {
						children: "Enjoying Rewrite?"
					}), Object(f.jsx)("div", {
						children: "Get started with Wordtune for free:"
					})]
				}),
				E = Object(f.jsx)(f.Fragment, {
					children: "Something went wrong. Please try again."
				}),
				R = Object(l.c)((function(e) {
					return {
						box: {
							fontFamily: "Roboto",
							padding: 16,
							textAlign: "center",
							color: "#000000",
							fontSize: 15,
							width: "100%",
							boxSizing: "border-box"
						},
						emoji: {
							fontSize: 18,
							display: "inline-flex",
							width: 36,
							height: 36,
							borderRadius: "50%",
							background: "#f0f2f7",
							alignItems: "center",
							justifyContent: "center"
						}
					}
				})),
				D = function() {
					var e = Object(l.d)(),
						t = R(e),
						n = E;
					return Object(f.jsxs)("div", {
						className: t.box,
						children: [Object(f.jsx)("div", {
							style: {
								marginBottom: 6
							},
							children: Object(f.jsx)("span", {
								className: t.emoji,
								role: "img",
								"aria-label": "sad-emoji",
								children: "\ud83d\ude14"
							})
						}), Object(f.jsx)("div", {
							children: n
						})]
					})
				};

			function A(e) {
				var t = e.suggestions,
					n = e.showSuggestions,
					o = Object(l.d)(),
					i = x(o),
					a = Object(w.c)(v),
					c = Object(r.useRef)(null),
					s = Object(w.c)(S);
				return Object(r.useEffect)((function() {
					c && c.current && c.current.scrollTo(0, 0)
				}), [a]), n ? Object(f.jsxs)("div", {
					className: i.resultsWrap,
					children: [Object(f.jsx)("div", {
						style: {
							position: "absolute",
							top: -4,
							right: -10,
							left: -10,
							height: 4,
							zIndex: 99,
							boxShadow: "0px 3px 5px 4px rgba(43, 54, 72, 0.06)"
						}
					}), Object(f.jsxs)("div", {
						ref: c,
						className: i.scrollWrap,
						children: [a && [75, 90, 80, 70, 83, 60, 50, 75, 57, 64].map((function(e, t) {
							return Object(f.jsx)(g, {
								width: e
							}, t)
						})), !a && t.map((function(e, t) {
							return Object(f.jsx)("div", {
								children: Object(f.jsx)(m, {
									row: e,
									rowId: t
								})
							}, t)
						})), s && Object(f.jsx)("div", {
							style: {
								height: 250,
								display: "flex",
								alignItems: "center",
								backgroundColor: "#f5f7fC"
							},
							children: Object(f.jsx)(D, {})
						})]
					})]
				}) : null
			}
			var N = "https://api.wordtune.com/",
				P = (new Date).getTime(),
				F = "lparc",
				L = "lpactac",
				_ = "lpafit",
				z = ["K39Y5_lfTPOwZ4lWWteQkA", "7PBVqE6RQr2PsFZlOfoGNg"];

			function W() {
				return Object(f.jsx)("svg", {
					xmlns: "http://www.w3.org/2000/svg",
					width: "19",
					height: "18",
					fill: "none",
					viewBox: "0 0 19 18",
					children: Object(f.jsx)("path", {
						fill: "#fff",
						d: "M7.795 11.86l-2.971.202-.973-2.863c-.043-.127-.237-.117-.259.022l-.464 3.437-2.474 1.756a.13.13 0 00.064.234l2.56.202 1.06 2.543c.054.117.226.107.259-.02l.605-3.044 2.679-2.235c.108-.085.043-.245-.086-.234zm.375-9.156l-2.27.145-.738-2.18c-.034-.1-.182-.09-.193.022l-.352 2.616-1.872 1.33c-.08.056-.046.168.056.18l1.94.156.807 1.934c.034.09.17.078.193-.023l.465-2.314 2.043-1.699c.068-.056.01-.179-.08-.167zm10.208 2.492l-4.653.313-1.52-4.483c-.069-.213-.375-.179-.41.033l-.726 5.389-3.87 2.75a.202.202 0 00.103.368l4.006.313 1.657 3.98c.08.19.363.156.397-.034l.953-4.773 4.2-3.499c.17-.123.067-.369-.137-.357z"
					})
				})
			}
			var B = Object(l.c)((function(e) {
					return {
						button: {
							transition: "0.15s all",
							outline: "none !important",
							zIndex: 3,
							backgroundColor: "#8b0abe",
							fontSize: 17,
							color: "#ffffff",
							textTransform: "none",
							width: 119,
							height: 44,
							display: "flex",
							flexDirection: "row",
							justifyContent: "center",
							alignItems: "center",
							padding: "10px 14px",
							borderRadius: "4px",
							border: "solid 1px var(--purple)",
							cursor: "pointer",
							"&:hover": {
								opacity: .85
							},
							"&:disabled": {
								backgroundColor: "rgba(139, 10, 190, 0.33)",
								opacity: "1.0 !important",
								cursor: "default"
							}
						}
					}
				})),
				G = n(41),
				M = n.n(G);

			function H(e) {
				var t = e.onClick,
					n = e.disabled,
					r = e.onVisible,
					o = Object(l.d)(),
					i = B(o);
				return Object(f.jsx)(M.a, {
					offset: {
						bottom: 10
					},
					onChange: r,
					children: Object(f.jsxs)("button", {
						id: "widget-rewrite-button",
						disabled: n,
						onClick: t,
						className: [i.button].join(" "),
						children: [Object(f.jsx)(W, {}), " \xa0 Rewrite"]
					})
				})
			}
			var V = n(205),
				U = n(207),
				J = n(26),
				q = n.n(J),
				Z = n(58),
				K = "REWRITE_STARTED",
				Q = "FETCH_REWRITE_SUCCESS",
				Y = "FETCH_REWRITE_ERROR",
				$ = "APP_LOADED",
				X = "COMPOSE_STARTED",
				ee = "LANDING_PAGE_DEMO_LOCKED",
				te = "ADD_TO_BROWSER_PRESSED",
				ne = "LANDING_PAGE_DEMO_SHOWN",
				re = "GO_TO_EDITOR_PRESSED",
				oe = "EXTENSION_GET_STARTED_CTA_PRESSED",
				ie = "EDITOR_GET_STARTED_CTA_PRESSED",
				ae = n(27),
				ce = n.n(ae),
				le = n(91).isMobile;

			function se(e) {
				for (var t = e + "=", n = decodeURIComponent(document.cookie).split(";"), r = 0; r < n.length; r++) {
					for (var o = n[r];
						" " === o.charAt(0);) o = o.substring(1);
					if (0 === o.indexOf(t)) return o.substring(t.length, o.length)
				}
				return ""
			}

			function de() {
				return ce.a.getInstance().options.deviceId
			}

			function ue() {
				return "lpDemoDraft-deviceId-" + de() + "-" + P
			}

			function pe() {
				try {
					return !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime) && -1 != navigator.userAgent.indexOf("Edg") ? "Edge" : "Chrome"
				} catch (e) {
					return "Chrome"
				}
			}

			function be(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
				try {
					var n, r = se("InstallInfo") || "{}";
					n = JSON.parse(r), t || (n.lastDemoInteractionTime = (new Date).toISOString().split(".")[0]), n = Object(s.a)(Object(s.a)({}, n), e);
					var o = "; expires=Sun, 01 Jan 2023 00:00:00 UTC; SameSite=None; Secure; Domain=wordtune.com";
					document.cookie = "InstallInfo=" + JSON.stringify(n) + o
				} catch (i) {
					console.log("error,", i)
				}
			}

			function fe() {
				var e = "https://chrome.google.com/webstore/detail/wordtune-ai-powered-writi/nllcnknpjnininklegdoijpljgdjkijc?hl=en",
					t = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);
				t && (e = "https://chrome.google.com/webstore/detail/wordtune-ai-powered-writi/" + "nllcnknpjnininklegdoijpljgdjkijc");
				var n = !!window.StyleMedia,
					r = t && -1 != navigator.userAgent.indexOf("Edg");
				return (n || r) && (e = "https://microsoftedge.microsoft.com/addons/detail/wordtune-aipowered-wri/" + "fgngodlaekdlibajobmkaklibdggemdd"), e
			}
			var ge = n(92),
				he = new(n.n(ge).a);
			he.start({
				key: "AIzaSyDPaN5YTBf-qZu86u1AG6EjOKy08iW8mB4",
				projectId: "ai21-dev",
				service: "landing-page-app-production"
			});
			var me = "REWRITE_STARTED";

			function xe(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
				return function() {
					var n = Object(Z.a)(q.a.mark((function n(r) {
						var o, i, a, c;
						return q.a.wrap((function(n) {
							for (;;) switch (n.prev = n.next) {
								case 0:
									return r({
										type: me,
										payload: {
											time: (new Date).getTime(),
											wholeText: e,
											isFake: t
										}
									}), o = new Date, n.prev = 2, n.next = 5, fetch(N + "rewrite-limited", {
										method: "post",
										headers: {
											"Content-Type": "application/json",
											"X-WORDTUNE-ORIGIN": window.location.origin,
											userId: "deviceId-" + de()
										},
										body: JSON.stringify({
											action: "REWRITE",
											text: e,
											draftId: ue(),
											start: 0,
											end: e.length,
											selection: {
												wholeText: e,
												start: 0,
												end: e.length
											}
										})
									});
								case 5:
									if (!(i = n.sent).ok) {
										n.next = 15;
										break
									}
									return n.next = 9, i.json();
								case 9:
									return a = n.sent, c = new Date, a = Object(s.a)(Object(s.a)({}, a), {}, {
										duration: c - o,
										isFake: t,
										wholeText: e
									}), n.abrupt("return", r({
										type: Q,
										payload: a
									}));
								case 15:
									return n.abrupt("return", r({
										type: Y,
										error: i.statusText,
										payload: {
											isFake: t
										}
									}));
								case 16:
									n.next = 22;
									break;
								case 18:
									return n.prev = 18, n.t0 = n.catch(2), he.report(n.t0), n.abrupt("return", r({
										type: Y,
										error: n.t0.toString(),
										payload: {
											isFake: t
										}
									}));
								case 22:
								case "end":
									return n.stop()
							}
						}), n, null, [
							[2, 18]
						])
					})));
					return function(e) {
						return n.apply(this, arguments)
					}
				}()
			}
			var we = Object(l.c)((function(e) {
				return {
					button: {
						transition: "0.15s all",
						outline: "none !important",
						bottom: 40,
						right: 0,
						backgroundColor: "#8b0abe",
						fontSize: 17,
						color: "#ffffff",
						textTransform: "none",
						width: 157,
						height: 43,
						display: "flex",
						flexDirection: "row",
						justifyContent: "center",
						alignItems: "center",
						padding: "10px 20px",
						borderRadius: 4,
						border: "none",
						cursor: "pointer",
						"&:hover": {
							opacity: .85
						}
					}
				}
			}));

			function je(e) {
				var t = e.onClick,
					n = e.btnStyle,
					r = Object(l.d)(),
					o = [we(r).button, "btn--gtm-add-to"];
				return Object(f.jsxs)("button", {
					id: "AddToBrowserButton",
					onClick: t,
					className: o.join(" "),
					style: n,
					children: ["Add to ", pe()]
				})
			}

			function ve(e) {
				var t = e.onClick,
					n = e.btnStyle,
					r = Object(l.d)(),
					o = [we(r).button, "btn--gtm-editor"];
				return Object(f.jsx)("button", {
					id: "GoToEditorButton",
					onClick: t,
					className: o.join(" "),
					style: n,
					children: "Go to Editor"
				})
			}
			var Oe = Object(l.c)((function(e) {
					return {
						textarea: {
							padding: "24px 10px 10px 24px",
							boxSizing: "border-box",
							minHeight: 168,
							width: "100%",
							fontFamily: "Roboto",
							lineHeight: 1.54,
							color: "#000000",
							backgroundColor: "white",
							resize: "none",
							fontSize: "18px",
							border: "none",
							outline: "none !important",
							"@media (max-width: 480px)": {
								padding: "20px 12px 12px 20px",
								fontSize: "16px",
								minHeight: 126
							}
						},
						textFooter: {
							fontFamily: "Roboto",
							fontSize: 13,
							display: "flex",
							justifyContent: "space-between",
							alignItems: "center",
							padding: "4px 18px 14px 24px",
							position: "relative",
							color: "#787a80",
							"@media (max-width: 480px)": {
								padding: "20px 12px 12px 20px",
								fontSize: "16px"
							}
						},
						blocked: {
							height: 238,
							backgroundColor: "#ffffff",
							justifyContent: "center",
							display: "flex",
							alignItems: "center",
							flexDirection: "column"
						},
						messages: {
							position: "absolute",
							top: 0,
							bottom: 0,
							left: 0,
							right: 0,
							display: "flex",
							justifyContent: "center",
							alignItems: "center",
							fontSize: 15
						},
						flexDiv: {
							display: "flex"
						},
						redCounter: {
							marginLeft: 10,
							marginTop: 15,
							fontWeight: "bold",
							color: "#eb3535",
							"@media (max-width: 480px)": {
								marginLeft: 7
							}
						},
						counter: {
							marginLeft: 10,
							marginTop: 15,
							"@media (max-width: 480px)": {
								marginLeft: 7
							}
						}
					}
				})),
				ye = Object(l.c)((function(e) {
					return {
						button: {
							transition: "0.15s all",
							outline: "none !important",
							zIndex: 3,
							backgroundColor: "white",
							fontSize: 17,
							color: "#8b0abe",
							textTransform: "none",
							width: 205,
							height: 44,
							display: "flex",
							flexDirection: "row",
							justifyContent: "center",
							alignItems: "center",
							padding: "10px 14px 10px 12px",
							borderRadius: "4px",
							border: "solid 1px lightgrey",
							cursor: "pointer",
							"&:hover": {
								opacity: .85,
								backgroundColor: "#f6e9fd"
							},
							"&:disabled": {
								backgroundColor: "rgba(139, 10, 190, 0.33)",
								opacity: "1.0 !important",
								cursor: "default"
							}
						},
						buttonMobile: {
							backgroundColor: "white",
							color: "#8b0abe",
							borderRadius: "4px",
							border: "solid 1px lightgrey",
							cursor: "pointer",
							justifyContent: "center",
							alignItems: "center",
							fontSize: 17,
							display: "flex",
							height: 44,
							"&:hover": {
								opacity: .85,
								backgroundColor: "#f6e9fd"
							}
						}
					}
				}));

			function ke() {
				return Object(f.jsx)("svg", {
					width: "22",
					height: "22",
					viewBox: "0 0 22 22",
					fill: "none",
					xmlns: "http://www.w3.org/2000/svg",
					children: Object(f.jsx)("path", {
						d: "M11 3.66669L9.70746 4.95919L14.8225 10.0834H3.66663V11.9167H14.8225L9.70746 17.0409L11 18.3334L18.3333 11L11 3.66669Z",
						fill: "#8B0ABE"
					})
				})
			}

			function Se(e) {
				var t = e.onClick,
					n = Object(l.d)(),
					r = ye(n);
				return le ? Object(f.jsx)(M.a, {
					offset: {
						bottom: 10
					},
					children: Object(f.jsxs)("button", {
						id: "widget-cta-button",
						onClick: t,
						className: [r.buttonMobile].join(" "),
						children: ["Get started\xa0", Object(f.jsx)(ke, {})]
					})
				}) : Object(f.jsx)(M.a, {
					offset: {
						bottom: 10
					},
					children: Object(f.jsxs)("button", {
						id: "widget-cta-button",
						onClick: t,
						className: [r.button].join(" "),
						children: ["Get started for free \xa0", Object(f.jsx)(ke, {})]
					})
				})
			}

			function Ie(e) {
				var t = e.onClick,
					n = Object(r.useRef)(null),
					o = Object(l.d)(),
					i = Oe(o),
					a = Object(w.b)(),
					s = Object(w.c)(O),
					d = Object(w.c)(y),
					u = Object(w.c)(I),
					p = Object(r.useState)(""),
					b = Object(c.a)(p, 2),
					g = b[0],
					h = b[1],
					m = Object(r.useState)(g.length),
					x = Object(c.a)(m, 2),
					j = x[0],
					v = x[1],
					k = Object(r.useState)(!0),
					S = Object(c.a)(k, 2),
					E = S[0],
					R = S[1],
					D = Object(r.useState)(!1),
					A = Object(c.a)(D, 2),
					N = A[0],
					P = A[1],
					F = ! function() {
						var e = "undefined" !== typeof InstallTrigger,
							t = /constructor/i.test(window.HTMLElement) || "[object SafariRemoteNotification]" === (!window.safari || "undefined" !== typeof safari && safari.pushNotification).toString();
						return e || t
					}() && !le,
					L = Object(V.a)((function(e) {
						return {
							arrow: {
								color: "#1F2127",
								left: "8px !important",
								fontSize: 18,
								bottom: "1px !important"
							},
							tooltip: {
								boxShadow: "0 2px 15px 0 rgba(91, 57, 104, 0.25)",
								fontFamily: "Roboto",
								fontWeight: "normal",
								fontStretch: "normal",
								fontStyle: "normal",
								color: "#ffffff",
								zIndex: 100,
								backgroundColor: "#1F2127",
								borderRadius: 6,
								padding: 15,
								fontSize: 15,
								whiteSpace: "break-spaces",
								marginLeft: 10,
								marginBottom: -4
							},
							popper: {
								zIndex: 100
							}
						}
					}))(),
					_ = Object(r.useCallback)((function(e) {
						N || (P(!0), a({
							type: X
						})), t(!1), R(!1), h(e.target.value), v(e.target.value.length)
					}), [N]);
				Object(r.useEffect)((function() {
					s && a({
						type: ee
					})
				}), [s]), Object(r.useEffect)((function() {
					h(d ? "" : T), v(d ? 0 : T.length), R(!d)
				}), [d]), Object(r.useEffect)((function() {
					n && n.current && u && (n.current.setSelectionRange(n.current.value.length, n.current.value.length), n.current.focus())
				}), [u]);
				Object(r.useCallback)((function(e) {
					"Enter" !== e.key || s || (e.preventDefault(), j > 0 && a(xe(g)))
				}), [j, g]);
				return Object(f.jsx)("div", {
					style: {
						borderBottom: "1px solid #d6d8de"
					},
					children: s ? Object(f.jsxs)("div", {
						className: [i.textarea, i.blocked].join(" "),
						style: {
							color: "white"
						},
						children: [Object(f.jsx)("div", {
							style: {
								paddingBottom: 24,
								textAlign: "center",
								color: "#000000"
							},
							children: C
						}), Object(f.jsxs)("div", {
							style: {
								display: "flex",
								flexDirection: "row"
							},
							children: [F && Object(f.jsx)(je, {
								btnStyle: {
									marginRight: "16px"
								},
								onClick: function() {
									a({
										type: te
									}), window.open(fe(), "_blank", "noopener,noreferrer")
								}
							}), Object(f.jsx)(ve, {
								btnStyle: F ? {
									backgroundColor: "#ffffff",
									color: "#8b0abe",
									border: "1px solid",
									borderColor: "#8b0abe"
								} : {},
								onClick: function() {
									a({
										type: re
									}), window.open("http://app.wordtune.com/editor?src=website", "_self", "noopener,noreferrer")
								}
							})]
						})]
					}) : Object(f.jsxs)(f.Fragment, {
						children: [Object(f.jsx)(U.a, {
							open: E,
							classes: L,
							title: "Try replacing the example\nwith your own sentence",
							placement: "top-start",
							arrow: !0,
							PopperProps: {
								popperOptions: {
									modifiers: {
										preventOverflow: {
											enabled: !1
										},
										hide: {
											enabled: !1
										},
										flip: {
											enabled: !1
										}
									}
								}
							},
							children: Object(f.jsx)("textarea", {
								id: "widget-textarea",
								rows: 2,
								ref: n,
								"data-gramm": "false",
								className: i.textarea,
								defaultValue: g,
								onChange: _,
								onInput: _,
								placeholder: "Write or paste your text here",
								maxLength: 280
							})
						}), Object(f.jsxs)("div", {
							className: i.textFooter,
							children: [Object(f.jsxs)("div", {
								className: i.flexDiv,
								children: [Object(f.jsx)(H, {
									onVisible: function(e) {
										e && setTimeout((function() {
											return a((function(e, t) {
												var n = t();
												O(n), I(n), e({
													type: ne
												})
											}))
										}), 1e3)
									},
									disabled: 0 === j,
									onClick: function() {
										if (!s) {
											t(!0);
											var e = document.ideaPromptsDefaultText;
											a(xe(g, e && e.includes(g)))
										}
									}
								}), j >= 260 && Object(f.jsxs)("span", {
									className: j >= 280 ? i.redCounter : i.counter,
									children: [Object(f.jsx)("span", {
										children: j
									}), " / ", 280]
								})]
							}), Object(f.jsx)(Se, {
								onClick: function() {
									"editor" == Me ? (a(function() {
										var e = Object(Z.a)(q.a.mark((function e(t) {
											return q.a.wrap((function(e) {
												for (;;) switch (e.prev = e.next) {
													case 0:
														return e.abrupt("return", t({
															type: ie
														}));
													case 1:
													case "end":
														return e.stop()
												}
											}), e)
										})));
										return function(t) {
											return e.apply(this, arguments)
										}
									}()), window.location.href = "https://app.wordtune.com/editor?product=write&platform=editor") : (a(function() {
										var e = Object(Z.a)(q.a.mark((function e(t) {
											return q.a.wrap((function(e) {
												for (;;) switch (e.prev = e.next) {
													case 0:
														return e.abrupt("return", t({
															type: oe
														}));
													case 1:
													case "end":
														return e.stop()
												}
											}), e)
										})));
										return function(t) {
											return e.apply(this, arguments)
										}
									}()), window.location.href = fe())
								}
							})]
						})]
					})
				})
			}
			var Te = Object(l.c)((function(e) {
				return {
					container: {
						width: "100%",
						background: "white",
						zIndex: 3,
						borderRadius: 0,
						overflow: "hidden",
						border: "solid 1px #d6d8de"
					},
					"@media (min-width: 480px)": {
						container: {
							width: 490,
							borderRadius: 12
						}
					},
					"@media (min-width: 767px)": {
						container: {
							width: 680
						}
					}
				}
			}));

			function Ce() {
				var e = Object(w.b)(),
					t = Object(w.c)(k),
					n = (Object(w.c)(O), Object(l.d)()),
					o = Te(n),
					i = Object(r.useState)(!1),
					a = Object(c.a)(i, 2),
					s = a[0],
					d = a[1];
				return Object(r.useEffect)((function() {
					e({
						type: $
					})
				}), []), Object(f.jsxs)("div", {
					className: o.container,
					children: [Object(f.jsx)(Ie, {
						onClick: function(e) {
							return d(e)
						}
					}), Object(f.jsx)("div", {
						children: Object(f.jsx)(A, {
							suggestions: t,
							showSuggestions: s
						})
					})]
				})
			}
			var Ee = {};

			function Re() {
				return Object(f.jsx)(l.a, {
					classNamePrefix: "landing-page-",
					children: Object(f.jsx)(l.b, {
						theme: Ee,
						children: Object(f.jsx)(Ce, {})
					})
				})
			}
			var De, Ae, Ne = n(96),
				Pe = n(22),
				Fe = Object(Pe.c)({
					results: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case Q:
								return t.payload.suggestions;
							case K:
							case Y:
								return [];
							default:
								return e
						}
					},
					fetching: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case K:
								return !0;
							case Q:
							case Y:
								return !1;
							default:
								return e
						}
					},
					wholeText: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case K:
								return t.payload.wholeText;
							case Y:
								return "";
							default:
								return e
						}
					},
					interactionId: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case Q:
								return t.payload.interactionId;
							case K:
							case Y:
								return null;
							default:
								return e
						}
					},
					responseTime: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case Q:
								return (new Date).getTime();
							case K:
							case Y:
								return null;
							default:
								return e
						}
					},
					counter: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case $:
								return parseInt(localStorage.getItem(F) || "0", 10);
							case Q:
								var n = t.payload.isFake ? e : e + 1;
								return localStorage.setItem(F, n.toString()), n;
							default:
								return e
						}
					},
					error: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case Y:
								return !0;
							case K:
								return !1;
							default:
								return e
						}
					},
					addToBrowserCounter: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case $:
								return parseInt(localStorage.getItem(L) || "0", 10);
							case te:
								return be({
									lpDemoCTAPressCount: e + 1
								}), e + 1;
							default:
								return e
						}
					},
					landingPageVisible: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case ne:
								return !0;
							default:
								return e
						}
					},
					lockedScreenCounter: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case ee:
								return be({
									lpDemoLockedScreenCount: e + 1
								}, !0), e + 1;
							default:
								return e
						}
					},
					noDefaultText: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case $:
								var n = localStorage.getItem("lpExpId"),
									r = localStorage.getItem("lpExpVariantId"),
									o = z.includes(n || "") && "1" === r;
								return o;
							default:
								return e
						}
					}
				}),
				Le = Object(Pe.c)({
					rewrite: Fe
				}),
				_e = new(n(99).a);

			function ze(e, t, n) {
				!le && We("lpAppRewritesLeft", 10 - n), We("lpAppRewritesMade", n);
				var r = Object.fromEntries(new URLSearchParams(window.location.search)),
					o = Object(s.a)(Object(s.a)(Object(s.a)({
						app: "lpDemo"
					}, t), r), {}, {
						path: window.location.pathname,
						draftId: ue(),
						host: window.location.hostname
					}),
					i = _e.validate(e, o);
				if (i) {
					var a = "Schema validation errors for event ".concat(e, ".\n        ").concat(i.map((function(e) {
						return e.instancePath + " " + e.message + " " + JSON.stringify(e.params)
					})));
					0, he.report(a)
				}
				ce.a.getInstance().logEvent(e, o)
			}

			function We(e, t) {
				var n = (new ce.a.Identify).set(e, t);
				ce.a.getInstance().identify(n);
				var r = _e.validate(e, t);
				if (r) {
					var o = "Schema validation errors for user property ".concat(e, ".\n        ").concat(r.map((function(e) {
						return e.instancePath + " " + e.message
					})));
					0, he.report(o)
				}
			}
			var Be = "landingPageDemoWidget",
				Ge = parseInt((null === (De = document.getElementById(Be)) || void 0 === De ? void 0 : De.getAttribute("data-quota-limit")) || "10"),
				Me = (null === (Ae = document.getElementById(Be)) || void 0 === Ae ? void 0 : Ae.getAttribute("data-first-platform")) || "extension";
			localStorage.getItem(F) || localStorage.setItem(F, "0");
			var He = Object(Pe.a)(Ne.a, (function(e) {
					return function(t) {
						return function(n) {
							he.setUser(de());
							var r = e.getState(),
								o = function(e, t) {
									var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : r.rewrite.counter;
									ze(e, Object(s.a)({
										origin: "website"
									}, t), n)
								},
								i = r.rewrite,
								a = !1;
							switch (n.type) {
								case $:
									o("LandingPageEntered", {
										app: "website"
									}, parseInt(localStorage.getItem(F) || "0", 10));
									break;
								case K:
									if (a = n.payload.isFake, o("RewriteActivated", {
											spanSelected: !1,
											contextLength: n.payload.wholeText.length,
											isExampleText: a,
											draftId: ue()
										}, r.rewrite.counter), o("RewriteFetchStarted", {
											draftId: ue(),
											isExampleText: a
										}, r.rewrite.counter), localStorage.getItem(_)) {
										var c = (new Date).toISOString().split(".")[0].toString();
										localStorage.setItem(_, c), be({
											lpDemoFirstInteractionTime: c
										}, n.payload.isFake)
									}
									break;
								case Q:
									var l = (a = n.payload.isFake) || le ? r.rewrite.counter : r.rewrite.counter + 1;
									be(le ? {
										lpAppRewritesMade: l
									} : {
										lpDemoRewritesLeft: Ge - l,
										lpAppRewritesMade: l
									}), o("RewriteOpened", {
										loadingDuration: n.payload.duration,
										contextLength: n.payload.wholeText.length,
										interactionId: n.payload.interactionId,
										numOfSuggestions: n.payload.suggestions.length,
										isExampleText: a,
										draftId: ue()
									}, l);
									break;
								case Y:
									a = n.payload.isFake, o("RewriteError", {
										error: n.error.toString(),
										isExampleText: a,
										draftId: ue()
									});
									break;
								case X:
									o("ComposeStarted", {
										draftId: ue()
									});
									break;
								case ee:
									o("LandingPageDemoLocked", {
										lastInteractionId: i.interactionId,
										numOfRewritesMade: i.counter,
										app: "website"
									});
									break;
								case te:
									var d = document.getElementById("AddToBrowserButton"),
										u = getComputedStyle(d) && "rgb(255, 255, 255)" === getComputedStyle(d).backgroundColor ? "secondary" : "primary";
									o("InstallExtensionCTAPressed", {
										numOfRewritesMade: r.rewrite.counter,
										app: "website",
										origin: "LPWidgetLocked",
										referrer: window.location.pathname,
										callToActionText: "Add to " + pe(),
										style: u
									});
									break;
								case ie:
									o("EditorOpenCTAPressed", {
										app: "website",
										callToActionText: "Get started",
										host: window.location.host,
										origin: "lpWidgetCTA",
										path: "/",
										referrer: "/"
									});
									break;
								case oe:
									o("InstallExtensionCTAPressed", {
										app: "website",
										callToActionText: "Get started",
										host: window.location.host,
										origin: "lpWidgetCTA",
										path: "/",
										referrer: "/"
									});
									break;
								case re:
									var p = document.getElementById("GoToEditorButton"),
										b = getComputedStyle(p) && "rgb(255, 255, 255)" === getComputedStyle(p).backgroundColor ? "secondary" : "primary";
									o("OpenEditorCTAPressed", {
										numOfRewritesMade: r.rewrite.counter,
										app: "website",
										origin: "LPWidgetLocked",
										referrer: window.location.pathname,
										callToActionText: "Go to Editor",
										style: b
									});
									break;
								case ne:
									if (!i.landingPageVisible) {
										var f, g, h;
										o("LandingPageDemoShown", {
											app: "website"
										});
										var m = document.getElementsByClassName("idea-prompts-slide"),
											x = document.querySelector("[aria-label='carousel']"),
											w = null === (f = m[0]) || void 0 === f || null === (g = f.firstElementChild) || void 0 === g || null === (h = g.childNodes[1]) || void 0 === h ? void 0 : h.textContent;
										w && x && "none" !== getComputedStyle(x).display && o("LandingPageRewriteIdeaShown", {
											app: "website",
											index: 1,
											text: w
										})
									}
							}
							return t(n)
						}
					}
				})),
				Ve = Object(Pe.d)(Le, He);
			! function() {
				var e = ce.a.getInstance();
				e.options.deviceId || (e.init("64be6fdb8aeb001529c8c2c9af7028a0"), e = ce.a.getInstance(), setTimeout((function() {
					return be({
						lpDeviceId: e.options.deviceId
					}, !0)
				}), 500))
			}(), a.a.render(Object(f.jsx)(o.a.StrictMode, {
				children: Object(f.jsx)(w.a, {
					store: Ve,
					children: Object(f.jsx)(Re, {})
				})
			}), document.getElementById("landingPageDemoWidget"))
		}
	},
	[
		[187, 1, 2]
	]
]); /*! For license information please see 2.e284ae80.chunk.js.LICENSE.txt */
(this["webpackJsonplanding-page-app"] = this["webpackJsonplanding-page-app"] || []).push([
	[2],
	[function(e, t, r) {
		"use strict";
		e.exports = r(101)
	}, function(e, t, r) {
		"use strict";

		function a() {
			return (a = Object.assign || function(e) {
				for (var t = 1; t < arguments.length; t++) {
					var r = arguments[t];
					for (var a in r) Object.prototype.hasOwnProperty.call(r, a) && (e[a] = r[a])
				}
				return e
			}).apply(this, arguments)
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		"use strict";
		e.exports = r(112)
	}, function(e, t, r) {
		"use strict";
		r.d(t, "b", (function() {
			return S
		})), r.d(t, "d", (function() {
			return w
		})), r.d(t, "a", (function() {
			return we
		})), r.d(t, "c", (function() {
			return Pe
		}));
		var a = r(1),
			n = r(25),
			i = r(10),
			s = r(0),
			p = r.n(s),
			o = r(21),
			c = r.n(o),
			h = r(9),
			u = r.n(h);
		r(110);

		function m(e, t, r) {
			return t in e ? Object.defineProperty(e, t, {
				value: r,
				enumerable: !0,
				configurable: !0,
				writable: !0
			}) : e[t] = r, e
		}

		function d() {
			return (d = Object.assign || function(e) {
				for (var t = 1; t < arguments.length; t++) {
					var r = arguments[t];
					for (var a in r) Object.prototype.hasOwnProperty.call(r, a) && (e[a] = r[a])
				}
				return e
			}).apply(this, arguments)
		}

		function l(e) {
			if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			return e
		}

		function y(e) {
			return function(t) {
				var r, a;

				function n() {
					for (var r, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
					return m(l(l(r = t.call.apply(t, [this].concat(n)) || this)), "cachedTheme", void 0), m(l(l(r)), "lastOuterTheme", void 0), m(l(l(r)), "lastTheme", void 0), m(l(l(r)), "renderProvider", (function(t) {
						var a = r.props.children;
						return p.a.createElement(e.Provider, {
							value: r.getTheme(t)
						}, a)
					})), r
				}
				a = t, (r = n).prototype = Object.create(a.prototype), r.prototype.constructor = r, r.__proto__ = a;
				var i = n.prototype;
				return i.getTheme = function(e) {
					if (this.props.theme !== this.lastTheme || e !== this.lastOuterTheme || !this.cachedTheme)
						if (this.lastOuterTheme = e, this.lastTheme = this.props.theme, "function" === typeof this.lastTheme) {
							var t = this.props.theme;
							this.cachedTheme = t(e)
						} else {
							var r = this.props.theme;
							this.cachedTheme = e ? d({}, e, r) : r
						} return this.cachedTheme
				}, i.render = function() {
					return this.props.children ? p.a.createElement(e.Consumer, null, this.renderProvider) : null
				}, n
			}(p.a.Component)
		}

		function g(e) {
			return function(t) {
				var r = p.a.forwardRef((function(r, a) {
					return p.a.createElement(e.Consumer, null, (function(e) {
						return p.a.createElement(t, d({
							theme: e,
							ref: a
						}, r))
					}))
				}));
				return c()(r, t), r
			}
		}

		function f(e) {
			return function() {
				return p.a.useContext(e)
			}
		}
		var v, b = Object(s.createContext)(),
			P = {
				context: v = b,
				withTheme: g(v),
				useTheme: f(v),
				ThemeProvider: y(v)
			},
			S = P.ThemeProvider,
			w = P.useTheme,
			k = r(6),
			_ = r(48),
			I = r(36),
			q = function(e) {
				return e && e[I.a] && e === e[I.a]()
			},
			L = function(e) {
				return {
					onCreateRule: function(t, r, a) {
						if (!q(r)) return null;
						var n = r,
							i = Object(k.f)(t, {}, a);
						return n.subscribe((function(t) {
							for (var r in t) i.prop(r, t[r], e)
						})), i
					},
					onProcessRule: function(t) {
						if (!t || "style" === t.type) {
							var r = t,
								a = r.style,
								n = function(t) {
									var n = a[t];
									if (!q(n)) return "continue";
									delete a[t], n.subscribe({
										next: function(a) {
											r.prop(t, a, e)
										}
									})
								};
							for (var i in a) n(i)
						}
					}
				}
			},
			x = /;\n/,
			E = function(e) {
				"string" === typeof e.style && (e.style = function(e) {
					for (var t = {}, r = e.split(x), a = 0; a < r.length; a++) {
						var n = (r[a] || "").trim();
						if (n) {
							var i = n.indexOf(":");
							if (-1 !== i) {
								var s = n.substr(0, i).trim(),
									p = n.substr(i + 1).trim();
								t[s] = p
							}
						}
					}
					return t
				}(e.style))
			};
		var N = function() {
				return {
					onProcessRule: E
				}
			},
			O = r(49),
			D = function(e) {
				return e && "object" === typeof e && !Array.isArray(e)
			},
			T = "extendCurrValue" + Date.now();

		function j(e, t, r, n) {
			return void 0 === n && (n = {}),
				function(e, t, r, n) {
					if ("string" !== typeof e.extend)
						if (Array.isArray(e.extend))
							for (var i = 0; i < e.extend.length; i++) {
								var s = e.extend[i];
								j("string" === typeof s ? Object(a.a)({}, e, {
									extend: s
								}) : e.extend[i], t, r, n)
							} else
								for (var p in e.extend) "extend" !== p ? D(e.extend[p]) ? (p in n || (n[p] = {}), j(e.extend[p], t, r, n[p])) : n[p] = e.extend[p] : j(e.extend.extend, t, r, n);
						else {
							if (!r) return;
							var o = r.getRule(e.extend);
							if (!o) return;
							if (o === t) return;
							var c = o.options.parent;
							c && j(c.rules.raw[e.extend], t, r, n)
						}
				}(e, t, r, n),
				function(e, t, r, a) {
					for (var n in e) "extend" !== n && (D(a[n]) && D(e[n]) ? j(e[n], t, r, a[n]) : D(e[n]) ? a[n] = j(e[n], t, r) : a[n] = e[n])
				}(e, t, r, n), n
		}
		var F = function() {
				return {
					onProcessStyle: function(e, t, r) {
						return "extend" in e ? j(e, t, r) : e
					},
					onChangeValue: function(e, t, r) {
						if ("extend" !== t) return e;
						if (null == e || !1 === e) {
							for (var a in r[T]) r.prop(a, null);
							return r[T] = null, null
						}
						if ("object" === typeof e) {
							for (var n in e) r.prop(n, e[n]);
							r[T] = e
						}
						return null
					}
				}
			},
			C = r(50);

		function A(e, t) {
			if (!t) return !0;
			if (Array.isArray(t)) {
				for (var r = 0; r < t.length; r++) {
					if (!A(e, t[r])) return !1
				}
				return !0
			}
			if (t.indexOf(" ") > -1) return A(e, t.split(" "));
			var a = e.options.parent;
			if ("$" === t[0]) {
				var n = a.getRule(t.substr(1));
				return !!n && (n !== e && (a.classes[e.key] += " " + a.classes[n.key], !0))
			}
			return a.classes[e.key] += " " + t, !0
		}
		var H = function() {
				return {
					onProcessStyle: function(e, t) {
						return "composes" in e ? (A(t, e.composes), delete e.composes, e) : e
					}
				}
			},
			R = r(56),
			M = r(51),
			$ = {
				"background-size": !0,
				"background-position": !0,
				border: !0,
				"border-bottom": !0,
				"border-left": !0,
				"border-top": !0,
				"border-right": !0,
				"border-radius": !0,
				"border-image": !0,
				"border-width": !0,
				"border-style": !0,
				"border-color": !0,
				"box-shadow": !0,
				flex: !0,
				margin: !0,
				padding: !0,
				outline: !0,
				"transform-origin": !0,
				transform: !0,
				transition: !0
			},
			z = {
				position: !0,
				size: !0
			},
			U = {
				padding: {
					top: 0,
					right: 0,
					bottom: 0,
					left: 0
				},
				margin: {
					top: 0,
					right: 0,
					bottom: 0,
					left: 0
				},
				background: {
					attachment: null,
					color: null,
					image: null,
					position: null,
					repeat: null
				},
				border: {
					width: null,
					style: null,
					color: null
				},
				"border-top": {
					width: null,
					style: null,
					color: null
				},
				"border-right": {
					width: null,
					style: null,
					color: null
				},
				"border-bottom": {
					width: null,
					style: null,
					color: null
				},
				"border-left": {
					width: null,
					style: null,
					color: null
				},
				outline: {
					width: null,
					style: null,
					color: null
				},
				"list-style": {
					type: null,
					position: null,
					image: null
				},
				transition: {
					property: null,
					duration: null,
					"timing-function": null,
					timingFunction: null,
					delay: null
				},
				animation: {
					name: null,
					duration: null,
					"timing-function": null,
					timingFunction: null,
					delay: null,
					"iteration-count": null,
					iterationCount: null,
					direction: null,
					"fill-mode": null,
					fillMode: null,
					"play-state": null,
					playState: null
				},
				"box-shadow": {
					x: 0,
					y: 0,
					blur: 0,
					spread: 0,
					color: null,
					inset: null
				},
				"text-shadow": {
					x: 0,
					y: 0,
					blur: null,
					color: null
				}
			},
			B = {
				border: {
					radius: "border-radius",
					image: "border-image",
					width: "border-width",
					style: "border-style",
					color: "border-color"
				},
				"border-bottom": {
					width: "border-bottom-width",
					style: "border-bottom-style",
					color: "border-bottom-color"
				},
				"border-top": {
					width: "border-top-width",
					style: "border-top-style",
					color: "border-top-color"
				},
				"border-left": {
					width: "border-left-width",
					style: "border-left-style",
					color: "border-left-color"
				},
				"border-right": {
					width: "border-right-width",
					style: "border-right-style",
					color: "border-right-color"
				},
				background: {
					size: "background-size",
					image: "background-image"
				},
				font: {
					style: "font-style",
					variant: "font-variant",
					weight: "font-weight",
					stretch: "font-stretch",
					size: "font-size",
					family: "font-family",
					lineHeight: "line-height",
					"line-height": "line-height"
				},
				flex: {
					grow: "flex-grow",
					basis: "flex-basis",
					direction: "flex-direction",
					wrap: "flex-wrap",
					flow: "flex-flow",
					shrink: "flex-shrink"
				},
				align: {
					self: "align-self",
					items: "align-items",
					content: "align-content"
				},
				grid: {
					"template-columns": "grid-template-columns",
					templateColumns: "grid-template-columns",
					"template-rows": "grid-template-rows",
					templateRows: "grid-template-rows",
					"template-areas": "grid-template-areas",
					templateAreas: "grid-template-areas",
					template: "grid-template",
					"auto-columns": "grid-auto-columns",
					autoColumns: "grid-auto-columns",
					"auto-rows": "grid-auto-rows",
					autoRows: "grid-auto-rows",
					"auto-flow": "grid-auto-flow",
					autoFlow: "grid-auto-flow",
					row: "grid-row",
					column: "grid-column",
					"row-start": "grid-row-start",
					rowStart: "grid-row-start",
					"row-end": "grid-row-end",
					rowEnd: "grid-row-end",
					"column-start": "grid-column-start",
					columnStart: "grid-column-start",
					"column-end": "grid-column-end",
					columnEnd: "grid-column-end",
					area: "grid-area",
					gap: "grid-gap",
					"row-gap": "grid-row-gap",
					rowGap: "grid-row-gap",
					"column-gap": "grid-column-gap",
					columnGap: "grid-column-gap"
				}
			};

		function W(e, t, r, a) {
			return null == r[t] ? e : 0 === e.length ? [] : Array.isArray(e[0]) ? W(e[0], t, r, a) : "object" === typeof e[0] ? function(e, t, r) {
				return e.map((function(e) {
					return V(e, t, r, !1, !0)
				}))
			}(e, t, a) : [e]
		}

		function V(e, t, r, a, n) {
			if (!U[t] && !B[t]) return [];
			var i = [];
			if (B[t] && (e = function(e, t, r, a) {
					for (var n in r) {
						var i = r[n];
						if ("undefined" !== typeof e[n] && (a || !t.prop(i))) {
							var s, p = G((s = {}, s[i] = e[n], s), t)[i];
							a ? t.style.fallbacks[i] = p : t.style[i] = p
						}
						delete e[n]
					}
					return e
				}(e, r, B[t], a)), Object.keys(e).length)
				for (var s in U[t]) e[s] ? Array.isArray(e[s]) ? i.push(null === z[s] ? e[s] : e[s].join(" ")) : i.push(e[s]) : null != U[t][s] && i.push(U[t][s]);
			return !i.length || n ? i : [i]
		}

		function G(e, t, r) {
			for (var a in e) {
				var n = e[a];
				if (Array.isArray(n)) {
					if (!Array.isArray(n[0])) {
						if ("fallbacks" === a) {
							for (var i = 0; i < e.fallbacks.length; i++) e.fallbacks[i] = G(e.fallbacks[i], t, !0);
							continue
						}
						e[a] = W(n, a, $, t), e[a].length || delete e[a]
					}
				} else if ("object" === typeof n) {
					if ("fallbacks" === a) {
						e.fallbacks = G(e.fallbacks, t, !0);
						continue
					}
					e[a] = V(n, a, t, r), e[a].length || delete e[a]
				} else "" === e[a] && delete e[a]
			}
			return e
		}
		var K = function() {
				return {
					onProcessStyle: function(e, t) {
						if (!e || "style" !== t.type) return e;
						if (Array.isArray(e)) {
							for (var r = 0; r < e.length; r++) e[r] = G(e[r], t);
							return e
						}
						return G(e, t)
					}
				}
			},
			Q = r(57),
			Y = r(53),
			J = function(e) {
				return void 0 === e && (e = {}), {
					plugins: [Object(_.a)(), L(e.observable), N(), Object(O.a)(), F(), Object(C.a)(), H(), Object(R.a)(), Object(M.a)(e.defaultUnit), K(), Object(Q.a)(), Object(Y.a)()]
				}
			},
			X = r(23);

		function Z(e, t) {
			if (e === t) return !0;
			if (!e || !t) return !1;
			var r = Object.keys(e),
				a = Object.keys(t),
				n = r.length;
			if (a.length !== n) return !1;
			for (var i = 0; i < n; i++) {
				var s = r[i];
				if (e[s] !== t[s] || !Object.prototype.hasOwnProperty.call(t, s)) return !1
			}
			return !0
		}
		var ee = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,
			te = (function(e) {
				var t = {}
			}((function(e) {
				return ee.test(e) || 111 === e.charCodeAt(0) && 110 === e.charCodeAt(1) && e.charCodeAt(2) < 91
			})), Object(k.d)(J())),
			re = function(e) {
				void 0 === e && (e = te);
				var t, r = new Map,
					a = 0,
					n = function() {
						return (!t || t.rules.index.length > 1e4) && (t = e.createStyleSheet().attach()), t
					};

				function i() {
					var e = arguments,
						t = JSON.stringify(e),
						i = r.get(t);
					if (i) return i.className;
					var s = [];
					for (var p in e) {
						var o = e[p];
						if (Array.isArray(o))
							for (var c = 0; c < o.length; c++) s.push(o[c]);
						else s.push(o)
					}
					for (var h = {}, u = [], m = 0; m < s.length; m++) {
						var d = s[m];
						if (d) {
							var l = d;
							if ("string" === typeof d) {
								var y = r.get(d);
								y && (y.labels.length && u.push.apply(u, y.labels), l = y.style)
							}
							l.label && -1 === u.indexOf(l.label) && u.push(l.label), Object.assign(h, l)
						}
					}
					delete h.label;
					var g = 0 === u.length ? "css" : u.join("-"),
						f = g + "-" + a++;
					n().addRule(f, h);
					var v = n().classes[f],
						b = {
							style: h,
							labels: u,
							className: v
						};
					return r.set(t, b), r.set(v, b), v
				}
				return i.getSheet = n, i
			}(),
			ae = Object(s.createContext)({
				classNamePrefix: "",
				disableStylesGeneration: !1
			}),
			ne = Number.MIN_SAFE_INTEGER || -1e9,
			ie = function() {
				return ne++
			},
			se = new Map,
			pe = function(e, t) {
				if (e.managers) return e.managers[t] || (e.managers[t] = new k.b), e.managers[t];
				var r = se.get(t);
				return r || (r = new k.b, se.set(t, r)), r
			},
			oe = function(e) {
				var t = e.sheet,
					r = e.context,
					a = e.index,
					n = e.theme;
				t && (pe(r, a).manage(n), r.registry && r.registry.add(t))
			},
			ce = function(e) {
				e.sheet && pe(e.context, e.index).unmanage(e.theme)
			},
			he = Object(k.d)(J()),
			ue = new WeakMap,
			me = function(e) {
				return ue.get(e)
			};
		var de = function(e) {
				if (!e.context.disableStylesGeneration) {
					var t = pe(e.context, e.index),
						r = t.get(e.theme);
					if (r) return r;
					var n = e.context.jss || he,
						i = function(e) {
							var t = e.styles;
							return "function" !== typeof t ? t : t(e.theme)
						}(e),
						s = Object(k.h)(i),
						p = n.createStyleSheet(i, function(e, t) {
							var r;
							e.context.id && null != e.context.id.minify && (r = e.context.id.minify);
							var n = e.context.classNamePrefix || "";
							e.name && !r && (n += e.name.replace(/\s/g, "-") + "-");
							var i = "";
							return e.name && (i = e.name + ", "), i += "function" === typeof e.styles ? "Themed" : "Unthemed", Object(a.a)({}, e.sheetOptions, {
								index: e.index,
								meta: i,
								classNamePrefix: n,
								link: t,
								generateId: e.sheetOptions.generateId || e.context.generateId
							})
						}(e, null !== s));
					return function(e, t) {
						ue.set(e, t)
					}(p, {
						dynamicStyles: s,
						styles: i
					}), t.add(e.theme, p), p
				}
			},
			le = function(e, t) {
				for (var r in t) e.deleteRule(t[r])
			},
			ye = function(e, t, r) {
				for (var a in r) t.updateOne(r[a], e)
			},
			ge = function(e, t) {
				var r = me(e);
				if (r) {
					var a = {};
					for (var n in r.dynamicStyles)
						for (var i = e.rules.index.length, s = e.addRule(n, r.dynamicStyles[n]), p = i; p < e.rules.index.length; p++) {
							var o = e.rules.index[p];
							e.updateOne(o, t), a[s === o ? n : o.key] = o
						}
					return a
				}
			},
			fe = function(e, t) {
				if (!t) return e.classes;
				var r = {},
					a = me(e);
				if (!a) return e.classes;
				for (var n in a.styles) r[n] = e.classes[n], n in t && (r[n] += " " + e.classes[t[n].key]);
				return r
			},
			ve = X.a ? s.useLayoutEffect : s.useEffect,
			be = {},
			Pe = function(e, t) {
				void 0 === t && (t = {});
				var r = t,
					a = r.index,
					n = void 0 === a ? ie() : a,
					p = r.theming,
					o = r.name,
					c = Object(i.a)(r, ["index", "theming", "name"]),
					h = p && p.context || b,
					u = "function" === typeof e ? function() {
						return Object(s.useContext)(h) || be
					} : function() {
						return be
					};
				return function(t) {
					var r = Object(s.useRef)(!0),
						a = Object(s.useContext)(ae),
						i = u(),
						p = Object(s.useMemo)((function() {
							var r = de({
									context: a,
									styles: e,
									name: o,
									theme: i,
									index: n,
									sheetOptions: c
								}),
								s = r ? ge(r, t) : null;
							return r && oe({
								index: n,
								context: a,
								sheet: r,
								theme: i
							}), [r, s]
						}), [a, i]),
						h = p[0],
						m = p[1];
					ve((function() {
						h && m && !r.current && ye(t, h, m)
					}), [t]), ve((function() {
						return function() {
							h && ce({
								index: n,
								context: a,
								sheet: h,
								theme: i
							}), h && m && le(h, m)
						}
					}), [h]);
					var d = h && m ? fe(h, m) : {};
					return Object(s.useDebugValue)(d), Object(s.useDebugValue)(i === be ? "No theme" : i), Object(s.useEffect)((function() {
						r.current = !1
					})), d
				}
			},
			Se = {},
			we = function(e) {
				function t() {
					for (var t, r = arguments.length, n = new Array(r), i = 0; i < r; i++) n[i] = arguments[i];
					return (t = e.call.apply(e, [this].concat(n)) || this).managers = {}, t.createContext = function(e, r) {
						void 0 === r && (r = Se);
						var n = t.props,
							i = n.registry,
							s = n.classNamePrefix,
							p = n.jss,
							o = n.generateId,
							c = n.disableStylesGeneration,
							h = n.media,
							u = n.id,
							m = Object(a.a)({}, e);
						return i && (m.registry = i, i !== t.registry && (t.managers = {}, t.registry = i)), m.managers = t.managers, void 0 !== u && (m.id = u), void 0 !== o ? m.generateId = o : m.generateId && r && m.id === r.id || (m.generateId = Object(k.e)(m.id)), s && (m.classNamePrefix = (m.classNamePrefix || "") + s), void 0 !== h && (m.media = h), p && (m.jss = p), void 0 !== c && (m.disableStylesGeneration = c), r && Z(r, m) ? r : m
					}, t.prevContext = void 0, t.generateId = void 0, t.registry = void 0, t.renderProvider = function(e) {
						var r = t.props.children,
							a = t.createContext(e, t.prevContext);
						return t.prevContext = a, Object(s.createElement)(ae.Provider, {
							value: a
						}, r)
					}, t
				}
				return Object(n.a)(t, e), t.prototype.render = function() {
					return Object(s.createElement)(ae.Consumer, null, this.renderProvider)
				}, t
			}(s.Component);
		we.propTypes = {
			registry: u.a.instanceOf(k.c),
			jss: u.a.instanceOf(k.g.constructor),
			generateId: u.a.func,
			classNamePrefix: u.a.string,
			disableStylesGeneration: u.a.bool,
			children: u.a.node.isRequired,
			media: u.a.string,
			id: u.a.shape({
				minify: u.a.bool
			})
		};
		var ke;
		Symbol("react-jss-styled"), void 0 === ke && (ke = re)
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c = r(5),
			h = r(64),
			u = r(72),
			m = r(38),
			d = r(33),
			l = r(32),
			y = r(30),
			g = r(31),
			f = r(20),
			v = r(29);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.or = t.and = t.not = t.CodeGen = t.operators = t.varKinds = t.ValueScopeName = t.ValueScope = t.Scope = t.Name = t.regexpCode = t.stringify = t.getProperty = t.nil = t.strConcat = t.str = t._ = void 0;
		var b = r(45),
			P = r(76),
			S = r(45);
		Object.defineProperty(t, "_", {
			enumerable: !0,
			get: function() {
				return S._
			}
		}), Object.defineProperty(t, "str", {
			enumerable: !0,
			get: function() {
				return S.str
			}
		}), Object.defineProperty(t, "strConcat", {
			enumerable: !0,
			get: function() {
				return S.strConcat
			}
		}), Object.defineProperty(t, "nil", {
			enumerable: !0,
			get: function() {
				return S.nil
			}
		}), Object.defineProperty(t, "getProperty", {
			enumerable: !0,
			get: function() {
				return S.getProperty
			}
		}), Object.defineProperty(t, "stringify", {
			enumerable: !0,
			get: function() {
				return S.stringify
			}
		}), Object.defineProperty(t, "regexpCode", {
			enumerable: !0,
			get: function() {
				return S.regexpCode
			}
		}), Object.defineProperty(t, "Name", {
			enumerable: !0,
			get: function() {
				return S.Name
			}
		});
		var w = r(76);
		Object.defineProperty(t, "Scope", {
			enumerable: !0,
			get: function() {
				return w.Scope
			}
		}), Object.defineProperty(t, "ValueScope", {
			enumerable: !0,
			get: function() {
				return w.ValueScope
			}
		}), Object.defineProperty(t, "ValueScopeName", {
			enumerable: !0,
			get: function() {
				return w.ValueScopeName
			}
		}), Object.defineProperty(t, "varKinds", {
			enumerable: !0,
			get: function() {
				return w.varKinds
			}
		}), t.operators = {
			GT: new b._Code(">"),
			GTE: new b._Code(">="),
			LT: new b._Code("<"),
			LTE: new b._Code("<="),
			EQ: new b._Code("==="),
			NEQ: new b._Code("!=="),
			NOT: new b._Code("!"),
			OR: new b._Code("||"),
			AND: new b._Code("&&"),
			ADD: new b._Code("+")
		};
		var k = function() {
				function e() {
					f(this, e)
				}
				return v(e, [{
					key: "optimizeNodes",
					value: function() {
						return this
					}
				}, {
					key: "optimizeNames",
					value: function(e, t) {
						return this
					}
				}]), e
			}(),
			_ = function(e) {
				y(r, e);
				var t = g(r);

				function r(e, a, n) {
					var i;
					return f(this, r), (i = t.call(this)).varKind = e, i.name = a, i.rhs = n, i
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = e.es5,
							r = e._n,
							a = t ? P.varKinds.var : this.varKind,
							n = void 0 === this.rhs ? "" : " = ".concat(this.rhs);
						return "".concat(a, " ").concat(this.name).concat(n, ";") + r
					}
				}, {
					key: "optimizeNames",
					value: function(e, t) {
						if (e[this.name.str]) return this.rhs && (this.rhs = K(this.rhs, e, t)), this
					}
				}, {
					key: "names",
					get: function() {
						return this.rhs instanceof b._CodeOrName ? this.rhs.names : {}
					}
				}]), r
			}(k),
			I = function(e) {
				y(r, e);
				var t = g(r);

				function r(e, a, n) {
					var i;
					return f(this, r), (i = t.call(this)).lhs = e, i.rhs = a, i.sideEffects = n, i
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = e._n;
						return "".concat(this.lhs, " = ").concat(this.rhs, ";") + t
					}
				}, {
					key: "optimizeNames",
					value: function(e, t) {
						if (!(this.lhs instanceof b.Name) || e[this.lhs.str] || this.sideEffects) return this.rhs = K(this.rhs, e, t), this
					}
				}, {
					key: "names",
					get: function() {
						return G(this.lhs instanceof b.Name ? {} : l({}, this.lhs.names), this.rhs)
					}
				}]), r
			}(k),
			q = function(e) {
				y(r, e);
				var t = g(r);

				function r(e, a, n, i) {
					var s;
					return f(this, r), (s = t.call(this, e, n, i)).op = a, s
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = e._n;
						return "".concat(this.lhs, " ").concat(this.op, "= ").concat(this.rhs, ";") + t
					}
				}]), r
			}(I),
			L = function(e) {
				y(r, e);
				var t = g(r);

				function r(e) {
					var a;
					return f(this, r), (a = t.call(this)).label = e, a.names = {}, a
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = e._n;
						return "".concat(this.label, ":") + t
					}
				}]), r
			}(k),
			x = function(e) {
				y(r, e);
				var t = g(r);

				function r(e) {
					var a;
					return f(this, r), (a = t.call(this)).label = e, a.names = {}, a
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = e._n,
							r = this.label ? " ".concat(this.label) : "";
						return "break".concat(r, ";") + t
					}
				}]), r
			}(k),
			E = function(e) {
				y(r, e);
				var t = g(r);

				function r(e) {
					var a;
					return f(this, r), (a = t.call(this)).error = e, a
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = e._n;
						return "throw ".concat(this.error, ";") + t
					}
				}, {
					key: "names",
					get: function() {
						return this.error.names
					}
				}]), r
			}(k),
			N = function(e) {
				y(r, e);
				var t = g(r);

				function r(e) {
					var a;
					return f(this, r), (a = t.call(this)).code = e, a
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = e._n;
						return "".concat(this.code, ";") + t
					}
				}, {
					key: "optimizeNodes",
					value: function() {
						return "".concat(this.code) ? this : void 0
					}
				}, {
					key: "optimizeNames",
					value: function(e, t) {
						return this.code = K(this.code, e, t), this
					}
				}, {
					key: "names",
					get: function() {
						return this.code instanceof b._CodeOrName ? this.code.names : {}
					}
				}]), r
			}(k),
			O = function(e) {
				y(r, e);
				var t = g(r);

				function r() {
					var e, a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
					return f(this, r), (e = t.call(this)).nodes = a, e
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						return this.nodes.reduce((function(t, r) {
							return t + r.render(e)
						}), "")
					}
				}, {
					key: "optimizeNodes",
					value: function() {
						for (var e = this.nodes, t = e.length; t--;) {
							var r = e[t].optimizeNodes();
							Array.isArray(r) ? e.splice.apply(e, [t, 1].concat(d(r))) : r ? e[t] = r : e.splice(t, 1)
						}
						return e.length > 0 ? this : void 0
					}
				}, {
					key: "optimizeNames",
					value: function(e, t) {
						for (var r = this.nodes, a = r.length; a--;) {
							var n = r[a];
							n.optimizeNames(e, t) || (Q(e, n.names), r.splice(a, 1))
						}
						return r.length > 0 ? this : void 0
					}
				}, {
					key: "names",
					get: function() {
						return this.nodes.reduce((function(e, t) {
							return V(e, t.names)
						}), {})
					}
				}]), r
			}(k),
			D = function(e) {
				y(r, e);
				var t = g(r);

				function r() {
					return f(this, r), t.apply(this, arguments)
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						return "{" + e._n + u(m(r.prototype), "render", this).call(this, e) + "}" + e._n
					}
				}]), r
			}(O),
			T = function(e) {
				y(r, e);
				var t = g(r);

				function r() {
					return f(this, r), t.apply(this, arguments)
				}
				return r
			}(O),
			j = function(e) {
				y(r, e);
				var t = g(r);

				function r() {
					return f(this, r), t.apply(this, arguments)
				}
				return r
			}(D);
		j.kind = "else";
		var F = function(e) {
			y(r, e);
			var t = g(r);

			function r(e, a) {
				var n;
				return f(this, r), (n = t.call(this, a)).condition = e, n
			}
			return v(r, [{
				key: "render",
				value: function(e) {
					var t = "if(".concat(this.condition, ")") + u(m(r.prototype), "render", this).call(this, e);
					return this.else && (t += "else " + this.else.render(e)), t
				}
			}, {
				key: "optimizeNodes",
				value: function() {
					u(m(r.prototype), "optimizeNodes", this).call(this);
					var e = this.condition;
					if (!0 === e) return this.nodes;
					var t = this.else;
					if (t) {
						var a = t.optimizeNodes();
						t = this.else = Array.isArray(a) ? new j(a) : a
					}
					return t ? !1 === e ? t instanceof r ? t : t.nodes : this.nodes.length ? this : new r(Y(e), t instanceof r ? [t] : t.nodes) : !1 !== e && this.nodes.length ? this : void 0
				}
			}, {
				key: "optimizeNames",
				value: function(e, t) {
					var a;
					if (this.else = null === (a = this.else) || void 0 === a ? void 0 : a.optimizeNames(e, t), u(m(r.prototype), "optimizeNames", this).call(this, e, t) || this.else) return this.condition = K(this.condition, e, t), this
				}
			}, {
				key: "names",
				get: function() {
					var e = u(m(r.prototype), "names", this);
					return G(e, this.condition), this.else && V(e, this.else.names), e
				}
			}]), r
		}(D);
		F.kind = "if";
		var C = function(e) {
			y(r, e);
			var t = g(r);

			function r() {
				return f(this, r), t.apply(this, arguments)
			}
			return r
		}(D);
		C.kind = "for";
		var A = function(e) {
				y(r, e);
				var t = g(r);

				function r(e) {
					var a;
					return f(this, r), (a = t.call(this)).iteration = e, a
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						return "for(".concat(this.iteration, ")") + u(m(r.prototype), "render", this).call(this, e)
					}
				}, {
					key: "optimizeNames",
					value: function(e, t) {
						if (u(m(r.prototype), "optimizeNames", this).call(this, e, t)) return this.iteration = K(this.iteration, e, t), this
					}
				}, {
					key: "names",
					get: function() {
						return V(u(m(r.prototype), "names", this), this.iteration.names)
					}
				}]), r
			}(C),
			H = function(e) {
				y(r, e);
				var t = g(r);

				function r(e, a, n, i) {
					var s;
					return f(this, r), (s = t.call(this)).varKind = e, s.name = a, s.from = n, s.to = i, s
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = e.es5 ? P.varKinds.var : this.varKind,
							a = this.name,
							n = this.from,
							i = this.to;
						return "for(".concat(t, " ").concat(a, "=").concat(n, "; ").concat(a, "<").concat(i, "; ").concat(a, "++)") + u(m(r.prototype), "render", this).call(this, e)
					}
				}, {
					key: "names",
					get: function() {
						var e = G(u(m(r.prototype), "names", this), this.from);
						return G(e, this.to)
					}
				}]), r
			}(C),
			R = function(e) {
				y(r, e);
				var t = g(r);

				function r(e, a, n, i) {
					var s;
					return f(this, r), (s = t.call(this)).loop = e, s.varKind = a, s.name = n, s.iterable = i, s
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						return "for(".concat(this.varKind, " ").concat(this.name, " ").concat(this.loop, " ").concat(this.iterable, ")") + u(m(r.prototype), "render", this).call(this, e)
					}
				}, {
					key: "optimizeNames",
					value: function(e, t) {
						if (u(m(r.prototype), "optimizeNames", this).call(this, e, t)) return this.iterable = K(this.iterable, e, t), this
					}
				}, {
					key: "names",
					get: function() {
						return V(u(m(r.prototype), "names", this), this.iterable.names)
					}
				}]), r
			}(C),
			M = function(e) {
				y(r, e);
				var t = g(r);

				function r(e, a, n) {
					var i;
					return f(this, r), (i = t.call(this)).name = e, i.args = a, i.async = n, i
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = this.async ? "async " : "";
						return "".concat(t, "function ").concat(this.name, "(").concat(this.args, ")") + u(m(r.prototype), "render", this).call(this, e)
					}
				}]), r
			}(D);
		M.kind = "func";
		var $ = function(e) {
			y(r, e);
			var t = g(r);

			function r() {
				return f(this, r), t.apply(this, arguments)
			}
			return v(r, [{
				key: "render",
				value: function(e) {
					return "return " + u(m(r.prototype), "render", this).call(this, e)
				}
			}]), r
		}(O);
		$.kind = "return";
		var z = function(e) {
				y(r, e);
				var t = g(r);

				function r() {
					return f(this, r), t.apply(this, arguments)
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						var t = "try" + u(m(r.prototype), "render", this).call(this, e);
						return this.catch && (t += this.catch.render(e)), this.finally && (t += this.finally.render(e)), t
					}
				}, {
					key: "optimizeNodes",
					value: function() {
						var e, t;
						return u(m(r.prototype), "optimizeNodes", this).call(this), null === (e = this.catch) || void 0 === e || e.optimizeNodes(), null === (t = this.finally) || void 0 === t || t.optimizeNodes(), this
					}
				}, {
					key: "optimizeNames",
					value: function(e, t) {
						var a, n;
						return u(m(r.prototype), "optimizeNames", this).call(this, e, t), null === (a = this.catch) || void 0 === a || a.optimizeNames(e, t), null === (n = this.finally) || void 0 === n || n.optimizeNames(e, t), this
					}
				}, {
					key: "names",
					get: function() {
						var e = u(m(r.prototype), "names", this);
						return this.catch && V(e, this.catch.names), this.finally && V(e, this.finally.names), e
					}
				}]), r
			}(D),
			U = function(e) {
				y(r, e);
				var t = g(r);

				function r(e) {
					var a;
					return f(this, r), (a = t.call(this)).error = e, a
				}
				return v(r, [{
					key: "render",
					value: function(e) {
						return "catch(".concat(this.error, ")") + u(m(r.prototype), "render", this).call(this, e)
					}
				}]), r
			}(D);
		U.kind = "catch";
		var B = function(e) {
			y(r, e);
			var t = g(r);

			function r() {
				return f(this, r), t.apply(this, arguments)
			}
			return v(r, [{
				key: "render",
				value: function(e) {
					return "finally" + u(m(r.prototype), "render", this).call(this, e)
				}
			}]), r
		}(D);
		B.kind = "finally";
		var W = function() {
			function e(t) {
				var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
				f(this, e), this._values = {}, this._blockStarts = [], this._constants = {}, this.opts = l(l({}, r), {}, {
					_n: r.lines ? "\n" : ""
				}), this._extScope = t, this._scope = new P.Scope({
					parent: t
				}), this._nodes = [new T]
			}
			return v(e, [{
				key: "toString",
				value: function() {
					return this._root.render(this.opts)
				}
			}, {
				key: "name",
				value: function(e) {
					return this._scope.name(e)
				}
			}, {
				key: "scopeName",
				value: function(e) {
					return this._extScope.name(e)
				}
			}, {
				key: "scopeValue",
				value: function(e, t) {
					var r = this._extScope.value(e, t);
					return (this._values[r.prefix] || (this._values[r.prefix] = new Set)).add(r), r
				}
			}, {
				key: "getScopeValue",
				value: function(e, t) {
					return this._extScope.getValue(e, t)
				}
			}, {
				key: "scopeRefs",
				value: function(e) {
					return this._extScope.scopeRefs(e, this._values)
				}
			}, {
				key: "scopeCode",
				value: function() {
					return this._extScope.scopeCode(this._values)
				}
			}, {
				key: "_def",
				value: function(e, t, r, a) {
					var n = this._scope.toName(t);
					return void 0 !== r && a && (this._constants[n.str] = r), this._leafNode(new _(e, n, r)), n
				}
			}, {
				key: "const",
				value: function(e, t, r) {
					return this._def(P.varKinds.const, e, t, r)
				}
			}, {
				key: "let",
				value: function(e, t, r) {
					return this._def(P.varKinds.let, e, t, r)
				}
			}, {
				key: "var",
				value: function(e, t, r) {
					return this._def(P.varKinds.var, e, t, r)
				}
			}, {
				key: "assign",
				value: function(e, t, r) {
					return this._leafNode(new I(e, t, r))
				}
			}, {
				key: "add",
				value: function(e, r) {
					return this._leafNode(new q(e, t.operators.ADD, r))
				}
			}, {
				key: "code",
				value: function(e) {
					return "function" == typeof e ? e() : e !== b.nil && this._leafNode(new N(e)), this
				}
			}, {
				key: "object",
				value: function() {
					for (var e = ["{"], t = arguments.length, r = new Array(t), a = 0; a < t; a++) r[a] = arguments[a];
					for (var n = 0, i = r; n < i.length; n++) {
						var s = h(i[n], 2),
							p = s[0],
							o = s[1];
						e.length > 1 && e.push(","), e.push(p), (p !== o || this.opts.es5) && (e.push(":"), b.addCodeArg(e, o))
					}
					return e.push("}"), new b._Code(e)
				}
			}, {
				key: "if",
				value: function(e, t, r) {
					if (this._blockNode(new F(e)), t && r) this.code(t).else().code(r).endIf();
					else if (t) this.code(t).endIf();
					else if (r) throw new Error('CodeGen: "else" body without "then" body');
					return this
				}
			}, {
				key: "elseIf",
				value: function(e) {
					return this._elseNode(new F(e))
				}
			}, {
				key: "else",
				value: function() {
					return this._elseNode(new j)
				}
			}, {
				key: "endIf",
				value: function() {
					return this._endBlockNode(F, j)
				}
			}, {
				key: "_for",
				value: function(e, t) {
					return this._blockNode(e), t && this.code(t).endFor(), this
				}
			}, {
				key: "for",
				value: function(e, t) {
					return this._for(new A(e), t)
				}
			}, {
				key: "forRange",
				value: function(e, t, r, a) {
					var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.opts.es5 ? P.varKinds.var : P.varKinds.let,
						i = this._scope.toName(e);
					return this._for(new H(n, i, t, r), (function() {
						return a(i)
					}))
				}
			}, {
				key: "forOf",
				value: function(e, t, r) {
					var i = this,
						s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : P.varKinds.const,
						p = this._scope.toName(e);
					if (this.opts.es5) {
						var o = t instanceof b.Name ? t : this.var("_arr", t);
						return this.forRange("_i", 0, b._(a || (a = c(["", ".length"])), o), (function(e) {
							i.var(p, b._(n || (n = c(["", "[", "]"])), o, e)), r(p)
						}))
					}
					return this._for(new R("of", s, p, t), (function() {
						return r(p)
					}))
				}
			}, {
				key: "forIn",
				value: function(e, t, r) {
					var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.opts.es5 ? P.varKinds.var : P.varKinds.const;
					if (this.opts.ownProperties) return this.forOf(e, b._(i || (i = c(["Object.keys(", ")"])), t), r);
					var n = this._scope.toName(e);
					return this._for(new R("in", a, n, t), (function() {
						return r(n)
					}))
				}
			}, {
				key: "endFor",
				value: function() {
					return this._endBlockNode(C)
				}
			}, {
				key: "label",
				value: function(e) {
					return this._leafNode(new L(e))
				}
			}, {
				key: "break",
				value: function(e) {
					return this._leafNode(new x(e))
				}
			}, {
				key: "return",
				value: function(e) {
					var t = new $;
					if (this._blockNode(t), this.code(e), 1 !== t.nodes.length) throw new Error('CodeGen: "return" should have one node');
					return this._endBlockNode($)
				}
			}, {
				key: "try",
				value: function(e, t, r) {
					if (!t && !r) throw new Error('CodeGen: "try" without "catch" and "finally"');
					var a = new z;
					if (this._blockNode(a), this.code(e), t) {
						var n = this.name("e");
						this._currNode = a.catch = new U(n), t(n)
					}
					return r && (this._currNode = a.finally = new B, this.code(r)), this._endBlockNode(U, B)
				}
			}, {
				key: "throw",
				value: function(e) {
					return this._leafNode(new E(e))
				}
			}, {
				key: "block",
				value: function(e, t) {
					return this._blockStarts.push(this._nodes.length), e && this.code(e).endBlock(t), this
				}
			}, {
				key: "endBlock",
				value: function(e) {
					var t = this._blockStarts.pop();
					if (void 0 === t) throw new Error("CodeGen: not in self-balancing block");
					var r = this._nodes.length - t;
					if (r < 0 || void 0 !== e && r !== e) throw new Error("CodeGen: wrong number of nodes: ".concat(r, " vs ").concat(e, " expected"));
					return this._nodes.length = t, this
				}
			}, {
				key: "func",
				value: function(e) {
					var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : b.nil,
						r = arguments.length > 2 ? arguments[2] : void 0,
						a = arguments.length > 3 ? arguments[3] : void 0;
					return this._blockNode(new M(e, t, r)), a && this.code(a).endFunc(), this
				}
			}, {
				key: "endFunc",
				value: function() {
					return this._endBlockNode(M)
				}
			}, {
				key: "optimize",
				value: function() {
					for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1; e-- > 0;) this._root.optimizeNodes(), this._root.optimizeNames(this._root.names, this._constants)
				}
			}, {
				key: "_leafNode",
				value: function(e) {
					return this._currNode.nodes.push(e), this
				}
			}, {
				key: "_blockNode",
				value: function(e) {
					this._currNode.nodes.push(e), this._nodes.push(e)
				}
			}, {
				key: "_endBlockNode",
				value: function(e, t) {
					var r = this._currNode;
					if (r instanceof e || t && r instanceof t) return this._nodes.pop(), this;
					throw new Error('CodeGen: not in block "'.concat(t ? "".concat(e.kind, "/").concat(t.kind) : e.kind, '"'))
				}
			}, {
				key: "_elseNode",
				value: function(e) {
					var t = this._currNode;
					if (!(t instanceof F)) throw new Error('CodeGen: "else" without "if"');
					return this._currNode = t.else = e, this
				}
			}, {
				key: "_root",
				get: function() {
					return this._nodes[0]
				}
			}, {
				key: "_currNode",
				get: function() {
					var e = this._nodes;
					return e[e.length - 1]
				},
				set: function(e) {
					var t = this._nodes;
					t[t.length - 1] = e
				}
			}]), e
		}();

		function V(e, t) {
			for (var r in t) e[r] = (e[r] || 0) + (t[r] || 0);
			return e
		}

		function G(e, t) {
			return t instanceof b._CodeOrName ? V(e, t.names) : e
		}

		function K(e, t, r) {
			return e instanceof b.Name ? n(e) : (a = e) instanceof b._Code && a._items.some((function(e) {
				return e instanceof b.Name && 1 === t[e.str] && void 0 !== r[e.str]
			})) ? new b._Code(e._items.reduce((function(e, t) {
				return t instanceof b.Name && (t = n(t)), t instanceof b._Code ? e.push.apply(e, d(t._items)) : e.push(t), e
			}), [])) : e;
			var a;

			function n(e) {
				var a = r[e.str];
				return void 0 === a || 1 !== t[e.str] ? e : (delete t[e.str], a)
			}
		}

		function Q(e, t) {
			for (var r in t) e[r] = (e[r] || 0) - (t[r] || 0)
		}

		function Y(e) {
			return "boolean" == typeof e || "number" == typeof e || null === e ? !e : b._(s || (s = c(["!", ""])), ee(e))
		}
		t.CodeGen = W, t.not = Y;
		var J = Z(t.operators.AND);
		t.and = function() {
			for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
			return t.reduce(J)
		};
		var X = Z(t.operators.OR);

		function Z(e) {
			return function(t, r) {
				return t === b.nil ? r : r === b.nil ? t : b._(p || (p = c(["", " ", " ", ""])), ee(t), e, ee(r))
			}
		}

		function ee(e) {
			return e instanceof b.Name ? e : b._(o || (o = c(["(", ")"])), e)
		}
		t.or = function() {
			for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
			return t.reduce(X)
		}
	}, function(e, t) {
		e.exports = function(e, t) {
			return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, {
				raw: {
					value: Object.freeze(t)
				}
			}))
		}
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return Q
		})), r.d(t, "b", (function() {
			return ve
		})), r.d(t, "c", (function() {
			return X
		})), r.d(t, "d", (function() {
			return Pe
		})), r.d(t, "e", (function() {
			return ae
		})), r.d(t, "f", (function() {
			return d
		})), r.d(t, "h", (function() {
			return fe
		})), r.d(t, "i", (function() {
			return be
		})), r.d(t, "j", (function() {
			return y
		}));
		var a = r(1),
			n = r(23),
			i = r(17);

		function s(e, t) {
			for (var r = 0; r < t.length; r++) {
				var a = t[r];
				a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
			}
		}

		function p(e, t, r) {
			return t && s(e.prototype, t), r && s(e, r), e
		}
		var o = r(25),
			c = r(68),
			h = r(10),
			u = {}.constructor;

		function m(e) {
			if (null == e || "object" !== typeof e) return e;
			if (Array.isArray(e)) return e.map(m);
			if (e.constructor !== u) return e;
			var t = {};
			for (var r in e) t[r] = m(e[r]);
			return t
		}

		function d(e, t, r) {
			void 0 === e && (e = "unnamed");
			var a = r.jss,
				n = m(t),
				i = a.plugins.onCreateRule(e, n, r);
			return i || (e[0], null)
		}
		var l = function(e, t) {
				for (var r = "", a = 0; a < e.length && "!important" !== e[a]; a++) r && (r += t), r += e[a];
				return r
			},
			y = function(e, t) {
				if (void 0 === t && (t = !1), !Array.isArray(e)) return e;
				var r = "";
				if (Array.isArray(e[0]))
					for (var a = 0; a < e.length && "!important" !== e[a]; a++) r && (r += ", "), r += l(e[a], " ");
				else r = l(e, ", ");
				return t || "!important" !== e[e.length - 1] || (r += " !important"), r
			};

		function g(e, t) {
			for (var r = "", a = 0; a < t; a++) r += "  ";
			return r + e
		}

		function f(e, t, r) {
			void 0 === r && (r = {});
			var a = "";
			if (!t) return a;
			var n = r.indent,
				i = void 0 === n ? 0 : n,
				s = t.fallbacks;
			if (e && i++, s)
				if (Array.isArray(s))
					for (var p = 0; p < s.length; p++) {
						var o = s[p];
						for (var c in o) {
							var h = o[c];
							null != h && (a && (a += "\n"), a += "" + g(c + ": " + y(h) + ";", i))
						}
					} else
						for (var u in s) {
							var m = s[u];
							null != m && (a && (a += "\n"), a += "" + g(u + ": " + y(m) + ";", i))
						}
			for (var d in t) {
				var l = t[d];
				null != l && "fallbacks" !== d && (a && (a += "\n"), a += "" + g(d + ": " + y(l) + ";", i))
			}
			return (a || r.allowEmpty) && e ? (a && (a = "\n" + a + "\n"), g(e + " {" + a, --i) + g("}", i)) : a
		}
		var v = /([[\].#*$><+~=|^:(),"'`\s])/g,
			b = "undefined" !== typeof CSS && CSS.escape,
			P = function(e) {
				return b ? b(e) : e.replace(v, "\\$1")
			},
			S = function() {
				function e(e, t, r) {
					this.type = "style", this.key = void 0, this.isProcessed = !1, this.style = void 0, this.renderer = void 0, this.renderable = void 0, this.options = void 0;
					var a = r.sheet,
						n = r.Renderer;
					this.key = e, this.options = r, this.style = t, a ? this.renderer = a.renderer : n && (this.renderer = new n)
				}
				return e.prototype.prop = function(e, t, r) {
					if (void 0 === t) return this.style[e];
					var a = !!r && r.force;
					if (!a && this.style[e] === t) return this;
					var n = t;
					r && !1 === r.process || (n = this.options.jss.plugins.onChangeValue(t, e, this));
					var i = null == n || !1 === n,
						s = e in this.style;
					if (i && !s && !a) return this;
					var p = i && s;
					if (p ? delete this.style[e] : this.style[e] = n, this.renderable && this.renderer) return p ? this.renderer.removeProperty(this.renderable, e) : this.renderer.setProperty(this.renderable, e, n), this;
					var o = this.options.sheet;
					return o && o.attached, this
				}, e
			}(),
			w = function(e) {
				function t(t, r, a) {
					var n;
					(n = e.call(this, t, r, a) || this).selectorText = void 0, n.id = void 0, n.renderable = void 0;
					var i = a.selector,
						s = a.scoped,
						p = a.sheet,
						o = a.generateId;
					return i ? n.selectorText = i : !1 !== s && (n.id = o(Object(c.a)(Object(c.a)(n)), p), n.selectorText = "." + P(n.id)), n
				}
				Object(o.a)(t, e);
				var r = t.prototype;
				return r.applyTo = function(e) {
					var t = this.renderer;
					if (t) {
						var r = this.toJSON();
						for (var a in r) t.setProperty(e, a, r[a])
					}
					return this
				}, r.toJSON = function() {
					var e = {};
					for (var t in this.style) {
						var r = this.style[t];
						"object" !== typeof r ? e[t] = r : Array.isArray(r) && (e[t] = y(r))
					}
					return e
				}, r.toString = function(e) {
					var t = this.options.sheet,
						r = !!t && t.options.link ? Object(a.a)({}, e, {
							allowEmpty: !0
						}) : e;
					return f(this.selectorText, this.style, r)
				}, p(t, [{
					key: "selector",
					set: function(e) {
						if (e !== this.selectorText) {
							this.selectorText = e;
							var t = this.renderer,
								r = this.renderable;
							if (r && t) t.setSelector(r, e) || t.replaceRule(r, this)
						}
					},
					get: function() {
						return this.selectorText
					}
				}]), t
			}(S),
			k = {
				onCreateRule: function(e, t, r) {
					return "@" === e[0] || r.parent && "keyframes" === r.parent.type ? null : new w(e, t, r)
				}
			},
			_ = {
				indent: 1,
				children: !0
			},
			I = /@([\w-]+)/,
			q = function() {
				function e(e, t, r) {
					this.type = "conditional", this.at = void 0, this.key = void 0, this.query = void 0, this.rules = void 0, this.options = void 0, this.isProcessed = !1, this.renderable = void 0, this.key = e;
					var n = e.match(I);
					for (var i in this.at = n ? n[1] : "unknown", this.query = r.name || "@" + this.at, this.options = r, this.rules = new Q(Object(a.a)({}, r, {
							parent: this
						})), t) this.rules.add(i, t[i]);
					this.rules.process()
				}
				var t = e.prototype;
				return t.getRule = function(e) {
					return this.rules.get(e)
				}, t.indexOf = function(e) {
					return this.rules.indexOf(e)
				}, t.addRule = function(e, t, r) {
					var a = this.rules.add(e, t, r);
					return a ? (this.options.jss.plugins.onProcessRule(a), a) : null
				}, t.toString = function(e) {
					if (void 0 === e && (e = _), null == e.indent && (e.indent = _.indent), null == e.children && (e.children = _.children), !1 === e.children) return this.query + " {}";
					var t = this.rules.toString(e);
					return t ? this.query + " {\n" + t + "\n}" : ""
				}, e
			}(),
			L = /@media|@supports\s+/,
			x = {
				onCreateRule: function(e, t, r) {
					return L.test(e) ? new q(e, t, r) : null
				}
			},
			E = {
				indent: 1,
				children: !0
			},
			N = /@keyframes\s+([\w-]+)/,
			O = function() {
				function e(e, t, r) {
					this.type = "keyframes", this.at = "@keyframes", this.key = void 0, this.name = void 0, this.id = void 0, this.rules = void 0, this.options = void 0, this.isProcessed = !1, this.renderable = void 0;
					var n = e.match(N);
					n && n[1] ? this.name = n[1] : this.name = "noname", this.key = this.type + "-" + this.name, this.options = r;
					var i = r.scoped,
						s = r.sheet,
						p = r.generateId;
					for (var o in this.id = !1 === i ? this.name : P(p(this, s)), this.rules = new Q(Object(a.a)({}, r, {
							parent: this
						})), t) this.rules.add(o, t[o], Object(a.a)({}, r, {
						parent: this
					}));
					this.rules.process()
				}
				return e.prototype.toString = function(e) {
					if (void 0 === e && (e = E), null == e.indent && (e.indent = E.indent), null == e.children && (e.children = E.children), !1 === e.children) return this.at + " " + this.id + " {}";
					var t = this.rules.toString(e);
					return t && (t = "\n" + t + "\n"), this.at + " " + this.id + " {" + t + "}"
				}, e
			}(),
			D = /@keyframes\s+/,
			T = /\$([\w-]+)/g,
			j = function(e, t) {
				return "string" === typeof e ? e.replace(T, (function(e, r) {
					return r in t ? t[r] : e
				})) : e
			},
			F = function(e, t, r) {
				var a = e[t],
					n = j(a, r);
				n !== a && (e[t] = n)
			},
			C = {
				onCreateRule: function(e, t, r) {
					return "string" === typeof e && D.test(e) ? new O(e, t, r) : null
				},
				onProcessStyle: function(e, t, r) {
					return "style" === t.type && r ? ("animation-name" in e && F(e, "animation-name", r.keyframes), "animation" in e && F(e, "animation", r.keyframes), e) : e
				},
				onChangeValue: function(e, t, r) {
					var a = r.options.sheet;
					if (!a) return e;
					switch (t) {
						case "animation":
						case "animation-name":
							return j(e, a.keyframes);
						default:
							return e
					}
				}
			},
			A = function(e) {
				function t() {
					for (var t, r = arguments.length, a = new Array(r), n = 0; n < r; n++) a[n] = arguments[n];
					return (t = e.call.apply(e, [this].concat(a)) || this).renderable = void 0, t
				}
				return Object(o.a)(t, e), t.prototype.toString = function(e) {
					var t = this.options.sheet,
						r = !!t && t.options.link ? Object(a.a)({}, e, {
							allowEmpty: !0
						}) : e;
					return f(this.key, this.style, r)
				}, t
			}(S),
			H = {
				onCreateRule: function(e, t, r) {
					return r.parent && "keyframes" === r.parent.type ? new A(e, t, r) : null
				}
			},
			R = function() {
				function e(e, t, r) {
					this.type = "font-face", this.at = "@font-face", this.key = void 0, this.style = void 0, this.options = void 0, this.isProcessed = !1, this.renderable = void 0, this.key = e, this.style = t, this.options = r
				}
				return e.prototype.toString = function(e) {
					if (Array.isArray(this.style)) {
						for (var t = "", r = 0; r < this.style.length; r++) t += f(this.at, this.style[r]), this.style[r + 1] && (t += "\n");
						return t
					}
					return f(this.at, this.style, e)
				}, e
			}(),
			M = /@font-face/,
			$ = {
				onCreateRule: function(e, t, r) {
					return M.test(e) ? new R(e, t, r) : null
				}
			},
			z = function() {
				function e(e, t, r) {
					this.type = "viewport", this.at = "@viewport", this.key = void 0, this.style = void 0, this.options = void 0, this.isProcessed = !1, this.renderable = void 0, this.key = e, this.style = t, this.options = r
				}
				return e.prototype.toString = function(e) {
					return f(this.key, this.style, e)
				}, e
			}(),
			U = {
				onCreateRule: function(e, t, r) {
					return "@viewport" === e || "@-ms-viewport" === e ? new z(e, t, r) : null
				}
			},
			B = function() {
				function e(e, t, r) {
					this.type = "simple", this.key = void 0, this.value = void 0, this.options = void 0, this.isProcessed = !1, this.renderable = void 0, this.key = e, this.value = t, this.options = r
				}
				return e.prototype.toString = function(e) {
					if (Array.isArray(this.value)) {
						for (var t = "", r = 0; r < this.value.length; r++) t += this.key + " " + this.value[r] + ";", this.value[r + 1] && (t += "\n");
						return t
					}
					return this.key + " " + this.value + ";"
				}, e
			}(),
			W = {
				"@charset": !0,
				"@import": !0,
				"@namespace": !0
			},
			V = [k, x, C, H, $, U, {
				onCreateRule: function(e, t, r) {
					return e in W ? new B(e, t, r) : null
				}
			}],
			G = {
				process: !0
			},
			K = {
				force: !0,
				process: !0
			},
			Q = function() {
				function e(e) {
					this.map = {}, this.raw = {}, this.index = [], this.counter = 0, this.options = void 0, this.classes = void 0, this.keyframes = void 0, this.options = e, this.classes = e.classes, this.keyframes = e.keyframes
				}
				var t = e.prototype;
				return t.add = function(e, t, r) {
					var n = this.options,
						i = n.parent,
						s = n.sheet,
						p = n.jss,
						o = n.Renderer,
						c = n.generateId,
						h = n.scoped,
						u = Object(a.a)({
							classes: this.classes,
							parent: i,
							sheet: s,
							jss: p,
							Renderer: o,
							generateId: c,
							scoped: h,
							name: e,
							keyframes: this.keyframes,
							selector: void 0
						}, r),
						m = e;
					e in this.raw && (m = e + "-d" + this.counter++), this.raw[m] = t, m in this.classes && (u.selector = "." + P(this.classes[m]));
					var l = d(m, t, u);
					if (!l) return null;
					this.register(l);
					var y = void 0 === u.index ? this.index.length : u.index;
					return this.index.splice(y, 0, l), l
				}, t.get = function(e) {
					return this.map[e]
				}, t.remove = function(e) {
					this.unregister(e), delete this.raw[e.key], this.index.splice(this.index.indexOf(e), 1)
				}, t.indexOf = function(e) {
					return this.index.indexOf(e)
				}, t.process = function() {
					var e = this.options.jss.plugins;
					this.index.slice(0).forEach(e.onProcessRule, e)
				}, t.register = function(e) {
					this.map[e.key] = e, e instanceof w ? (this.map[e.selector] = e, e.id && (this.classes[e.key] = e.id)) : e instanceof O && this.keyframes && (this.keyframes[e.name] = e.id)
				}, t.unregister = function(e) {
					delete this.map[e.key], e instanceof w ? (delete this.map[e.selector], delete this.classes[e.key]) : e instanceof O && delete this.keyframes[e.name]
				}, t.update = function() {
					var e, t, r;
					if ("string" === typeof(arguments.length <= 0 ? void 0 : arguments[0]) ? (e = arguments.length <= 0 ? void 0 : arguments[0], t = arguments.length <= 1 ? void 0 : arguments[1], r = arguments.length <= 2 ? void 0 : arguments[2]) : (t = arguments.length <= 0 ? void 0 : arguments[0], r = arguments.length <= 1 ? void 0 : arguments[1], e = null), e) this.updateOne(this.map[e], t, r);
					else
						for (var a = 0; a < this.index.length; a++) this.updateOne(this.index[a], t, r)
				}, t.updateOne = function(t, r, a) {
					void 0 === a && (a = G);
					var n = this.options,
						i = n.jss.plugins,
						s = n.sheet;
					if (t.rules instanceof e) t.rules.update(r, a);
					else {
						var p = t,
							o = p.style;
						if (i.onUpdate(r, t, s, a), a.process && o && o !== p.style) {
							for (var c in i.onProcessStyle(p.style, p, s), p.style) {
								var h = p.style[c];
								h !== o[c] && p.prop(c, h, K)
							}
							for (var u in o) {
								var m = p.style[u],
									d = o[u];
								null == m && m !== d && p.prop(u, null, K)
							}
						}
					}
				}, t.toString = function(e) {
					for (var t = "", r = this.options.sheet, a = !!r && r.options.link, n = 0; n < this.index.length; n++) {
						var i = this.index[n].toString(e);
						(i || a) && (t && (t += "\n"), t += i)
					}
					return t
				}, e
			}(),
			Y = function() {
				function e(e, t) {
					for (var r in this.options = void 0, this.deployed = void 0, this.attached = void 0, this.rules = void 0, this.renderer = void 0, this.classes = void 0, this.keyframes = void 0, this.queue = void 0, this.attached = !1, this.deployed = !1, this.classes = {}, this.keyframes = {}, this.options = Object(a.a)({}, t, {
							sheet: this,
							parent: this,
							classes: this.classes,
							keyframes: this.keyframes
						}), t.Renderer && (this.renderer = new t.Renderer(this)), this.rules = new Q(this.options), e) this.rules.add(r, e[r]);
					this.rules.process()
				}
				var t = e.prototype;
				return t.attach = function() {
					return this.attached || (this.renderer && this.renderer.attach(), this.attached = !0, this.deployed || this.deploy()), this
				}, t.detach = function() {
					return this.attached ? (this.renderer && this.renderer.detach(), this.attached = !1, this) : this
				}, t.addRule = function(e, t, r) {
					var a = this.queue;
					this.attached && !a && (this.queue = []);
					var n = this.rules.add(e, t, r);
					return n ? (this.options.jss.plugins.onProcessRule(n), this.attached ? this.deployed ? (a ? a.push(n) : (this.insertRule(n), this.queue && (this.queue.forEach(this.insertRule, this), this.queue = void 0)), n) : n : (this.deployed = !1, n)) : null
				}, t.insertRule = function(e) {
					this.renderer && this.renderer.insertRule(e)
				}, t.addRules = function(e, t) {
					var r = [];
					for (var a in e) {
						var n = this.addRule(a, e[a], t);
						n && r.push(n)
					}
					return r
				}, t.getRule = function(e) {
					return this.rules.get(e)
				}, t.deleteRule = function(e) {
					var t = "object" === typeof e ? e : this.rules.get(e);
					return !(!t || this.attached && !t.renderable) && (this.rules.remove(t), !(this.attached && t.renderable && this.renderer) || this.renderer.deleteRule(t.renderable))
				}, t.indexOf = function(e) {
					return this.rules.indexOf(e)
				}, t.deploy = function() {
					return this.renderer && this.renderer.deploy(), this.deployed = !0, this
				}, t.update = function() {
					var e;
					return (e = this.rules).update.apply(e, arguments), this
				}, t.updateOne = function(e, t, r) {
					return this.rules.updateOne(e, t, r), this
				}, t.toString = function(e) {
					return this.rules.toString(e)
				}, e
			}(),
			J = function() {
				function e() {
					this.plugins = {
						internal: [],
						external: []
					}, this.registry = void 0
				}
				var t = e.prototype;
				return t.onCreateRule = function(e, t, r) {
					for (var a = 0; a < this.registry.onCreateRule.length; a++) {
						var n = this.registry.onCreateRule[a](e, t, r);
						if (n) return n
					}
					return null
				}, t.onProcessRule = function(e) {
					if (!e.isProcessed) {
						for (var t = e.options.sheet, r = 0; r < this.registry.onProcessRule.length; r++) this.registry.onProcessRule[r](e, t);
						e.style && this.onProcessStyle(e.style, e, t), e.isProcessed = !0
					}
				}, t.onProcessStyle = function(e, t, r) {
					for (var a = 0; a < this.registry.onProcessStyle.length; a++) t.style = this.registry.onProcessStyle[a](t.style, t, r)
				}, t.onProcessSheet = function(e) {
					for (var t = 0; t < this.registry.onProcessSheet.length; t++) this.registry.onProcessSheet[t](e)
				}, t.onUpdate = function(e, t, r, a) {
					for (var n = 0; n < this.registry.onUpdate.length; n++) this.registry.onUpdate[n](e, t, r, a)
				}, t.onChangeValue = function(e, t, r) {
					for (var a = e, n = 0; n < this.registry.onChangeValue.length; n++) a = this.registry.onChangeValue[n](a, t, r);
					return a
				}, t.use = function(e, t) {
					void 0 === t && (t = {
						queue: "external"
					});
					var r = this.plugins[t.queue]; - 1 === r.indexOf(e) && (r.push(e), this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce((function(e, t) {
						for (var r in t) r in e && e[r].push(t[r]);
						return e
					}), {
						onCreateRule: [],
						onProcessRule: [],
						onProcessStyle: [],
						onProcessSheet: [],
						onChangeValue: [],
						onUpdate: []
					}))
				}, e
			}(),
			X = function() {
				function e() {
					this.registry = []
				}
				var t = e.prototype;
				return t.add = function(e) {
					var t = this.registry,
						r = e.options.index;
					if (-1 === t.indexOf(e))
						if (0 === t.length || r >= this.index) t.push(e);
						else
							for (var a = 0; a < t.length; a++)
								if (t[a].options.index > r) return void t.splice(a, 0, e)
				}, t.reset = function() {
					this.registry = []
				}, t.remove = function(e) {
					var t = this.registry.indexOf(e);
					this.registry.splice(t, 1)
				}, t.toString = function(e) {
					for (var t = void 0 === e ? {} : e, r = t.attached, a = Object(h.a)(t, ["attached"]), n = "", i = 0; i < this.registry.length; i++) {
						var s = this.registry[i];
						null != r && s.attached !== r || (n && (n += "\n"), n += s.toString(a))
					}
					return n
				}, p(e, [{
					key: "index",
					get: function() {
						return 0 === this.registry.length ? 0 : this.registry[this.registry.length - 1].options.index
					}
				}]), e
			}(),
			Z = new X,
			ee = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")(),
			te = "2f1acc6c3a606b082e5eef5e54414ffb";
		null == ee[te] && (ee[te] = 0);
		var re = ee[te]++,
			ae = function(e) {
				void 0 === e && (e = {});
				var t = 0;
				return function(r, a) {
					t += 1;
					var n = "",
						i = "";
					return a && (a.options.classNamePrefix && (i = a.options.classNamePrefix), null != a.options.jss.id && (n = String(a.options.jss.id))), e.minify ? "" + (i || "c") + re + n + t : i + r.key + "-" + re + (n ? "-" + n : "") + "-" + t
				}
			},
			ne = function(e) {
				var t;
				return function() {
					return t || (t = e()), t
				}
			},
			ie = function(e, t) {
				try {
					return e.attributeStyleMap ? e.attributeStyleMap.get(t) : e.style.getPropertyValue(t)
				} catch (r) {
					return ""
				}
			},
			se = function(e, t, r) {
				try {
					var a = r;
					if (Array.isArray(r) && (a = y(r, !0), "!important" === r[r.length - 1])) return e.style.setProperty(t, a, "important"), !0;
					e.attributeStyleMap ? e.attributeStyleMap.set(t, a) : e.style.setProperty(t, a)
				} catch (n) {
					return !1
				}
				return !0
			},
			pe = function(e, t) {
				try {
					e.attributeStyleMap ? e.attributeStyleMap.delete(t) : e.style.removeProperty(t)
				} catch (r) {}
			},
			oe = function(e, t) {
				return e.selectorText = t, e.selectorText === t
			},
			ce = ne((function() {
				return document.querySelector("head")
			}));

		function he(e) {
			var t = Z.registry;
			if (t.length > 0) {
				var r = function(e, t) {
					for (var r = 0; r < e.length; r++) {
						var a = e[r];
						if (a.attached && a.options.index > t.index && a.options.insertionPoint === t.insertionPoint) return a
					}
					return null
				}(t, e);
				if (r && r.renderer) return {
					parent: r.renderer.element.parentNode,
					node: r.renderer.element
				};
				if ((r = function(e, t) {
						for (var r = e.length - 1; r >= 0; r--) {
							var a = e[r];
							if (a.attached && a.options.insertionPoint === t.insertionPoint) return a
						}
						return null
					}(t, e)) && r.renderer) return {
					parent: r.renderer.element.parentNode,
					node: r.renderer.element.nextSibling
				}
			}
			var a = e.insertionPoint;
			if (a && "string" === typeof a) {
				var n = function(e) {
					for (var t = ce(), r = 0; r < t.childNodes.length; r++) {
						var a = t.childNodes[r];
						if (8 === a.nodeType && a.nodeValue.trim() === e) return a
					}
					return null
				}(a);
				if (n) return {
					parent: n.parentNode,
					node: n.nextSibling
				}
			}
			return !1
		}
		var ue = ne((function() {
				var e = document.querySelector('meta[property="csp-nonce"]');
				return e ? e.getAttribute("content") : null
			})),
			me = function(e, t, r) {
				try {
					if ("insertRule" in e) e.insertRule(t, r);
					else if ("appendRule" in e) {
						e.appendRule(t)
					}
				} catch (a) {
					return !1
				}
				return e.cssRules[r]
			},
			de = function(e, t) {
				var r = e.cssRules.length;
				return void 0 === t || t > r ? r : t
			},
			le = function() {
				function e(e) {
					this.getPropertyValue = ie, this.setProperty = se, this.removeProperty = pe, this.setSelector = oe, this.element = void 0, this.sheet = void 0, this.hasInsertedRules = !1, this.cssRules = [], e && Z.add(e), this.sheet = e;
					var t = this.sheet ? this.sheet.options : {},
						r = t.media,
						a = t.meta,
						n = t.element;
					this.element = n || function() {
						var e = document.createElement("style");
						return e.textContent = "\n", e
					}(), this.element.setAttribute("data-jss", ""), r && this.element.setAttribute("media", r), a && this.element.setAttribute("data-meta", a);
					var i = ue();
					i && this.element.setAttribute("nonce", i)
				}
				var t = e.prototype;
				return t.attach = function() {
					if (!this.element.parentNode && this.sheet) {
						! function(e, t) {
							var r = t.insertionPoint,
								a = he(t);
							if (!1 !== a && a.parent) a.parent.insertBefore(e, a.node);
							else if (r && "number" === typeof r.nodeType) {
								var n = r,
									i = n.parentNode;
								i && i.insertBefore(e, n.nextSibling)
							} else ce().appendChild(e)
						}(this.element, this.sheet.options);
						var e = Boolean(this.sheet && this.sheet.deployed);
						this.hasInsertedRules && e && (this.hasInsertedRules = !1, this.deploy())
					}
				}, t.detach = function() {
					if (this.sheet) {
						var e = this.element.parentNode;
						e && e.removeChild(this.element), this.sheet.options.link && (this.cssRules = [], this.element.textContent = "\n")
					}
				}, t.deploy = function() {
					var e = this.sheet;
					e && (e.options.link ? this.insertRules(e.rules) : this.element.textContent = "\n" + e.toString() + "\n")
				}, t.insertRules = function(e, t) {
					for (var r = 0; r < e.index.length; r++) this.insertRule(e.index[r], r, t)
				}, t.insertRule = function(e, t, r) {
					if (void 0 === r && (r = this.element.sheet), e.rules) {
						var a = e,
							n = r;
						if ("conditional" === e.type || "keyframes" === e.type) {
							var i = de(r, t);
							if (!1 === (n = me(r, a.toString({
									children: !1
								}), i))) return !1;
							this.refCssRule(e, i, n)
						}
						return this.insertRules(a.rules, n), n
					}
					var s = e.toString();
					if (!s) return !1;
					var p = de(r, t),
						o = me(r, s, p);
					return !1 !== o && (this.hasInsertedRules = !0, this.refCssRule(e, p, o), o)
				}, t.refCssRule = function(e, t, r) {
					e.renderable = r, e.options.parent instanceof Y && (this.cssRules[t] = r)
				}, t.deleteRule = function(e) {
					var t = this.element.sheet,
						r = this.indexOf(e);
					return -1 !== r && (t.deleteRule(r), this.cssRules.splice(r, 1), !0)
				}, t.indexOf = function(e) {
					return this.cssRules.indexOf(e)
				}, t.replaceRule = function(e, t) {
					var r = this.indexOf(e);
					return -1 !== r && (this.element.sheet.deleteRule(r), this.cssRules.splice(r, 1), this.insertRule(t, r))
				}, t.getRules = function() {
					return this.element.sheet.cssRules
				}, e
			}(),
			ye = 0,
			ge = function() {
				function e(e) {
					this.id = ye++, this.version = "10.5.1", this.plugins = new J, this.options = {
						id: {
							minify: !1
						},
						createGenerateId: ae,
						Renderer: n.a ? le : null,
						plugins: []
					}, this.generateId = ae({
						minify: !1
					});
					for (var t = 0; t < V.length; t++) this.plugins.use(V[t], {
						queue: "internal"
					});
					this.setup(e)
				}
				var t = e.prototype;
				return t.setup = function(e) {
					return void 0 === e && (e = {}), e.createGenerateId && (this.options.createGenerateId = e.createGenerateId), e.id && (this.options.id = Object(a.a)({}, this.options.id, e.id)), (e.createGenerateId || e.id) && (this.generateId = this.options.createGenerateId(this.options.id)), null != e.insertionPoint && (this.options.insertionPoint = e.insertionPoint), "Renderer" in e && (this.options.Renderer = e.Renderer), e.plugins && this.use.apply(this, e.plugins), this
				}, t.createStyleSheet = function(e, t) {
					void 0 === t && (t = {});
					var r = t.index;
					"number" !== typeof r && (r = 0 === Z.index ? 0 : Z.index + 1);
					var n = new Y(e, Object(a.a)({}, t, {
						jss: this,
						generateId: t.generateId || this.generateId,
						insertionPoint: this.options.insertionPoint,
						Renderer: this.options.Renderer,
						index: r
					}));
					return this.plugins.onProcessSheet(n), n
				}, t.removeStyleSheet = function(e) {
					return e.detach(), Z.remove(e), this
				}, t.createRule = function(e, t, r) {
					if (void 0 === t && (t = {}), void 0 === r && (r = {}), "object" === typeof e) return this.createRule(void 0, e, t);
					var n = Object(a.a)({}, r, {
						name: e,
						jss: this,
						Renderer: this.options.Renderer
					});
					n.generateId || (n.generateId = this.generateId), n.classes || (n.classes = {}), n.keyframes || (n.keyframes = {});
					var i = d(e, t, n);
					return i && this.plugins.onProcessRule(i), i
				}, t.use = function() {
					for (var e = this, t = arguments.length, r = new Array(t), a = 0; a < t; a++) r[a] = arguments[a];
					return r.forEach((function(t) {
						e.plugins.use(t)
					})), this
				}, e
			}();

		function fe(e) {
			var t = null;
			for (var r in e) {
				var a = e[r],
					n = typeof a;
				if ("function" === n) t || (t = {}), t[r] = a;
				else if ("object" === n && null !== a && !Array.isArray(a)) {
					var i = fe(a);
					i && (t || (t = {}), t[r] = i)
				}
			}
			return t
		}
		var ve = function() {
				function e() {
					this.length = 0, this.sheets = new WeakMap
				}
				var t = e.prototype;
				return t.get = function(e) {
					var t = this.sheets.get(e);
					return t && t.sheet
				}, t.add = function(e, t) {
					this.sheets.has(e) || (this.length++, this.sheets.set(e, {
						sheet: t,
						refs: 0
					}))
				}, t.manage = function(e) {
					var t = this.sheets.get(e);
					if (t) return 0 === t.refs && t.sheet.attach(), t.refs++, t.sheet;
					Object(i.a)(!1, "[JSS] SheetsManager: can't find sheet to manage")
				}, t.unmanage = function(e) {
					var t = this.sheets.get(e);
					t ? t.refs > 0 && (t.refs--, 0 === t.refs && t.sheet.detach()) : Object(i.a)(!1, "SheetsManager: can't find sheet to unmanage")
				}, p(e, [{
					key: "size",
					get: function() {
						return this.length
					}
				}]), e
			}(),
			be = "object" === typeof CSS && null != CSS && "number" in CSS,
			Pe = function(e) {
				return new ge(e)
			},
			Se = Pe();
		t.g = Se
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m, d, l, y, g, f, v, b, P, S = r(32),
			w = r(5),
			k = r(16);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.checkStrictMode = t.getErrorPath = t.Type = t.useFunc = t.setEvaluated = t.evaluatedPropsToName = t.mergeEvaluated = t.eachItem = t.unescapeJsonPointer = t.escapeJsonPointer = t.escapeFragment = t.unescapeFragment = t.schemaRefOrVal = t.schemaHasRulesButRef = t.schemaHasRules = t.checkUnknownRules = t.alwaysValidSchema = t.toHash = void 0;
		var _ = r(4),
			I = r(45);

		function q(e) {
			var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e.schema,
				r = e.opts,
				a = e.self;
			if (r.strictSchema && "boolean" !== typeof t) {
				var n = a.RULES.keywords;
				for (var i in t) n[i] || F(e, 'unknown keyword: "'.concat(i, '"'))
			}
		}

		function L(e, t) {
			if ("boolean" == typeof e) return !e;
			for (var r in e)
				if (t[r]) return !0;
			return !1
		}

		function x(e) {
			return "number" == typeof e ? "".concat(e) : e.replace(/~/g, "~0").replace(/\//g, "~1")
		}

		function E(e) {
			return e.replace(/~1/g, "/").replace(/~0/g, "~")
		}

		function N(e) {
			var t = e.mergeNames,
				r = e.mergeToName,
				a = e.mergeValues,
				n = e.resultToName;
			return function(e, i, s, p) {
				var o = void 0 === s ? i : s instanceof _.Name ? (i instanceof _.Name ? t(e, i, s) : r(e, i, s), s) : i instanceof _.Name ? (r(e, s, i), i) : a(i, s);
				return p !== _.Name || o instanceof _.Name ? o : n(e, o)
			}
		}

		function O(e, t) {
			if (!0 === t) return e.var("props", !0);
			var r = e.var("props", _._(y || (y = w(["{}"]))));
			return void 0 !== t && D(e, r, t), r
		}

		function D(e, t, r) {
			Object.keys(r).forEach((function(r) {
				return e.assign(_._(g || (g = w(["", "", ""])), t, _.getProperty(r)), !0)
			}))
		}
		t.toHash = function(e) {
			var t, r = {},
				a = k(e);
			try {
				for (a.s(); !(t = a.n()).done;) {
					r[t.value] = !0
				}
			} catch (n) {
				a.e(n)
			} finally {
				a.f()
			}
			return r
		}, t.alwaysValidSchema = function(e, t) {
			return "boolean" == typeof t ? t : 0 === Object.keys(t).length || (q(e, t), !L(t, e.self.RULES.all))
		}, t.checkUnknownRules = q, t.schemaHasRules = L, t.schemaHasRulesButRef = function(e, t) {
			if ("boolean" == typeof e) return !e;
			for (var r in e)
				if ("$ref" !== r && t.all[r]) return !0;
			return !1
		}, t.schemaRefOrVal = function(e, t, r, i) {
			var s = e.topSchemaRef,
				p = e.schemaPath;
			if (!i) {
				if ("number" == typeof t || "boolean" == typeof t) return t;
				if ("string" == typeof t) return _._(a || (a = w(["", ""])), t)
			}
			return _._(n || (n = w(["", "", "", ""])), s, p, _.getProperty(r))
		}, t.unescapeFragment = function(e) {
			return E(decodeURIComponent(e))
		}, t.escapeFragment = function(e) {
			return encodeURIComponent(x(e))
		}, t.escapeJsonPointer = x, t.unescapeJsonPointer = E, t.eachItem = function(e, t) {
			if (Array.isArray(e)) {
				var r, a = k(e);
				try {
					for (a.s(); !(r = a.n()).done;) {
						t(r.value)
					}
				} catch (n) {
					a.e(n)
				} finally {
					a.f()
				}
			} else t(e)
		}, t.mergeEvaluated = {
			props: N({
				mergeNames: function(e, t, r) {
					return e.if(_._(i || (i = w(["", " !== true && ", " !== undefined"])), r, t), (function() {
						e.if(_._(s || (s = w(["", " === true"])), t), (function() {
							return e.assign(r, !0)
						}), (function() {
							return e.assign(r, _._(p || (p = w(["", " || {}"])), r)).code(_._(o || (o = w(["Object.assign(", ", ", ")"])), r, t))
						}))
					}))
				},
				mergeToName: function(e, t, r) {
					return e.if(_._(c || (c = w(["", " !== true"])), r), (function() {
						!0 === t ? e.assign(r, !0) : (e.assign(r, _._(h || (h = w(["", " || {}"])), r)), D(e, r, t))
					}))
				},
				mergeValues: function(e, t) {
					return !0 === e || S(S({}, e), t)
				},
				resultToName: O
			}),
			items: N({
				mergeNames: function(e, t, r) {
					return e.if(_._(u || (u = w(["", " !== true && ", " !== undefined"])), r, t), (function() {
						return e.assign(r, _._(m || (m = w(["", " === true ? true : ", " > ", " ? ", " : ", ""])), t, r, t, r, t))
					}))
				},
				mergeToName: function(e, t, r) {
					return e.if(_._(d || (d = w(["", " !== true"])), r), (function() {
						return e.assign(r, !0 === t || _._(l || (l = w(["", " > ", " ? ", " : ", ""])), r, t, r, t))
					}))
				},
				mergeValues: function(e, t) {
					return !0 === e || Math.max(e, t)
				},
				resultToName: function(e, t) {
					return e.var("items", t)
				}
			})
		}, t.evaluatedPropsToName = O, t.setEvaluated = D;
		var T, j = {};

		function F(e, t) {
			var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.opts.strictSchema;
			if (r) {
				if (t = "strict mode: ".concat(t), !0 === r) throw new Error(t);
				e.self.logger.warn(t)
			}
		}
		t.useFunc = function(e, t) {
				return e.scopeValue("func", {
					ref: t,
					code: j[t.code] || (j[t.code] = new I._Code(t.code))
				})
			},
			function(e) {
				e[e.Num = 0] = "Num", e[e.Str = 1] = "Str"
			}(T = t.Type || (t.Type = {})), t.getErrorPath = function(e, t, r) {
				if (e instanceof _.Name) {
					var a = t === T.Num;
					return r ? a ? _._(f || (f = w(['"[" + ', ' + "]"'])), e) : _._(v || (v = w(['"[\'" + ', ' + "\']"'])), e) : a ? _._(b || (b = w(['"/" + ', ""])), e) : _._(P || (P = w(['"/" + ', '.replace(/~/g, "~0").replace(/\\//g, "~1")'], ['"/" + ', '.replace(/~/g, "~0").replace(/\\\\//g, "~1")'])), e)
				}
				return r ? _.getProperty(e).toString() : "/" + x(e)
			}, t.checkStrictMode = F
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return n
		}));
		var a = r(10);

		function n(e, t) {
			if (null == e) return {};
			var r, n, i = Object(a.a)(e, t);
			if (Object.getOwnPropertySymbols) {
				var s = Object.getOwnPropertySymbols(e);
				for (n = 0; n < s.length; n++) r = s[n], t.indexOf(r) >= 0 || Object.prototype.propertyIsEnumerable.call(e, r) && (i[r] = e[r])
			}
			return i
		}
	}, function(e, t, r) {
		e.exports = r(108)()
	}, function(e, t, r) {
		"use strict";

		function a(e, t) {
			if (null == e) return {};
			var r, a, n = {},
				i = Object.keys(e);
			for (a = 0; a < i.length; a++) r = i[a], t.indexOf(r) >= 0 || (n[r] = e[r]);
			return n
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		"use strict";
		! function e() {
			if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE) try {
				__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)
			} catch (t) {
				console.error(t)
			}
		}(), e.exports = r(102)
	}, function(e, t, r) {
		"use strict";

		function a(e, t, r) {
			return t in e ? Object.defineProperty(e, t, {
				value: r,
				enumerable: !0,
				configurable: !0,
				writable: !0
			}) : e[t] = r, e
		}

		function n(e, t) {
			var r = Object.keys(e);
			if (Object.getOwnPropertySymbols) {
				var a = Object.getOwnPropertySymbols(e);
				t && (a = a.filter((function(t) {
					return Object.getOwnPropertyDescriptor(e, t).enumerable
				}))), r.push.apply(r, a)
			}
			return r
		}

		function i(e) {
			for (var t = 1; t < arguments.length; t++) {
				var r = null != arguments[t] ? arguments[t] : {};
				t % 2 ? n(Object(r), !0).forEach((function(t) {
					a(e, t, r[t])
				})) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach((function(t) {
					Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t))
				}))
			}
			return e
		}
		r.d(t, "a", (function() {
			return i
		}))
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return h
		})), r.d(t, "b", (function() {
			return g
		})), r.d(t, "c", (function() {
			return P
		}));
		var a = r(0),
			n = r.n(a),
			i = (r(9), n.a.createContext(null));
		var s = function(e) {
				e()
			},
			p = {
				notify: function() {}
			};

		function o() {
			var e = s,
				t = null,
				r = null;
			return {
				clear: function() {
					t = null, r = null
				},
				notify: function() {
					e((function() {
						for (var e = t; e;) e.callback(), e = e.next
					}))
				},
				get: function() {
					for (var e = [], r = t; r;) e.push(r), r = r.next;
					return e
				},
				subscribe: function(e) {
					var a = !0,
						n = r = {
							callback: e,
							next: null,
							prev: r
						};
					return n.prev ? n.prev.next = n : t = n,
						function() {
							a && null !== t && (a = !1, n.next ? n.next.prev = n.prev : r = n.prev, n.prev ? n.prev.next = n.next : t = n.next)
						}
				}
			}
		}
		var c = function() {
			function e(e, t) {
				this.store = e, this.parentSub = t, this.unsubscribe = null, this.listeners = p, this.handleChangeWrapper = this.handleChangeWrapper.bind(this)
			}
			var t = e.prototype;
			return t.addNestedSub = function(e) {
				return this.trySubscribe(), this.listeners.subscribe(e)
			}, t.notifyNestedSubs = function() {
				this.listeners.notify()
			}, t.handleChangeWrapper = function() {
				this.onStateChange && this.onStateChange()
			}, t.isSubscribed = function() {
				return Boolean(this.unsubscribe)
			}, t.trySubscribe = function() {
				this.unsubscribe || (this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper), this.listeners = o())
			}, t.tryUnsubscribe = function() {
				this.unsubscribe && (this.unsubscribe(), this.unsubscribe = null, this.listeners.clear(), this.listeners = p)
			}, e
		}();
		var h = function(e) {
				var t = e.store,
					r = e.context,
					s = e.children,
					p = Object(a.useMemo)((function() {
						var e = new c(t);
						return e.onStateChange = e.notifyNestedSubs, {
							store: t,
							subscription: e
						}
					}), [t]),
					o = Object(a.useMemo)((function() {
						return t.getState()
					}), [t]);
				Object(a.useEffect)((function() {
					var e = p.subscription;
					return e.trySubscribe(), o !== t.getState() && e.notifyNestedSubs(),
						function() {
							e.tryUnsubscribe(), e.onStateChange = null
						}
				}), [p, o]);
				var h = r || i;
				return n.a.createElement(h.Provider, {
					value: p
				}, s)
			},
			u = (r(1), r(10), r(21), r(67), "undefined" !== typeof window && "undefined" !== typeof window.document && "undefined" !== typeof window.document.createElement ? a.useLayoutEffect : a.useEffect);
		r(22);

		function m() {
			return Object(a.useContext)(i)
		}

		function d(e) {
			void 0 === e && (e = i);
			var t = e === i ? m : function() {
				return Object(a.useContext)(e)
			};
			return function() {
				return t().store
			}
		}
		var l = d();

		function y(e) {
			void 0 === e && (e = i);
			var t = e === i ? l : d(e);
			return function() {
				return t().dispatch
			}
		}
		var g = y(),
			f = function(e, t) {
				return e === t
			};

		function v(e) {
			void 0 === e && (e = i);
			var t = e === i ? m : function() {
				return Object(a.useContext)(e)
			};
			return function(e, r) {
				void 0 === r && (r = f);
				var n = t(),
					i = function(e, t, r, n) {
						var i, s = Object(a.useReducer)((function(e) {
								return e + 1
							}), 0)[1],
							p = Object(a.useMemo)((function() {
								return new c(r, n)
							}), [r, n]),
							o = Object(a.useRef)(),
							h = Object(a.useRef)(),
							m = Object(a.useRef)(),
							d = Object(a.useRef)(),
							l = r.getState();
						try {
							i = e !== h.current || l !== m.current || o.current ? e(l) : d.current
						} catch (y) {
							throw o.current && (y.message += "\nThe error may be correlated with this previous error:\n" + o.current.stack + "\n\n"), y
						}
						return u((function() {
							h.current = e, m.current = l, d.current = i, o.current = void 0
						})), u((function() {
							function e() {
								try {
									var e = h.current(r.getState());
									if (t(e, d.current)) return;
									d.current = e
								} catch (y) {
									o.current = y
								}
								s()
							}
							return p.onStateChange = e, p.trySubscribe(), e(),
								function() {
									return p.tryUnsubscribe()
								}
						}), [r, p]), i
					}(e, r, n.store, n.subscription);
				return Object(a.useDebugValue)(i), i
			}
		}
		var b, P = v(),
			S = r(11);
		b = S.unstable_batchedUpdates, s = b
	}, , function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m, d, l, y, g, f = r(33),
			v = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.validateUnion = t.validateArray = t.usePattern = t.callValidateCode = t.schemaProperties = t.allSchemaProperties = t.noPropertyInData = t.propertyInData = t.isOwnProperty = t.hasPropFunc = t.reportMissingProp = t.checkMissingProp = t.checkReportMissingProp = void 0;
		var b = r(4),
			P = r(7),
			S = r(24);

		function w(e) {
			return e.scopeValue("func", {
				ref: Object.prototype.hasOwnProperty,
				code: b._(i || (i = v(["Object.prototype.hasOwnProperty"])))
			})
		}

		function k(e, t, r) {
			return b._(s || (s = v(["", ".call(", ", ", ")"])), w(e), t, r)
		}

		function _(e, t, r, a) {
			var n = b._(c || (c = v(["", "", " === undefined"])), t, b.getProperty(r));
			return a ? b.or(n, b.not(k(e, t, r))) : n
		}

		function I(e) {
			return e ? Object.keys(e).filter((function(e) {
				return "__proto__" !== e
			})) : []
		}
		t.checkReportMissingProp = function(e, t) {
			var r = e.gen,
				n = e.data,
				i = e.it;
			r.if(_(r, n, t, i.opts.ownProperties), (function() {
				e.setParams({
					missingProperty: b._(a || (a = v(["", ""])), t)
				}, !0), e.error()
			}))
		}, t.checkMissingProp = function(e, t, r) {
			var a = e.gen,
				i = e.data,
				s = e.it.opts;
			return b.or.apply(b, f(t.map((function(e) {
				return b.and(_(a, i, e, s.ownProperties), b._(n || (n = v(["", " = ", ""])), r, e))
			}))))
		}, t.reportMissingProp = function(e, t) {
			e.setParams({
				missingProperty: t
			}, !0), e.error()
		}, t.hasPropFunc = w, t.isOwnProperty = k, t.propertyInData = function(e, t, r, a) {
			var n = b._(p || (p = v(["", "", " !== undefined"])), t, b.getProperty(r));
			return a ? b._(o || (o = v(["", " && ", ""])), n, k(e, t, r)) : n
		}, t.noPropertyInData = _, t.allSchemaProperties = I, t.schemaProperties = function(e, t) {
			return I(t).filter((function(r) {
				return !P.alwaysValidSchema(e, t[r])
			}))
		}, t.callValidateCode = function(e, t, r, a) {
			var n = e.schemaCode,
				i = e.data,
				s = e.it,
				p = s.gen,
				o = s.topSchemaRef,
				c = s.schemaPath,
				l = s.errorPath,
				y = e.it,
				g = a ? b._(h || (h = v(["", ", ", ", ", "", ""])), n, i, o, c) : i,
				f = [
					[S.default.instancePath, b.strConcat(S.default.instancePath, l)],
					[S.default.parentData, y.parentData],
					[S.default.parentDataProperty, y.parentDataProperty],
					[S.default.rootData, S.default.rootData]
				];
			y.opts.dynamicRef && f.push([S.default.dynamicAnchors, S.default.dynamicAnchors]);
			var P = b._(u || (u = v(["", ", ", ""])), g, p.object.apply(p, f));
			return r !== b.nil ? b._(m || (m = v(["", ".call(", ", ", ")"])), t, r, P) : b._(d || (d = v(["", "(", ")"])), t, P)
		}, t.usePattern = function(e, t) {
			var r = e.gen,
				a = e.it.opts.unicodeRegExp ? "u" : "";
			return r.scopeValue("pattern", {
				key: t,
				ref: new RegExp(t, a),
				code: b._(l || (l = v(["new RegExp(", ", ", ")"])), t, a)
			})
		}, t.validateArray = function(e) {
			var t = e.gen,
				r = e.data,
				a = e.keyword,
				n = e.it,
				i = t.name("valid");
			if (n.allErrors) {
				var s = t.let("valid", !0);
				return p((function() {
					return t.assign(s, !1)
				})), s
			}
			return t.var(i, !0), p((function() {
				return t.break()
			})), i;

			function p(n) {
				var s = t.const("len", b._(y || (y = v(["", ".length"])), r));
				t.forRange("i", 0, s, (function(r) {
					e.subschema({
						keyword: a,
						dataProp: r,
						dataPropType: P.Type.Num
					}, i), t.if(b.not(i), n)
				}))
			}
		}, t.validateUnion = function(e) {
			var t = e.gen,
				r = e.schema,
				a = e.keyword,
				n = e.it;
			if (!Array.isArray(r)) throw new Error("ajv implementation error");
			if (!r.some((function(e) {
					return P.alwaysValidSchema(n, e)
				})) || n.opts.unevaluated) {
				var i = t.let("valid", !1),
					s = t.name("_valid");
				t.block((function() {
					return r.forEach((function(r, n) {
						var p = e.subschema({
							keyword: a,
							schemaProp: n,
							compositeRule: !0
						}, s);
						t.assign(i, b._(g || (g = v(["", " || ", ""])), i, s)), e.mergeValidEvaluated(p, s) || t.if(b.not(i))
					}))
				})), e.result(i, (function() {
					return e.reset()
				}), (function() {
					return e.error(!0)
				}))
			}
		}
	}, function(e, t, r) {
		var a = r(63);
		e.exports = function(e, t) {
			var r;
			if ("undefined" === typeof Symbol || null == e[Symbol.iterator]) {
				if (Array.isArray(e) || (r = a(e)) || t && e && "number" === typeof e.length) {
					r && (e = r);
					var n = 0,
						i = function() {};
					return {
						s: i,
						n: function() {
							return n >= e.length ? {
								done: !0
							} : {
								done: !1,
								value: e[n++]
							}
						},
						e: function(e) {
							throw e
						},
						f: i
					}
				}
				throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
			}
			var s, p = !0,
				o = !1;
			return {
				s: function() {
					r = e[Symbol.iterator]()
				},
				n: function() {
					var e = r.next();
					return p = e.done, e
				},
				e: function(e) {
					o = !0, s = e
				},
				f: function() {
					try {
						p || null == r.return || r.return()
					} finally {
						if (o) throw s
					}
				}
			}
		}
	}, function(e, t, r) {
		"use strict";
		t.a = function(e, t) {}
	}, function(e, t, r) {
		"use strict";

		function a(e, t, r) {
			return t in e ? Object.defineProperty(e, t, {
				value: r,
				enumerable: !0,
				configurable: !0,
				writable: !0
			}) : e[t] = r, e
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		"use strict";

		function a(e, t) {
			(null == t || t > e.length) && (t = e.length);
			for (var r = 0, a = new Array(t); r < t; r++) a[r] = e[r];
			return a
		}

		function n(e, t) {
			return function(e) {
				if (Array.isArray(e)) return e
			}(e) || function(e, t) {
				if ("undefined" !== typeof Symbol && Symbol.iterator in Object(e)) {
					var r = [],
						a = !0,
						n = !1,
						i = void 0;
					try {
						for (var s, p = e[Symbol.iterator](); !(a = (s = p.next()).done) && (r.push(s.value), !t || r.length !== t); a = !0);
					} catch (o) {
						n = !0, i = o
					} finally {
						try {
							a || null == p.return || p.return()
						} finally {
							if (n) throw i
						}
					}
					return r
				}
			}(e, t) || function(e, t) {
				if (e) {
					if ("string" === typeof e) return a(e, t);
					var r = Object.prototype.toString.call(e).slice(8, -1);
					return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? a(e, t) : void 0
				}
			}(e, t) || function() {
				throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
			}()
		}
		r.d(t, "a", (function() {
			return n
		}))
	}, function(e, t) {
		e.exports = function(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(67),
			n = {
				childContextTypes: !0,
				contextType: !0,
				contextTypes: !0,
				defaultProps: !0,
				displayName: !0,
				getDefaultProps: !0,
				getDerivedStateFromError: !0,
				getDerivedStateFromProps: !0,
				mixins: !0,
				propTypes: !0,
				type: !0
			},
			i = {
				name: !0,
				length: !0,
				prototype: !0,
				caller: !0,
				callee: !0,
				arguments: !0,
				arity: !0
			},
			s = {
				$$typeof: !0,
				compare: !0,
				defaultProps: !0,
				displayName: !0,
				propTypes: !0,
				type: !0
			},
			p = {};

		function o(e) {
			return a.isMemo(e) ? s : p[e.$$typeof] || n
		}
		p[a.ForwardRef] = {
			$$typeof: !0,
			render: !0,
			defaultProps: !0,
			displayName: !0,
			propTypes: !0
		}, p[a.Memo] = s;
		var c = Object.defineProperty,
			h = Object.getOwnPropertyNames,
			u = Object.getOwnPropertySymbols,
			m = Object.getOwnPropertyDescriptor,
			d = Object.getPrototypeOf,
			l = Object.prototype;
		e.exports = function e(t, r, a) {
			if ("string" !== typeof r) {
				if (l) {
					var n = d(r);
					n && n !== l && e(t, n, a)
				}
				var s = h(r);
				u && (s = s.concat(u(r)));
				for (var p = o(t), y = o(r), g = 0; g < s.length; ++g) {
					var f = s[g];
					if (!i[f] && (!a || !a[f]) && (!y || !y[f]) && (!p || !p[f])) {
						var v = m(r, f);
						try {
							c(t, f, v)
						} catch (b) {}
					}
				}
			}
			return t
		}
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return g
		})), r.d(t, "b", (function() {
			return u
		})), r.d(t, "c", (function() {
			return c
		})), r.d(t, "d", (function() {
			return p
		}));
		var a = r(36),
			n = function() {
				return Math.random().toString(36).substring(7).split("").join(".")
			},
			i = {
				INIT: "@@redux/INIT" + n(),
				REPLACE: "@@redux/REPLACE" + n(),
				PROBE_UNKNOWN_ACTION: function() {
					return "@@redux/PROBE_UNKNOWN_ACTION" + n()
				}
			};

		function s(e) {
			if ("object" !== typeof e || null === e) return !1;
			for (var t = e; null !== Object.getPrototypeOf(t);) t = Object.getPrototypeOf(t);
			return Object.getPrototypeOf(e) === t
		}

		function p(e, t, r) {
			var n;
			if ("function" === typeof t && "function" === typeof r || "function" === typeof r && "function" === typeof arguments[3]) throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");
			if ("function" === typeof t && "undefined" === typeof r && (r = t, t = void 0), "undefined" !== typeof r) {
				if ("function" !== typeof r) throw new Error("Expected the enhancer to be a function.");
				return r(p)(e, t)
			}
			if ("function" !== typeof e) throw new Error("Expected the reducer to be a function.");
			var o = e,
				c = t,
				h = [],
				u = h,
				m = !1;

			function d() {
				u === h && (u = h.slice())
			}

			function l() {
				if (m) throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
				return c
			}

			function y(e) {
				if ("function" !== typeof e) throw new Error("Expected the listener to be a function.");
				if (m) throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");
				var t = !0;
				return d(), u.push(e),
					function() {
						if (t) {
							if (m) throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");
							t = !1, d();
							var r = u.indexOf(e);
							u.splice(r, 1), h = null
						}
					}
			}

			function g(e) {
				if (!s(e)) throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
				if ("undefined" === typeof e.type) throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
				if (m) throw new Error("Reducers may not dispatch actions.");
				try {
					m = !0, c = o(c, e)
				} finally {
					m = !1
				}
				for (var t = h = u, r = 0; r < t.length; r++) {
					(0, t[r])()
				}
				return e
			}

			function f(e) {
				if ("function" !== typeof e) throw new Error("Expected the nextReducer to be a function.");
				o = e, g({
					type: i.REPLACE
				})
			}

			function v() {
				var e, t = y;
				return (e = {
					subscribe: function(e) {
						if ("object" !== typeof e || null === e) throw new TypeError("Expected the observer to be an object.");

						function r() {
							e.next && e.next(l())
						}
						return r(), {
							unsubscribe: t(r)
						}
					}
				})[a.a] = function() {
					return this
				}, e
			}
			return g({
				type: i.INIT
			}), (n = {
				dispatch: g,
				subscribe: y,
				getState: l,
				replaceReducer: f
			})[a.a] = v, n
		}

		function o(e, t) {
			var r = t && t.type;
			return "Given " + (r && 'action "' + String(r) + '"' || "an action") + ', reducer "' + e + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'
		}

		function c(e) {
			for (var t = Object.keys(e), r = {}, a = 0; a < t.length; a++) {
				var n = t[a];
				0, "function" === typeof e[n] && (r[n] = e[n])
			}
			var s, p = Object.keys(r);
			try {
				! function(e) {
					Object.keys(e).forEach((function(t) {
						var r = e[t];
						if ("undefined" === typeof r(void 0, {
								type: i.INIT
							})) throw new Error('Reducer "' + t + "\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");
						if ("undefined" === typeof r(void 0, {
								type: i.PROBE_UNKNOWN_ACTION()
							})) throw new Error('Reducer "' + t + "\" returned undefined when probed with a random type. Don't try to handle " + i.INIT + ' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')
					}))
				}(r)
			} catch (c) {
				s = c
			}
			return function(e, t) {
				if (void 0 === e && (e = {}), s) throw s;
				for (var a = !1, n = {}, i = 0; i < p.length; i++) {
					var c = p[i],
						h = r[c],
						u = e[c],
						m = h(u, t);
					if ("undefined" === typeof m) {
						var d = o(c, t);
						throw new Error(d)
					}
					n[c] = m, a = a || m !== u
				}
				return (a = a || p.length !== Object.keys(e).length) ? n : e
			}
		}

		function h(e, t) {
			return function() {
				return t(e.apply(this, arguments))
			}
		}

		function u(e, t) {
			if ("function" === typeof e) return h(e, t);
			if ("object" !== typeof e || null === e) throw new Error("bindActionCreators expected an object or a function, instead received " + (null === e ? "null" : typeof e) + '. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
			var r = {};
			for (var a in e) {
				var n = e[a];
				"function" === typeof n && (r[a] = h(n, t))
			}
			return r
		}

		function m(e, t, r) {
			return t in e ? Object.defineProperty(e, t, {
				value: r,
				enumerable: !0,
				configurable: !0,
				writable: !0
			}) : e[t] = r, e
		}

		function d(e, t) {
			var r = Object.keys(e);
			return Object.getOwnPropertySymbols && r.push.apply(r, Object.getOwnPropertySymbols(e)), t && (r = r.filter((function(t) {
				return Object.getOwnPropertyDescriptor(e, t).enumerable
			}))), r
		}

		function l(e) {
			for (var t = 1; t < arguments.length; t++) {
				var r = null != arguments[t] ? arguments[t] : {};
				t % 2 ? d(r, !0).forEach((function(t) {
					m(e, t, r[t])
				})) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : d(r).forEach((function(t) {
					Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t))
				}))
			}
			return e
		}

		function y() {
			for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
			return 0 === t.length ? function(e) {
				return e
			} : 1 === t.length ? t[0] : t.reduce((function(e, t) {
				return function() {
					return e(t.apply(void 0, arguments))
				}
			}))
		}

		function g() {
			for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
			return function(e) {
				return function() {
					var r = e.apply(void 0, arguments),
						a = function() {
							throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")
						},
						n = {
							getState: r.getState,
							dispatch: function() {
								return a.apply(void 0, arguments)
							}
						},
						i = t.map((function(e) {
							return e(n)
						}));
					return l({}, r, {
						dispatch: a = y.apply(void 0, i)(r.dispatch)
					})
				}
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(e) {
				return typeof e
			} : function(e) {
				return e && "function" === typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
			},
			n = "object" === ("undefined" === typeof window ? "undefined" : a(window)) && "object" === ("undefined" === typeof document ? "undefined" : a(document)) && 9 === document.nodeType;
		t.a = n
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(4),
			n = {
				data: new a.Name("data"),
				valCxt: new a.Name("valCxt"),
				instancePath: new a.Name("instancePath"),
				parentData: new a.Name("parentData"),
				parentDataProperty: new a.Name("parentDataProperty"),
				rootData: new a.Name("rootData"),
				dynamicAnchors: new a.Name("dynamicAnchors"),
				vErrors: new a.Name("vErrors"),
				errors: new a.Name("errors"),
				this: new a.Name("this"),
				self: new a.Name("self"),
				scope: new a.Name("scope"),
				json: new a.Name("json"),
				jsonPos: new a.Name("jsonPos"),
				jsonLen: new a.Name("jsonLen"),
				jsonPart: new a.Name("jsonPart")
			};
		t.default = n
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return n
		}));
		var a = r(87);

		function n(e, t) {
			e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Object(a.a)(e, t)
		}
	}, function(e, t, r) {
		e.exports = r(113)
	}, function(e, t, r) {
		(function(t, r, a) {
			var n;
			n = function() {
				"use strict";

				function e(t) {
					return (e = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(e) {
						return typeof e
					} : function(e) {
						return e && "function" === typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
					})(t)
				}

				function n(e, t) {
					for (var r = 0; r < t.length; r++) {
						var a = t[r];
						a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
					}
				}

				function i(e, t, r) {
					return t in e ? Object.defineProperty(e, t, {
						value: r,
						enumerable: !0,
						configurable: !0,
						writable: !0
					}) : e[t] = r, e
				}

				function s(e) {
					for (var t = 1; t < arguments.length; t++) {
						var r = null != arguments[t] ? arguments[t] : {},
							a = Object.keys(r);
						"function" === typeof Object.getOwnPropertySymbols && (a = a.concat(Object.getOwnPropertySymbols(r).filter((function(e) {
							return Object.getOwnPropertyDescriptor(r, e).enumerable
						})))), a.forEach((function(t) {
							i(e, t, r[t])
						}))
					}
					return e
				}
				var p, o, c, h;

				function u() {
					return "object" === typeof window && void 0 !== (null === window || void 0 === window ? void 0 : window.document)
				}! function(e) {
					e.IDENTIFY = "$identify"
				}(p || (p = {})),
				function(e) {
					e.SET = "$set", e.SET_ONCE = "$setOnce", e.ADD = "$add", e.APPEND = "$append", e.PREPEND = "$prepend", e.REMOVE = "$remove", e.PREINSERT = "$preinsert", e.POSTINSERT = "$postinsert", e.UNSET = "$unset", e.CLEAR_ALL = "$clearAll"
				}(o || (o = {})),
				function(e) {
					e[e.None = 0] = "None", e[e.Error = 1] = "Error", e[e.Warn = 2] = "Warn", e[e.Verbose = 3] = "Verbose"
				}(c || (c = {})),
				function(e) {
					e.Unknown = "unknown", e.Skipped = "skipped", e.Success = "success", e.RateLimit = "rate_limit", e.PayloadTooLarge = "payload_too_large", e.Invalid = "invalid", e.Failed = "failed"
				}(h || (h = {})),
				function(e) {
					e.fromHttpCode = function(t) {
						return t >= 200 && t < 300 ? e.Success : 429 === t ? e.RateLimit : 413 === t ? e.PayloadTooLarge : t >= 400 && t < 500 ? e.Invalid : t >= 500 ? e.Failed : e.Unknown
					}
				}(h || (h = {})), h.Skipped;
				var m = {},
					d = function() {
						return function() {
							var e;
							return "object" === typeof t && void 0 !== (null === (e = null === t || void 0 === t ? void 0 : t.versions) || void 0 === e ? void 0 : e.node)
						}() ? r : "undefined" !== typeof window ? window : "undefined" !== typeof self ? self : m
					},
					l = function() {
						var e = d();
						return e.__AMPLITUDE__ = e.__AMPLITUDE__ || {}, e.__AMPLITUDE__
					}(),
					y = "Amplitude Logger ",
					g = function() {
						function e() {
							this._logLevel = 0
						}
						return e.prototype.disable = function() {
							this._logLevel = 0
						}, e.prototype.enable = function(e) {
							void 0 === e && (e = c.Warn), this._logLevel = e
						}, e.prototype.log = function() {
							for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
							this._logLevel < c.Verbose || r.console.log(y + "[Log]: " + e.join(" "))
						}, e.prototype.warn = function() {
							for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
							this._logLevel < c.Warn || r.console.warn(y + "[Warn]: " + e.join(" "))
						}, e.prototype.error = function() {
							for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
							this._logLevel < c.Error || r.console.error(y + "[Error]: " + e.join(" "))
						}, e
					}(),
					f = (l.logger || (l.logger = new g), "$default_instance"),
					v = 2,
					b = 4096,
					P = 1e3,
					S = "$identify",
					w = "$groupidentify",
					k = "amp_cookie_test",
					_ = "amp",
					I = "",
					q = "cookies",
					L = "none",
					x = "localStorage",
					E = "sessionStorage",
					N = "revenue_amount",
					O = "$productId",
					D = "$quantity",
					T = "$price",
					j = "$revenueType",
					F = "amp_device_id",
					C = "referrer",
					A = "utm_source",
					H = "utm_medium",
					R = "utm_campaign",
					M = "utm_term",
					$ = "utm_content",
					z = "[Amplitude] Attribution Captured",
					U = function(e) {
						for (var t = "", r = 0; r < e.length; r++) {
							var a = e.charCodeAt(r);
							a < 128 ? t += String.fromCharCode(a) : a > 127 && a < 2048 ? (t += String.fromCharCode(a >> 6 | 192), t += String.fromCharCode(63 & a | 128)) : (t += String.fromCharCode(a >> 12 | 224), t += String.fromCharCode(a >> 6 & 63 | 128), t += String.fromCharCode(63 & a | 128))
						}
						return t
					},
					B = function(e) {
						for (var t = "", r = 0, a = 0, n = 0, i = 0; r < e.length;)(a = e.charCodeAt(r)) < 128 ? (t += String.fromCharCode(a), r++) : a > 191 && a < 224 ? (n = e.charCodeAt(r + 1), t += String.fromCharCode((31 & a) << 6 | 63 & n), r += 2) : (n = e.charCodeAt(r + 1), i = e.charCodeAt(r + 2), t += String.fromCharCode((15 & a) << 12 | (63 & n) << 6 | 63 & i), r += 3);
						return t
					},
					W = {
						_keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
						encode: function(e) {
							try {
								if (window.btoa && window.atob) return window.btoa(unescape(encodeURIComponent(e)))
							} catch (t) {}
							return W._encode(e)
						},
						_encode: function(e) {
							var t, r, a, n, i, s, p, o = "",
								c = 0;
							for (e = U(e); c < e.length;) n = (t = e.charCodeAt(c++)) >> 2, i = (3 & t) << 4 | (r = e.charCodeAt(c++)) >> 4, s = (15 & r) << 2 | (a = e.charCodeAt(c++)) >> 6, p = 63 & a, isNaN(r) ? s = p = 64 : isNaN(a) && (p = 64), o = o + W._keyStr.charAt(n) + W._keyStr.charAt(i) + W._keyStr.charAt(s) + W._keyStr.charAt(p);
							return o
						},
						decode: function(e) {
							try {
								if (window.btoa && window.atob) return decodeURIComponent(escape(window.atob(e)))
							} catch (t) {}
							return W._decode(e)
						},
						_decode: function(e) {
							var t, r, a, n, i, s, p = "",
								o = 0;
							for (e = e.replace(/[^A-Za-z0-9+/=]/g, ""); o < e.length;) t = W._keyStr.indexOf(e.charAt(o++)) << 2 | (n = W._keyStr.indexOf(e.charAt(o++))) >> 4, r = (15 & n) << 4 | (i = W._keyStr.indexOf(e.charAt(o++))) >> 2, a = (3 & i) << 6 | (s = W._keyStr.indexOf(e.charAt(o++))), p += String.fromCharCode(t), 64 !== i && (p += String.fromCharCode(r)), 64 !== s && (p += String.fromCharCode(a));
							return p = B(p)
						}
					},
					V = Object.prototype.toString;

				function G(t) {
					switch (V.call(t)) {
						case "[object Date]":
							return "date";
						case "[object RegExp]":
							return "regexp";
						case "[object Arguments]":
							return "arguments";
						case "[object Array]":
							return "array";
						case "[object Error]":
							return "error"
					}
					return null === t ? "null" : void 0 === t ? "undefined" : t !== t ? "nan" : t && 1 === t.nodeType ? "element" : "undefined" !== typeof a && "function" === typeof a.isBuffer && a.isBuffer(t) ? "buffer" : e(t = t.valueOf ? t.valueOf() : Object.prototype.valueOf.apply(t))
				}
				var K, Q = {
						DISABLE: 0,
						ERROR: 1,
						WARN: 2,
						INFO: 3
					},
					Y = Q.WARN,
					J = {
						error: function(e) {
							Y >= Q.ERROR && X(e)
						},
						warn: function(e) {
							Y >= Q.WARN && X(e)
						},
						info: function(e) {
							Y >= Q.INFO && X(e)
						}
					},
					X = function(e) {
						try {
							console.log("[Amplitude] " + e)
						} catch (t) {}
					},
					Z = function(e) {
						return "string" === G(e) && e.length > b ? e.substring(0, b) : e
					},
					ee = function(e) {
						var t = G(e);
						if ("object" !== t) return J.error("Error: invalid properties format. Expecting Javascript object, received " + t + ", ignoring"), {};
						if (Object.keys(e).length > P) return J.error("Error: too many properties (more than 1000), ignoring"), {};
						var r = {};
						for (var a in e)
							if (Object.prototype.hasOwnProperty.call(e, a)) {
								var n = a,
									i = G(n);
								"string" !== i && (n = String(n), J.warn("WARNING: Non-string property key, received type " + i + ', coercing to string "' + n + '"'));
								var s = re(n, e[a]);
								null !== s && (r[n] = s)
							} return r
					},
					te = ["nan", "function", "arguments", "regexp", "element"],
					re = function e(t, r) {
						var a = G(r);
						if (-1 !== te.indexOf(a)) J.warn('WARNING: Property key "' + t + '" with invalid value type ' + a + ", ignoring"), r = null;
						else if ("undefined" === a) r = null;
						else if ("error" === a) r = String(r), J.warn('WARNING: Property key "' + t + '" with value type error, coercing to ' + r);
						else if ("array" === a) {
							for (var n = [], i = 0; i < r.length; i++) {
								var s = r[i],
									p = G(s);
								"array" !== p ? "object" === p ? n.push(ee(s)) : n.push(e(t, s)) : J.warn("WARNING: Cannot have " + p + " nested in an array property value, skipping")
							}
							r = n
						} else "object" === a && (r = ee(r));
						return r
					},
					ae = function(e, t) {
						var r = G(t);
						if ("string" === r) return t;
						if ("date" === r || "number" === r || "boolean" === r) return t = String(t), J.warn("WARNING: Non-string groupName, received type " + r + ', coercing to string "' + t + '"'), t;
						if ("array" === r) {
							for (var a = [], n = 0; n < t.length; n++) {
								var i = t[n],
									s = G(i);
								"array" !== s && "object" !== s ? "string" === s ? a.push(i) : "date" !== s && "number" !== s && "boolean" !== s || (i = String(i), J.warn("WARNING: Non-string groupName, received type " + s + ', coercing to string "' + i + '"'), a.push(i)) : J.warn("WARNING: Skipping nested " + s + " in array groupName")
							}
							return a
						}
						J.warn("WARNING: Non-string groupName, received type " + r + ". Please use strings or array of strings for groupName")
					},
					ne = function(e) {
						Object.prototype.hasOwnProperty.call(Q, Y) && (Y = Q[e])
					},
					ie = J,
					se = function(e) {
						return !e || 0 === e.length
					},
					pe = function(e, t) {
						e = e.replace(/[[]/, "\\[").replace(/[\]]/, "\\]");
						var r = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(t);
						return null === r ? void 0 : decodeURIComponent(r[1].replace(/\+/g, " "))
					},
					oe = function e(t) {
						if ("array" === G(t))
							for (var r = 0; r < t.length; r++) t[r] = e(t[r]);
						else if ("object" === G(t))
							for (var a in t) a in t && (t[a] = e(t[a]));
						else t = Z(t);
						return t
					},
					ce = function(e) {
						var t = G(e);
						if ("object" !== t) return J.error("Error: invalid groups format. Expecting Javascript object, received " + t + ", ignoring"), {};
						var r = {};
						for (var a in e)
							if (Object.prototype.hasOwnProperty.call(e, a)) {
								var n = a,
									i = G(n);
								"string" !== i && (n = String(n), J.warn("WARNING: Non-string groupType, received type " + i + ', coercing to string "' + n + '"'));
								var s = ae(n, e[a]);
								null !== s && (r[n] = s)
							} return r
					},
					he = function(e, t, r) {
						return G(e) === r || (J.error("Invalid " + t + " input type. Expected " + r + " but received " + G(e)), !1)
					},
					ue = ee,
					me = function() {
						return window.location
					},
					de = function() {
						for (var e = "", t = 0; t < 22; ++t) e += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".charAt(Math.floor(64 * Math.random()));
						return e
					},
					le = function(e) {
						try {
							for (var t = document.cookie.split(";"), r = null, a = 0; a < t.length; a++) {
								for (var n = t[a];
									" " === n.charAt(0);) n = n.substring(1, n.length);
								if (0 === n.indexOf(e)) {
									r = n.substring(e.length, n.length);
									break
								}
							}
							return r
						} catch (i) {
							return null
						}
					},
					ye = function(e, t, r) {
						var a = null !== t ? r.expirationDays : -1;
						if (a) {
							var n = new Date;
							n.setTime(n.getTime() + 24 * a * 60 * 60 * 1e3), a = n
						}
						var i = e + "=" + t;
						a && (i += "; expires=" + a.toUTCString()), i += "; path=/", r.domain && (i += "; domain=" + r.domain), r.secure && (i += "; Secure"), r.sameSite && (i += "; SameSite=" + r.sameSite), document.cookie = i
					},
					ge = ye,
					fe = le,
					ve = function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
							t = String(new Date);
						try {
							var r = k + de();
							ye(r, t, e);
							var a = le(r + "=") === t;
							return ye(r, null, e), a
						} catch (n) {}
						return !1
					},
					be = function(e) {
						var t = document.createElement("a");
						return t.href = e, t.hostname || location.hostname
					},
					Pe = function(e) {
						for (var t = be(e).split("."), r = [], a = "_tldtest_" + de(), n = t.length - 2; n >= 0; --n) r.push(t.slice(n).join("."));
						for (var i = 0; i < r.length; ++i) {
							var s = r[i],
								p = {
									domain: "." + s
								};
							if (ge(a, 1, p), fe(a)) return ge(a, null, p), s
						}
						return ""
					},
					Se = {
						expirationDays: void 0,
						domain: void 0
					},
					we = function(e) {
						var t = "";
						return Se.domain && (t = "." === Se.domain.charAt(0) ? Se.domain.substring(1) : Se.domain), e + t
					},
					ke = function(e) {
						var t = we(e) + "=",
							r = fe(t);
						try {
							if (r) return JSON.parse(W.decode(r))
						} catch (a) {
							return null
						}
						return null
					},
					_e = function(e, t) {
						try {
							return ge(we(e), W.encode(JSON.stringify(t)), Se), !0
						} catch (r) {
							return !1
						}
					},
					Ie = function(e) {
						try {
							return ge(we(e), null, Se), !0
						} catch (t) {
							return !1
						}
					},
					qe = {
						reset: function() {
							Se = {
								expirationDays: void 0,
								domain: void 0
							}
						},
						options: function(e) {
							if (0 === arguments.length) return Se;
							e = e || {}, Se.expirationDays = e.expirationDays, Se.secure = e.secure, Se.sameSite = e.sameSite;
							var t = se(e.domain) ? "." + Pe(me().href) : e.domain,
								r = Math.random();
							Se.domain = t, _e("amplitude_test", r);
							var a = ke("amplitude_test");
							return a && a === r || (t = null), Ie("amplitude_test"), Se.domain = t, Se
						},
						get: ke,
						set: _e,
						remove: Ie,
						setRaw: function(e, t) {
							try {
								return ge(we(e), t, Se), !0
							} catch (r) {
								return !1
							}
						},
						getRaw: function(e) {
							var t = we(e) + "=";
							return fe(t)
						}
					};
				if (function() {
						var e, t = new Date;
						try {
							return window.localStorage.setItem(t, t), e = window.localStorage.getItem(t) === String(t), window.localStorage.removeItem(t), e
						} catch (r) {}
						return !1
					}()) K = window.localStorage;
				else if (window.globalStorage) try {
					K = window.globalStorage[window.location.hostname]
				} catch (gt) {} else if ("undefined" !== typeof document) {
					var Le = document.createElement("div"),
						xe = "localStorage";
					Le.style.display = "none", document.getElementsByTagName("head")[0].appendChild(Le), Le.addBehavior && (Le.addBehavior("#default#userdata"), K = {
						length: 0,
						setItem: function(e, t) {
							Le.load(xe), Le.getAttribute(e) || this.length++, Le.setAttribute(e, t), Le.save(xe)
						},
						getItem: function(e) {
							return Le.load(xe), Le.getAttribute(e)
						},
						removeItem: function(e) {
							Le.load(xe), Le.getAttribute(e) && this.length--, Le.removeAttribute(e), Le.save(xe)
						},
						clear: function() {
							Le.load(xe);
							for (var e, t = 0; e = Le.XMLDocument.documentElement.attributes[t++];) Le.removeAttribute(e.name);
							Le.save(xe), this.length = 0
						},
						key: function(e) {
							return Le.load(xe), Le.XMLDocument.documentElement.attributes[e]
						}
					}, Le.load(xe), K.length = Le.XMLDocument.documentElement.attributes.length)
				} K || (K = {
					length: 0,
					setItem: function(e, t) {},
					getItem: function(e) {},
					removeItem: function(e) {},
					clear: function() {},
					key: function(e) {}
				});
				var Ee, Ne = K,
					Oe = function() {
						this.storage = null
					};
				Oe.prototype.getStorage = function() {
					if (null !== this.storage) return this.storage;
					if (ve()) this.storage = qe;
					else {
						var e = "amp_cookiestore_";
						this.storage = {
							_options: {
								expirationDays: void 0,
								domain: void 0,
								secure: !1
							},
							reset: function() {
								this._options = {
									expirationDays: void 0,
									domain: void 0,
									secure: !1
								}
							},
							options: function(e) {
								return 0 === arguments.length ? this._options : (e = e || {}, this._options.expirationDays = e.expirationDays || this._options.expirationDays, this._options.domain = e.domain || this._options.domain || window && window.location && window.location.hostname, this._options.secure = e.secure || !1)
							},
							get: function(t) {
								try {
									return JSON.parse(Ne.getItem(e + t))
								} catch (gt) {}
								return null
							},
							set: function(t, r) {
								try {
									return Ne.setItem(e + t, JSON.stringify(r)), !0
								} catch (gt) {}
								return !1
							},
							remove: function(t) {
								try {
									Ne.removeItem(e + t)
								} catch (gt) {
									return !1
								}
							}
						}
					}
					return this.storage
				};
				var De = (i(Ee = {}, q, !0), i(Ee, L, !0), i(Ee, x, !0), i(Ee, E, !0), Ee),
					Te = function() {
						function e(t) {
							var r = t.storageKey,
								a = t.disableCookies,
								n = t.domain,
								i = t.secure,
								s = t.sameSite,
								p = t.expirationDays,
								o = t.storage;
							! function(e, t) {
								if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
							}(this, e), this.storageKey = r, this.domain = n, this.secure = i, this.sameSite = s, this.expirationDays = p, this.cookieDomain = "";
							var c = Pe(me().href);
							if (this.cookieDomain = n || (c ? "." + c : null), De[o]) this.storage = o;
							else {
								var h = a || !ve({
									domain: this.cookieDomain,
									secure: this.secure,
									sameSite: this.sameSite,
									expirationDays: this.expirationDays
								});
								this.storage = h ? x : q
							}
						}
						var t, r, a;
						return t = e, (r = [{
							key: "getCookieStorageKey",
							value: function() {
								if (!this.domain) return this.storageKey;
								var e = "." === this.domain.charAt(0) ? this.domain.substring(1) : this.domain;
								return "".concat(this.storageKey).concat(e ? "_".concat(e) : "")
							}
						}, {
							key: "save",
							value: function(e) {
								var t = e.deviceId,
									r = e.userId,
									a = e.optOut,
									n = e.sessionId,
									i = e.lastEventTime,
									s = e.eventId,
									p = e.identifyId,
									o = e.sequenceNumber;
								if (this.storage !== L) {
									var c = [t, W.encode(r || ""), a ? "1" : "", n ? n.toString(32) : "0", i ? i.toString(32) : "0", s ? s.toString(32) : "0", p ? p.toString(32) : "0", o ? o.toString(32) : "0"].join(".");
									switch (this.storage) {
										case E:
											window.sessionStorage && window.sessionStorage.setItem(this.storageKey, c);
											break;
										case x:
											Ne.setItem(this.storageKey, c);
											break;
										case q:
											ge(this.getCookieStorageKey(), c, {
												domain: this.cookieDomain,
												secure: this.secure,
												sameSite: this.sameSite,
												expirationDays: this.expirationDays
											})
									}
								}
							}
						}, {
							key: "load",
							value: function() {
								var e;
								if (this.storage === q && (e = fe(this.getCookieStorageKey() + "=")), e || (e = Ne.getItem(this.storageKey)), e || (e = window.sessionStorage && window.sessionStorage.getItem(this.storageKey)), !e) return null;
								var t = e.split("."),
									r = null;
								if (t[1]) try {
									r = W.decode(t[1])
								} catch (gt) {
									r = null
								}
								return {
									deviceId: t[0],
									userId: r,
									optOut: "1" === t[2],
									sessionId: parseInt(t[3], 32),
									lastEventTime: parseInt(t[4], 32),
									eventId: parseInt(t[5], 32),
									identifyId: parseInt(t[6], 32),
									sequenceNumber: parseInt(t[7], 32)
								}
							}
						}]) && n(t.prototype, r), a && n(t, a), e
					}(),
					je = "$clearAll",
					Fe = function() {
						this.userPropertiesOperations = {}, this.properties = []
					};
				Fe.prototype.add = function(e, t) {
					return "number" === G(t) || "string" === G(t) ? this._addOperation("$add", e, t) : ie.error("Unsupported type for value: " + G(t) + ", expecting number or string"), this
				}, Fe.prototype.append = function(e, t) {
					return this._addOperation("$append", e, t), this
				}, Fe.prototype.clearAll = function() {
					return Object.keys(this.userPropertiesOperations).length > 0 ? (Object.prototype.hasOwnProperty.call(this.userPropertiesOperations, je) || ie.error("Need to send $clearAll on its own Identify object without any other operations, skipping $clearAll"), this) : (this.userPropertiesOperations.$clearAll = "-", this)
				}, Fe.prototype.prepend = function(e, t) {
					return this._addOperation("$prepend", e, t), this
				}, Fe.prototype.set = function(e, t) {
					return this._addOperation("$set", e, t), this
				}, Fe.prototype.setOnce = function(e, t) {
					return this._addOperation("$setOnce", e, t), this
				}, Fe.prototype.unset = function(e) {
					return this._addOperation("$unset", e, "-"), this
				}, Fe.prototype._addOperation = function(e, t, r) {
					Object.prototype.hasOwnProperty.call(this.userPropertiesOperations, je) ? ie.error("This identify already contains a $clearAll operation, skipping operation " + e) : -1 === this.properties.indexOf(t) ? (Object.prototype.hasOwnProperty.call(this.userPropertiesOperations, e) || (this.userPropertiesOperations[e] = {}), this.userPropertiesOperations[e][t] = r, this.properties.push(t)) : ie.error('User property "' + t + '" already used in this identify, skipping operation ' + e)
				};
				var Ce = "undefined" !== typeof window ? window : "undefined" !== typeof r ? r : "undefined" !== typeof self ? self : {};

				function Ae(e, t) {
					return e(t = {
						exports: {}
					}, t.exports), t.exports
				}
				var He = Ae((function(e) {
						! function(t) {
							function r(e, t) {
								var r = (65535 & e) + (65535 & t);
								return (e >> 16) + (t >> 16) + (r >> 16) << 16 | 65535 & r
							}

							function a(e, t, a, n, i, s) {
								return r((p = r(r(t, e), r(n, s))) << (o = i) | p >>> 32 - o, a);
								var p, o
							}

							function n(e, t, r, n, i, s, p) {
								return a(t & r | ~t & n, e, t, i, s, p)
							}

							function i(e, t, r, n, i, s, p) {
								return a(t & n | r & ~n, e, t, i, s, p)
							}

							function s(e, t, r, n, i, s, p) {
								return a(t ^ r ^ n, e, t, i, s, p)
							}

							function p(e, t, r, n, i, s, p) {
								return a(r ^ (t | ~n), e, t, i, s, p)
							}

							function o(e, t) {
								var a, o, c, h, u;
								e[t >> 5] |= 128 << t % 32, e[14 + (t + 64 >>> 9 << 4)] = t;
								var m = 1732584193,
									d = -271733879,
									l = -1732584194,
									y = 271733878;
								for (a = 0; a < e.length; a += 16) o = m, c = d, h = l, u = y, m = n(m, d, l, y, e[a], 7, -680876936), y = n(y, m, d, l, e[a + 1], 12, -389564586), l = n(l, y, m, d, e[a + 2], 17, 606105819), d = n(d, l, y, m, e[a + 3], 22, -1044525330), m = n(m, d, l, y, e[a + 4], 7, -176418897), y = n(y, m, d, l, e[a + 5], 12, 1200080426), l = n(l, y, m, d, e[a + 6], 17, -1473231341), d = n(d, l, y, m, e[a + 7], 22, -45705983), m = n(m, d, l, y, e[a + 8], 7, 1770035416), y = n(y, m, d, l, e[a + 9], 12, -1958414417), l = n(l, y, m, d, e[a + 10], 17, -42063), d = n(d, l, y, m, e[a + 11], 22, -1990404162), m = n(m, d, l, y, e[a + 12], 7, 1804603682), y = n(y, m, d, l, e[a + 13], 12, -40341101), l = n(l, y, m, d, e[a + 14], 17, -1502002290), m = i(m, d = n(d, l, y, m, e[a + 15], 22, 1236535329), l, y, e[a + 1], 5, -165796510), y = i(y, m, d, l, e[a + 6], 9, -1069501632), l = i(l, y, m, d, e[a + 11], 14, 643717713), d = i(d, l, y, m, e[a], 20, -373897302), m = i(m, d, l, y, e[a + 5], 5, -701558691), y = i(y, m, d, l, e[a + 10], 9, 38016083), l = i(l, y, m, d, e[a + 15], 14, -660478335), d = i(d, l, y, m, e[a + 4], 20, -405537848), m = i(m, d, l, y, e[a + 9], 5, 568446438), y = i(y, m, d, l, e[a + 14], 9, -1019803690), l = i(l, y, m, d, e[a + 3], 14, -187363961), d = i(d, l, y, m, e[a + 8], 20, 1163531501), m = i(m, d, l, y, e[a + 13], 5, -1444681467), y = i(y, m, d, l, e[a + 2], 9, -51403784), l = i(l, y, m, d, e[a + 7], 14, 1735328473), m = s(m, d = i(d, l, y, m, e[a + 12], 20, -1926607734), l, y, e[a + 5], 4, -378558), y = s(y, m, d, l, e[a + 8], 11, -2022574463), l = s(l, y, m, d, e[a + 11], 16, 1839030562), d = s(d, l, y, m, e[a + 14], 23, -35309556), m = s(m, d, l, y, e[a + 1], 4, -1530992060), y = s(y, m, d, l, e[a + 4], 11, 1272893353), l = s(l, y, m, d, e[a + 7], 16, -155497632), d = s(d, l, y, m, e[a + 10], 23, -1094730640), m = s(m, d, l, y, e[a + 13], 4, 681279174), y = s(y, m, d, l, e[a], 11, -358537222), l = s(l, y, m, d, e[a + 3], 16, -722521979), d = s(d, l, y, m, e[a + 6], 23, 76029189), m = s(m, d, l, y, e[a + 9], 4, -640364487), y = s(y, m, d, l, e[a + 12], 11, -421815835), l = s(l, y, m, d, e[a + 15], 16, 530742520), m = p(m, d = s(d, l, y, m, e[a + 2], 23, -995338651), l, y, e[a], 6, -198630844), y = p(y, m, d, l, e[a + 7], 10, 1126891415), l = p(l, y, m, d, e[a + 14], 15, -1416354905), d = p(d, l, y, m, e[a + 5], 21, -57434055), m = p(m, d, l, y, e[a + 12], 6, 1700485571), y = p(y, m, d, l, e[a + 3], 10, -1894986606), l = p(l, y, m, d, e[a + 10], 15, -1051523), d = p(d, l, y, m, e[a + 1], 21, -2054922799), m = p(m, d, l, y, e[a + 8], 6, 1873313359), y = p(y, m, d, l, e[a + 15], 10, -30611744), l = p(l, y, m, d, e[a + 6], 15, -1560198380), d = p(d, l, y, m, e[a + 13], 21, 1309151649), m = p(m, d, l, y, e[a + 4], 6, -145523070), y = p(y, m, d, l, e[a + 11], 10, -1120210379), l = p(l, y, m, d, e[a + 2], 15, 718787259), d = p(d, l, y, m, e[a + 9], 21, -343485551), m = r(m, o), d = r(d, c), l = r(l, h), y = r(y, u);
								return [m, d, l, y]
							}

							function c(e) {
								var t, r = "",
									a = 32 * e.length;
								for (t = 0; t < a; t += 8) r += String.fromCharCode(e[t >> 5] >>> t % 32 & 255);
								return r
							}

							function h(e) {
								var t, r = [];
								for (r[(e.length >> 2) - 1] = void 0, t = 0; t < r.length; t += 1) r[t] = 0;
								var a = 8 * e.length;
								for (t = 0; t < a; t += 8) r[t >> 5] |= (255 & e.charCodeAt(t / 8)) << t % 32;
								return r
							}

							function u(e) {
								var t, r, a = "0123456789abcdef",
									n = "";
								for (r = 0; r < e.length; r += 1) t = e.charCodeAt(r), n += a.charAt(t >>> 4 & 15) + a.charAt(15 & t);
								return n
							}

							function m(e) {
								return unescape(encodeURIComponent(e))
							}

							function d(e) {
								return function(e) {
									return c(o(h(e), 8 * e.length))
								}(m(e))
							}

							function l(e, t) {
								return function(e, t) {
									var r, a, n = h(e),
										i = [],
										s = [];
									for (i[15] = s[15] = void 0, n.length > 16 && (n = o(n, 8 * e.length)), r = 0; r < 16; r += 1) i[r] = 909522486 ^ n[r], s[r] = 1549556828 ^ n[r];
									return a = o(i.concat(h(t)), 512 + 8 * t.length), c(o(s.concat(a), 640))
								}(m(e), m(t))
							}

							function y(e, t, r) {
								return t ? r ? l(t, e) : u(l(t, e)) : r ? d(e) : u(d(e))
							}
							e.exports ? e.exports = y : t.md5 = y
						}(Ce)
					})),
					Re = Object.getOwnPropertySymbols,
					Me = Object.prototype.hasOwnProperty,
					$e = Object.prototype.propertyIsEnumerable;

				function ze(e) {
					if (null === e || void 0 === e) throw new TypeError("Object.assign cannot be called with null or undefined");
					return Object(e)
				}
				var Ue = function() {
						try {
							if (!Object.assign) return !1;
							var e = new String("abc");
							if (e[5] = "de", "5" === Object.getOwnPropertyNames(e)[0]) return !1;
							for (var t = {}, r = 0; r < 10; r++) t["_" + String.fromCharCode(r)] = r;
							if ("0123456789" !== Object.getOwnPropertyNames(t).map((function(e) {
									return t[e]
								})).join("")) return !1;
							var a = {};
							return "abcdefghijklmnopqrst".split("").forEach((function(e) {
								a[e] = e
							})), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, a)).join("")
						} catch (n) {
							return !1
						}
					}() ? Object.assign : function(e, t) {
						for (var r, a, n = ze(e), i = 1; i < arguments.length; i++) {
							for (var s in r = Object(arguments[i])) Me.call(r, s) && (n[s] = r[s]);
							if (Re) {
								a = Re(r);
								for (var p = 0; p < a.length; p++) $e.call(r, a[p]) && (n[a[p]] = r[a[p]])
							}
						}
						return n
					},
					Be = "%[a-f0-9]{2}";

				function We(e, t) {
					return t.encode ? t.strict ? encodeURIComponent(e).replace(/[!'()*]/g, (function(e) {
						return "%" + e.charCodeAt(0).toString(16).toUpperCase()
					})) : encodeURIComponent(e) : e
				}
				new RegExp(Be, "gi"), new RegExp("(" + Be + ")+", "gi");
				var Ve = function(e, t) {
						!1 === (t = Ue({
							encode: !0,
							strict: !0,
							arrayFormat: "none"
						}, t)).sort && (t.sort = function() {});
						var r = function(e) {
							switch (e.arrayFormat) {
								case "index":
									return function(t, r, a) {
										return null === r ? [We(t, e), "[", a, "]"].join("") : [We(t, e), "[", We(a, e), "]=", We(r, e)].join("")
									};
								case "bracket":
									return function(t, r) {
										return null === r ? We(t, e) : [We(t, e), "[]=", We(r, e)].join("")
									};
								default:
									return function(t, r) {
										return null === r ? We(t, e) : [We(t, e), "=", We(r, e)].join("")
									}
							}
						}(t);
						return e ? Object.keys(e).sort(t.sort).map((function(a) {
							var n = e[a];
							if (void 0 === n) return "";
							if (null === n) return We(a, t);
							if (Array.isArray(n)) {
								var i = [];
								return n.slice().forEach((function(e) {
									void 0 !== e && i.push(r(a, e, i.length))
								})), i.join("&")
							}
							return We(a, t) + "=" + We(n, t)
						})).filter((function(e) {
							return e.length > 0
						})).join("&") : ""
					},
					Ge = function(e, t) {
						this.url = e, this.data = t || {}
					};
				Ge.prototype.send = function(e) {
					if (window.XDomainRequest) {
						var t = new window.XDomainRequest;
						t.open("POST", this.url, !0), t.onload = function() {
							e(200, t.responseText)
						}, t.onerror = function() {
							"Request Entity Too Large" === t.responseText ? e(413, t.responseText) : e(500, t.responseText)
						}, t.ontimeout = function() {}, t.onprogress = function() {}, t.send(Ve(this.data))
					} else {
						var r = new XMLHttpRequest;
						r.open("POST", this.url, !0), r.onreadystatechange = function() {
							4 === r.readyState && e(r.status, r.responseText)
						}, r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8"), r.send(Ve(this.data))
					}
				};
				var Ke = function() {
					this._price = null, this._productId = null, this._quantity = 1, this._revenueType = null, this._properties = null
				};
				Ke.prototype.setProductId = function(e) {
					return "string" !== G(e) ? ie.error("Unsupported type for productId: " + G(e) + ", expecting string") : se(e) ? ie.error("Invalid empty productId") : this._productId = e, this
				}, Ke.prototype.setQuantity = function(e) {
					return "number" !== G(e) ? ie.error("Unsupported type for quantity: " + G(e) + ", expecting number") : this._quantity = parseInt(e), this
				}, Ke.prototype.setPrice = function(e) {
					return "number" !== G(e) ? ie.error("Unsupported type for price: " + G(e) + ", expecting number") : this._price = e, this
				}, Ke.prototype.setRevenueType = function(e) {
					return "string" !== G(e) ? ie.error("Unsupported type for revenueType: " + G(e) + ", expecting string") : this._revenueType = e, this
				}, Ke.prototype.setEventProperties = function(e) {
					return "object" !== G(e) ? ie.error("Unsupported type for eventProperties: " + G(e) + ", expecting object") : this._properties = ue(e), this
				}, Ke.prototype._isValidRevenue = function() {
					return "number" === G(this._price) || (ie.error("Invalid revenue, need to set price field"), !1)
				}, Ke.prototype._toJSONObject = function() {
					var e = "object" === G(this._properties) ? this._properties : {};
					return null !== this._productId && (e[O] = this._productId), null !== this._quantity && (e[D] = this._quantity), null !== this._price && (e[T] = this._price), null !== this._revenueType && (e[j] = this._revenueType), e
				};
				var Qe, Ye = Ae((function(e, t) {
						! function(r, a) {
							var n = "function",
								i = "object",
								s = "model",
								p = "name",
								o = "type",
								c = "vendor",
								h = "version",
								u = "architecture",
								m = "console",
								d = "mobile",
								l = "tablet",
								y = "smarttv",
								g = "wearable",
								f = {
									extend: function(e, t) {
										var r = {};
										for (var a in e) t[a] && t[a].length % 2 === 0 ? r[a] = t[a].concat(e[a]) : r[a] = e[a];
										return r
									},
									has: function(e, t) {
										return "string" === typeof e && -1 !== t.toLowerCase().indexOf(e.toLowerCase())
									},
									lowerize: function(e) {
										return e.toLowerCase()
									},
									major: function(e) {
										return "string" === typeof e ? e.replace(/[^\d\.]/g, "").split(".")[0] : a
									},
									trim: function(e) {
										return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "")
									}
								},
								v = {
									rgx: function(e, t) {
										for (var r, s, p, o, c, h, u = 0; u < t.length && !c;) {
											var m = t[u],
												d = t[u + 1];
											for (r = s = 0; r < m.length && !c;)
												if (c = m[r++].exec(e))
													for (p = 0; p < d.length; p++) h = c[++s], typeof(o = d[p]) === i && o.length > 0 ? 2 == o.length ? typeof o[1] == n ? this[o[0]] = o[1].call(this, h) : this[o[0]] = o[1] : 3 == o.length ? typeof o[1] !== n || o[1].exec && o[1].test ? this[o[0]] = h ? h.replace(o[1], o[2]) : a : this[o[0]] = h ? o[1].call(this, h, o[2]) : a : 4 == o.length && (this[o[0]] = h ? o[3].call(this, h.replace(o[1], o[2])) : a) : this[o] = h || a;
											u += 2
										}
									},
									str: function(e, t) {
										for (var r in t)
											if (typeof t[r] === i && t[r].length > 0) {
												for (var n = 0; n < t[r].length; n++)
													if (f.has(t[r][n], e)) return "?" === r ? a : r
											} else if (f.has(t[r], e)) return "?" === r ? a : r;
										return e
									}
								},
								b = {
									browser: {
										oldsafari: {
											version: {
												"1.0": "/8",
												1.2: "/1",
												1.3: "/3",
												"2.0": "/412",
												"2.0.2": "/416",
												"2.0.3": "/417",
												"2.0.4": "/419",
												"?": "/"
											}
										}
									},
									device: {
										amazon: {
											model: {
												"Fire Phone": ["SD", "KF"]
											}
										},
										sprint: {
											model: {
												"Evo Shift 4G": "7373KT"
											},
											vendor: {
												HTC: "APA",
												Sprint: "Sprint"
											}
										}
									},
									os: {
										windows: {
											version: {
												ME: "4.90",
												"NT 3.11": "NT3.51",
												"NT 4.0": "NT4.0",
												2e3: "NT 5.0",
												XP: ["NT 5.1", "NT 5.2"],
												Vista: "NT 6.0",
												7: "NT 6.1",
												8: "NT 6.2",
												8.1: "NT 6.3",
												10: ["NT 6.4", "NT 10.0"],
												RT: "ARM"
											}
										}
									}
								},
								P = {
									browser: [
										[/(opera\smini)\/([\w\.-]+)/i, /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i, /(opera).+version\/([\w\.]+)/i, /(opera)[\/\s]+([\w\.]+)/i],
										[p, h],
										[/(opios)[\/\s]+([\w\.]+)/i],
										[
											[p, "Opera Mini"], h
										],
										[/\s(opr)\/([\w\.]+)/i],
										[
											[p, "Opera"], h
										],
										[/(kindle)\/([\w\.]+)/i, /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i, /(avant\s|iemobile|slim)(?:browser)?[\/\s]?([\w\.]*)/i, /(bidubrowser|baidubrowser)[\/\s]?([\w\.]+)/i, /(?:ms|\()(ie)\s([\w\.]+)/i, /(rekonq)\/([\w\.]*)/i, /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon)\/([\w\.-]+)/i],
										[p, h],
										[/(konqueror)\/([\w\.]+)/i],
										[
											[p, "Konqueror"], h
										],
										[/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i],
										[
											[p, "IE"], h
										],
										[/(edge|edgios|edga|edg)\/((\d+)?[\w\.]+)/i],
										[
											[p, "Edge"], h
										],
										[/(yabrowser)\/([\w\.]+)/i],
										[
											[p, "Yandex"], h
										],
										[/(Avast)\/([\w\.]+)/i],
										[
											[p, "Avast Secure Browser"], h
										],
										[/(AVG)\/([\w\.]+)/i],
										[
											[p, "AVG Secure Browser"], h
										],
										[/(puffin)\/([\w\.]+)/i],
										[
											[p, "Puffin"], h
										],
										[/(focus)\/([\w\.]+)/i],
										[
											[p, "Firefox Focus"], h
										],
										[/(opt)\/([\w\.]+)/i],
										[
											[p, "Opera Touch"], h
										],
										[/((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i],
										[
											[p, "UCBrowser"], h
										],
										[/(comodo_dragon)\/([\w\.]+)/i],
										[
											[p, /_/g, " "], h
										],
										[/(windowswechat qbcore)\/([\w\.]+)/i],
										[
											[p, "WeChat(Win) Desktop"], h
										],
										[/(micromessenger)\/([\w\.]+)/i],
										[
											[p, "WeChat"], h
										],
										[/(brave)\/([\w\.]+)/i],
										[
											[p, "Brave"], h
										],
										[/(qqbrowserlite)\/([\w\.]+)/i],
										[p, h],
										[/(QQ)\/([\d\.]+)/i],
										[p, h],
										[/m?(qqbrowser)[\/\s]?([\w\.]+)/i],
										[p, h],
										[/(baiduboxapp)[\/\s]?([\w\.]+)/i],
										[p, h],
										[/(2345Explorer)[\/\s]?([\w\.]+)/i],
										[p, h],
										[/(MetaSr)[\/\s]?([\w\.]+)/i],
										[p],
										[/(LBBROWSER)/i],
										[p],
										[/xiaomi\/miuibrowser\/([\w\.]+)/i],
										[h, [p, "MIUI Browser"]],
										[/;fbav\/([\w\.]+);/i],
										[h, [p, "Facebook"]],
										[/safari\s(line)\/([\w\.]+)/i, /android.+(line)\/([\w\.]+)\/iab/i],
										[p, h],
										[/headlesschrome(?:\/([\w\.]+)|\s)/i],
										[h, [p, "Chrome Headless"]],
										[/\swv\).+(chrome)\/([\w\.]+)/i],
										[
											[p, /(.+)/, "$1 WebView"], h
										],
										[/((?:oculus|samsung)browser)\/([\w\.]+)/i],
										[
											[p, /(.+(?:g|us))(.+)/, "$1 $2"], h
										],
										[/((?:android.+)crmo|crios)\/([\w\.]+)/i, /android.+(chrome)\/([\w\.]+)\s+(?:mobile\s?safari)/i],
										[
											[p, "Chrome Mobile"], h
										],
										[/android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i],
										[h, [p, "Android Browser"]],
										[/(sailfishbrowser)\/([\w\.]+)/i],
										[
											[p, "Sailfish Browser"], h
										],
										[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i],
										[p, h],
										[/(dolfin)\/([\w\.]+)/i],
										[
											[p, "Dolphin"], h
										],
										[/(qihu|qhbrowser|qihoobrowser|360browser)/i],
										[
											[p, "360 Browser"]
										],
										[/(coast)\/([\w\.]+)/i],
										[
											[p, "Opera Coast"], h
										],
										[/fxios\/([\w\.-]+)/i],
										[h, [p, "Firefox"]],
										[/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i],
										[h, [p, "Mobile Safari"]],
										[/version\/([\w\.]+).+?(mobile\s?safari|safari)/i],
										[h, p],
										[/webkit.+?(gsa)\/([\w\.]+).+?(mobile\s?safari|safari)(\/[\w\.]+)/i],
										[
											[p, "GSA"], h
										],
										[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],
										[p, [h, v.str, b.browser.oldsafari.version]],
										[/(webkit|khtml)\/([\w\.]+)/i],
										[p, h],
										[/(navigator|netscape)\/([\w\.-]+)/i],
										[
											[p, "Netscape"], h
										],
										[/(swiftfox)/i, /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i, /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)/i, /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i, /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i, /(links)\s\(([\w\.]+)/i, /(gobrowser)\/?([\w\.]*)/i, /(ice\s?browser)\/v?([\w\._]+)/i, /(mosaic)[\/\s]([\w\.]+)/i],
										[p, h]
									],
									cpu: [
										[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],
										[
											[u, "amd64"]
										],
										[/(ia32(?=;))/i],
										[
											[u, f.lowerize]
										],
										[/((?:i[346]|x)86)[;\)]/i],
										[
											[u, "ia32"]
										],
										[/windows\s(ce|mobile);\sppc;/i],
										[
											[u, "arm"]
										],
										[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],
										[
											[u, /ower/, "", f.lowerize]
										],
										[/(sun4\w)[;\)]/i],
										[
											[u, "sparc"]
										],
										[/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+[;l]))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i],
										[
											[u, f.lowerize]
										]
									],
									device: [
										[/\((ipad|playbook);[\w\s\),;-]+(rim|apple)/i],
										[s, c, [o, l]],
										[/applecoremedia\/[\w\.]+ \((ipad)/],
										[s, [c, "Apple"],
											[o, l]
										],
										[/(apple\s{0,1}tv)/i],
										[
											[s, "Apple TV"],
											[c, "Apple"],
											[o, y]
										],
										[/(archos)\s(gamepad2?)/i, /(hp).+(touchpad)/i, /(hp).+(tablet)/i, /(kindle)\/([\w\.]+)/i, /\s(nook)[\w\s]+build\/(\w+)/i, /(dell)\s(strea[kpr\s\d]*[\dko])/i],
										[c, s, [o, l]],
										[/(kf[A-z]+)\sbuild\/.+silk\//i],
										[s, [c, "Amazon"],
											[o, l]
										],
										[/(sd|kf)[0349hijorstuw]+\sbuild\/.+silk\//i],
										[
											[s, v.str, b.device.amazon.model],
											[c, "Amazon"],
											[o, d]
										],
										[/android.+aft([bms])\sbuild/i],
										[s, [c, "Amazon"],
											[o, y]
										],
										[/\((ip[honed|\s\w*]+);.+(apple)/i],
										[s, c, [o, d]],
										[/\((ip[honed|\s\w*]+);/i],
										[s, [c, "Apple"],
											[o, d]
										],
										[/(blackberry)[\s-]?(\w+)/i, /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i, /(hp)\s([\w\s]+\w)/i, /(asus)-?(\w+)/i],
										[c, s, [o, d]],
										[/\(bb10;\s(\w+)/i],
										[s, [c, "BlackBerry"],
											[o, d]
										],
										[/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone|p00c)/i],
										[s, [c, "Asus"],
											[o, l]
										],
										[/(sony)\s(tablet\s[ps])\sbuild\//i, /(sony)?(?:sgp.+)\sbuild\//i],
										[
											[c, "Sony"],
											[s, "Xperia Tablet"],
											[o, l]
										],
										[/android.+\s([c-g]\d{4}|so[-l]\w+)(?=\sbuild\/|\).+chrome\/(?![1-6]{0,1}\d\.))/i],
										[s, [c, "Sony"],
											[o, d]
										],
										[/\s(ouya)\s/i, /(nintendo)\s([wids3u]+)/i],
										[c, s, [o, m]],
										[/android.+;\s(shield)\sbuild/i],
										[s, [c, "Nvidia"],
											[o, m]
										],
										[/(playstation\s[34portablevi]+)/i],
										[s, [c, "Sony"],
											[o, m]
										],
										[/(sprint\s(\w+))/i],
										[
											[c, v.str, b.device.sprint.vendor],
											[s, v.str, b.device.sprint.model],
											[o, d]
										],
										[/(htc)[;_\s-]+([\w\s]+(?=\)|\sbuild)|\w+)/i, /(zte)-(\w*)/i, /(alcatel|geeksphone|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i],
										[c, [s, /_/g, " "],
											[o, d]
										],
										[/(nexus\s9)/i],
										[s, [c, "HTC"],
											[o, l]
										],
										[/d\/huawei([\w\s-]+)[;\)]/i, /(nexus\s6p|vog-l29|ane-lx1|eml-l29)/i],
										[s, [c, "Huawei"],
											[o, d]
										],
										[/android.+(bah2?-a?[lw]\d{2})/i],
										[s, [c, "Huawei"],
											[o, l]
										],
										[/(microsoft);\s(lumia[\s\w]+)/i],
										[c, s, [o, d]],
										[/[\s\(;](xbox(?:\sone)?)[\s\);]/i],
										[s, [c, "Microsoft"],
											[o, m]
										],
										[/(kin\.[onetw]{3})/i],
										[
											[s, /\./g, " "],
											[c, "Microsoft"],
											[o, d]
										],
										[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)[\w\s]+build\//i, /mot[\s-]?(\w*)/i, /(XT\d{3,4}) build\//i, /(nexus\s6)/i],
										[s, [c, "Motorola"],
											[o, d]
										],
										[/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],
										[s, [c, "Motorola"],
											[o, l]
										],
										[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],
										[
											[c, f.trim],
											[s, f.trim],
											[o, y]
										],
										[/hbbtv.+maple;(\d+)/i],
										[
											[s, /^/, "SmartTV"],
											[c, "Samsung"],
											[o, y]
										],
										[/\(dtv[\);].+(aquos)/i],
										[s, [c, "Sharp"],
											[o, y]
										],
										[/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i, /((SM-T\w+))/i],
										[
											[c, "Samsung"], s, [o, l]
										],
										[/smart-tv.+(samsung)/i],
										[c, [o, y], s],
										[/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i, /(sam[sung]*)[\s-]*(\w+-?[\w-]*)/i, /sec-((sgh\w+))/i],
										[
											[c, "Samsung"], s, [o, d]
										],
										[/sie-(\w*)/i],
										[s, [c, "Siemens"],
											[o, d]
										],
										[/(maemo|nokia).*(n900|lumia\s\d+)/i, /(nokia)[\s_-]?([\w-]*)/i],
										[
											[c, "Nokia"], s, [o, d]
										],
										[/android[x\d\.\s;]+\s([ab][1-7]\-?[0178a]\d\d?)/i],
										[s, [c, "Acer"],
											[o, l]
										],
										[/android.+([vl]k\-?\d{3})\s+build/i],
										[s, [c, "LG"],
											[o, l]
										],
										[/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i],
										[
											[c, "LG"], s, [o, l]
										],
										[/(lg) netcast\.tv/i],
										[c, s, [o, y]],
										[/(nexus\s[45])/i, /lg[e;\s\/-]+(\w*)/i, /android.+lg(\-?[\d\w]+)\s+build/i],
										[s, [c, "LG"],
											[o, d]
										],
										[/(lenovo)\s?(s(?:5000|6000)(?:[\w-]+)|tab(?:[\s\w]+))/i],
										[c, s, [o, l]],
										[/android.+(ideatab[a-z0-9\-\s]+)/i],
										[s, [c, "Lenovo"],
											[o, l]
										],
										[/(lenovo)[_\s-]?([\w-]+)/i],
										[c, s, [o, d]],
										[/linux;.+((jolla));/i],
										[c, s, [o, d]],
										[/((pebble))app\/[\d\.]+\s/i],
										[c, s, [o, g]],
										[/android.+;\s(oppo)\s?([\w\s]+)\sbuild/i],
										[c, s, [o, d]],
										[/crkey/i],
										[
											[s, "Chromecast"],
											[c, "Google"],
											[o, y]
										],
										[/android.+;\s(glass)\s\d/i],
										[s, [c, "Google"],
											[o, g]
										],
										[/android.+;\s(pixel c)[\s)]/i],
										[s, [c, "Google"],
											[o, l]
										],
										[/android.+;\s(pixel( [23])?( xl)?)[\s)]/i],
										[s, [c, "Google"],
											[o, d]
										],
										[/android.+;\s(\w+)\s+build\/hm\1/i, /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i, /android.+(mi[\s\-_]*(?:a\d|one|one[\s_]plus|note lte)?[\s_]*(?:\d?\w?)[\s_]*(?:plus)?)\s+build/i, /android.+(redmi[\s\-_]*(?:note)?(?:[\s_]*[\w\s]+))\s+build/i],
										[
											[s, /_/g, " "],
											[c, "Xiaomi"],
											[o, d]
										],
										[/android.+(mi[\s\-_]*(?:pad)(?:[\s_]*[\w\s]+))\s+build/i],
										[
											[s, /_/g, " "],
											[c, "Xiaomi"],
											[o, l]
										],
										[/android.+;\s(m[1-5]\snote)\sbuild/i],
										[s, [c, "Meizu"],
											[o, d]
										],
										[/(mz)-([\w-]{2,})/i],
										[
											[c, "Meizu"], s, [o, d]
										],
										[/android.+a000(1)\s+build/i, /android.+oneplus\s(a\d{4})[\s)]/i],
										[s, [c, "OnePlus"],
											[o, d]
										],
										[/android.+[;\/]\s*(RCT[\d\w]+)\s+build/i],
										[s, [c, "RCA"],
											[o, l]
										],
										[/android.+[;\/\s]+(Venue[\d\s]{2,7})\s+build/i],
										[s, [c, "Dell"],
											[o, l]
										],
										[/android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i],
										[s, [c, "Verizon"],
											[o, l]
										],
										[/android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(V?.*)\s+build/i],
										[
											[c, "Barnes & Noble"], s, [o, l]
										],
										[/android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i],
										[s, [c, "NuVision"],
											[o, l]
										],
										[/android.+;\s(k88)\sbuild/i],
										[s, [c, "ZTE"],
											[o, l]
										],
										[/android.+[;\/]\s*(gen\d{3})\s+build.*49h/i],
										[s, [c, "Swiss"],
											[o, d]
										],
										[/android.+[;\/]\s*(zur\d{3})\s+build/i],
										[s, [c, "Swiss"],
											[o, l]
										],
										[/android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i],
										[s, [c, "Zeki"],
											[o, l]
										],
										[/(android).+[;\/]\s+([YR]\d{2})\s+build/i, /android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(\w{5})\sbuild/i],
										[
											[c, "Dragon Touch"], s, [o, l]
										],
										[/android.+[;\/]\s*(NS-?\w{0,9})\sbuild/i],
										[s, [c, "Insignia"],
											[o, l]
										],
										[/android.+[;\/]\s*((NX|Next)-?\w{0,9})\s+build/i],
										[s, [c, "NextBook"],
											[o, l]
										],
										[/android.+[;\/]\s*(Xtreme\_)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i],
										[
											[c, "Voice"], s, [o, d]
										],
										[/android.+[;\/]\s*(LVTEL\-)?(V1[12])\s+build/i],
										[
											[c, "LvTel"], s, [o, d]
										],
										[/android.+;\s(PH-1)\s/i],
										[s, [c, "Essential"],
											[o, d]
										],
										[/android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i],
										[s, [c, "Envizen"],
											[o, l]
										],
										[/android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(\w{1,9})\s+build/i],
										[c, s, [o, l]],
										[/android.+[;\/]\s*(Trio[\s\-]*.*)\s+build/i],
										[s, [c, "MachSpeed"],
											[o, l]
										],
										[/android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i],
										[c, s, [o, l]],
										[/android.+[;\/]\s*TU_(1491)\s+build/i],
										[s, [c, "Rotor"],
											[o, l]
										],
										[/android.+(KS(.+))\s+build/i],
										[s, [c, "Amazon"],
											[o, l]
										],
										[/android.+(Gigaset)[\s\-]+(Q\w{1,9})\s+build/i],
										[c, s, [o, l]],
										[/\s(tablet|tab)[;\/]/i, /\s(mobile)(?:[;\/]|\ssafari)/i],
										[
											[o, f.lowerize], c, s
										],
										[/[\s\/\(](smart-?tv)[;\)]/i],
										[
											[o, y]
										],
										[/(android[\w\.\s\-]{0,9});.+build/i],
										[s, [c, "Generic"]]
									],
									engine: [
										[/windows.+\sedge\/([\w\.]+)/i],
										[h, [p, "EdgeHTML"]],
										[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],
										[h, [p, "Blink"]],
										[/(presto)\/([\w\.]+)/i, /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i, /(icab)[\/\s]([23]\.[\d\.]+)/i],
										[p, h],
										[/rv\:([\w\.]{1,9}).+(gecko)/i],
										[h, p]
									],
									os: [
										[/microsoft\s(windows)\s(vista|xp)/i],
										[p, h],
										[/(windows)\snt\s6\.2;\s(arm)/i, /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i, /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],
										[
											[p, v.str, b.os.windows.name],
											[h, v.str, b.os.windows.version]
										],
										[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],
										[
											[p, "Windows"],
											[h, v.str, b.os.windows.version]
										],
										[/\((bb)(10);/i],
										[
											[p, "BlackBerry"], h
										],
										[/(blackberry)\w*\/?([\w\.]*)/i, /(tizen|kaios)[\/\s]([\w\.]+)/i, /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|sailfish|contiki)[\/\s-]?([\w\.]*)/i],
										[p, h],
										[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i],
										[
											[p, "Symbian"], h
										],
										[/\((series40);/i],
										[p],
										[/mozilla.+\(mobile;.+gecko.+firefox/i],
										[
											[p, "Firefox OS"], h
										],
										[/(nintendo|playstation)\s([wids34portablevu]+)/i, /(mint)[\/\s\(]?(\w*)/i, /(mageia|vectorlinux)[;\s]/i, /(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]*)/i, /(hurd|linux)\s?([\w\.]*)/i, /(gnu)\s?([\w\.]*)/i],
										[
											[p, "Linux"], h
										],
										[/(cros)\s[\w]+\s([\w\.]+\w)/i],
										[
											[p, "Chromium OS"], h
										],
										[/(sunos)\s?([\w\.\d]*)/i],
										[
											[p, "Solaris"], h
										],
										[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]*)/i],
										[
											[p, "Linux"], h
										],
										[/(iphone)(?:.*os\s*([\w]*)\slike\smac|;\sopera)/i],
										[
											[p, "iPhone"],
											[h, /_/g, "."]
										],
										[/(ipad)(?:.*os\s*([\w]*)\slike\smac|;\sopera)/i],
										[
											[p, "iPad"],
											[h, /_/g, "."]
										],
										[/(haiku)\s(\w+)/i],
										[p, h],
										[/cfnetwork\/.+darwin/i, /ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i],
										[
											[h, /_/g, "."],
											[p, "iOS"]
										],
										[/(mac\sos\sx)\s?([\w\s\.]*)/i, /(macintosh|mac(?=_powerpc)\s)/i],
										[
											[p, "Mac"],
											[h, /_/g, "."]
										],
										[/((?:open)?solaris)[\/\s-]?([\w\.]*)/i, /(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i, /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms|fuchsia)/i, /(unix)\s?([\w\.]*)/i],
										[p, h]
									]
								},
								S = function e(t, n) {
									if ("object" === typeof t && (n = t, t = a), !(this instanceof e)) return new e(t, n).getResult();
									var i = t || (r && r.navigator && r.navigator.userAgent ? r.navigator.userAgent : ""),
										s = n ? f.extend(P, n) : P;
									return this.getBrowser = function() {
										var e = {
											name: a,
											version: a
										};
										return v.rgx.call(e, i, s.browser), e.major = f.major(e.version), e
									}, this.getCPU = function() {
										var e = {
											architecture: a
										};
										return v.rgx.call(e, i, s.cpu), e
									}, this.getDevice = function() {
										var e = {
											vendor: a,
											model: a,
											type: a
										};
										return v.rgx.call(e, i, s.device), e
									}, this.getEngine = function() {
										var e = {
											name: a,
											version: a
										};
										return v.rgx.call(e, i, s.engine), e
									}, this.getOS = function() {
										var e = {
											name: a,
											version: a
										};
										return v.rgx.call(e, i, s.os), e
									}, this.getResult = function() {
										return {
											ua: this.getUA(),
											browser: this.getBrowser(),
											engine: this.getEngine(),
											os: this.getOS(),
											device: this.getDevice(),
											cpu: this.getCPU()
										}
									}, this.getUA = function() {
										return i
									}, this.setUA = function(e) {
										return i = e, this
									}, this
								};
							S.VERSION = "0.7.21", S.BROWSER = {
								NAME: p,
								MAJOR: "major",
								VERSION: h
							}, S.CPU = {
								ARCHITECTURE: u
							}, S.DEVICE = {
								MODEL: s,
								VENDOR: c,
								TYPE: o,
								CONSOLE: m,
								MOBILE: d,
								SMARTTV: y,
								TABLET: l,
								WEARABLE: g,
								EMBEDDED: "embedded"
							}, S.ENGINE = {
								NAME: p,
								VERSION: h
							}, S.OS = {
								NAME: p,
								VERSION: h
							}, e.exports && (t = e.exports = S), t.UAParser = S;
							var w = r && (r.jQuery || r.Zepto);
							if (w && !w.ua) {
								var k = new S;
								w.ua = k.getResult(), w.ua.get = function() {
									return k.getUA()
								}, w.ua.set = function(e) {
									k.setUA(e);
									var t = k.getResult();
									for (var r in t) w.ua[r] = t[r]
								}
							}
						}("object" === typeof window ? window : Ce)
					})),
					Je = (Ye.UAParser, "7.4.2"),
					Xe = {
						apiEndpoint: "api.amplitude.com",
						batchEvents: !1,
						cookieExpiration: 365,
						cookieName: "amplitude_id",
						sameSiteCookie: "Lax",
						cookieForceUpgrade: !1,
						deferInitialization: !1,
						disableCookies: !1,
						deviceIdFromUrlParam: !1,
						domain: "",
						eventUploadPeriodMillis: 3e4,
						eventUploadThreshold: 30,
						forceHttps: !0,
						includeFbclid: !1,
						includeGclid: !1,
						includeReferrer: !1,
						includeUtm: !1,
						language: navigator && (navigator.languages && navigator.languages[0] || navigator.language || navigator.userLanguage) || "",
						logLevel: "WARN",
						logAttributionCapturedEvent: !1,
						optOut: !1,
						onError: function() {},
						platform: "Web",
						savedMaxCount: 1e3,
						saveEvents: !0,
						saveParamsReferrerOncePerSession: !0,
						secureCookie: !1,
						sessionTimeout: 18e5,
						storage: I,
						trackingOptions: {
							city: !0,
							country: !0,
							carrier: !0,
							device_manufacturer: !0,
							device_model: !0,
							dma: !0,
							ip_address: !0,
							language: !0,
							os_name: !0,
							os_version: !0,
							platform: !0,
							region: !0,
							version_name: !0
						},
						unsetParamsReferrerOnNewSession: !1,
						unsentKey: "amplitude_unsent",
						unsentIdentifyKey: "amplitude_unsent_identify",
						uploadBatchSize: 100
					},
					Ze = function(e) {
						u() || ie.warn("amplitude-js will not work in a non-browser environment. If you are planning to add Amplitude to a node environment, please use @amplitude/node"), this._instanceName = se(e) ? f : e.toLowerCase(), this._unsentEvents = [], this._unsentIdentifys = [], this._ua = new Ye(navigator.userAgent).getResult(), this.options = s({}, Xe, {
							trackingOptions: s({}, Xe.trackingOptions)
						}), this.cookieStorage = (new Oe).getStorage(), this._q = [], this._sending = !1, this._updateScheduled = !1, this._onInit = [], this._eventId = 0, this._identifyId = 0, this._lastEventTime = null, this._newSession = !1, this._sequenceNumber = 0, this._sessionId = null, this._isInitialized = !1, this._userAgent = navigator && navigator.userAgent || null
					};
				Ze.prototype.Identify = Fe, Ze.prototype.Revenue = Ke, Ze.prototype.init = function(e, t, r, a) {
					var n = this;
					if ("string" !== G(e) || se(e)) ie.error("Invalid apiKey. Please re-initialize with a valid apiKey");
					else try {
						tt(this.options, r), u() && void 0 !== window.Prototype && Array.prototype.toJSON && (function() {
							var e;
							if (u()) {
								var t = window,
									r = Array;
								if (void 0 !== t.Prototype && void 0 !== (null === (e = r.prototype) || void 0 === e ? void 0 : e.toJSON)) delete r.prototype.toJSON
							}
						}(), ie.warn("Prototype.js injected Array.prototype.toJSON. Deleting Array.prototype.toJSON to prevent double-stringify")), this.options.cookieName !== Xe.cookieName && ie.warn("The cookieName option is deprecated. We will be ignoring it for newer cookies"), this.options.apiKey = e, this._storageSuffix = "_" + e + (this._instanceName === f ? "" : "_" + this._instanceName), this._storageSuffixV5 = e.slice(0, 6), this._oldCookiename = this.options.cookieName + this._storageSuffix, this._unsentKey = this.options.unsentKey + this._storageSuffix, this._unsentIdentifyKey = this.options.unsentIdentifyKey + this._storageSuffix, this._cookieName = _ + "_" + this._storageSuffixV5, this.cookieStorage.options({
							expirationDays: this.options.cookieExpiration,
							domain: this.options.domain,
							secure: this.options.secureCookie,
							sameSite: this.options.sameSiteCookie
						}), this._metadataStorage = new Te({
							storageKey: this._cookieName,
							disableCookies: this.options.disableCookies,
							expirationDays: this.options.cookieExpiration,
							domain: this.options.domain,
							secure: this.options.secureCookie,
							sameSite: this.options.sameSiteCookie,
							storage: this.options.storage
						});
						var i = !!this.cookieStorage.get(this._oldCookiename),
							s = !!this._metadataStorage.load();
						this._useOldCookie = !s && i && !this.options.cookieForceUpgrade;
						var p = s || i;
						if (this.options.domain = this.cookieStorage.options().domain, this.options.deferInitialization && !p) return void this._deferInitialization(e, t, r, a);
						"string" === G(this.options.logLevel) && ne(this.options.logLevel);
						var o = ct(this);
						this._apiPropertiesTrackingOptions = Object.keys(o).length > 0 ? {
							tracking_options: o
						} : {}, this.options.cookieForceUpgrade && i && (s || at(this), this.cookieStorage.remove(this._oldCookiename)), rt(this), this._pendingReadStorage = !0;
						var c = function(e) {
							n.options.deviceId = n._getInitialDeviceId(r && r.deviceId, e), n.options.userId = "string" === G(t) && !se(t) && t || "number" === G(t) && t.toString() || n.options.userId || null;
							var a = (new Date).getTime();
							(!n._sessionId || !n._lastEventTime || a - n._lastEventTime > n.options.sessionTimeout) && (n.options.unsetParamsReferrerOnNewSession && n._unsetUTMParams(), n._newSession = !0, n._sessionId = a, n.options.saveParamsReferrerOncePerSession && n._trackParamsAndReferrer()), n.options.saveParamsReferrerOncePerSession || n._trackParamsAndReferrer(), n.options.saveEvents && (et(n._unsentEvents), et(n._unsentIdentifys)), n._lastEventTime = a, it(n), n._pendingReadStorage = !1, n._sendEventsIfReady();
							for (var i = 0; i < n._onInit.length; i++) n._onInit[i](n);
							n._onInit = [], n._isInitialized = !0
						};
						this.options.saveEvents && (this._unsentEvents = this._loadSavedUnsentEvents(this.options.unsentKey).map((function(e) {
							return {
								event: e
							}
						})).concat(this._unsentEvents), this._unsentIdentifys = this._loadSavedUnsentEvents(this.options.unsentIdentifyKey).map((function(e) {
							return {
								event: e
							}
						})).concat(this._unsentIdentifys)), c(), this.runQueuedFunctions(), "function" === G(a) && a(this)
					} catch (h) {
						ie.error(h), this.options.onError(h)
					}
				}, Ze.prototype.deleteLowerLevelDomainCookies = function() {
					var e = be(),
						t = this.options.domain && "." === this.options.domain[0] ? this.options.domain.slice(1) : this.options.domain;
					if (t && e !== t && new RegExp(t + "$").test(e)) {
						for (var r = e.split("."), a = t.split("."), n = r.length; n > a.length; --n) {
							var i = r.slice(r.length - n).join(".");
							ge(this._cookieName, null, {
								domain: "." + i
							})
						}
						ge(this._cookieName, null, {})
					}
				}, Ze.prototype._getInitialDeviceId = function(e, t) {
					if (e) return e;
					if (this.options.deviceIdFromUrlParam) {
						var r = this._getDeviceIdFromUrlParam(this._getUrlParams());
						if (r) return r
					}
					return this.options.deviceId ? this.options.deviceId : t || de()
				};
				var et = function(e) {
					for (var t = 0; t < e.length; t++) {
						var r = e[t].event.user_properties,
							a = e[t].event.event_properties,
							n = e[t].event.groups;
						e[t].event.user_properties = ue(r), e[t].event.event_properties = ue(a), e[t].event.groups = ce(n)
					}
				};
				Ze.prototype._migrateUnsentEvents = function(e) {
					var t = this;
					Promise.all([Qe.getItem(this.options.unsentKey), Qe.getItem(this.options.unsentIdentifyKey)]).then((function(e) {
						if (t.options.saveEvents) {
							var r = e[0],
								a = e[1],
								n = [],
								i = [];
							r && (n.push(Qe.setItem(t.options.unsentKey + t._storageSuffix, JSON.stringify(r))), i.push(Qe.removeItem(t.options.unsentKey))), a && (n.push(Qe.setItem(t.options.unsentIdentifyKey + t._storageSuffix, JSON.stringify(a))), i.push(Qe.removeItem(t.options.unsentIdentifyKey))), n.length > 0 && Promise.all(n).then((function() {})).catch((function(e) {
								t.options.onError(e)
							}))
						}
					})).then(e).catch((function(e) {
						t.options.onError(e)
					}))
				}, Ze.prototype._trackParamsAndReferrer = function() {
					var e, t, r, a;
					if (this.options.includeUtm && (e = this._initUtmData()), this.options.includeReferrer && (t = this._saveReferrer(this._getReferrer())), this.options.includeGclid && (r = this._saveGclid(this._getUrlParams())), this.options.includeFbclid && (a = this._saveFbclid(this._getUrlParams())), this.options.logAttributionCapturedEvent) {
						var n = s({}, e, t, r, a);
						Object.keys(n).length > 0 && this.logEvent(z, n)
					}
				};
				var tt = function e(t, r) {
					if ("object" === G(r)) {
						var a = function(a) {
							if (Object.prototype.hasOwnProperty.call(t, a)) {
								var n = r[a],
									i = G(t[a]);
								he(n, a + " option", i) && ("boolean" === i ? t[a] = !!n : "string" === i && !se(n) || "number" === i && n > 0 ? t[a] = n : "object" === i && e(t[a], n))
							}
						};
						for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && a(n)
					}
				};
				Ze.prototype.runQueuedFunctions = function() {
					var e = this._q;
					this._q = [];
					for (var t = 0; t < e.length; t++) {
						var r = this[e[t][0]];
						"function" === G(r) && r.apply(this, e[t].slice(1))
					}
				}, Ze.prototype._apiKeySet = function(e) {
					return !se(this.options.apiKey) || (ie.error("Invalid apiKey. Please set a valid apiKey with init() before calling " + e), !1)
				}, Ze.prototype._loadSavedUnsentEvents = function(e) {
					var t = this._getFromStorage(Ne, e),
						r = this._parseSavedUnsentEventsString(t, e);
					return this._setInStorage(Ne, e, JSON.stringify(r)), r
				}, Ze.prototype._parseSavedUnsentEventsString = function(e, t) {
					if (se(e)) return [];
					if ("string" === G(e)) try {
						var r = JSON.parse(e);
						if ("array" === G(r)) return r
					} catch (gt) {}
					return ie.error("Unable to load " + t + " events. Restart with a new empty queue."), []
				}, Ze.prototype.isNewSession = function() {
					return this._newSession
				}, Ze.prototype.onInit = function(e) {
					this._isInitialized ? e(this) : this._onInit.push(e)
				}, Ze.prototype.getSessionId = function() {
					return this._sessionId
				}, Ze.prototype.nextEventId = function() {
					return this._eventId++, this._eventId
				}, Ze.prototype.nextIdentifyId = function() {
					return this._identifyId++, this._identifyId
				}, Ze.prototype.nextSequenceNumber = function() {
					return this._sequenceNumber++, this._sequenceNumber
				}, Ze.prototype._unsentCount = function() {
					return this._unsentEvents.length + this._unsentIdentifys.length
				}, Ze.prototype._sendEventsIfReady = function() {
					return 0 !== this._unsentCount() && (this.options.batchEvents ? this._unsentCount() >= this.options.eventUploadThreshold ? (this.sendEvents(), !0) : (this._updateScheduled || (this._updateScheduled = !0, setTimeout(function() {
						this._updateScheduled = !1, this.sendEvents()
					}.bind(this), this.options.eventUploadPeriodMillis)), !1) : (this.sendEvents(), !0))
				}, Ze.prototype._getFromStorage = function(e, t) {
					return e.getItem(t + this._storageSuffix)
				}, Ze.prototype._setInStorage = function(e, t, r) {
					e.setItem(t + this._storageSuffix, r)
				};
				var rt = function(e) {
						if (e._useOldCookie) {
							var t = e.cookieStorage.get(e._oldCookiename);
							"object" !== G(t) || nt(e, t)
						} else {
							var r = e._metadataStorage.load();
							"object" === G(r) && nt(e, r)
						}
					},
					at = function(e) {
						var t = e.cookieStorage.get(e._oldCookiename);
						"object" === G(t) && (nt(e, t), it(e))
					},
					nt = function(e, t) {
						t.deviceId && (e.options.deviceId = t.deviceId), t.userId && (e.options.userId = t.userId), null !== t.optOut && void 0 !== t.optOut && !1 !== t.optOut && (e.options.optOut = t.optOut), t.sessionId && (e._sessionId = parseInt(t.sessionId, 10)), t.lastEventTime && (e._lastEventTime = parseInt(t.lastEventTime, 10)), t.eventId && (e._eventId = parseInt(t.eventId, 10)), t.identifyId && (e._identifyId = parseInt(t.identifyId, 10)), t.sequenceNumber && (e._sequenceNumber = parseInt(t.sequenceNumber, 10))
					},
					it = function(e) {
						var t = {
							deviceId: e.options.deviceId,
							userId: e.options.userId,
							optOut: e.options.optOut,
							sessionId: e._sessionId,
							lastEventTime: e._lastEventTime,
							eventId: e._eventId,
							identifyId: e._identifyId,
							sequenceNumber: e._sequenceNumber
						};
						e._useOldCookie ? e.cookieStorage.set(e.options.cookieName + e._storageSuffix, t) : e._metadataStorage.save(t)
					};
				Ze.prototype._initUtmData = function(e, t) {
					e = e || this._getUrlParams();
					var r = function(e, t) {
						var r = e ? "?" + e.split(".").slice(-1)[0].replace(/\|/g, "&") : "",
							a = function(e, t, r, a) {
								return pe(e, t) || pe(r, a)
							},
							n = a(A, t, "utmcsr", r),
							i = a(H, t, "utmcmd", r),
							s = a(R, t, "utmccn", r),
							p = a(M, t, "utmctr", r),
							o = a($, t, "utmcct", r),
							c = {},
							h = function(e, t) {
								se(t) || (c[e] = t)
							};
						return h(A, n), h(H, i), h(R, s), h(M, p), h($, o), c
					}(t = t || this.cookieStorage.get("__utmz"), e);
					return st(this, r), r
				}, Ze.prototype._unsetUTMParams = function() {
					var e = new Fe;
					e.unset(C), e.unset(A), e.unset(H), e.unset(R), e.unset(M), e.unset($), this.identify(e)
				};
				var st = function(e, t) {
					if ("object" === G(t) && 0 !== Object.keys(t).length) {
						var r = new Fe;
						for (var a in t) Object.prototype.hasOwnProperty.call(t, a) && (r.setOnce("initial_" + a, t[a]), r.set(a, t[a]));
						e.identify(r)
					}
				};
				Ze.prototype._getReferrer = function() {
					return document.referrer
				}, Ze.prototype._getUrlParams = function() {
					return location.search
				}, Ze.prototype._saveGclid = function(e) {
					var t = pe("gclid", e);
					if (!se(t)) {
						var r = {
							gclid: t
						};
						return st(this, r), r
					}
				}, Ze.prototype._saveFbclid = function(e) {
					var t = pe("fbclid", e);
					if (!se(t)) {
						var r = {
							fbclid: t
						};
						return st(this, r), r
					}
				}, Ze.prototype._getDeviceIdFromUrlParam = function(e) {
					return pe(F, e)
				}, Ze.prototype._getReferringDomain = function(e) {
					if (se(e)) return null;
					var t = e.split("/");
					return t.length >= 3 ? t[2] : null
				}, Ze.prototype._saveReferrer = function(e) {
					if (!se(e)) {
						var t = {
							referrer: e,
							referring_domain: this._getReferringDomain(e)
						};
						return st(this, t), t
					}
				}, Ze.prototype.saveEvents = function() {
					try {
						var e = JSON.stringify(this._unsentEvents.map((function(e) {
							return e.event
						})));
						this._setInStorage(Ne, this.options.unsentKey, e)
					} catch (gt) {}
					try {
						var t = JSON.stringify(this._unsentIdentifys.map((function(e) {
							return e.event
						})));
						this._setInStorage(Ne, this.options.unsentIdentifyKey, t)
					} catch (gt) {}
				}, Ze.prototype.setDomain = function(e) {
					if (this._shouldDeferCall()) return this._q.push(["setDomain"].concat(Array.prototype.slice.call(arguments, 0)));
					if (he(e, "domain", "string")) try {
						this.cookieStorage.options({
							expirationDays: this.options.cookieExpiration,
							secure: this.options.secureCookie,
							domain: e,
							sameSite: this.options.sameSiteCookie
						}), this.options.domain = this.cookieStorage.options().domain, rt(this), it(this)
					} catch (gt) {
						ie.error(gt)
					}
				}, Ze.prototype.setUserId = function(e) {
					if (this._shouldDeferCall()) return this._q.push(["setUserId"].concat(Array.prototype.slice.call(arguments, 0)));
					try {
						this.options.userId = void 0 !== e && null !== e && "" + e || null, it(this)
					} catch (gt) {
						ie.error(gt)
					}
				}, Ze.prototype.setGroup = function(e, t) {
					if (this._shouldDeferCall()) return this._q.push(["setGroup"].concat(Array.prototype.slice.call(arguments, 0)));
					if (this._apiKeySet("setGroup()") && he(e, "groupType", "string") && !se(e)) {
						var r = {};
						r[e] = t;
						var a = (new Fe).set(e, t);
						this._logEvent(S, null, null, a.userPropertiesOperations, r, null, null, null)
					}
				}, Ze.prototype.setOptOut = function(e) {
					if (this._shouldDeferCall()) return this._q.push(["setOptOut"].concat(Array.prototype.slice.call(arguments, 0)));
					if (he(e, "enable", "boolean")) try {
						this.options.optOut = e, it(this)
					} catch (gt) {
						ie.error(gt)
					}
				}, Ze.prototype.setSessionId = function(e) {
					if (he(e, "sessionId", "number")) try {
						this._sessionId = e, it(this)
					} catch (gt) {
						ie.error(gt)
					}
				}, Ze.prototype.resetSessionId = function() {
					this.setSessionId((new Date).getTime())
				}, Ze.prototype.regenerateDeviceId = function() {
					if (this._shouldDeferCall()) return this._q.push(["regenerateDeviceId"].concat(Array.prototype.slice.call(arguments, 0)));
					this.setDeviceId(de())
				}, Ze.prototype.setDeviceId = function(e) {
					if (this._shouldDeferCall()) return this._q.push(["setDeviceId"].concat(Array.prototype.slice.call(arguments, 0)));
					if (he(e, "deviceId", "string")) try {
						se(e) || (this.options.deviceId = "" + e, it(this))
					} catch (gt) {
						ie.error(gt)
					}
				}, Ze.prototype.setUserProperties = function(e) {
					if (this._shouldDeferCall()) return this._q.push(["setUserProperties"].concat(Array.prototype.slice.call(arguments, 0)));
					if (this._apiKeySet("setUserProperties()") && he(e, "userProperties", "object")) {
						var t = oe(ue(e));
						if (0 !== Object.keys(t).length) {
							var r = new Fe;
							for (var a in t) Object.prototype.hasOwnProperty.call(t, a) && r.set(a, t[a]);
							this.identify(r)
						}
					}
				}, Ze.prototype.clearUserProperties = function() {
					if (this._shouldDeferCall()) return this._q.push(["clearUserProperties"].concat(Array.prototype.slice.call(arguments, 0)));
					if (this._apiKeySet("clearUserProperties()")) {
						var e = new Fe;
						e.clearAll(), this.identify(e)
					}
				};
				var pt = function(e, t) {
					for (var r = 0; r < t._q.length; r++) {
						var a = e[t._q[r][0]];
						"function" === G(a) && a.apply(e, t._q[r].slice(1))
					}
					return e
				};
				Ze.prototype.identify = function(e, t) {
					if (this._shouldDeferCall()) return this._q.push(["identify"].concat(Array.prototype.slice.call(arguments, 0)));
					if (this._apiKeySet("identify()"))
						if (Object.prototype.hasOwnProperty.call(e, "_q") && (e = pt(new Fe, e)), e instanceof Fe) {
							if (Object.keys(e.userPropertiesOperations).length > 0) return this._logEvent(S, null, null, e.userPropertiesOperations, null, null, null, t);
							"function" === G(t) && t(0, "No request sent", {
								reason: "No user property operations"
							})
						} else ie.error("Invalid identify input type. Expected Identify object but saw " + G(e)), "function" === G(t) && t(0, "No request sent", {
							reason: "Invalid identify input type"
						});
					else "function" === G(t) && t(0, "No request sent", {
						reason: "API key is not set"
					})
				}, Ze.prototype.groupIdentify = function(e, t, r, a) {
					if (this._shouldDeferCall()) return this._q.push(["groupIdentify"].concat(Array.prototype.slice.call(arguments, 0)));
					if (this._apiKeySet("groupIdentify()"))
						if (he(e, "group_type", "string") && !se(e))
							if (null !== t && void 0 !== t)
								if (Object.prototype.hasOwnProperty.call(r, "_q") && (r = pt(new Fe, r)), r instanceof Fe) {
									if (Object.keys(r.userPropertiesOperations).length > 0) return this._logEvent(w, null, null, null, i({}, e, t), r.userPropertiesOperations, null, a);
									"function" === G(a) && a(0, "No request sent", {
										reason: "No group property operations"
									})
								} else ie.error("Invalid identify input type. Expected Identify object but saw " + G(r)), "function" === G(a) && a(0, "No request sent", {
									reason: "Invalid identify input type"
								});
					else "function" === G(a) && a(0, "No request sent", {
						reason: "Invalid group name"
					});
					else "function" === G(a) && a(0, "No request sent", {
						reason: "Invalid group type"
					});
					else "function" === G(a) && a(0, "No request sent", {
						reason: "API key is not set"
					})
				}, Ze.prototype.setVersionName = function(e) {
					if (this._shouldDeferCall()) return this._q.push(["setVersionName"].concat(Array.prototype.slice.call(arguments, 0)));
					he(e, "versionName", "string") && (this.options.versionName = e)
				}, Ze.prototype._logEvent = function(e, t, r, a, n, i, p, o) {
					if (rt(this), e)
						if (this.options.optOut) "function" === G(o) && o(0, "No request sent", {
							reason: "optOut is set to true"
						});
						else try {
							var c;
							c = e === S || e === w ? this.nextIdentifyId() : this.nextEventId();
							var h = this.nextSequenceNumber(),
								u = "number" === G(p) ? p : (new Date).getTime();
							(!this._sessionId || !this._lastEventTime || u - this._lastEventTime > this.options.sessionTimeout) && (this._sessionId = u), this._lastEventTime = u, it(this);
							var m = this._ua.browser.name,
								d = this._ua.browser.major,
								l = this._ua.os.name;
							a = a || {};
							var y = s({}, this._apiPropertiesTrackingOptions);
							r = s({}, r || {}, y), t = t || {}, n = n || {}, i = i || {};
							var g = {
								device_id: this.options.deviceId,
								user_id: this.options.userId,
								timestamp: u,
								event_id: c,
								session_id: this._sessionId || -1,
								event_type: e,
								version_name: ot(this, "version_name") && this.options.versionName || null,
								platform: ot(this, "platform") ? this.options.platform : null,
								os_name: ot(this, "os_name") && m || null,
								os_version: ot(this, "os_version") && d || null,
								device_model: ot(this, "device_model") && l || null,
								device_manufacturer: (ot(this, "device_manufacturer"), null),
								language: ot(this, "language") ? this.options.language : null,
								carrier: (ot(this, "carrier"), null),
								api_properties: r,
								event_properties: oe(ue(t)),
								user_properties: oe(ue(a)),
								uuid: (Ye.UAParser, function e(t) {
									return t ? (t ^ 16 * Math.random() >> t / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, e)
								})(),
								library: {
									name: "amplitude-js",
									version: Je
								},
								sequence_number: h,
								groups: oe(ce(n)),
								group_properties: oe(ue(i)),
								user_agent: this._userAgent
							};
							return e === S || e === w ? (this._unsentIdentifys.push({
								event: g,
								callback: o
							}), this._limitEventsQueued(this._unsentIdentifys)) : (this._unsentEvents.push({
								event: g,
								callback: o
							}), this._limitEventsQueued(this._unsentEvents)), this.options.saveEvents && this.saveEvents(), this._sendEventsIfReady(o), c
						} catch (gt) {
							ie.error(gt)
						} else "function" === G(o) && o(0, "No request sent", {
							reason: "Missing eventType"
						})
				};
				var ot = function(e, t) {
						return !!e.options.trackingOptions[t]
					},
					ct = function(e) {
						for (var t = ["city", "country", "dma", "ip_address", "region"], r = {}, a = 0; a < t.length; a++) {
							var n = t[a];
							ot(e, n) || (r[n] = !1)
						}
						return r
					};
				Ze.prototype._limitEventsQueued = function(e) {
					e.length > this.options.savedMaxCount && e.splice(0, e.length - this.options.savedMaxCount).forEach((function(e) {
						"function" === G(e.callback) && e.callback(0, "No request sent", {
							reason: "Event dropped because options.savedMaxCount exceeded. User may be offline or have a content blocker"
						})
					}))
				}, Ze.prototype.logEvent = function(e, t, r) {
					return this._shouldDeferCall() ? this._q.push(["logEvent"].concat(Array.prototype.slice.call(arguments, 0))) : this.logEventWithTimestamp(e, t, null, r)
				}, Ze.prototype.logEventWithTimestamp = function(e, t, r, a) {
					return this._shouldDeferCall() ? this._q.push(["logEventWithTimestamp"].concat(Array.prototype.slice.call(arguments, 0))) : this._apiKeySet("logEvent()") ? he(e, "eventType", "string") ? se(e) ? ("function" === G(a) && a(0, "No request sent", {
						reason: "Missing eventType"
					}), -1) : this._logEvent(e, t, null, null, null, null, r, a) : ("function" === G(a) && a(0, "No request sent", {
						reason: "Invalid type for eventType"
					}), -1) : ("function" === G(a) && a(0, "No request sent", {
						reason: "API key not set"
					}), -1)
				}, Ze.prototype.logEventWithGroups = function(e, t, r, a) {
					return this._shouldDeferCall() ? this._q.push(["logEventWithGroups"].concat(Array.prototype.slice.call(arguments, 0))) : this._apiKeySet("logEventWithGroups()") ? he(e, "eventType", "string") ? this._logEvent(e, t, null, null, r, null, null, a) : ("function" === G(a) && a(0, "No request sent", {
						reason: "Invalid type for eventType"
					}), -1) : ("function" === G(a) && a(0, "No request sent", {
						reason: "API key not set"
					}), -1)
				};
				var ht = function(e) {
					return !isNaN(parseFloat(e)) && isFinite(e)
				};
				Ze.prototype.logRevenueV2 = function(e) {
					if (this._shouldDeferCall()) return this._q.push(["logRevenueV2"].concat(Array.prototype.slice.call(arguments, 0)));
					if (this._apiKeySet("logRevenueV2()"))
						if (Object.prototype.hasOwnProperty.call(e, "_q") && (e = pt(new Ke, e)), e instanceof Ke) {
							if (e && e._isValidRevenue()) return this.logEvent(N, e._toJSONObject())
						} else ie.error("Invalid revenue input type. Expected Revenue object but saw " + G(e))
				}, Ze.prototype.logRevenue = function(e, t, r) {
					return this._shouldDeferCall() ? this._q.push(["logRevenue"].concat(Array.prototype.slice.call(arguments, 0))) : this._apiKeySet("logRevenue()") && ht(e) && (void 0 === t || ht(t)) ? this._logEvent(N, {}, {
						productId: r,
						special: "revenue_amount",
						quantity: t || 1,
						price: e
					}, null, null, null, null, null) : -1
				}, Ze.prototype.removeEvents = function(e, t, r, a) {
					ut(this, "_unsentEvents", e, r, a), ut(this, "_unsentIdentifys", t, r, a)
				};
				var ut = function(e, t, r, a, n) {
					if (!(r < 0)) {
						for (var i = [], s = 0; s < e[t].length; s++) {
							var p = e[t][s];
							p.event.event_id > r ? i.push(p) : p.callback && p.callback(a, n)
						}
						e[t] = i
					}
				};
				Ze.prototype.sendEvents = function() {
					if (this._apiKeySet("sendEvents()")) {
						if (this.options.optOut) this.removeEvents(1 / 0, 1 / 0, 0, "No request sent", {
							reason: "Opt out is set to true"
						});
						else if (0 !== this._unsentCount() && !this._sending) {
							this._sending = !0;
							var e = (this.options.forceHttps || "https:" === window.location.protocol ? "https" : "http") + "://" + this.options.apiEndpoint,
								t = Math.min(this._unsentCount(), this.options.uploadBatchSize),
								r = this._mergeEventsAndIdentifys(t),
								a = r.maxEventId,
								n = r.maxIdentifyId,
								i = JSON.stringify(r.eventsToSend.map((function(e) {
									return e.event
								}))),
								s = (new Date).getTime(),
								p = {
									client: this.options.apiKey,
									e: i,
									v: v,
									upload_time: s,
									checksum: He(v + this.options.apiKey + i + s)
								},
								o = this;
							new Ge(e, p).send((function(e, r) {
								o._sending = !1;
								try {
									200 === e && "success" === r ? (o.removeEvents(a, n, e, r), o.options.saveEvents && o.saveEvents(), o._sendEventsIfReady()) : 413 === e && (1 === o.options.uploadBatchSize && o.removeEvents(a, n, e, r), o.options.uploadBatchSize = Math.ceil(t / 2), o.sendEvents())
								} catch (gt) {}
							}))
						}
					} else this.removeEvents(1 / 0, 1 / 0, 0, "No request sent", {
						reason: "API key not set"
					})
				}, Ze.prototype._mergeEventsAndIdentifys = function(e) {
					for (var t = [], r = 0, a = -1, n = 0, i = -1; t.length < e;) {
						var s = void 0,
							p = n >= this._unsentIdentifys.length,
							o = r >= this._unsentEvents.length;
						if (o && p) {
							ie.error("Merging Events and Identifys, less events and identifys than expected");
							break
						}
						p ? a = (s = this._unsentEvents[r++]).event.event_id : o ? i = (s = this._unsentIdentifys[n++]).event.event_id : !("sequence_number" in this._unsentEvents[r].event) || this._unsentEvents[r].event.sequence_number < this._unsentIdentifys[n].event.sequence_number ? a = (s = this._unsentEvents[r++]).event.event_id : i = (s = this._unsentIdentifys[n++]).event.event_id, t.push(s)
					}
					return {
						eventsToSend: t,
						maxEventId: a,
						maxIdentifyId: i
					}
				}, Ze.prototype.setGlobalUserProperties = function(e) {
					this.setUserProperties(e)
				}, Ze.prototype.__VERSION__ = Je, Ze.prototype._shouldDeferCall = function() {
					return this._pendingReadStorage || this._initializationDeferred
				}, Ze.prototype._deferInitialization = function() {
					this._initializationDeferred = !0, this._q.push(["init"].concat(Array.prototype.slice.call(arguments, 0)))
				}, Ze.prototype.enableTracking = function() {
					this._initializationDeferred = !1, it(this), this.runQueuedFunctions()
				};
				var mt = function() {
					this.options = s({}, Xe), this._q = [], this._instances = {}
				};
				mt.prototype.Identify = Fe, mt.prototype.Revenue = Ke, mt.prototype.getInstance = function(e) {
					e = se(e) ? f : e.toLowerCase();
					var t = this._instances[e];
					return void 0 === t && (t = new Ze(e), this._instances[e] = t), t
				}, mt.prototype.runQueuedFunctions = function() {
					for (var e = 0; e < this._q.length; e++) {
						var t = this[this._q[e][0]];
						"function" === G(t) && t.apply(this, this._q[e].slice(1))
					}
					for (var r in this._q = [], this._instances) Object.prototype.hasOwnProperty.call(this._instances, r) && this._instances[r].runQueuedFunctions()
				}, mt.prototype.init = function(e, t, r, a) {
					this.getInstance().init(e, t, r, function(e) {
						this.options = e.options, "function" === G(a) && a(e)
					}.bind(this))
				}, mt.prototype.isNewSession = function() {
					return this.getInstance().isNewSession()
				}, mt.prototype.getSessionId = function() {
					return this.getInstance().getSessionId()
				}, mt.prototype.nextEventId = function() {
					return this.getInstance().nextEventId()
				}, mt.prototype.nextIdentifyId = function() {
					return this.getInstance().nextIdentifyId()
				}, mt.prototype.nextSequenceNumber = function() {
					return this.getInstance().nextSequenceNumber()
				}, mt.prototype.saveEvents = function() {
					this.getInstance().saveEvents()
				}, mt.prototype.setDomain = function(e) {
					this.getInstance().setDomain(e)
				}, mt.prototype.setUserId = function(e) {
					this.getInstance().setUserId(e)
				}, mt.prototype.setGroup = function(e, t) {
					this.getInstance().setGroup(e, t)
				}, mt.prototype.setOptOut = function(e) {
					this.getInstance().setOptOut(e)
				}, mt.prototype.regenerateDeviceId = function() {
					this.getInstance().regenerateDeviceId()
				}, mt.prototype.setDeviceId = function(e) {
					this.getInstance().setDeviceId(e)
				}, mt.prototype.setUserProperties = function(e) {
					this.getInstance().setUserProperties(e)
				}, mt.prototype.clearUserProperties = function() {
					this.getInstance().clearUserProperties()
				}, mt.prototype.identify = function(e, t) {
					this.getInstance().identify(e, t)
				}, mt.prototype.setVersionName = function(e) {
					this.getInstance().setVersionName(e)
				}, mt.prototype.logEvent = function(e, t, r) {
					return this.getInstance().logEvent(e, t, r)
				}, mt.prototype.logEventWithGroups = function(e, t, r, a) {
					return this.getInstance().logEventWithGroups(e, t, r, a)
				}, mt.prototype.logRevenueV2 = function(e) {
					return this.getInstance().logRevenueV2(e)
				}, mt.prototype.logRevenue = function(e, t, r) {
					return this.getInstance().logRevenue(e, t, r)
				}, mt.prototype.removeEvents = function(e, t) {
					this.getInstance().removeEvents(e, t)
				}, mt.prototype.sendEvents = function(e) {
					this.getInstance().sendEvents(e)
				}, mt.prototype.setGlobalUserProperties = function(e) {
					this.getInstance().setUserProperties(e)
				}, mt.prototype.__VERSION__ = Je;
				var dt = window.amplitude || {},
					lt = new mt;
				for (var yt in lt._q = dt._q || [], dt._iq) Object.prototype.hasOwnProperty.call(dt._iq, yt) && (lt.getInstance(yt)._q = dt._iq[yt]._q || []);
				return lt.runQueuedFunctions(), lt
			}, e.exports = n()
		}).call(this, r(114), r(42), r(115).Buffer)
	}, function(e, t, r) {
		"use strict";
		r.d(t, "c", (function() {
			return p
		})), r.d(t, "b", (function() {
			return c
		})), r.d(t, "a", (function() {
			return h
		})), r.d(t, "d", (function() {
			return u
		}));
		var a = r(188);

		function n(e) {
			var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
				r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
			return Math.min(Math.max(t, e), r)
		}

		function i(e) {
			if (e.type) return e;
			if ("#" === e.charAt(0)) return i(function(e) {
				e = e.substr(1);
				var t = new RegExp(".{1,".concat(e.length >= 6 ? 2 : 1, "}"), "g"),
					r = e.match(t);
				return r && 1 === r[0].length && (r = r.map((function(e) {
					return e + e
				}))), r ? "rgb".concat(4 === r.length ? "a" : "", "(").concat(r.map((function(e, t) {
					return t < 3 ? parseInt(e, 16) : Math.round(parseInt(e, 16) / 255 * 1e3) / 1e3
				})).join(", "), ")") : ""
			}(e));
			var t = e.indexOf("("),
				r = e.substring(0, t);
			if (-1 === ["rgb", "rgba", "hsl", "hsla"].indexOf(r)) throw new Error(Object(a.a)(3, e));
			var n = e.substring(t + 1, e.length - 1).split(",");
			return {
				type: r,
				values: n = n.map((function(e) {
					return parseFloat(e)
				}))
			}
		}

		function s(e) {
			var t = e.type,
				r = e.values;
			return -1 !== t.indexOf("rgb") ? r = r.map((function(e, t) {
				return t < 3 ? parseInt(e, 10) : e
			})) : -1 !== t.indexOf("hsl") && (r[1] = "".concat(r[1], "%"), r[2] = "".concat(r[2], "%")), "".concat(t, "(").concat(r.join(", "), ")")
		}

		function p(e, t) {
			var r = o(e),
				a = o(t);
			return (Math.max(r, a) + .05) / (Math.min(r, a) + .05)
		}

		function o(e) {
			var t = "hsl" === (e = i(e)).type ? i(function(e) {
				var t = (e = i(e)).values,
					r = t[0],
					a = t[1] / 100,
					n = t[2] / 100,
					p = a * Math.min(n, 1 - n),
					o = function(e) {
						var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : (e + r / 30) % 12;
						return n - p * Math.max(Math.min(t - 3, 9 - t, 1), -1)
					},
					c = "rgb",
					h = [Math.round(255 * o(0)), Math.round(255 * o(8)), Math.round(255 * o(4))];
				return "hsla" === e.type && (c += "a", h.push(t[3])), s({
					type: c,
					values: h
				})
			}(e)).values : e.values;
			return t = t.map((function(e) {
				return (e /= 255) <= .03928 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4)
			})), Number((.2126 * t[0] + .7152 * t[1] + .0722 * t[2]).toFixed(3))
		}

		function c(e, t) {
			return e = i(e), t = n(t), "rgb" !== e.type && "hsl" !== e.type || (e.type += "a"), e.values[3] = t, s(e)
		}

		function h(e, t) {
			if (e = i(e), t = n(t), -1 !== e.type.indexOf("hsl")) e.values[2] *= 1 - t;
			else if (-1 !== e.type.indexOf("rgb"))
				for (var r = 0; r < 3; r += 1) e.values[r] *= 1 - t;
			return s(e)
		}

		function u(e, t) {
			if (e = i(e), t = n(t), -1 !== e.type.indexOf("hsl")) e.values[2] += (100 - e.values[2]) * t;
			else if (-1 !== e.type.indexOf("rgb"))
				for (var r = 0; r < 3; r += 1) e.values[r] += (255 - e.values[r]) * t;
			return s(e)
		}
	}, function(e, t) {
		function r(e, t) {
			for (var r = 0; r < t.length; r++) {
				var a = t[r];
				a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
			}
		}
		e.exports = function(e, t, a) {
			return t && r(e.prototype, t), a && r(e, a), e
		}
	}, function(e, t, r) {
		var a = r(62);
		e.exports = function(e, t) {
			if ("function" !== typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
			e.prototype = Object.create(t && t.prototype, {
				constructor: {
					value: e,
					writable: !0,
					configurable: !0
				}
			}), t && a(e, t)
		}
	}, function(e, t, r) {
		var a = r(38),
			n = r(73),
			i = r(132);
		e.exports = function(e) {
			var t = n();
			return function() {
				var r, n = a(e);
				if (t) {
					var s = a(this).constructor;
					r = Reflect.construct(n, arguments, s)
				} else r = n.apply(this, arguments);
				return i(this, r)
			}
		}
	}, function(e, t, r) {
		var a = r(75);

		function n(e, t) {
			var r = Object.keys(e);
			if (Object.getOwnPropertySymbols) {
				var a = Object.getOwnPropertySymbols(e);
				t && (a = a.filter((function(t) {
					return Object.getOwnPropertyDescriptor(e, t).enumerable
				}))), r.push.apply(r, a)
			}
			return r
		}
		e.exports = function(e) {
			for (var t = 1; t < arguments.length; t++) {
				var r = null != arguments[t] ? arguments[t] : {};
				t % 2 ? n(Object(r), !0).forEach((function(t) {
					a(e, t, r[t])
				})) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach((function(t) {
					Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t))
				}))
			}
			return e
		}
	}, function(e, t, r) {
		var a = r(141),
			n = r(142),
			i = r(63),
			s = r(143);
		e.exports = function(e) {
			return a(e) || n(e) || i(e) || s()
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(18),
			n = r(8),
			i = r(206),
			s = r(1),
			p = ["xs", "sm", "md", "lg", "xl"];

		function o(e) {
			var t = e.values,
				r = void 0 === t ? {
					xs: 0,
					sm: 600,
					md: 960,
					lg: 1280,
					xl: 1920
				} : t,
				a = e.unit,
				i = void 0 === a ? "px" : a,
				o = e.step,
				c = void 0 === o ? 5 : o,
				h = Object(n.a)(e, ["values", "unit", "step"]);

			function u(e) {
				var t = "number" === typeof r[e] ? r[e] : e;
				return "@media (min-width:".concat(t).concat(i, ")")
			}

			function m(e, t) {
				var a = p.indexOf(t);
				return a === p.length - 1 ? u(e) : "@media (min-width:".concat("number" === typeof r[e] ? r[e] : e).concat(i, ") and ") + "(max-width:".concat((-1 !== a && "number" === typeof r[p[a + 1]] ? r[p[a + 1]] : t) - c / 100).concat(i, ")")
			}
			return Object(s.a)({
				keys: p,
				values: r,
				up: u,
				down: function(e) {
					var t = p.indexOf(e) + 1,
						a = r[p[t]];
					return t === p.length ? u("xs") : "@media (max-width:".concat(("number" === typeof a && t > 0 ? a : e) - c / 100).concat(i, ")")
				},
				between: m,
				only: function(e) {
					return m(e, e)
				},
				width: function(e) {
					return r[e]
				}
			}, h)
		}

		function c(e, t, r) {
			var n;
			return Object(s.a)({
				gutters: function() {
					var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
					return Object(s.a)({
						paddingLeft: t(2),
						paddingRight: t(2)
					}, r, Object(a.a)({}, e.up("sm"), Object(s.a)({
						paddingLeft: t(3),
						paddingRight: t(3)
					}, r[e.up("sm")])))
				},
				toolbar: (n = {
					minHeight: 56
				}, Object(a.a)(n, "".concat(e.up("xs"), " and (orientation: landscape)"), {
					minHeight: 48
				}), Object(a.a)(n, e.up("sm"), {
					minHeight: 64
				}), n)
			}, r)
		}
		var h = r(188),
			u = {
				black: "#000",
				white: "#fff"
			},
			m = {
				50: "#fafafa",
				100: "#f5f5f5",
				200: "#eeeeee",
				300: "#e0e0e0",
				400: "#bdbdbd",
				500: "#9e9e9e",
				600: "#757575",
				700: "#616161",
				800: "#424242",
				900: "#212121",
				A100: "#d5d5d5",
				A200: "#aaaaaa",
				A400: "#303030",
				A700: "#616161"
			},
			d = {
				50: "#e8eaf6",
				100: "#c5cae9",
				200: "#9fa8da",
				300: "#7986cb",
				400: "#5c6bc0",
				500: "#3f51b5",
				600: "#3949ab",
				700: "#303f9f",
				800: "#283593",
				900: "#1a237e",
				A100: "#8c9eff",
				A200: "#536dfe",
				A400: "#3d5afe",
				A700: "#304ffe"
			},
			l = {
				50: "#fce4ec",
				100: "#f8bbd0",
				200: "#f48fb1",
				300: "#f06292",
				400: "#ec407a",
				500: "#e91e63",
				600: "#d81b60",
				700: "#c2185b",
				800: "#ad1457",
				900: "#880e4f",
				A100: "#ff80ab",
				A200: "#ff4081",
				A400: "#f50057",
				A700: "#c51162"
			},
			y = {
				50: "#ffebee",
				100: "#ffcdd2",
				200: "#ef9a9a",
				300: "#e57373",
				400: "#ef5350",
				500: "#f44336",
				600: "#e53935",
				700: "#d32f2f",
				800: "#c62828",
				900: "#b71c1c",
				A100: "#ff8a80",
				A200: "#ff5252",
				A400: "#ff1744",
				A700: "#d50000"
			},
			g = {
				50: "#fff3e0",
				100: "#ffe0b2",
				200: "#ffcc80",
				300: "#ffb74d",
				400: "#ffa726",
				500: "#ff9800",
				600: "#fb8c00",
				700: "#f57c00",
				800: "#ef6c00",
				900: "#e65100",
				A100: "#ffd180",
				A200: "#ffab40",
				A400: "#ff9100",
				A700: "#ff6d00"
			},
			f = {
				50: "#e3f2fd",
				100: "#bbdefb",
				200: "#90caf9",
				300: "#64b5f6",
				400: "#42a5f5",
				500: "#2196f3",
				600: "#1e88e5",
				700: "#1976d2",
				800: "#1565c0",
				900: "#0d47a1",
				A100: "#82b1ff",
				A200: "#448aff",
				A400: "#2979ff",
				A700: "#2962ff"
			},
			v = {
				50: "#e8f5e9",
				100: "#c8e6c9",
				200: "#a5d6a7",
				300: "#81c784",
				400: "#66bb6a",
				500: "#4caf50",
				600: "#43a047",
				700: "#388e3c",
				800: "#2e7d32",
				900: "#1b5e20",
				A100: "#b9f6ca",
				A200: "#69f0ae",
				A400: "#00e676",
				A700: "#00c853"
			},
			b = r(28),
			P = {
				text: {
					primary: "rgba(0, 0, 0, 0.87)",
					secondary: "rgba(0, 0, 0, 0.54)",
					disabled: "rgba(0, 0, 0, 0.38)",
					hint: "rgba(0, 0, 0, 0.38)"
				},
				divider: "rgba(0, 0, 0, 0.12)",
				background: {
					paper: u.white,
					default: m[50]
				},
				action: {
					active: "rgba(0, 0, 0, 0.54)",
					hover: "rgba(0, 0, 0, 0.04)",
					hoverOpacity: .04,
					selected: "rgba(0, 0, 0, 0.08)",
					selectedOpacity: .08,
					disabled: "rgba(0, 0, 0, 0.26)",
					disabledBackground: "rgba(0, 0, 0, 0.12)",
					disabledOpacity: .38,
					focus: "rgba(0, 0, 0, 0.12)",
					focusOpacity: .12,
					activatedOpacity: .12
				}
			},
			S = {
				text: {
					primary: u.white,
					secondary: "rgba(255, 255, 255, 0.7)",
					disabled: "rgba(255, 255, 255, 0.5)",
					hint: "rgba(255, 255, 255, 0.5)",
					icon: "rgba(255, 255, 255, 0.5)"
				},
				divider: "rgba(255, 255, 255, 0.12)",
				background: {
					paper: m[800],
					default: "#303030"
				},
				action: {
					active: u.white,
					hover: "rgba(255, 255, 255, 0.08)",
					hoverOpacity: .08,
					selected: "rgba(255, 255, 255, 0.16)",
					selectedOpacity: .16,
					disabled: "rgba(255, 255, 255, 0.3)",
					disabledBackground: "rgba(255, 255, 255, 0.12)",
					disabledOpacity: .38,
					focus: "rgba(255, 255, 255, 0.12)",
					focusOpacity: .12,
					activatedOpacity: .24
				}
			};

		function w(e, t, r, a) {
			var n = a.light || a,
				i = a.dark || 1.5 * a;
			e[t] || (e.hasOwnProperty(r) ? e[t] = e[r] : "light" === t ? e.light = Object(b.d)(e.main, n) : "dark" === t && (e.dark = Object(b.a)(e.main, i)))
		}

		function k(e) {
			var t = e.primary,
				r = void 0 === t ? {
					light: d[300],
					main: d[500],
					dark: d[700]
				} : t,
				a = e.secondary,
				p = void 0 === a ? {
					light: l.A200,
					main: l.A400,
					dark: l.A700
				} : a,
				o = e.error,
				c = void 0 === o ? {
					light: y[300],
					main: y[500],
					dark: y[700]
				} : o,
				k = e.warning,
				_ = void 0 === k ? {
					light: g[300],
					main: g[500],
					dark: g[700]
				} : k,
				I = e.info,
				q = void 0 === I ? {
					light: f[300],
					main: f[500],
					dark: f[700]
				} : I,
				L = e.success,
				x = void 0 === L ? {
					light: v[300],
					main: v[500],
					dark: v[700]
				} : L,
				E = e.type,
				N = void 0 === E ? "light" : E,
				O = e.contrastThreshold,
				D = void 0 === O ? 3 : O,
				T = e.tonalOffset,
				j = void 0 === T ? .2 : T,
				F = Object(n.a)(e, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]);

			function C(e) {
				return Object(b.c)(e, S.text.primary) >= D ? S.text.primary : P.text.primary
			}
			var A = function(e) {
					var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 500,
						r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 300,
						a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 700;
					if (!(e = Object(s.a)({}, e)).main && e[t] && (e.main = e[t]), !e.main) throw new Error(Object(h.a)(4, t));
					if ("string" !== typeof e.main) throw new Error(Object(h.a)(5, JSON.stringify(e.main)));
					return w(e, "light", r, j), w(e, "dark", a, j), e.contrastText || (e.contrastText = C(e.main)), e
				},
				H = {
					dark: S,
					light: P
				};
			return Object(i.a)(Object(s.a)({
				common: u,
				type: N,
				primary: A(r),
				secondary: A(p, "A400", "A200", "A700"),
				error: A(c),
				warning: A(_),
				info: A(q),
				success: A(x),
				grey: m,
				contrastThreshold: D,
				getContrastText: C,
				augmentColor: A,
				tonalOffset: j
			}, H[N]), F)
		}

		function _(e) {
			return Math.round(1e5 * e) / 1e5
		}
		var I = {
				textTransform: "uppercase"
			},
			q = '"Roboto", "Helvetica", "Arial", sans-serif';

		function L(e, t) {
			var r = "function" === typeof t ? t(e) : t,
				a = r.fontFamily,
				p = void 0 === a ? q : a,
				o = r.fontSize,
				c = void 0 === o ? 14 : o,
				h = r.fontWeightLight,
				u = void 0 === h ? 300 : h,
				m = r.fontWeightRegular,
				d = void 0 === m ? 400 : m,
				l = r.fontWeightMedium,
				y = void 0 === l ? 500 : l,
				g = r.fontWeightBold,
				f = void 0 === g ? 700 : g,
				v = r.htmlFontSize,
				b = void 0 === v ? 16 : v,
				P = r.allVariants,
				S = r.pxToRem,
				w = Object(n.a)(r, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);
			var k = c / 14,
				L = S || function(e) {
					return "".concat(e / b * k, "rem")
				},
				x = function(e, t, r, a, n) {
					return Object(s.a)({
						fontFamily: p,
						fontWeight: e,
						fontSize: L(t),
						lineHeight: r
					}, p === q ? {
						letterSpacing: "".concat(_(a / t), "em")
					} : {}, n, P)
				},
				E = {
					h1: x(u, 96, 1.167, -1.5),
					h2: x(u, 60, 1.2, -.5),
					h3: x(d, 48, 1.167, 0),
					h4: x(d, 34, 1.235, .25),
					h5: x(d, 24, 1.334, 0),
					h6: x(y, 20, 1.6, .15),
					subtitle1: x(d, 16, 1.75, .15),
					subtitle2: x(y, 14, 1.57, .1),
					body1: x(d, 16, 1.5, .15),
					body2: x(d, 14, 1.43, .15),
					button: x(y, 14, 1.75, .4, I),
					caption: x(d, 12, 1.66, .4),
					overline: x(d, 12, 2.66, 1, I)
				};
			return Object(i.a)(Object(s.a)({
				htmlFontSize: b,
				pxToRem: L,
				round: _,
				fontFamily: p,
				fontSize: c,
				fontWeightLight: u,
				fontWeightRegular: d,
				fontWeightMedium: y,
				fontWeightBold: f
			}, E), w, {
				clone: !1
			})
		}

		function x() {
			return ["".concat(arguments.length <= 0 ? void 0 : arguments[0], "px ").concat(arguments.length <= 1 ? void 0 : arguments[1], "px ").concat(arguments.length <= 2 ? void 0 : arguments[2], "px ").concat(arguments.length <= 3 ? void 0 : arguments[3], "px rgba(0,0,0,").concat(.2, ")"), "".concat(arguments.length <= 4 ? void 0 : arguments[4], "px ").concat(arguments.length <= 5 ? void 0 : arguments[5], "px ").concat(arguments.length <= 6 ? void 0 : arguments[6], "px ").concat(arguments.length <= 7 ? void 0 : arguments[7], "px rgba(0,0,0,").concat(.14, ")"), "".concat(arguments.length <= 8 ? void 0 : arguments[8], "px ").concat(arguments.length <= 9 ? void 0 : arguments[9], "px ").concat(arguments.length <= 10 ? void 0 : arguments[10], "px ").concat(arguments.length <= 11 ? void 0 : arguments[11], "px rgba(0,0,0,").concat(.12, ")")].join(",")
		}
		var E = ["none", x(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), x(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), x(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), x(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), x(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), x(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), x(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), x(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), x(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), x(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), x(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), x(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), x(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), x(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), x(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), x(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), x(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), x(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), x(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), x(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), x(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), x(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), x(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), x(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)],
			N = {
				borderRadius: 4
			},
			O = r(35),
			D = (r(55), r(39));
		r(9);
		var T = function(e, t) {
				return t ? Object(i.a)(e, t, {
					clone: !1
				}) : e
			},
			j = {
				xs: 0,
				sm: 600,
				md: 960,
				lg: 1280,
				xl: 1920
			},
			F = {
				keys: ["xs", "sm", "md", "lg", "xl"],
				up: function(e) {
					return "@media (min-width:".concat(j[e], "px)")
				}
			};
		var C = {
				m: "margin",
				p: "padding"
			},
			A = {
				t: "Top",
				r: "Right",
				b: "Bottom",
				l: "Left",
				x: ["Left", "Right"],
				y: ["Top", "Bottom"]
			},
			H = {
				marginX: "mx",
				marginY: "my",
				paddingX: "px",
				paddingY: "py"
			},
			R = function(e) {
				var t = {};
				return function(r) {
					return void 0 === t[r] && (t[r] = e(r)), t[r]
				}
			}((function(e) {
				if (e.length > 2) {
					if (!H[e]) return [e];
					e = H[e]
				}
				var t = e.split(""),
					r = Object(O.a)(t, 2),
					a = r[0],
					n = r[1],
					i = C[a],
					s = A[n] || "";
				return Array.isArray(s) ? s.map((function(e) {
					return i + e
				})) : [i + s]
			})),
			M = ["m", "mt", "mr", "mb", "ml", "mx", "my", "p", "pt", "pr", "pb", "pl", "px", "py", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY"];

		function $(e) {
			var t = e.spacing || 8;
			return "number" === typeof t ? function(e) {
				return t * e
			} : Array.isArray(t) ? function(e) {
				return t[e]
			} : "function" === typeof t ? t : function() {}
		}

		function z(e, t) {
			return function(r) {
				return e.reduce((function(e, a) {
					return e[a] = function(e, t) {
						if ("string" === typeof t || null == t) return t;
						var r = e(Math.abs(t));
						return t >= 0 ? r : "number" === typeof r ? -r : "-".concat(r)
					}(t, r), e
				}), {})
			}
		}

		function U(e) {
			var t = $(e.theme);
			return Object.keys(e).map((function(r) {
				if (-1 === M.indexOf(r)) return null;
				var a = z(R(r), t),
					n = e[r];
				return function(e, t, r) {
					if (Array.isArray(t)) {
						var a = e.theme.breakpoints || F;
						return t.reduce((function(e, n, i) {
							return e[a.up(a.keys[i])] = r(t[i]), e
						}), {})
					}
					if ("object" === Object(D.a)(t)) {
						var n = e.theme.breakpoints || F;
						return Object.keys(t).reduce((function(e, a) {
							return e[n.up(a)] = r(t[a]), e
						}), {})
					}
					return r(t)
				}(e, n, a)
			})).reduce(T, {})
		}
		U.propTypes = {}, U.filterProps = M;

		function B() {
			var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 8;
			if (e.mui) return e;
			var t = $({
					spacing: e
				}),
				r = function() {
					for (var e = arguments.length, r = new Array(e), a = 0; a < e; a++) r[a] = arguments[a];
					return 0 === r.length ? t(1) : 1 === r.length ? t(r[0]) : r.map((function(e) {
						if ("string" === typeof e) return e;
						var r = t(e);
						return "number" === typeof r ? "".concat(r, "px") : r
					})).join(" ")
				};
			return Object.defineProperty(r, "unit", {
				get: function() {
					return e
				}
			}), r.mui = !0, r
		}
		var W = {
				easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
				easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
				easeIn: "cubic-bezier(0.4, 0, 1, 1)",
				sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
			},
			V = {
				shortest: 150,
				shorter: 200,
				short: 250,
				standard: 300,
				complex: 375,
				enteringScreen: 225,
				leavingScreen: 195
			};

		function G(e) {
			return "".concat(Math.round(e), "ms")
		}
		var K = {
				easing: W,
				duration: V,
				create: function() {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ["all"],
						t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
						r = t.duration,
						a = void 0 === r ? V.standard : r,
						i = t.easing,
						s = void 0 === i ? W.easeInOut : i,
						p = t.delay,
						o = void 0 === p ? 0 : p;
					Object(n.a)(t, ["duration", "easing", "delay"]);
					return (Array.isArray(e) ? e : [e]).map((function(e) {
						return "".concat(e, " ").concat("string" === typeof a ? a : G(a), " ").concat(s, " ").concat("string" === typeof o ? o : G(o))
					})).join(",")
				},
				getAutoHeightDuration: function(e) {
					if (!e) return 0;
					var t = e / 36;
					return Math.round(10 * (4 + 15 * Math.pow(t, .25) + t / 5))
				}
			},
			Q = {
				mobileStepper: 1e3,
				speedDial: 1050,
				appBar: 1100,
				drawer: 1200,
				modal: 1300,
				snackbar: 1400,
				tooltip: 1500
			};
		var Y = function() {
			for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = e.breakpoints, r = void 0 === t ? {} : t, a = e.mixins, s = void 0 === a ? {} : a, p = e.palette, h = void 0 === p ? {} : p, u = e.spacing, m = e.typography, d = void 0 === m ? {} : m, l = Object(n.a)(e, ["breakpoints", "mixins", "palette", "spacing", "typography"]), y = k(h), g = o(r), f = B(u), v = Object(i.a)({
					breakpoints: g,
					direction: "ltr",
					mixins: c(g, f, s),
					overrides: {},
					palette: y,
					props: {},
					shadows: E,
					typography: L(y, d),
					spacing: f,
					shape: N,
					transitions: K,
					zIndex: Q
				}, l), b = arguments.length, P = new Array(b > 1 ? b - 1 : 0), S = 1; S < b; S++) P[S - 1] = arguments[S];
			return v = P.reduce((function(e, t) {
				return Object(i.a)(e, t)
			}), v)
		}();
		t.a = Y
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return s
		}));
		var a = r(93);
		var n = r(52),
			i = r(94);

		function s(e, t) {
			return Object(a.a)(e) || function(e, t) {
				if ("undefined" !== typeof Symbol && Symbol.iterator in Object(e)) {
					var r = [],
						a = !0,
						n = !1,
						i = void 0;
					try {
						for (var s, p = e[Symbol.iterator](); !(a = (s = p.next()).done) && (r.push(s.value), !t || r.length !== t); a = !0);
					} catch (o) {
						n = !0, i = o
					} finally {
						try {
							a || null == p.return || p.return()
						} finally {
							if (n) throw i
						}
					}
					return r
				}
			}(e, t) || Object(n.a)(e, t) || Object(i.a)()
		}
	}, function(e, t, r) {
		"use strict";
		(function(e, a) {
			var n, i = r(88);
			n = "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : "undefined" !== typeof e ? e : a;
			var s = Object(i.a)(n);
			t.a = s
		}).call(this, r(42), r(111)(e))
	}, function(e, t) {
		t.getArg = function(e, t, r) {
			if (t in e) return e[t];
			if (3 === arguments.length) return r;
			throw new Error('"' + t + '" is a required argument.')
		};
		var r = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/,
			a = /^data:.+\,.+$/;

		function n(e) {
			var t = e.match(r);
			return t ? {
				scheme: t[1],
				auth: t[2],
				host: t[3],
				port: t[4],
				path: t[5]
			} : null
		}

		function i(e) {
			var t = "";
			return e.scheme && (t += e.scheme + ":"), t += "//", e.auth && (t += e.auth + "@"), e.host && (t += e.host), e.port && (t += ":" + e.port), e.path && (t += e.path), t
		}

		function s(e) {
			var r = e,
				a = n(e);
			if (a) {
				if (!a.path) return e;
				r = a.path
			}
			for (var s, p = t.isAbsolute(r), o = r.split(/\/+/), c = 0, h = o.length - 1; h >= 0; h--) "." === (s = o[h]) ? o.splice(h, 1) : ".." === s ? c++ : c > 0 && ("" === s ? (o.splice(h + 1, c), c = 0) : (o.splice(h, 2), c--));
			return "" === (r = o.join("/")) && (r = p ? "/" : "."), a ? (a.path = r, i(a)) : r
		}
		t.urlParse = n, t.urlGenerate = i, t.normalize = s, t.join = function(e, t) {
			"" === e && (e = "."), "" === t && (t = ".");
			var r = n(t),
				p = n(e);
			if (p && (e = p.path || "/"), r && !r.scheme) return p && (r.scheme = p.scheme), i(r);
			if (r || t.match(a)) return t;
			if (p && !p.host && !p.path) return p.host = t, i(p);
			var o = "/" === t.charAt(0) ? t : s(e.replace(/\/+$/, "") + "/" + t);
			return p ? (p.path = o, i(p)) : o
		}, t.isAbsolute = function(e) {
			return "/" === e.charAt(0) || !!e.match(r)
		}, t.relative = function(e, t) {
			"" === e && (e = "."), e = e.replace(/\/$/, "");
			for (var r = 0; 0 !== t.indexOf(e + "/");) {
				var a = e.lastIndexOf("/");
				if (a < 0) return t;
				if ((e = e.slice(0, a)).match(/^([^\/]+:\/)?\/*$/)) return t;
				++r
			}
			return Array(r + 1).join("../") + t.substr(e.length + 1)
		};
		var p = !("__proto__" in Object.create(null));

		function o(e) {
			return e
		}

		function c(e) {
			if (!e) return !1;
			var t = e.length;
			if (t < 9) return !1;
			if (95 !== e.charCodeAt(t - 1) || 95 !== e.charCodeAt(t - 2) || 111 !== e.charCodeAt(t - 3) || 116 !== e.charCodeAt(t - 4) || 111 !== e.charCodeAt(t - 5) || 114 !== e.charCodeAt(t - 6) || 112 !== e.charCodeAt(t - 7) || 95 !== e.charCodeAt(t - 8) || 95 !== e.charCodeAt(t - 9)) return !1;
			for (var r = t - 10; r >= 0; r--)
				if (36 !== e.charCodeAt(r)) return !1;
			return !0
		}

		function h(e, t) {
			return e === t ? 0 : e > t ? 1 : -1
		}
		t.toSetString = p ? o : function(e) {
			return c(e) ? "$" + e : e
		}, t.fromSetString = p ? o : function(e) {
			return c(e) ? e.slice(1) : e
		}, t.compareByOriginalPositions = function(e, t, r) {
			var a = e.source - t.source;
			return 0 !== a || 0 !== (a = e.originalLine - t.originalLine) || 0 !== (a = e.originalColumn - t.originalColumn) || r || 0 !== (a = e.generatedColumn - t.generatedColumn) || 0 !== (a = e.generatedLine - t.generatedLine) ? a : e.name - t.name
		}, t.compareByGeneratedPositionsDeflated = function(e, t, r) {
			var a = e.generatedLine - t.generatedLine;
			return 0 !== a || 0 !== (a = e.generatedColumn - t.generatedColumn) || r || 0 !== (a = e.source - t.source) || 0 !== (a = e.originalLine - t.originalLine) || 0 !== (a = e.originalColumn - t.originalColumn) ? a : e.name - t.name
		}, t.compareByGeneratedPositionsInflated = function(e, t) {
			var r = e.generatedLine - t.generatedLine;
			return 0 !== r || 0 !== (r = e.generatedColumn - t.generatedColumn) || 0 !== (r = h(e.source, t.source)) || 0 !== (r = e.originalLine - t.originalLine) || 0 !== (r = e.originalColumn - t.originalColumn) ? r : h(e.name, t.name)
		}
	}, function(e, t) {
		function r(t) {
			return e.exports = r = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {
				return e.__proto__ || Object.getPrototypeOf(e)
			}, r(t)
		}
		e.exports = r
	}, function(e, t, r) {
		"use strict";

		function a(e) {
			return (a = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(e) {
				return typeof e
			} : function(e) {
				return e && "function" === typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
			})(e)
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		"use strict";

		function a(e, t) {
			(null == t || t > e.length) && (t = e.length);
			for (var r = 0, a = new Array(t); r < t; r++) a[r] = e[r];
			return a
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		var a;
		a = function(e, t) {
			return function(e) {
				var t = {};

				function r(a) {
					if (t[a]) return t[a].exports;
					var n = t[a] = {
						i: a,
						l: !1,
						exports: {}
					};
					return e[a].call(n.exports, n, n.exports, r), n.l = !0, n.exports
				}
				return r.m = e, r.c = t, r.d = function(e, t, a) {
					r.o(e, t) || Object.defineProperty(e, t, {
						enumerable: !0,
						get: a
					})
				}, r.r = function(e) {
					"undefined" !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
						value: "Module"
					}), Object.defineProperty(e, "__esModule", {
						value: !0
					})
				}, r.t = function(e, t) {
					if (1 & t && (e = r(e)), 8 & t) return e;
					if (4 & t && "object" === typeof e && e && e.__esModule) return e;
					var a = Object.create(null);
					if (r.r(a), Object.defineProperty(a, "default", {
							enumerable: !0,
							value: e
						}), 2 & t && "string" != typeof e)
						for (var n in e) r.d(a, n, function(t) {
							return e[t]
						}.bind(null, n));
					return a
				}, r.n = function(e) {
					var t = e && e.__esModule ? function() {
						return e.default
					} : function() {
						return e
					};
					return r.d(t, "a", t), t
				}, r.o = function(e, t) {
					return Object.prototype.hasOwnProperty.call(e, t)
				}, r.p = "", r(r.s = 4)
			}([function(e, t, r) {
				e.exports = r(5)()
			}, function(t, r) {
				t.exports = e
			}, function(e, r) {
				e.exports = t
			}, function(e, t) {
				e.exports = function(e, t, r) {
					var a = e.direction,
						n = e.value;
					switch (a) {
						case "top":
							return r.top + n < t.top && r.bottom > t.bottom && r.left < t.left && r.right > t.right;
						case "left":
							return r.left + n < t.left && r.bottom > t.bottom && r.top < t.top && r.right > t.right;
						case "bottom":
							return r.bottom - n > t.bottom && r.left < t.left && r.right > t.right && r.top < t.top;
						case "right":
							return r.right - n > t.right && r.left < t.left && r.top < t.top && r.bottom > t.bottom
					}
				}
			}, function(e, t, r) {
				"use strict";
				r.r(t), r.d(t, "default", (function() {
					return f
				}));
				var a = r(1),
					n = r.n(a),
					i = r(2),
					s = r.n(i),
					p = r(0),
					o = r.n(p),
					c = r(3),
					h = r.n(c);

				function u(e) {
					return (u = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(e) {
						return typeof e
					} : function(e) {
						return e && "function" === typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
					})(e)
				}

				function m(e, t) {
					for (var r = 0; r < t.length; r++) {
						var a = t[r];
						a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
					}
				}

				function d(e) {
					return (d = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {
						return e.__proto__ || Object.getPrototypeOf(e)
					})(e)
				}

				function l(e) {
					if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					return e
				}

				function y(e, t) {
					return (y = Object.setPrototypeOf || function(e, t) {
						return e.__proto__ = t, e
					})(e, t)
				}

				function g(e, t, r) {
					return t in e ? Object.defineProperty(e, t, {
						value: r,
						enumerable: !0,
						configurable: !0,
						writable: !0
					}) : e[t] = r, e
				}
				var f = function(e) {
					function t(e) {
						var r;
						return function(e, t) {
							if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
						}(this, t), r = function(e, t) {
							return !t || "object" !== u(t) && "function" !== typeof t ? l(e) : t
						}(this, d(t).call(this, e)), g(l(r), "getContainer", (function() {
							return r.props.containment || window
						})), g(l(r), "addEventListener", (function(e, t, a, n) {
							var i;
							r.debounceCheck || (r.debounceCheck = {});
							var s = function() {
									i = null, r.check()
								},
								p = {
									target: e,
									fn: n > -1 ? function() {
										i || (i = setTimeout(s, n || 0))
									} : function() {
										clearTimeout(i), i = setTimeout(s, a || 0)
									},
									getLastTimeout: function() {
										return i
									}
								};
							e.addEventListener(t, p.fn), r.debounceCheck[t] = p
						})), g(l(r), "startWatching", (function() {
							r.debounceCheck || r.interval || (r.props.intervalCheck && (r.interval = setInterval(r.check, r.props.intervalDelay)), r.props.scrollCheck && r.addEventListener(r.getContainer(), "scroll", r.props.scrollDelay, r.props.scrollThrottle), r.props.resizeCheck && r.addEventListener(window, "resize", r.props.resizeDelay, r.props.resizeThrottle), !r.props.delayedCall && r.check())
						})), g(l(r), "stopWatching", (function() {
							if (r.debounceCheck)
								for (var e in r.debounceCheck)
									if (r.debounceCheck.hasOwnProperty(e)) {
										var t = r.debounceCheck[e];
										clearTimeout(t.getLastTimeout()), t.target.removeEventListener(e, t.fn), r.debounceCheck[e] = null
									} r.debounceCheck = null, r.interval && (r.interval = clearInterval(r.interval))
						})), g(l(r), "check", (function() {
							var e, t, a = r.node;
							if (!a) return r.state;
							if (e = function(e) {
									return void 0 === e.width && (e.width = e.right - e.left), void 0 === e.height && (e.height = e.bottom - e.top), e
								}(r.roundRectDown(a.getBoundingClientRect())), r.props.containment) {
								var n = r.props.containment.getBoundingClientRect();
								t = {
									top: n.top,
									left: n.left,
									bottom: n.bottom,
									right: n.right
								}
							} else t = {
								top: 0,
								left: 0,
								bottom: window.innerHeight || document.documentElement.clientHeight,
								right: window.innerWidth || document.documentElement.clientWidth
							};
							var i = r.props.offset || {};
							"object" === u(i) && (t.top += i.top || 0, t.left += i.left || 0, t.bottom -= i.bottom || 0, t.right -= i.right || 0);
							var s = {
									top: e.top >= t.top,
									left: e.left >= t.left,
									bottom: e.bottom <= t.bottom,
									right: e.right <= t.right
								},
								p = e.height > 0 && e.width > 0,
								o = p && s.top && s.left && s.bottom && s.right;
							if (p && r.props.partialVisibility) {
								var c = e.top <= t.bottom && e.bottom >= t.top && e.left <= t.right && e.right >= t.left;
								"string" === typeof r.props.partialVisibility && (c = s[r.props.partialVisibility]), o = r.props.minTopValue ? c && e.top <= t.bottom - r.props.minTopValue : c
							}
							"string" === typeof i.direction && "number" === typeof i.value && (console.warn("[notice] offset.direction and offset.value have been deprecated. They still work for now, but will be removed in next major version. Please upgrade to the new syntax: { %s: %d }", i.direction, i.value), o = h()(i, e, t));
							var m = r.state;
							return r.state.isVisible !== o && (m = {
								isVisible: o,
								visibilityRect: s
							}, r.setState(m), r.props.onChange && r.props.onChange(o)), m
						})), r.state = {
							isVisible: null,
							visibilityRect: {}
						}, r
					}
					var r, a, i;
					return function(e, t) {
						if ("function" !== typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
						e.prototype = Object.create(t && t.prototype, {
							constructor: {
								value: e,
								writable: !0,
								configurable: !0
							}
						}), t && y(e, t)
					}(t, e), r = t, (a = [{
						key: "componentDidMount",
						value: function() {
							this.node = s.a.findDOMNode(this), this.props.active && this.startWatching()
						}
					}, {
						key: "componentWillUnmount",
						value: function() {
							this.stopWatching()
						}
					}, {
						key: "componentDidUpdate",
						value: function(e) {
							this.node = s.a.findDOMNode(this), this.props.active && !e.active ? (this.setState({
								isVisible: null,
								visibilityRect: {}
							}), this.startWatching()) : this.props.active || this.stopWatching()
						}
					}, {
						key: "roundRectDown",
						value: function(e) {
							return {
								top: Math.floor(e.top),
								left: Math.floor(e.left),
								bottom: Math.floor(e.bottom),
								right: Math.floor(e.right)
							}
						}
					}, {
						key: "render",
						value: function() {
							return this.props.children instanceof Function ? this.props.children({
								isVisible: this.state.isVisible,
								visibilityRect: this.state.visibilityRect
							}) : n.a.Children.only(this.props.children)
						}
					}]) && m(r.prototype, a), i && m(r, i), t
				}(n.a.Component);
				g(f, "defaultProps", {
					active: !0,
					partialVisibility: !1,
					minTopValue: 0,
					scrollCheck: !1,
					scrollDelay: 250,
					scrollThrottle: -1,
					resizeCheck: !1,
					resizeDelay: 250,
					resizeThrottle: -1,
					intervalCheck: !0,
					intervalDelay: 100,
					delayedCall: !1,
					offset: {},
					containment: null,
					children: n.a.createElement("span", null)
				}), g(f, "propTypes", {
					onChange: o.a.func,
					active: o.a.bool,
					partialVisibility: o.a.oneOfType([o.a.bool, o.a.oneOf(["top", "right", "bottom", "left"])]),
					delayedCall: o.a.bool,
					offset: o.a.oneOfType([o.a.shape({
						top: o.a.number,
						left: o.a.number,
						bottom: o.a.number,
						right: o.a.number
					}), o.a.shape({
						direction: o.a.oneOf(["top", "right", "bottom", "left"]),
						value: o.a.number
					})]),
					scrollCheck: o.a.bool,
					scrollDelay: o.a.number,
					scrollThrottle: o.a.number,
					resizeCheck: o.a.bool,
					resizeDelay: o.a.number,
					resizeThrottle: o.a.number,
					intervalCheck: o.a.bool,
					intervalDelay: o.a.number,
					containment: "undefined" !== typeof window ? o.a.instanceOf(window.Element) : o.a.any,
					children: o.a.oneOfType([o.a.element, o.a.func]),
					minTopValue: o.a.number
				})
			}, function(e, t, r) {
				"use strict";
				var a = r(6);

				function n() {}

				function i() {}
				i.resetWarningCache = n, e.exports = function() {
					function e(e, t, r, n, i, s) {
						if (s !== a) {
							var p = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
							throw p.name = "Invariant Violation", p
						}
					}

					function t() {
						return e
					}
					e.isRequired = e;
					var r = {
						array: e,
						bool: e,
						func: e,
						number: e,
						object: e,
						string: e,
						symbol: e,
						any: e,
						arrayOf: t,
						element: e,
						elementType: e,
						instanceOf: t,
						node: e,
						objectOf: t,
						oneOf: t,
						oneOfType: t,
						shape: t,
						exact: t,
						checkPropTypes: i,
						resetWarningCache: n
					};
					return r.PropTypes = r, r
				}
			}, function(e, t, r) {
				"use strict";
				e.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
			}])
		}, e.exports = a(r(0), r(11))
	}, function(e, t) {
		var r;
		r = function() {
			return this
		}();
		try {
			r = r || new Function("return this")()
		} catch (a) {
			"object" === typeof window && (r = window)
		}
		e.exports = r
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m, d, l, y, g, f, v, b, P, S, w, k, _, I, q, L, x, E, N, O, D, T, j, F, C, A, H, R, M, $, z = r(32),
			U = r(20),
			B = r(29),
			W = r(16),
			V = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.getData = t.KeywordCxt = t.validateFunctionCode = void 0;
		var G = r(137),
			K = r(46),
			Q = r(78),
			Y = r(46),
			J = r(146),
			X = r(147),
			Z = r(148),
			ee = r(4),
			te = r(24),
			re = r(47),
			ae = r(7),
			ne = r(44);

		function ie(e, t) {
			var r = e.gen,
				f = e.validateName,
				v = e.schema,
				b = e.schemaEnv,
				P = e.opts;
			P.code.es5 ? r.func(f, ee._(a || (a = V(["", ", ", ""])), te.default.data, te.default.valCxt), b.$async, (function() {
				r.code(ee._(n || (n = V(['"use strict"; ', ""])), se(v, P))),
					function(e, t) {
						e.if(te.default.valCxt, (function() {
							e.var(te.default.instancePath, ee._(o || (o = V(["", ".", ""])), te.default.valCxt, te.default.instancePath)), e.var(te.default.parentData, ee._(c || (c = V(["", ".", ""])), te.default.valCxt, te.default.parentData)), e.var(te.default.parentDataProperty, ee._(h || (h = V(["", ".", ""])), te.default.valCxt, te.default.parentDataProperty)), e.var(te.default.rootData, ee._(u || (u = V(["", ".", ""])), te.default.valCxt, te.default.rootData)), t.dynamicRef && e.var(te.default.dynamicAnchors, ee._(m || (m = V(["", ".", ""])), te.default.valCxt, te.default.dynamicAnchors))
						}), (function() {
							e.var(te.default.instancePath, ee._(d || (d = V(['""'])))), e.var(te.default.parentData, ee._(l || (l = V(["undefined"])))), e.var(te.default.parentDataProperty, ee._(y || (y = V(["undefined"])))), e.var(te.default.rootData, te.default.data), t.dynamicRef && e.var(te.default.dynamicAnchors, ee._(g || (g = V(["{}"]))))
						}))
					}(r, P), r.code(t)
			})) : r.func(f, ee._(i || (i = V(["", ", ", ""])), te.default.data, function(e) {
				return ee._(s || (s = V(["{", '="", ', ", ", ", ", "=", "", "}={}"])), te.default.instancePath, te.default.parentData, te.default.parentDataProperty, te.default.rootData, te.default.data, e.dynamicRef ? ee._(p || (p = V([", ", "={}"])), te.default.dynamicAnchors) : ee.nil)
			}(P)), b.$async, (function() {
				return r.code(se(v, P)).code(t)
			}))
		}

		function se(e, t) {
			var r = "object" == typeof e && e[t.schemaId];
			return r && (t.code.source || t.code.process) ? ee._(_ || (_ = V(["/*# sourceURL=", " */"])), r) : ee.nil
		}

		function pe(e, t) {
			ce(e) && (he(e), oe(e)) ? function(e, t) {
				var r = e.schema,
					a = e.gen;
				e.opts.$comment && r.$comment && me(e);
				(function(e) {
					var t = e.schema[e.opts.schemaId];
					t && (e.baseId = re.resolveUrl(e.baseId, t))
				})(e),
				function(e) {
					if (e.schema.$async && !e.schemaEnv.$async) throw new Error("async schema in sync schema")
				}(e);
				var n = a.const("_errs", te.default.errors);
				ue(e, n), a.var(t, ee._(I || (I = V(["", " === ", ""])), n, te.default.errors))
			}(e, t) : G.boolOrEmptySchema(e, t)
		}

		function oe(e) {
			var t = e.schema,
				r = e.self;
			if ("boolean" == typeof t) return !t;
			for (var a in t)
				if (r.RULES.all[a]) return !0;
			return !1
		}

		function ce(e) {
			return "boolean" != typeof e.schema
		}

		function he(e) {
			ae.checkUnknownRules(e),
				function(e) {
					var t = e.schema,
						r = e.errSchemaPath,
						a = e.opts,
						n = e.self;
					t.$ref && a.ignoreKeywordsWithRef && ae.schemaHasRulesButRef(t, n.RULES) && n.logger.warn('$ref: keywords ignored in schema at path "'.concat(r, '"'))
				}(e)
		}

		function ue(e, t) {
			if (e.opts.jtd) return de(e, [], !1, t);
			var r = K.getSchemaTypes(e.schema);
			de(e, r, !K.coerceAndCheckDataType(e, r), t)
		}

		function me(e) {
			var t = e.gen,
				r = e.schemaEnv,
				a = e.schema,
				n = e.errSchemaPath,
				i = e.opts,
				s = a.$comment;
			if (!0 === i.$comment) t.code(ee._(q || (q = V(["", ".logger.log(", ")"])), te.default.self, s));
			else if ("function" == typeof i.$comment) {
				var p = ee.str(L || (L = V(["", "/$comment"])), n),
					o = t.scopeValue("root", {
						ref: r.root
					});
				t.code(ee._(x || (x = V(["", ".opts.$comment(", ", ", ", ", ".schema)"])), te.default.self, s, p, o))
			}
		}

		function de(e, t, r, a) {
			var n = e.gen,
				i = e.schema,
				s = e.data,
				p = e.allErrors,
				o = e.opts,
				c = e.self.RULES;

			function h(c) {
				Q.shouldUseGroup(i, c) && (c.type ? (n.if(Y.checkDataType(c.type, s, o.strictNumbers)), le(e, c), 1 === t.length && t[0] === c.type && r && (n.else(), Y.reportTypeError(e)), n.endIf()) : le(e, c), p || n.if(ee._(F || (F = V(["", " === ", ""])), te.default.errors, a || 0)))
			}!i.$ref || !o.ignoreKeywordsWithRef && ae.schemaHasRulesButRef(i, c) ? (o.jtd || function(e, t) {
				if (e.schemaEnv.meta || !e.opts.strictTypes) return;
				(function(e, t) {
					if (!t.length) return;
					if (!e.dataTypes.length) return void(e.dataTypes = t);
					t.forEach((function(t) {
						ge(e.dataTypes, t) || fe(e, 'type "'.concat(t, '" not allowed by context "').concat(e.dataTypes.join(","), '"'))
					})), e.dataTypes = e.dataTypes.filter((function(e) {
						return ge(t, e)
					}))
				})(e, t), e.opts.allowUnionTypes || function(e, t) {
					t.length > 1 && (2 !== t.length || !t.includes("null")) && fe(e, "use allowUnionTypes to allow union type keyword")
				}(e, t);
				! function(e, t) {
					var r = e.self.RULES.all;
					for (var a in r) {
						var n = r[a];
						if ("object" == typeof n && Q.shouldUseRule(e.schema, n)) {
							var i = n.definition.type;
							i.length && !i.some((function(e) {
								return ye(t, e)
							})) && fe(e, 'missing type "'.concat(i.join(","), '" for keyword "').concat(a, '"'))
						}
					}
				}(e, e.dataTypes)
			}(e, t), n.block((function() {
				var e, t = W(c.rules);
				try {
					for (t.s(); !(e = t.n()).done;) {
						h(e.value)
					}
				} catch (r) {
					t.e(r)
				} finally {
					t.f()
				}
				h(c.post)
			}))) : n.block((function() {
				return be(e, "$ref", c.all.$ref.definition)
			}))
		}

		function le(e, t) {
			var r = e.gen,
				a = e.schema;
			e.opts.useDefaults && J.assignDefaults(e, t.type), r.block((function() {
				var r, n = W(t.rules);
				try {
					for (n.s(); !(r = n.n()).done;) {
						var i = r.value;
						Q.shouldUseRule(a, i) && be(e, i.keyword, i.definition, t.type)
					}
				} catch (s) {
					n.e(s)
				} finally {
					n.f()
				}
			}))
		}

		function ye(e, t) {
			return e.includes(t) || "number" === t && e.includes("integer")
		}

		function ge(e, t) {
			return e.includes(t) || "integer" === t && e.includes("number")
		}

		function fe(e, t) {
			var r = e.schemaEnv.baseId + e.errSchemaPath;
			t += ' at "'.concat(r, '" (strictTypes)'), ae.checkStrictMode(e, t, e.opts.strictTypes)
		}
		t.validateFunctionCode = function(e) {
			ce(e) && (he(e), oe(e)) ? function(e) {
				var t = e.schema,
					r = e.opts,
					a = e.gen;
				ie(e, (function() {
					r.$comment && t.$comment && me(e),
						function(e) {
							var t = e.schema,
								r = e.opts;
							void 0 !== t.default && r.useDefaults && r.strictSchema && ae.checkStrictMode(e, "default is ignored in the schema root")
						}(e), a.let(te.default.vErrors, null), a.let(te.default.errors, 0), r.unevaluated && function(e) {
							var t = e.gen,
								r = e.validateName;
							e.evaluated = t.const("evaluated", ee._(f || (f = V(["", ".evaluated"])), r)), t.if(ee._(v || (v = V(["", ".dynamicProps"])), e.evaluated), (function() {
								return t.assign(ee._(b || (b = V(["", ".props"])), e.evaluated), ee._(P || (P = V(["undefined"]))))
							})), t.if(ee._(S || (S = V(["", ".dynamicItems"])), e.evaluated), (function() {
								return t.assign(ee._(w || (w = V(["", ".items"])), e.evaluated), ee._(k || (k = V(["undefined"]))))
							}))
						}(e), ue(e),
						function(e) {
							var t = e.gen,
								r = e.schemaEnv,
								a = e.validateName,
								n = e.ValidationError,
								i = e.opts;
							r.$async ? t.if(ee._(E || (E = V(["", " === 0"])), te.default.errors), (function() {
								return t.return(te.default.data)
							}), (function() {
								return t.throw(ee._(N || (N = V(["new ", "(", ")"])), n, te.default.vErrors))
							})) : (t.assign(ee._(O || (O = V(["", ".errors"])), a), te.default.vErrors), i.unevaluated && function(e) {
								var t = e.gen,
									r = e.evaluated,
									a = e.props,
									n = e.items;
								a instanceof ee.Name && t.assign(ee._(T || (T = V(["", ".props"])), r), a);
								n instanceof ee.Name && t.assign(ee._(j || (j = V(["", ".items"])), r), n)
							}(e), t.return(ee._(D || (D = V(["", " === 0"])), te.default.errors)))
						}(e)
				}))
			}(e) : ie(e, (function() {
				return G.topBoolOrEmptySchema(e)
			}))
		};
		var ve = function() {
			function e(t, r, a) {
				if (U(this, e), X.validateKeywordUsage(t, r, a), this.gen = t.gen, this.allErrors = t.allErrors, this.keyword = a, this.data = t.data, this.schema = t.schema[a], this.$data = r.$data && t.opts.$data && this.schema && this.schema.$data, this.schemaValue = ae.schemaRefOrVal(t, this.schema, a, this.$data), this.schemaType = r.schemaType, this.parentSchema = t.schema, this.params = {}, this.it = t, this.def = r, this.$data) this.schemaCode = t.gen.const("vSchema", we(this.$data, t));
				else if (this.schemaCode = this.schemaValue, !X.validSchemaType(this.schema, r.schemaType, r.allowUndefined)) throw new Error("".concat(a, " value must be ").concat(JSON.stringify(r.schemaType)));
				("code" in r ? r.trackErrors : !1 !== r.errors) && (this.errsCount = t.gen.const("_errs", te.default.errors))
			}
			return B(e, [{
				key: "result",
				value: function(e, t, r) {
					this.failResult(ee.not(e), t, r)
				}
			}, {
				key: "failResult",
				value: function(e, t, r) {
					this.gen.if(e), r ? r() : this.error(), t ? (this.gen.else(), t(), this.allErrors && this.gen.endIf()) : this.allErrors ? this.gen.endIf() : this.gen.else()
				}
			}, {
				key: "pass",
				value: function(e, t) {
					this.failResult(ee.not(e), void 0, t)
				}
			}, {
				key: "fail",
				value: function(e) {
					if (void 0 === e) return this.error(), void(this.allErrors || this.gen.if(!1));
					this.gen.if(e), this.error(), this.allErrors ? this.gen.endIf() : this.gen.else()
				}
			}, {
				key: "fail$data",
				value: function(e) {
					if (!this.$data) return this.fail(e);
					var t = this.schemaCode;
					this.fail(ee._(C || (C = V(["", " !== undefined && (", ")"])), t, ee.or(this.invalid$data(), e)))
				}
			}, {
				key: "error",
				value: function(e, t, r) {
					if (t) return this.setParams(t), this._error(e, r), void this.setParams({});
					this._error(e, r)
				}
			}, {
				key: "_error",
				value: function(e, t) {
					(e ? ne.reportExtraError : ne.reportError)(this, this.def.error, t)
				}
			}, {
				key: "$dataError",
				value: function() {
					ne.reportError(this, this.def.$dataError || ne.keyword$DataError)
				}
			}, {
				key: "reset",
				value: function() {
					if (void 0 === this.errsCount) throw new Error('add "trackErrors" to keyword definition');
					ne.resetErrorsCount(this.gen, this.errsCount)
				}
			}, {
				key: "ok",
				value: function(e) {
					this.allErrors || this.gen.if(e)
				}
			}, {
				key: "setParams",
				value: function(e, t) {
					t ? Object.assign(this.params, e) : this.params = e
				}
			}, {
				key: "block$data",
				value: function(e, t) {
					var r = this,
						a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : ee.nil;
					this.gen.block((function() {
						r.check$data(e, a), t()
					}))
				}
			}, {
				key: "check$data",
				value: function() {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ee.nil,
						t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ee.nil;
					if (this.$data) {
						var r = this.gen,
							a = this.schemaCode,
							n = this.schemaType,
							i = this.def;
						r.if(ee.or(ee._(A || (A = V(["", " === undefined"])), a), t)), e !== ee.nil && r.assign(e, !0), (n.length || i.validateSchema) && (r.elseIf(this.invalid$data()), this.$dataError(), e !== ee.nil && r.assign(e, !1)), r.else()
					}
				}
			}, {
				key: "invalid$data",
				value: function() {
					var e = this.gen,
						t = this.schemaCode,
						r = this.schemaType,
						a = this.def,
						n = this.it;
					return ee.or(function() {
						if (r.length) {
							if (!(t instanceof ee.Name)) throw new Error("ajv implementation error");
							var e = Array.isArray(r) ? r : [r];
							return ee._(H || (H = V(["", ""])), Y.checkDataTypes(e, t, n.opts.strictNumbers, Y.DataType.Wrong))
						}
						return ee.nil
					}(), function() {
						if (a.validateSchema) {
							var r = e.scopeValue("validate$data", {
								ref: a.validateSchema
							});
							return ee._(R || (R = V(["!", "(", ")"])), r, t)
						}
						return ee.nil
					}())
				}
			}, {
				key: "subschema",
				value: function(e, t) {
					var r = Z.getSubschema(this.it, e);
					Z.extendSubschemaData(r, this.it, e), Z.extendSubschemaMode(r, e);
					var a = z(z(z({}, this.it), r), {}, {
						items: void 0,
						props: void 0
					});
					return pe(a, t), a
				}
			}, {
				key: "mergeEvaluated",
				value: function(e, t) {
					var r = this.it,
						a = this.gen;
					r.opts.unevaluated && (!0 !== r.props && void 0 !== e.props && (r.props = ae.mergeEvaluated.props(a, e.props, r.props, t)), !0 !== r.items && void 0 !== e.items && (r.items = ae.mergeEvaluated.items(a, e.items, r.items, t)))
				}
			}, {
				key: "mergeValidEvaluated",
				value: function(e, t) {
					var r = this,
						a = this.it,
						n = this.gen;
					if (a.opts.unevaluated && (!0 !== a.props || !0 !== a.items)) return n.if(t, (function() {
						return r.mergeEvaluated(e, ee.Name)
					})), !0
				}
			}]), e
		}();

		function be(e, t, r, a) {
			var n = new ve(e, r, t);
			"code" in r ? r.code(n, a) : n.$data && r.validate ? X.funcKeywordCode(n, r) : "macro" in r ? X.macroKeywordCode(n, r) : (r.compile || r.validate) && X.funcKeywordCode(n, r)
		}
		t.KeywordCxt = ve;
		var Pe = /^\/(?:[^~]|~0|~1)*$/,
			Se = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;

		function we(e, t) {
			var r, a, n = t.dataLevel,
				i = t.dataNames,
				s = t.dataPathArr;
			if ("" === e) return te.default.rootData;
			if ("/" === e[0]) {
				if (!Pe.test(e)) throw new Error("Invalid JSON-pointer: ".concat(e));
				r = e, a = te.default.rootData
			} else {
				var p = Se.exec(e);
				if (!p) throw new Error("Invalid JSON-pointer: ".concat(e));
				var o = +p[1];
				if ("#" === (r = p[2])) {
					if (o >= n) throw new Error(l("property/index", o));
					return s[n - o]
				}
				if (o > n) throw new Error(l("data", o));
				if (a = i[n - o], !r) return a
			}
			var c, h = a,
				u = r.split("/"),
				m = W(u);
			try {
				for (m.s(); !(c = m.n()).done;) {
					var d = c.value;
					d && (a = ee._(M || (M = V(["", "", ""])), a, ee.getProperty(ae.unescapeJsonPointer(d))), h = ee._($ || ($ = V(["", " && ", ""])), h, a))
				}
			} catch (y) {
				m.e(y)
			} finally {
				m.f()
			}
			return h;

			function l(e, t) {
				return "Cannot access ".concat(e, " ").concat(t, " levels up, current level is ").concat(n)
			}
		}
		t.getData = we
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m, d, l, y, g, f, v, b, P, S, w, k, _, I, q, L, x = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.extendErrors = t.resetErrorsCount = t.reportExtraError = t.reportError = t.keyword$DataError = t.keywordError = void 0;
		var E = r(4),
			N = r(7),
			O = r(24);

		function D(e, t) {
			var r = e.const("err", t);
			e.if(E._(g || (g = x(["", " === null"])), O.default.vErrors), (function() {
				return e.assign(O.default.vErrors, E._(f || (f = x(["[", "]"])), r))
			}), E._(v || (v = x(["", ".push(", ")"])), O.default.vErrors, r)), e.code(E._(b || (b = x(["", "++"])), O.default.errors))
		}

		function T(e, t) {
			var r = e.gen,
				a = e.validateName;
			e.schemaEnv.$async ? r.throw(E._(P || (P = x(["new ", "(", ")"])), e.ValidationError, t)) : (r.assign(E._(S || (S = x(["", ".errors"])), a), t), r.return(!1))
		}
		t.keywordError = {
			message: function(e) {
				var t = e.keyword;
				return E.str(a || (a = x(['must pass "', '" keyword validation'])), t)
			}
		}, t.keyword$DataError = {
			message: function(e) {
				var t = e.keyword,
					r = e.schemaType;
				return r ? E.str(n || (n = x(['"', '" keyword must be ', " ($data)"])), t, r) : E.str(i || (i = x(['"', '" keyword is invalid ($data)'])), t)
			}
		}, t.reportError = function(e) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : t.keywordError,
				a = arguments.length > 2 ? arguments[2] : void 0,
				n = arguments.length > 3 ? arguments[3] : void 0,
				i = e.it,
				p = i.gen,
				o = i.compositeRule,
				c = i.allErrors,
				h = F(e, r, a);
			(null !== n && void 0 !== n ? n : o || c) ? D(p, h): T(i, E._(s || (s = x(["[", "]"])), h))
		}, t.reportExtraError = function(e) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : t.keywordError,
				a = arguments.length > 2 ? arguments[2] : void 0,
				n = e.it,
				i = n.gen,
				s = n.compositeRule,
				p = n.allErrors,
				o = F(e, r, a);
			D(i, o), s || p || T(n, O.default.vErrors)
		}, t.resetErrorsCount = function(e, t) {
			e.assign(O.default.errors, t), e.if(E._(p || (p = x(["", " !== null"])), O.default.vErrors), (function() {
				return e.if(t, (function() {
					return e.assign(E._(o || (o = x(["", ".length"])), O.default.vErrors), t)
				}), (function() {
					return e.assign(O.default.vErrors, null)
				}))
			}))
		}, t.extendErrors = function(e) {
			var t = e.gen,
				r = e.keyword,
				a = e.schemaValue,
				n = e.data,
				i = e.errsCount,
				s = e.it;
			if (void 0 === i) throw new Error("ajv implementation error");
			var p = t.name("err");
			t.forRange("i", i, O.default.errors, (function(e) {
				t.const(p, E._(c || (c = x(["", "[", "]"])), O.default.vErrors, e)), t.if(E._(h || (h = x(["", ".instancePath === undefined"])), p), (function() {
					return t.assign(E._(u || (u = x(["", ".instancePath"])), p), E.strConcat(O.default.instancePath, s.errorPath))
				})), t.assign(E._(m || (m = x(["", ".schemaPath"])), p), E.str(d || (d = x(["", "/", ""])), s.errSchemaPath, r)), s.opts.verbose && (t.assign(E._(l || (l = x(["", ".schema"])), p), a), t.assign(E._(y || (y = x(["", ".data"])), p), n))
			}))
		};
		var j = {
			keyword: new E.Name("keyword"),
			schemaPath: new E.Name("schemaPath"),
			params: new E.Name("params"),
			propertyName: new E.Name("propertyName"),
			message: new E.Name("message"),
			schema: new E.Name("schema"),
			parentSchema: new E.Name("parentSchema")
		};

		function F(e, t, r) {
			return !1 === e.it.createErrors ? E._(w || (w = x(["{}"]))) : function(e, t) {
				var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
					a = e.gen,
					n = [C(e.it, r), A(e, r)];
				return H(e, t, n), a.object.apply(a, n)
			}(e, t, r)
		}

		function C(e, t) {
			var r = e.errorPath,
				a = t.instancePath,
				n = a ? E.str(k || (k = x(["", "", ""])), r, N.getErrorPath(a, N.Type.Str)) : r;
			return [O.default.instancePath, E.strConcat(O.default.instancePath, n)]
		}

		function A(e, t) {
			var r = e.keyword,
				a = e.it.errSchemaPath,
				n = t.schemaPath,
				i = t.parentSchema ? a : E.str(_ || (_ = x(["", "/", ""])), a, r);
			return n && (i = E.str(I || (I = x(["", "", ""])), i, N.getErrorPath(n, N.Type.Str))), [j.schemaPath, i]
		}

		function H(e, t, r) {
			var a = t.params,
				n = t.message,
				i = e.keyword,
				s = e.data,
				p = e.schemaValue,
				o = e.it,
				c = o.opts,
				h = o.propertyName,
				u = o.topSchemaRef,
				m = o.schemaPath;
			r.push([j.keyword, i], [j.params, "function" == typeof a ? a(e) : a || E._(q || (q = x(["{}"])))]), c.messages && r.push([j.message, "function" == typeof n ? n(e) : n]), c.verbose && r.push([j.schema, p], [j.parentSchema, E._(L || (L = x(["", "", ""])), u, m)], [O.default.data, s]), h && r.push([j.propertyName, h])
		}
	}, function(e, t, r) {
		"use strict";
		var a, n, i = r(5),
			s = r(33),
			p = r(75),
			o = r(29),
			c = r(30),
			h = r(31),
			u = r(20);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.regexpCode = t.getProperty = t.safeStringify = t.stringify = t.strConcat = t.addCodeArg = t.str = t._ = t.nil = t._Code = t.Name = t.IDENTIFIER = t._CodeOrName = void 0;
		var m = function e() {
			u(this, e)
		};
		t._CodeOrName = m, t.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
		var d = function(e) {
			c(a, e);
			var r = h(a);

			function a(e) {
				var n;
				if (u(this, a), n = r.call(this), !t.IDENTIFIER.test(e)) throw new Error("CodeGen: name must be a valid identifier");
				return n.str = e, n
			}
			return o(a, [{
				key: "toString",
				value: function() {
					return this.str
				}
			}, {
				key: "emptyStr",
				value: function() {
					return !1
				}
			}, {
				key: "names",
				get: function() {
					return p({}, this.str, 1)
				}
			}]), a
		}(m);
		t.Name = d;
		var l = function(e) {
			c(r, e);
			var t = h(r);

			function r(e) {
				var a;
				return u(this, r), (a = t.call(this))._items = "string" === typeof e ? [e] : e, a
			}
			return o(r, [{
				key: "toString",
				value: function() {
					return this.str
				}
			}, {
				key: "emptyStr",
				value: function() {
					if (this._items.length > 1) return !1;
					var e = this._items[0];
					return "" === e || '""' === e
				}
			}, {
				key: "str",
				get: function() {
					var e;
					return null !== (e = this._str) && void 0 !== e ? e : this._str = this._items.reduce((function(e, t) {
						return "".concat(e).concat(t)
					}), "")
				}
			}, {
				key: "names",
				get: function() {
					var e;
					return null !== (e = this._names) && void 0 !== e ? e : this._names = this._items.reduce((function(e, t) {
						return t instanceof d && (e[t.str] = (e[t.str] || 0) + 1), e
					}), {})
				}
			}]), r
		}(m);

		function y(e) {
			for (var t = [e[0]], r = 0, a = arguments.length, n = new Array(a > 1 ? a - 1 : 0), i = 1; i < a; i++) n[i - 1] = arguments[i];
			for (; r < n.length;) v(t, n[r]), t.push(e[++r]);
			return new l(t)
		}
		t._Code = l, t.nil = new l(""), t._ = y;
		var g = new l("+");

		function f(e) {
			for (var t = [S(e[0])], r = 0, a = arguments.length, n = new Array(a > 1 ? a - 1 : 0), i = 1; i < a; i++) n[i - 1] = arguments[i];
			for (; r < n.length;) t.push(g), v(t, n[r]), t.push(g, S(e[++r]));
			return b(t), new l(t)
		}

		function v(e, t) {
			var r;
			t instanceof l ? e.push.apply(e, s(t._items)) : t instanceof d ? e.push(t) : e.push("number" == typeof(r = t) || "boolean" == typeof r || null === r ? r : S(Array.isArray(r) ? r.join(",") : r))
		}

		function b(e) {
			for (var t = 1; t < e.length - 1;) {
				if (e[t] === g) {
					var r = P(e[t - 1], e[t + 1]);
					if (void 0 !== r) {
						e.splice(t - 1, 3, r);
						continue
					}
					e[t++] = "+"
				}
				t++
			}
		}

		function P(e, t) {
			if ('""' === t) return e;
			if ('""' === e) return t;
			if ("string" == typeof e) {
				if (t instanceof d || '"' !== e[e.length - 1]) return;
				return "string" != typeof t ? "".concat(e.slice(0, -1)).concat(t, '"') : '"' === t[0] ? e.slice(0, -1) + t.slice(1) : void 0
			}
			return "string" != typeof t || '"' !== t[0] || e instanceof d ? void 0 : '"'.concat(e).concat(t.slice(1))
		}

		function S(e) {
			return JSON.stringify(e).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029")
		}
		t.str = f, t.addCodeArg = v, t.strConcat = function(e, t) {
			return t.emptyStr() ? e : e.emptyStr() ? t : f(a || (a = i(["", "", ""])), e, t)
		}, t.stringify = function(e) {
			return new l(S(e))
		}, t.safeStringify = S, t.getProperty = function(e) {
			return "string" == typeof e && t.IDENTIFIER.test(e) ? new l(".".concat(e)) : y(n || (n = i(["[", "]"])), e)
		}, t.regexpCode = function(e) {
			return new l(e.toString())
		}
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m, d, l, y, g, f, v, b, P, S, w, k, _, I, q, L, x, E, N, O, D, T, j, F, C = r(16),
			A = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.reportTypeError = t.checkDataTypes = t.checkDataType = t.coerceAndCheckDataType = t.getJSONTypes = t.getSchemaTypes = t.DataType = void 0;
		var H, R = r(77),
			M = r(78),
			$ = r(44),
			z = r(4),
			U = r(7);

		function B(e) {
			var t = Array.isArray(e) ? e : e ? [e] : [];
			if (t.every(R.isJSONType)) return t;
			throw new Error("type must be JSONType or JSONType[]: " + t.join(","))
		}! function(e) {
			e[e.Correct = 0] = "Correct", e[e.Wrong = 1] = "Wrong"
		}(H = t.DataType || (t.DataType = {})), t.getSchemaTypes = function(e) {
			var t = B(e.type);
			if (t.includes("null")) {
				if (!1 === e.nullable) throw new Error("type: null contradicts nullable: false")
			} else {
				if (!t.length && void 0 !== e.nullable) throw new Error('"nullable" cannot be used without "type"');
				!0 === e.nullable && t.push("null")
			}
			return t
		}, t.getJSONTypes = B, t.coerceAndCheckDataType = function(e, t) {
			var r = e.gen,
				I = e.data,
				q = e.opts,
				L = function(e, t) {
					return t ? e.filter((function(e) {
						return W.has(e) || "array" === t && "array" === e
					})) : []
				}(t, q.coerceTypes),
				x = t.length > 0 && !(0 === L.length && 1 === t.length && M.schemaHasRulesForType(e, t[0]));
			if (x) {
				var E = G(t, I, q.strictNumbers, H.Wrong);
				r.if(E, (function() {
					L.length ? function(e, t, r) {
						var I = e.gen,
							q = e.data,
							L = e.opts,
							x = I.let("dataType", z._(a || (a = A(["typeof ", ""])), q)),
							E = I.let("coerced", z._(n || (n = A(["undefined"]))));
						"array" === L.coerceTypes && I.if(z._(i || (i = A(["", " == 'object' && Array.isArray(", ") && ", ".length == 1"])), x, q, q), (function() {
							return I.assign(q, z._(s || (s = A(["", "[0]"])), q)).assign(x, z._(p || (p = A(["typeof ", ""])), q)).if(G(t, q, L.strictNumbers), (function() {
								return I.assign(E, q)
							}))
						}));
						I.if(z._(o || (o = A(["", " !== undefined"])), E));
						var N, O = C(r);
						try {
							for (O.s(); !(N = O.n()).done;) {
								var D = N.value;
								(W.has(D) || "array" === D && "array" === L.coerceTypes) && T(D)
							}
						} catch (j) {
							O.e(j)
						} finally {
							O.f()
						}

						function T(e) {
							switch (e) {
								case "string":
									return void I.elseIf(z._(h || (h = A(["", ' == "number" || ', ' == "boolean"'])), x, x)).assign(E, z._(u || (u = A(['"" + ', ""])), q)).elseIf(z._(m || (m = A(["", " === null"])), q)).assign(E, z._(d || (d = A(['""']))));
								case "number":
									return void I.elseIf(z._(l || (l = A(["", ' == "boolean" || ', " === null\n              || (", ' == "string" && ', " && ", " == +", ")"])), x, q, x, q, q, q)).assign(E, z._(y || (y = A(["+", ""])), q));
								case "integer":
									return void I.elseIf(z._(g || (g = A(["", ' === "boolean" || ', " === null\n              || (", ' === "string" && ', " && ", " == +", " && !(", " % 1))"])), x, q, x, q, q, q, q)).assign(E, z._(f || (f = A(["+", ""])), q));
								case "boolean":
									return void I.elseIf(z._(v || (v = A(["", ' === "false" || ', " === 0 || ", " === null"])), q, q, q)).assign(E, !1).elseIf(z._(b || (b = A(["", ' === "true" || ', " === 1"])), q, q)).assign(E, !0);
								case "null":
									return I.elseIf(z._(P || (P = A(["", ' === "" || ', " === 0 || ", " === false"])), q, q, q)), void I.assign(E, null);
								case "array":
									I.elseIf(z._(S || (S = A(["", ' === "string" || ', ' === "number"\n              || ', ' === "boolean" || ', " === null"])), x, x, x, q)).assign(E, z._(w || (w = A(["[", "]"])), q))
							}
						}
						I.else(), Q(e), I.endIf(), I.if(z._(c || (c = A(["", " !== undefined"])), E), (function() {
							I.assign(q, E),
								function(e, t) {
									var r = e.gen,
										a = e.parentData,
										n = e.parentDataProperty;
									r.if(z._(k || (k = A(["", " !== undefined"])), a), (function() {
										return r.assign(z._(_ || (_ = A(["", "[", "]"])), a, n), t)
									}))
								}(e, E)
						}))
					}(e, t, L) : Q(e)
				}))
			}
			return x
		};
		var W = new Set(["string", "number", "integer", "boolean", "null"]);

		function V(e, t, r) {
			var a, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : H.Correct,
				i = n === H.Correct ? z.operators.EQ : z.operators.NEQ;
			switch (e) {
				case "null":
					return z._(I || (I = A(["", " ", " null"])), t, i);
				case "array":
					a = z._(q || (q = A(["Array.isArray(", ")"])), t);
					break;
				case "object":
					a = z._(L || (L = A(["", " && typeof ", ' == "object" && !Array.isArray(', ")"])), t, t, t);
					break;
				case "integer":
					a = s(z._(x || (x = A(["!(", " % 1) && !isNaN(", ")"])), t, t));
					break;
				case "number":
					a = s();
					break;
				default:
					return z._(E || (E = A(["typeof ", " ", " ", ""])), t, i, e)
			}
			return n === H.Correct ? a : z.not(a);

			function s() {
				var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : z.nil;
				return z.and(z._(N || (N = A(["typeof ", ' == "number"'])), t), e, r ? z._(O || (O = A(["isFinite(", ")"])), t) : z.nil)
			}
		}

		function G(e, t, r, a) {
			if (1 === e.length) return V(e[0], t, r, a);
			var n, i = U.toHash(e);
			if (i.array && i.object) {
				var s = z._(D || (D = A(["typeof ", ' != "object"'])), t);
				n = i.null ? s : z._(T || (T = A(["!", " || ", ""])), t, s), delete i.null, delete i.array, delete i.object
			} else n = z.nil;
			for (var p in i.number && delete i.integer, i) n = z.and(n, V(p, t, r, a));
			return n
		}
		t.checkDataType = V, t.checkDataTypes = G;
		var K = {
			message: function(e) {
				var t = e.schema;
				return "must be ".concat(t)
			},
			params: function(e) {
				var t = e.schema,
					r = e.schemaValue;
				return "string" == typeof t ? z._(j || (j = A(["{type: ", "}"])), t) : z._(F || (F = A(["{type: ", "}"])), r)
			}
		};

		function Q(e) {
			var t = function(e) {
				var t = e.gen,
					r = e.data,
					a = e.schema,
					n = U.schemaRefOrVal(e, a, "type");
				return {
					gen: t,
					keyword: "type",
					data: r,
					schema: a.type,
					schemaCode: n,
					schemaValue: n,
					parentSchema: a,
					params: {},
					it: e
				}
			}(e);
			$.reportError(t, K)
		}
		t.reportTypeError = Q
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.getSchemaRefs = t.resolveUrl = t.normalizeId = t._getFullPath = t.getFullPath = t.inlineRef = void 0;
		var a = r(7),
			n = r(79),
			i = r(149),
			s = r(80),
			p = new Set(["type", "format", "pattern", "maxLength", "minLength", "maxProperties", "minProperties", "maxItems", "minItems", "maximum", "minimum", "uniqueItems", "multipleOf", "required", "enum", "const"]);
		t.inlineRef = function(e) {
			var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
			return "boolean" == typeof e || (!0 === t ? !c(e) : !!t && h(e) <= t)
		};
		var o = new Set(["$ref", "$recursiveRef", "$recursiveAnchor", "$dynamicRef", "$dynamicAnchor"]);

		function c(e) {
			for (var t in e) {
				if (o.has(t)) return !0;
				var r = e[t];
				if (Array.isArray(r) && r.some(c)) return !0;
				if ("object" == typeof r && c(r)) return !0
			}
			return !1
		}

		function h(e) {
			var t = 0;
			for (var r in e) {
				if ("$ref" === r) return 1 / 0;
				if (t++, !p.has(r) && ("object" == typeof e[r] && a.eachItem(e[r], (function(e) {
						return t += h(e)
					})), t === 1 / 0)) return 1 / 0
			}
			return t
		}

		function u() {
			var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
				t = arguments.length > 1 ? arguments[1] : void 0;
			!1 !== t && (e = l(e));
			var r = s.parse(e);
			return m(r)
		}

		function m(e) {
			return s.serialize(e).split("#")[0] + "#"
		}
		t.getFullPath = u, t._getFullPath = m;
		var d = /#\/?$/;

		function l(e) {
			return e ? e.replace(d, "") : ""
		}
		t.normalizeId = l, t.resolveUrl = function(e, t) {
			return t = l(t), s.resolve(e, t)
		};
		var y = /^[a-z_][-a-z0-9._]*$/i;
		t.getSchemaRefs = function(e) {
			var t = this;
			if ("boolean" == typeof e) return {};
			var r = this.opts.schemaId,
				a = l(e[r]),
				p = {
					"": a
				},
				o = u(a, !1),
				c = {},
				h = new Set;
			return i(e, {
				allKeys: !0
			}, (function(e, a, n, i) {
				if (void 0 !== i) {
					var u = o + a,
						g = p[i];
					"string" == typeof e[r] && (g = f.call(t, e[r])), v.call(t, e.$anchor), v.call(t, e.$dynamicAnchor), p[a] = g
				}

				function f(t) {
					if (t = l(g ? s.resolve(g, t) : t), h.has(t)) throw d(t);
					h.add(t);
					var r = this.refs[t];
					return "string" == typeof r && (r = this.refs[r]), "object" == typeof r ? m(e, r.schema, t) : t !== l(u) && ("#" === t[0] ? (m(e, c[t], t), c[t] = e) : this.refs[t] = u), t
				}

				function v(e) {
					if ("string" == typeof e) {
						if (!y.test(e)) throw new Error('invalid anchor "'.concat(e, '"'));
						f.call(this, "#".concat(e))
					}
				}
			})), c;

			function m(e, t, r) {
				if (void 0 !== t && !n(e, t)) throw d(r)
			}

			function d(e) {
				return new Error('reference "'.concat(e, '" resolves to more than one schema'))
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(6),
			n = Date.now(),
			i = "fnValues" + n,
			s = "fnStyle" + ++n;
		t.a = function() {
			return {
				onCreateRule: function(e, t, r) {
					if ("function" !== typeof t) return null;
					var n = Object(a.f)(e, {}, r);
					return n[s] = t, n
				},
				onProcessStyle: function(e, t) {
					if (i in t || s in t) return e;
					var r = {};
					for (var a in e) {
						var n = e[a];
						"function" === typeof n && (delete e[a], r[a] = n)
					}
					return t[i] = r, e
				},
				onUpdate: function(e, t, r, a) {
					var n = t,
						p = n[s];
					p && (n.style = p(e) || {});
					var o = n[i];
					if (o)
						for (var c in o) n.prop(c, o[c](e), a)
				}
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(1),
			n = r(6),
			i = "@global",
			s = "@global ",
			p = function() {
				function e(e, t, r) {
					for (var s in this.type = "global", this.at = i, this.rules = void 0, this.options = void 0, this.key = void 0, this.isProcessed = !1, this.key = e, this.options = r, this.rules = new n.a(Object(a.a)({}, r, {
							parent: this
						})), t) this.rules.add(s, t[s]);
					this.rules.process()
				}
				var t = e.prototype;
				return t.getRule = function(e) {
					return this.rules.get(e)
				}, t.addRule = function(e, t, r) {
					var a = this.rules.add(e, t, r);
					return a && this.options.jss.plugins.onProcessRule(a), a
				}, t.indexOf = function(e) {
					return this.rules.indexOf(e)
				}, t.toString = function() {
					return this.rules.toString()
				}, e
			}(),
			o = function() {
				function e(e, t, r) {
					this.type = "global", this.at = i, this.options = void 0, this.rule = void 0, this.isProcessed = !1, this.key = void 0, this.key = e, this.options = r;
					var n = e.substr(s.length);
					this.rule = r.jss.createRule(n, t, Object(a.a)({}, r, {
						parent: this
					}))
				}
				return e.prototype.toString = function(e) {
					return this.rule ? this.rule.toString(e) : ""
				}, e
			}(),
			c = /\s*,\s*/g;

		function h(e, t) {
			for (var r = e.split(c), a = "", n = 0; n < r.length; n++) a += t + " " + r[n].trim(), r[n + 1] && (a += ", ");
			return a
		}
		t.a = function() {
			return {
				onCreateRule: function(e, t, r) {
					if (!e) return null;
					if (e === i) return new p(e, t, r);
					if ("@" === e[0] && e.substr(0, s.length) === s) return new o(e, t, r);
					var a = r.parent;
					return a && ("global" === a.type || a.options.parent && "global" === a.options.parent.type) && (r.scoped = !1), !1 === r.scoped && (r.selector = e), null
				},
				onProcessRule: function(e, t) {
					"style" === e.type && t && (function(e, t) {
						var r = e.options,
							n = e.style,
							s = n ? n[i] : null;
						if (s) {
							for (var p in s) t.addRule(p, s[p], Object(a.a)({}, r, {
								selector: h(p, e.selector)
							}));
							delete n[i]
						}
					}(e, t), function(e, t) {
						var r = e.options,
							n = e.style;
						for (var s in n)
							if ("@" === s[0] && s.substr(0, i.length) === i) {
								var p = h(s.substr(i.length), e.selector);
								t.addRule(p, n[s], Object(a.a)({}, r, {
									selector: p
								})), delete n[s]
							}
					}(e, t))
				}
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(1),
			n = /\s*,\s*/g,
			i = /&/g,
			s = /\$([\w-]+)/g;
		t.a = function() {
			function e(e, t) {
				return function(r, a) {
					var n = e.getRule(a) || t && t.getRule(a);
					return n ? (n = n).selector : a
				}
			}

			function t(e, t) {
				for (var r = t.split(n), a = e.split(n), s = "", p = 0; p < r.length; p++)
					for (var o = r[p], c = 0; c < a.length; c++) {
						var h = a[c];
						s && (s += ", "), s += -1 !== h.indexOf("&") ? h.replace(i, o) : o + " " + h
					}
				return s
			}

			function r(e, t, r) {
				if (r) return Object(a.a)({}, r, {
					index: r.index + 1
				});
				var n = e.options.nestingLevel;
				n = void 0 === n ? 1 : n + 1;
				var i = Object(a.a)({}, e.options, {
					nestingLevel: n,
					index: t.indexOf(e) + 1
				});
				return delete i.name, i
			}
			return {
				onProcessStyle: function(n, i, p) {
					if ("style" !== i.type) return n;
					var o, c, h = i,
						u = h.options.parent;
					for (var m in n) {
						var d = -1 !== m.indexOf("&"),
							l = "@" === m[0];
						if (d || l) {
							if (o = r(h, u, o), d) {
								var y = t(m, h.selector);
								c || (c = e(u, p)), y = y.replace(s, c), u.addRule(y, n[m], Object(a.a)({}, o, {
									selector: y
								}))
							} else l && u.addRule(m, {}, o).addRule(h.key, n[m], {
								selector: h.selector
							});
							delete n[m]
						}
					}
					return n
				}
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(6),
			n = a.i && CSS ? CSS.px : "px",
			i = a.i && CSS ? CSS.ms : "ms",
			s = a.i && CSS ? CSS.percent : "%";

		function p(e) {
			var t = /(-[a-z])/g,
				r = function(e) {
					return e[1].toUpperCase()
				},
				a = {};
			for (var n in e) a[n] = e[n], a[n.replace(t, r)] = e[n];
			return a
		}
		var o = p({
			"animation-delay": i,
			"animation-duration": i,
			"background-position": n,
			"background-position-x": n,
			"background-position-y": n,
			"background-size": n,
			border: n,
			"border-bottom": n,
			"border-bottom-left-radius": n,
			"border-bottom-right-radius": n,
			"border-bottom-width": n,
			"border-left": n,
			"border-left-width": n,
			"border-radius": n,
			"border-right": n,
			"border-right-width": n,
			"border-top": n,
			"border-top-left-radius": n,
			"border-top-right-radius": n,
			"border-top-width": n,
			"border-width": n,
			"border-block": n,
			"border-block-end": n,
			"border-block-end-width": n,
			"border-block-start": n,
			"border-block-start-width": n,
			"border-block-width": n,
			"border-inline": n,
			"border-inline-end": n,
			"border-inline-end-width": n,
			"border-inline-start": n,
			"border-inline-start-width": n,
			"border-inline-width": n,
			"border-start-start-radius": n,
			"border-start-end-radius": n,
			"border-end-start-radius": n,
			"border-end-end-radius": n,
			margin: n,
			"margin-bottom": n,
			"margin-left": n,
			"margin-right": n,
			"margin-top": n,
			"margin-block": n,
			"margin-block-end": n,
			"margin-block-start": n,
			"margin-inline": n,
			"margin-inline-end": n,
			"margin-inline-start": n,
			padding: n,
			"padding-bottom": n,
			"padding-left": n,
			"padding-right": n,
			"padding-top": n,
			"padding-block": n,
			"padding-block-end": n,
			"padding-block-start": n,
			"padding-inline": n,
			"padding-inline-end": n,
			"padding-inline-start": n,
			"mask-position-x": n,
			"mask-position-y": n,
			"mask-size": n,
			height: n,
			width: n,
			"min-height": n,
			"max-height": n,
			"min-width": n,
			"max-width": n,
			bottom: n,
			left: n,
			top: n,
			right: n,
			inset: n,
			"inset-block": n,
			"inset-block-end": n,
			"inset-block-start": n,
			"inset-inline": n,
			"inset-inline-end": n,
			"inset-inline-start": n,
			"box-shadow": n,
			"text-shadow": n,
			"column-gap": n,
			"column-rule": n,
			"column-rule-width": n,
			"column-width": n,
			"font-size": n,
			"font-size-delta": n,
			"letter-spacing": n,
			"text-decoration-thickness": n,
			"text-indent": n,
			"text-stroke": n,
			"text-stroke-width": n,
			"word-spacing": n,
			motion: n,
			"motion-offset": n,
			outline: n,
			"outline-offset": n,
			"outline-width": n,
			perspective: n,
			"perspective-origin-x": s,
			"perspective-origin-y": s,
			"transform-origin": s,
			"transform-origin-x": s,
			"transform-origin-y": s,
			"transform-origin-z": s,
			"transition-delay": i,
			"transition-duration": i,
			"vertical-align": n,
			"flex-basis": n,
			"shape-margin": n,
			size: n,
			gap: n,
			grid: n,
			"grid-gap": n,
			"row-gap": n,
			"grid-row-gap": n,
			"grid-column-gap": n,
			"grid-template-rows": n,
			"grid-template-columns": n,
			"grid-auto-rows": n,
			"grid-auto-columns": n,
			"box-shadow-x": n,
			"box-shadow-y": n,
			"box-shadow-blur": n,
			"box-shadow-spread": n,
			"font-line-height": n,
			"text-shadow-x": n,
			"text-shadow-y": n,
			"text-shadow-blur": n
		});

		function c(e, t, r) {
			if (null == t) return t;
			if (Array.isArray(t))
				for (var a = 0; a < t.length; a++) t[a] = c(e, t[a], r);
			else if ("object" === typeof t)
				if ("fallbacks" === e)
					for (var i in t) t[i] = c(i, t[i], r);
				else
					for (var s in t) t[s] = c(e + "-" + s, t[s], r);
			else if ("number" === typeof t && !Number.isNaN(t)) {
				var p = r[e] || o[e];
				return !p || 0 === t && p === n ? t.toString() : "function" === typeof p ? p(t).toString() : "" + t + p
			}
			return t
		}
		t.a = function(e) {
			void 0 === e && (e = {});
			var t = p(e);
			return {
				onProcessStyle: function(e, r) {
					if ("style" !== r.type) return e;
					for (var a in e) e[a] = c(a, e[a], t);
					return e
				},
				onChangeValue: function(e, r) {
					return c(r, e, t)
				}
			}
		}
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return n
		}));
		var a = r(40);

		function n(e, t) {
			if (e) {
				if ("string" === typeof e) return Object(a.a)(e, t);
				var r = Object.prototype.toString.call(e).slice(8, -1);
				return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Object(a.a)(e, t) : void 0
			}
		}
	}, function(e, t, r) {
		"use strict";
		t.a = function() {
			var e = function(e, t) {
				return e.length === t.length ? e > t ? 1 : -1 : e.length - t.length
			};
			return {
				onProcessStyle: function(t, r) {
					if ("style" !== r.type) return t;
					for (var a = {}, n = Object.keys(t).sort(e), i = 0; i < n.length; i++) a[n[i]] = t[n[i]];
					return a
				}
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(20),
			n = r(29),
			i = r(72),
			s = r(38),
			p = r(30),
			o = r(31);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.CodeGen = t.Name = t.nil = t.stringify = t.str = t._ = t.KeywordCxt = void 0;
		var c = r(135),
			h = r(151),
			u = r(184),
			m = r(186),
			d = ["/properties"],
			l = "http://json-schema.org/draft-07/schema",
			y = function(e) {
				p(r, e);
				var t = o(r);

				function r() {
					return a(this, r), t.apply(this, arguments)
				}
				return n(r, [{
					key: "_addVocabularies",
					value: function() {
						var e = this;
						i(s(r.prototype), "_addVocabularies", this).call(this), h.default.forEach((function(t) {
							return e.addVocabulary(t)
						})), this.opts.discriminator && this.addKeyword(u.default)
					}
				}, {
					key: "_addDefaultMetaSchema",
					value: function() {
						if (i(s(r.prototype), "_addDefaultMetaSchema", this).call(this), this.opts.meta) {
							var e = this.opts.$data ? this.$dataMetaSchema(m, d) : m;
							this.addMetaSchema(e, l, !1), this.refs["http://json-schema.org/schema"] = l
						}
					}
				}, {
					key: "defaultMeta",
					value: function() {
						return this.opts.defaultMeta = i(s(r.prototype), "defaultMeta", this).call(this) || (this.getSchema(l) ? l : void 0)
					}
				}]), r
			}(c.default);
		e.exports = t = y, Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.default = y;
		var g = r(43);
		Object.defineProperty(t, "KeywordCxt", {
			enumerable: !0,
			get: function() {
				return g.KeywordCxt
			}
		});
		var f = r(4);
		Object.defineProperty(t, "_", {
			enumerable: !0,
			get: function() {
				return f._
			}
		}), Object.defineProperty(t, "str", {
			enumerable: !0,
			get: function() {
				return f.str
			}
		}), Object.defineProperty(t, "stringify", {
			enumerable: !0,
			get: function() {
				return f.stringify
			}
		}), Object.defineProperty(t, "nil", {
			enumerable: !0,
			get: function() {
				return f.nil
			}
		}), Object.defineProperty(t, "Name", {
			enumerable: !0,
			get: function() {
				return f.Name
			}
		}), Object.defineProperty(t, "CodeGen", {
			enumerable: !0,
			get: function() {
				return f.CodeGen
			}
		})
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return s
		}));
		var a = r(40);
		var n = r(89),
			i = r(52);

		function s(e) {
			return function(e) {
				if (Array.isArray(e)) return Object(a.a)(e)
			}(e) || Object(n.a)(e) || Object(i.a)(e) || function() {
				throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
			}()
		}
	}, function(e, t, r) {
		"use strict";
		var a = /[A-Z]/g,
			n = /^ms-/,
			i = {};

		function s(e) {
			return "-" + e.toLowerCase()
		}
		var p = function(e) {
			if (i.hasOwnProperty(e)) return i[e];
			var t = e.replace(a, s);
			return i[e] = n.test(t) ? "-" + t : t
		};

		function o(e) {
			var t = {};
			for (var r in e) {
				t[0 === r.indexOf("--") ? r : p(r)] = e[r]
			}
			return e.fallbacks && (Array.isArray(e.fallbacks) ? t.fallbacks = e.fallbacks.map(o) : t.fallbacks = o(e.fallbacks)), t
		}
		t.a = function() {
			return {
				onProcessStyle: function(e) {
					if (Array.isArray(e)) {
						for (var t = 0; t < e.length; t++) e[t] = o(e[t]);
						return e
					}
					return o(e)
				},
				onChangeValue: function(e, t, r) {
					if (0 === t.indexOf("--")) return e;
					var a = p(t);
					return t === a ? e : (r.prop(a, e), null)
				}
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(23),
			n = r(55),
			i = "",
			s = "",
			p = "",
			o = "",
			c = a.a && "ontouchstart" in document.documentElement;
		if (a.a) {
			var h = {
					Moz: "-moz-",
					ms: "-ms-",
					O: "-o-",
					Webkit: "-webkit-"
				},
				u = document.createElement("p").style;
			for (var m in h)
				if (m + "Transform" in u) {
					i = m, s = h[m];
					break
				}
			"Webkit" === i && "msHyphens" in u && (i = "ms", s = h.ms, o = "edge"), "Webkit" === i && "-apple-trailing-word" in u && (p = "apple")
		}
		var d = i,
			l = s,
			y = p,
			g = o,
			f = c;
		var v = {
				noPrefill: ["appearance"],
				supportedProperty: function(e) {
					return "appearance" === e && ("ms" === d ? "-webkit-" + e : l + e)
				}
			},
			b = {
				noPrefill: ["color-adjust"],
				supportedProperty: function(e) {
					return "color-adjust" === e && ("Webkit" === d ? l + "print-" + e : e)
				}
			},
			P = /[-\s]+(.)?/g;

		function S(e, t) {
			return t ? t.toUpperCase() : ""
		}

		function w(e) {
			return e.replace(P, S)
		}

		function k(e) {
			return w("-" + e)
		}
		var _, I = {
				noPrefill: ["mask"],
				supportedProperty: function(e, t) {
					if (!/^mask/.test(e)) return !1;
					if ("Webkit" === d) {
						var r = "mask-image";
						if (w(r) in t) return e;
						if (d + k(r) in t) return l + e
					}
					return e
				}
			},
			q = {
				noPrefill: ["text-orientation"],
				supportedProperty: function(e) {
					return "text-orientation" === e && ("apple" !== y || f ? e : l + e)
				}
			},
			L = {
				noPrefill: ["transform"],
				supportedProperty: function(e, t, r) {
					return "transform" === e && (r.transform ? e : l + e)
				}
			},
			x = {
				noPrefill: ["transition"],
				supportedProperty: function(e, t, r) {
					return "transition" === e && (r.transition ? e : l + e)
				}
			},
			E = {
				noPrefill: ["writing-mode"],
				supportedProperty: function(e) {
					return "writing-mode" === e && ("Webkit" === d || "ms" === d && "edge" !== g ? l + e : e)
				}
			},
			N = {
				noPrefill: ["user-select"],
				supportedProperty: function(e) {
					return "user-select" === e && ("Moz" === d || "ms" === d || "apple" === y ? l + e : e)
				}
			},
			O = {
				supportedProperty: function(e, t) {
					return !!/^break-/.test(e) && ("Webkit" === d ? "WebkitColumn" + k(e) in t && l + "column-" + e : "Moz" === d && ("page" + k(e) in t && "page-" + e))
				}
			},
			D = {
				supportedProperty: function(e, t) {
					if (!/^(border|margin|padding)-inline/.test(e)) return !1;
					if ("Moz" === d) return e;
					var r = e.replace("-inline", "");
					return d + k(r) in t && l + r
				}
			},
			T = {
				supportedProperty: function(e, t) {
					return w(e) in t && e
				}
			},
			j = {
				supportedProperty: function(e, t) {
					var r = k(e);
					return "-" === e[0] || "-" === e[0] && "-" === e[1] ? e : d + r in t ? l + e : "Webkit" !== d && "Webkit" + r in t && "-webkit-" + e
				}
			},
			F = {
				supportedProperty: function(e) {
					return "scroll-snap" === e.substring(0, 11) && ("ms" === d ? "" + l + e : e)
				}
			},
			C = {
				supportedProperty: function(e) {
					return "overscroll-behavior" === e && ("ms" === d ? l + "scroll-chaining" : e)
				}
			},
			A = {
				"flex-grow": "flex-positive",
				"flex-shrink": "flex-negative",
				"flex-basis": "flex-preferred-size",
				"justify-content": "flex-pack",
				order: "flex-order",
				"align-items": "flex-align",
				"align-content": "flex-line-pack"
			},
			H = {
				supportedProperty: function(e, t) {
					var r = A[e];
					return !!r && (d + k(r) in t && l + r)
				}
			},
			R = {
				flex: "box-flex",
				"flex-grow": "box-flex",
				"flex-direction": ["box-orient", "box-direction"],
				order: "box-ordinal-group",
				"align-items": "box-align",
				"flex-flow": ["box-orient", "box-direction"],
				"justify-content": "box-pack"
			},
			M = Object.keys(R),
			$ = function(e) {
				return l + e
			},
			z = [v, b, I, q, L, x, E, N, O, D, T, j, F, C, H, {
				supportedProperty: function(e, t, r) {
					var a = r.multiple;
					if (M.indexOf(e) > -1) {
						var n = R[e];
						if (!Array.isArray(n)) return d + k(n) in t && l + n;
						if (!a) return !1;
						for (var i = 0; i < n.length; i++)
							if (!(d + k(n[0]) in t)) return !1;
						return n.map($)
					}
					return !1
				}
			}],
			U = z.filter((function(e) {
				return e.supportedProperty
			})).map((function(e) {
				return e.supportedProperty
			})),
			B = z.filter((function(e) {
				return e.noPrefill
			})).reduce((function(e, t) {
				return e.push.apply(e, Object(n.a)(t.noPrefill)), e
			}), []),
			W = {};
		if (a.a) {
			_ = document.createElement("p");
			var V = window.getComputedStyle(document.documentElement, "");
			for (var G in V) isNaN(G) || (W[V[G]] = V[G]);
			B.forEach((function(e) {
				return delete W[e]
			}))
		}

		function K(e, t) {
			if (void 0 === t && (t = {}), !_) return e;
			if (null != W[e]) return W[e];
			"transition" !== e && "transform" !== e || (t[e] = e in _.style);
			for (var r = 0; r < U.length && (W[e] = U[r](e, _.style, t), !W[e]); r++);
			try {
				_.style[e] = ""
			} catch (a) {
				return !1
			}
			return W[e]
		}
		var Q, Y = {},
			J = {
				transition: 1,
				"transition-property": 1,
				"-webkit-transition": 1,
				"-webkit-transition-property": 1
			},
			X = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;

		function Z(e, t, r) {
			if ("var" === t) return "var";
			if ("all" === t) return "all";
			if ("all" === r) return ", all";
			var a = t ? K(t) : ", " + K(r);
			return a || (t || r)
		}

		function ee(e, t) {
			var r = t;
			if (!Q || "content" === e) return t;
			if ("string" !== typeof r || !isNaN(parseInt(r, 10))) return r;
			var a = e + r;
			if (null != Y[a]) return Y[a];
			try {
				Q.style[e] = r
			} catch (n) {
				return Y[a] = !1, !1
			}
			if (J[e]) r = r.replace(X, Z);
			else if ("" === Q.style[e] && ("-ms-flex" === (r = l + r) && (Q.style[e] = "-ms-flexbox"), Q.style[e] = r, "" === Q.style[e])) return Y[a] = !1, !1;
			return Q.style[e] = "", Y[a] = r, Y[a]
		}
		a.a && (Q = document.createElement("p"));
		var te = r(6);
		t.a = function() {
			function e(t) {
				for (var r in t) {
					var a = t[r];
					if ("fallbacks" === r && Array.isArray(a)) t[r] = a.map(e);
					else {
						var n = !1,
							i = K(r);
						i && i !== r && (n = !0);
						var s = !1,
							p = ee(i, Object(te.j)(a));
						p && p !== a && (s = !0), (n || s) && (n && delete t[r], t[i || r] = p || a)
					}
				}
				return t
			}
			return {
				onProcessRule: function(e) {
					if ("keyframes" === e.type) {
						var t = e;
						t.at = function(e) {
							return "-" === e[1] || "ms" === d ? e : "@" + l + "keyframes" + e.substr(10)
						}(t.at)
					}
				},
				onProcessStyle: function(t, r) {
					return "style" !== r.type ? t : e(t)
				},
				onChangeValue: function(e, t) {
					return ee(t, Object(te.j)(e)) || e
				}
			}
		}
	}, function(e, t, r) {
		"use strict";

		function a(e, t, r, a, n, i, s) {
			try {
				var p = e[i](s),
					o = p.value
			} catch (c) {
				return void r(c)
			}
			p.done ? t(o) : Promise.resolve(o).then(a, n)
		}

		function n(e) {
			return function() {
				var t = this,
					r = arguments;
				return new Promise((function(n, i) {
					var s = e.apply(t, r);

					function p(e) {
						a(s, n, i, p, o, "next", e)
					}

					function o(e) {
						a(s, n, i, p, o, "throw", e)
					}
					p(void 0)
				}))
			}
		}
		r.d(t, "a", (function() {
			return n
		}))
	}, , function(e, t, r) {
		"use strict";
		var a = Object.getOwnPropertySymbols,
			n = Object.prototype.hasOwnProperty,
			i = Object.prototype.propertyIsEnumerable;

		function s(e) {
			if (null === e || void 0 === e) throw new TypeError("Object.assign cannot be called with null or undefined");
			return Object(e)
		}
		e.exports = function() {
			try {
				if (!Object.assign) return !1;
				var e = new String("abc");
				if (e[5] = "de", "5" === Object.getOwnPropertyNames(e)[0]) return !1;
				for (var t = {}, r = 0; r < 10; r++) t["_" + String.fromCharCode(r)] = r;
				if ("0123456789" !== Object.getOwnPropertyNames(t).map((function(e) {
						return t[e]
					})).join("")) return !1;
				var a = {};
				return "abcdefghijklmnopqrst".split("").forEach((function(e) {
					a[e] = e
				})), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, a)).join("")
			} catch (n) {
				return !1
			}
		}() ? Object.assign : function(e, t) {
			for (var r, p, o = s(e), c = 1; c < arguments.length; c++) {
				for (var h in r = Object(arguments[c])) n.call(r, h) && (o[h] = r[h]);
				if (a) {
					p = a(r);
					for (var u = 0; u < p.length; u++) i.call(r, p[u]) && (o[p[u]] = r[p[u]])
				}
			}
			return o
		}
	}, function(e, t, r) {
		var a, n, i;
		! function(r, s) {
			"use strict";
			n = [], void 0 === (i = "function" === typeof(a = function() {
				function e(e) {
					return !isNaN(parseFloat(e)) && isFinite(e)
				}

				function t(e) {
					return e.charAt(0).toUpperCase() + e.substring(1)
				}

				function r(e) {
					return function() {
						return this[e]
					}
				}
				var a = ["isConstructor", "isEval", "isNative", "isToplevel"],
					n = ["columnNumber", "lineNumber"],
					i = ["fileName", "functionName", "source"],
					s = ["args"],
					p = ["evalOrigin"],
					o = a.concat(n, i, s, p);

				function c(e) {
					if (e)
						for (var r = 0; r < o.length; r++) void 0 !== e[o[r]] && this["set" + t(o[r])](e[o[r]])
				}
				c.prototype = {
					getArgs: function() {
						return this.args
					},
					setArgs: function(e) {
						if ("[object Array]" !== Object.prototype.toString.call(e)) throw new TypeError("Args must be an Array");
						this.args = e
					},
					getEvalOrigin: function() {
						return this.evalOrigin
					},
					setEvalOrigin: function(e) {
						if (e instanceof c) this.evalOrigin = e;
						else {
							if (!(e instanceof Object)) throw new TypeError("Eval Origin must be an Object or StackFrame");
							this.evalOrigin = new c(e)
						}
					},
					toString: function() {
						var e = this.getFileName() || "",
							t = this.getLineNumber() || "",
							r = this.getColumnNumber() || "",
							a = this.getFunctionName() || "";
						return this.getIsEval() ? e ? "[eval] (" + e + ":" + t + ":" + r + ")" : "[eval]:" + t + ":" + r : a ? a + " (" + e + ":" + t + ":" + r + ")" : e + ":" + t + ":" + r
					}
				}, c.fromString = function(e) {
					var t = e.indexOf("("),
						r = e.lastIndexOf(")"),
						a = e.substring(0, t),
						n = e.substring(t + 1, r).split(","),
						i = e.substring(r + 1);
					if (0 === i.indexOf("@")) var s = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(i, ""),
						p = s[1],
						o = s[2],
						h = s[3];
					return new c({
						functionName: a,
						args: n || void 0,
						fileName: p,
						lineNumber: o || void 0,
						columnNumber: h || void 0
					})
				};
				for (var h = 0; h < a.length; h++) c.prototype["get" + t(a[h])] = r(a[h]), c.prototype["set" + t(a[h])] = function(e) {
					return function(t) {
						this[e] = Boolean(t)
					}
				}(a[h]);
				for (var u = 0; u < n.length; u++) c.prototype["get" + t(n[u])] = r(n[u]), c.prototype["set" + t(n[u])] = function(t) {
					return function(r) {
						if (!e(r)) throw new TypeError(t + " must be a Number");
						this[t] = Number(r)
					}
				}(n[u]);
				for (var m = 0; m < i.length; m++) c.prototype["get" + t(i[m])] = r(i[m]), c.prototype["set" + t(i[m])] = function(e) {
					return function(t) {
						this[e] = String(t)
					}
				}(i[m]);
				return c
			}) ? a.apply(t, n) : a) || (e.exports = i)
		}()
	}, function(e, t) {
		function r(t, a) {
			return e.exports = r = Object.setPrototypeOf || function(e, t) {
				return e.__proto__ = t, e
			}, r(t, a)
		}
		e.exports = r
	}, function(e, t, r) {
		var a = r(74);
		e.exports = function(e, t) {
			if (e) {
				if ("string" === typeof e) return a(e, t);
				var r = Object.prototype.toString.call(e).slice(8, -1);
				return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? a(e, t) : void 0
			}
		}
	}, function(e, t, r) {
		var a = r(138),
			n = r(139),
			i = r(63),
			s = r(140);
		e.exports = function(e, t) {
			return a(e) || n(e, t) || i(e, t) || s()
		}
	}, function(e, t, r) {
		var a = r(38),
			n = r(62),
			i = r(144),
			s = r(145);

		function p(t) {
			var r = "function" === typeof Map ? new Map : void 0;
			return e.exports = p = function(e) {
				if (null === e || !i(e)) return e;
				if ("function" !== typeof e) throw new TypeError("Super expression must either be null or a function");
				if ("undefined" !== typeof r) {
					if (r.has(e)) return r.get(e);
					r.set(e, t)
				}

				function t() {
					return s(e, arguments, a(this).constructor)
				}
				return t.prototype = Object.create(e.prototype, {
					constructor: {
						value: t,
						enumerable: !1,
						writable: !0,
						configurable: !0
					}
				}), n(t, e)
			}, p(t)
		}
		e.exports = p
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(79);
		a.code = 'require("ajv/dist/runtime/equal").default', t.default = a
	}, function(e, t, r) {
		"use strict";
		e.exports = r(107)
	}, function(e, t, r) {
		"use strict";

		function a(e) {
			if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			return e
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		var a = r(70),
			n = r(37),
			i = r(71).ArraySet,
			s = r(126).MappingList;

		function p(e) {
			e || (e = {}), this._file = n.getArg(e, "file", null), this._sourceRoot = n.getArg(e, "sourceRoot", null), this._skipValidation = n.getArg(e, "skipValidation", !1), this._sources = new i, this._names = new i, this._mappings = new s, this._sourcesContents = null
		}
		p.prototype._version = 3, p.fromSourceMap = function(e) {
			var t = e.sourceRoot,
				r = new p({
					file: e.file,
					sourceRoot: t
				});
			return e.eachMapping((function(e) {
				var a = {
					generated: {
						line: e.generatedLine,
						column: e.generatedColumn
					}
				};
				null != e.source && (a.source = e.source, null != t && (a.source = n.relative(t, a.source)), a.original = {
					line: e.originalLine,
					column: e.originalColumn
				}, null != e.name && (a.name = e.name)), r.addMapping(a)
			})), e.sources.forEach((function(t) {
				var a = e.sourceContentFor(t);
				null != a && r.setSourceContent(t, a)
			})), r
		}, p.prototype.addMapping = function(e) {
			var t = n.getArg(e, "generated"),
				r = n.getArg(e, "original", null),
				a = n.getArg(e, "source", null),
				i = n.getArg(e, "name", null);
			this._skipValidation || this._validateMapping(t, r, a, i), null != a && (a = String(a), this._sources.has(a) || this._sources.add(a)), null != i && (i = String(i), this._names.has(i) || this._names.add(i)), this._mappings.add({
				generatedLine: t.line,
				generatedColumn: t.column,
				originalLine: null != r && r.line,
				originalColumn: null != r && r.column,
				source: a,
				name: i
			})
		}, p.prototype.setSourceContent = function(e, t) {
			var r = e;
			null != this._sourceRoot && (r = n.relative(this._sourceRoot, r)), null != t ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[n.toSetString(r)] = t) : this._sourcesContents && (delete this._sourcesContents[n.toSetString(r)], 0 === Object.keys(this._sourcesContents).length && (this._sourcesContents = null))
		}, p.prototype.applySourceMap = function(e, t, r) {
			var a = t;
			if (null == t) {
				if (null == e.file) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
				a = e.file
			}
			var s = this._sourceRoot;
			null != s && (a = n.relative(s, a));
			var p = new i,
				o = new i;
			this._mappings.unsortedForEach((function(t) {
				if (t.source === a && null != t.originalLine) {
					var i = e.originalPositionFor({
						line: t.originalLine,
						column: t.originalColumn
					});
					null != i.source && (t.source = i.source, null != r && (t.source = n.join(r, t.source)), null != s && (t.source = n.relative(s, t.source)), t.originalLine = i.line, t.originalColumn = i.column, null != i.name && (t.name = i.name))
				}
				var c = t.source;
				null == c || p.has(c) || p.add(c);
				var h = t.name;
				null == h || o.has(h) || o.add(h)
			}), this), this._sources = p, this._names = o, e.sources.forEach((function(t) {
				var a = e.sourceContentFor(t);
				null != a && (null != r && (t = n.join(r, t)), null != s && (t = n.relative(s, t)), this.setSourceContent(t, a))
			}), this)
		}, p.prototype._validateMapping = function(e, t, r, a) {
			if ((!(e && "line" in e && "column" in e && e.line > 0 && e.column >= 0) || t || r || a) && !(e && "line" in e && "column" in e && t && "line" in t && "column" in t && e.line > 0 && e.column >= 0 && t.line > 0 && t.column >= 0 && r)) throw new Error("Invalid mapping: " + JSON.stringify({
				generated: e,
				source: r,
				original: t,
				name: a
			}))
		}, p.prototype._serializeMappings = function() {
			for (var e, t, r, i, s = 0, p = 1, o = 0, c = 0, h = 0, u = 0, m = "", d = this._mappings.toArray(), l = 0, y = d.length; l < y; l++) {
				if (e = "", (t = d[l]).generatedLine !== p)
					for (s = 0; t.generatedLine !== p;) e += ";", p++;
				else if (l > 0) {
					if (!n.compareByGeneratedPositionsInflated(t, d[l - 1])) continue;
					e += ","
				}
				e += a.encode(t.generatedColumn - s), s = t.generatedColumn, null != t.source && (i = this._sources.indexOf(t.source), e += a.encode(i - u), u = i, e += a.encode(t.originalLine - 1 - c), c = t.originalLine - 1, e += a.encode(t.originalColumn - o), o = t.originalColumn, null != t.name && (r = this._names.indexOf(t.name), e += a.encode(r - h), h = r)), m += e
			}
			return m
		}, p.prototype._generateSourcesContent = function(e, t) {
			return e.map((function(e) {
				if (!this._sourcesContents) return null;
				null != t && (e = n.relative(t, e));
				var r = n.toSetString(e);
				return Object.prototype.hasOwnProperty.call(this._sourcesContents, r) ? this._sourcesContents[r] : null
			}), this)
		}, p.prototype.toJSON = function() {
			var e = {
				version: this._version,
				sources: this._sources.toArray(),
				names: this._names.toArray(),
				mappings: this._serializeMappings()
			};
			return null != this._file && (e.file = this._file), null != this._sourceRoot && (e.sourceRoot = this._sourceRoot), this._sourcesContents && (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)), e
		}, p.prototype.toString = function() {
			return JSON.stringify(this.toJSON())
		}, t.SourceMapGenerator = p
	}, function(e, t, r) {
		var a = r(125);
		t.encode = function(e) {
			var t, r = "",
				n = function(e) {
					return e < 0 ? 1 + (-e << 1) : 0 + (e << 1)
				}(e);
			do {
				t = 31 & n, (n >>>= 5) > 0 && (t |= 32), r += a.encode(t)
			} while (n > 0);
			return r
		}, t.decode = function(e, t, r) {
			var n, i, s = e.length,
				p = 0,
				o = 0;
			do {
				if (t >= s) throw new Error("Expected more digits in base 64 VLQ value.");
				if (-1 === (i = a.decode(e.charCodeAt(t++)))) throw new Error("Invalid base64 digit: " + e.charAt(t - 1));
				n = !!(32 & i), p += (i &= 31) << o, o += 5
			} while (n);
			r.value = function(e) {
				var t = e >> 1;
				return 1 === (1 & e) ? -t : t
			}(p), r.rest = t
		}
	}, function(e, t, r) {
		var a = r(37),
			n = Object.prototype.hasOwnProperty;

		function i() {
			this._array = [], this._set = Object.create(null)
		}
		i.fromArray = function(e, t) {
			for (var r = new i, a = 0, n = e.length; a < n; a++) r.add(e[a], t);
			return r
		}, i.prototype.size = function() {
			return Object.getOwnPropertyNames(this._set).length
		}, i.prototype.add = function(e, t) {
			var r = a.toSetString(e),
				i = n.call(this._set, r),
				s = this._array.length;
			i && !t || this._array.push(e), i || (this._set[r] = s)
		}, i.prototype.has = function(e) {
			var t = a.toSetString(e);
			return n.call(this._set, t)
		}, i.prototype.indexOf = function(e) {
			var t = a.toSetString(e);
			if (n.call(this._set, t)) return this._set[t];
			throw new Error('"' + e + '" is not in the set.')
		}, i.prototype.at = function(e) {
			if (e >= 0 && e < this._array.length) return this._array[e];
			throw new Error("No element indexed by " + e)
		}, i.prototype.toArray = function() {
			return this._array.slice()
		}, t.ArraySet = i
	}, function(e, t, r) {
		var a = r(131);

		function n(t, r, i) {
			return "undefined" !== typeof Reflect && Reflect.get ? e.exports = n = Reflect.get : e.exports = n = function(e, t, r) {
				var n = a(e, t);
				if (n) {
					var i = Object.getOwnPropertyDescriptor(n, t);
					return i.get ? i.get.call(r) : i.value
				}
			}, n(t, r, i || t)
		}
		e.exports = n
	}, function(e, t) {
		e.exports = function() {
			if ("undefined" === typeof Reflect || !Reflect.construct) return !1;
			if (Reflect.construct.sham) return !1;
			if ("function" === typeof Proxy) return !0;
			try {
				return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {}))), !0
			} catch (e) {
				return !1
			}
		}
	}, function(e, t) {
		e.exports = function(e, t) {
			(null == t || t > e.length) && (t = e.length);
			for (var r = 0, a = new Array(t); r < t; r++) a[r] = e[r];
			return a
		}
	}, function(e, t) {
		e.exports = function(e, t, r) {
			return t in e ? Object.defineProperty(e, t, {
				value: r,
				enumerable: !0,
				configurable: !0,
				writable: !0
			}) : e[t] = r, e
		}
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o = r(32),
			c = r(5),
			h = r(29),
			u = r(20),
			m = r(30),
			d = r(31),
			l = r(65);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.ValueScope = t.ValueScopeName = t.Scope = t.varKinds = t.UsedValueState = void 0;
		var y, g = r(45),
			f = function(e) {
				m(r, e);
				var t = d(r);

				function r(e) {
					var a;
					return u(this, r), (a = t.call(this, 'CodeGen: "code" for '.concat(e, " not defined"))).value = e.value, a
				}
				return r
			}(l(Error));
		! function(e) {
			e[e.Started = 0] = "Started", e[e.Completed = 1] = "Completed"
		}(y = t.UsedValueState || (t.UsedValueState = {})), t.varKinds = {
			const: new g.Name("const"),
			let: new g.Name("let"),
			var: new g.Name("var")
		};
		var v = function() {
			function e() {
				var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
					r = t.prefixes,
					a = t.parent;
				u(this, e), this._names = {}, this._prefixes = r, this._parent = a
			}
			return h(e, [{
				key: "toName",
				value: function(e) {
					return e instanceof g.Name ? e : this.name(e)
				}
			}, {
				key: "name",
				value: function(e) {
					return new g.Name(this._newName(e))
				}
			}, {
				key: "_newName",
				value: function(e) {
					var t = this._names[e] || this._nameGroup(e);
					return "".concat(e).concat(t.index++)
				}
			}, {
				key: "_nameGroup",
				value: function(e) {
					var t, r;
					if ((null === (r = null === (t = this._parent) || void 0 === t ? void 0 : t._prefixes) || void 0 === r ? void 0 : r.has(e)) || this._prefixes && !this._prefixes.has(e)) throw new Error('CodeGen: prefix "'.concat(e, '" is not allowed in this scope'));
					return this._names[e] = {
						prefix: e,
						index: 0
					}
				}
			}]), e
		}();
		t.Scope = v;
		var b = function(e) {
			m(r, e);
			var t = d(r);

			function r(e, a) {
				var n;
				return u(this, r), (n = t.call(this, a)).prefix = e, n
			}
			return h(r, [{
				key: "setValue",
				value: function(e, t) {
					var r = t.property,
						n = t.itemIndex;
					this.value = e, this.scopePath = g._(a || (a = c([".", "[", "]"])), new g.Name(r), n)
				}
			}]), r
		}(g.Name);
		t.ValueScopeName = b;
		var P = g._(n || (n = c(["\n"], ["\\n"]))),
			S = function(e) {
				m(a, e);
				var r = d(a);

				function a(e) {
					var t;
					return u(this, a), (t = r.call(this, e))._values = {}, t._scope = e.scope, t.opts = o(o({}, e), {}, {
						_n: e.lines ? P : g.nil
					}), t
				}
				return h(a, [{
					key: "get",
					value: function() {
						return this._scope
					}
				}, {
					key: "name",
					value: function(e) {
						return new b(e, this._newName(e))
					}
				}, {
					key: "value",
					value: function(e, t) {
						var r;
						if (void 0 === t.ref) throw new Error("CodeGen: ref must be passed in value");
						var a = this.toName(e),
							n = a.prefix,
							i = null !== (r = t.key) && void 0 !== r ? r : t.ref,
							s = this._values[n];
						if (s) {
							var p = s.get(i);
							if (p) return p
						} else s = this._values[n] = new Map;
						s.set(i, a);
						var o = this._scope[n] || (this._scope[n] = []),
							c = o.length;
						return o[c] = t.ref, a.setValue(t, {
							property: n,
							itemIndex: c
						}), a
					}
				}, {
					key: "getValue",
					value: function(e, t) {
						var r = this._values[e];
						if (r) return r.get(t)
					}
				}, {
					key: "scopeRefs",
					value: function(e) {
						var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._values;
						return this._reduceValues(t, (function(t) {
							if (void 0 === t.scopePath) throw new Error('CodeGen: name "'.concat(t, '" has no value'));
							return g._(i || (i = c(["", "", ""])), e, t.scopePath)
						}))
					}
				}, {
					key: "scopeCode",
					value: function() {
						var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._values,
							t = arguments.length > 1 ? arguments[1] : void 0,
							r = arguments.length > 2 ? arguments[2] : void 0;
						return this._reduceValues(e, (function(e) {
							if (void 0 === e.value) throw new Error('CodeGen: name "'.concat(e, '" has no value'));
							return e.value.code
						}), t, r)
					}
				}, {
					key: "_reduceValues",
					value: function(e, r) {
						var a = this,
							n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
							i = arguments.length > 3 ? arguments[3] : void 0,
							o = g.nil,
							h = function(h) {
								var u = e[h];
								if (!u) return "continue";
								var m = n[h] = n[h] || new Map;
								u.forEach((function(e) {
									if (!m.has(e)) {
										m.set(e, y.Started);
										var n = r(e);
										if (n) {
											var h = a.opts.es5 ? t.varKinds.var : t.varKinds.const;
											o = g._(s || (s = c(["", "", " ", " = ", ";", ""])), o, h, e, n, a.opts._n)
										} else {
											if (!(n = null === i || void 0 === i ? void 0 : i(e))) throw new f(e);
											o = g._(p || (p = c(["", "", "", ""])), o, n, a.opts._n)
										}
										m.set(e, y.Completed)
									}
								}))
							};
						for (var u in e) h(u);
						return o
					}
				}]), a
			}(v);
		t.ValueScope = S
	}, function(e, t, r) {
		"use strict";
		var a = r(32);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.getRules = t.isJSONType = void 0;
		var n = new Set(["string", "number", "integer", "boolean", "null", "object", "array"]);
		t.isJSONType = function(e) {
			return "string" == typeof e && n.has(e)
		}, t.getRules = function() {
			var e = {
				number: {
					type: "number",
					rules: []
				},
				string: {
					type: "string",
					rules: []
				},
				array: {
					type: "array",
					rules: []
				},
				object: {
					type: "object",
					rules: []
				}
			};
			return {
				types: a(a({}, e), {}, {
					integer: !0,
					boolean: !0,
					null: !0
				}),
				rules: [{
					rules: []
				}, e.number, e.string, e.array, e.object],
				post: {
					rules: []
				},
				all: {},
				keywords: {}
			}
		}
	}, function(e, t, r) {
		"use strict";

		function a(e, t) {
			return t.rules.some((function(t) {
				return n(e, t)
			}))
		}

		function n(e, t) {
			var r;
			return void 0 !== e[t.keyword] || (null === (r = t.definition.implements) || void 0 === r ? void 0 : r.some((function(t) {
				return void 0 !== e[t]
			})))
		}
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.shouldUseRule = t.shouldUseGroup = t.schemaHasRulesForType = void 0, t.schemaHasRulesForType = function(e, t) {
			var r = e.schema,
				n = e.self.RULES.types[t];
			return n && !0 !== n && a(r, n)
		}, t.shouldUseGroup = a, t.shouldUseRule = n
	}, function(e, t, r) {
		"use strict";
		e.exports = function e(t, r) {
			if (t === r) return !0;
			if (t && r && "object" == typeof t && "object" == typeof r) {
				if (t.constructor !== r.constructor) return !1;
				var a, n, i;
				if (Array.isArray(t)) {
					if ((a = t.length) != r.length) return !1;
					for (n = a; 0 !== n--;)
						if (!e(t[n], r[n])) return !1;
					return !0
				}
				if (t.constructor === RegExp) return t.source === r.source && t.flags === r.flags;
				if (t.valueOf !== Object.prototype.valueOf) return t.valueOf() === r.valueOf();
				if (t.toString !== Object.prototype.toString) return t.toString() === r.toString();
				if ((a = (i = Object.keys(t)).length) !== Object.keys(r).length) return !1;
				for (n = a; 0 !== n--;)
					if (!Object.prototype.hasOwnProperty.call(r, i[n])) return !1;
				for (n = a; 0 !== n--;) {
					var s = i[n];
					if (!e(t[s], r[s])) return !1
				}
				return !0
			}
			return t !== t && r !== r
		}
	}, function(e, t, r) {
		! function(e) {
			"use strict";

			function t() {
				for (var e = arguments.length, t = Array(e), r = 0; r < e; r++) t[r] = arguments[r];
				if (t.length > 1) {
					t[0] = t[0].slice(0, -1);
					for (var a = t.length - 1, n = 1; n < a; ++n) t[n] = t[n].slice(1, -1);
					return t[a] = t[a].slice(1), t.join("")
				}
				return t[0]
			}

			function r(e) {
				return "(?:" + e + ")"
			}

			function a(e) {
				return void 0 === e ? "undefined" : null === e ? "null" : Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()
			}

			function n(e) {
				return e.toUpperCase()
			}

			function i(e) {
				return void 0 !== e && null !== e ? e instanceof Array ? e : "number" !== typeof e.length || e.split || e.setInterval || e.call ? [e] : Array.prototype.slice.call(e) : []
			}

			function s(e, t) {
				var r = e;
				if (t)
					for (var a in t) r[a] = t[a];
				return r
			}

			function p(e) {
				var a = "[A-Za-z]",
					n = "[0-9]",
					i = t(n, "[A-Fa-f]"),
					s = r(r("%[EFef]" + i + "%" + i + i + "%" + i + i) + "|" + r("%[89A-Fa-f]" + i + "%" + i + i) + "|" + r("%" + i + i)),
					p = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
					o = t("[\\:\\/\\?\\#\\[\\]\\@]", p),
					c = e ? "[\\uE000-\\uF8FF]" : "[]",
					h = t(a, n, "[\\-\\.\\_\\~]", e ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]"),
					u = r(a + t(a, n, "[\\+\\-\\.]") + "*"),
					m = r(r(s + "|" + t(h, p, "[\\:]")) + "*"),
					d = (r(r("25[0-5]") + "|" + r("2[0-4]" + n) + "|" + r("1" + n + n) + "|" + r("[1-9]" + n) + "|" + n), r(r("25[0-5]") + "|" + r("2[0-4]" + n) + "|" + r("1" + n + n) + "|" + r("0?[1-9]" + n) + "|0?0?" + n)),
					l = r(d + "\\." + d + "\\." + d + "\\." + d),
					y = r(i + "{1,4}"),
					g = r(r(y + "\\:" + y) + "|" + l),
					f = r(r(y + "\\:") + "{6}" + g),
					v = r("\\:\\:" + r(y + "\\:") + "{5}" + g),
					b = r(r(y) + "?\\:\\:" + r(y + "\\:") + "{4}" + g),
					P = r(r(r(y + "\\:") + "{0,1}" + y) + "?\\:\\:" + r(y + "\\:") + "{3}" + g),
					S = r(r(r(y + "\\:") + "{0,2}" + y) + "?\\:\\:" + r(y + "\\:") + "{2}" + g),
					w = r(r(r(y + "\\:") + "{0,3}" + y) + "?\\:\\:" + y + "\\:" + g),
					k = r(r(r(y + "\\:") + "{0,4}" + y) + "?\\:\\:" + g),
					_ = r(r(r(y + "\\:") + "{0,5}" + y) + "?\\:\\:" + y),
					I = r(r(r(y + "\\:") + "{0,6}" + y) + "?\\:\\:"),
					q = r([f, v, b, P, S, w, k, _, I].join("|")),
					L = r(r(h + "|" + s) + "+"),
					x = (r(q + "\\%25" + L), r(q + r("\\%25|\\%(?!" + i + "{2})") + L)),
					E = r("[vV]" + i + "+\\." + t(h, p, "[\\:]") + "+"),
					N = r("\\[" + r(x + "|" + q + "|" + E) + "\\]"),
					O = r(r(s + "|" + t(h, p)) + "*"),
					D = r(N + "|" + l + "(?!" + O + ")|" + O),
					T = r(n + "*"),
					j = r(r(m + "@") + "?" + D + r("\\:" + T) + "?"),
					F = r(s + "|" + t(h, p, "[\\:\\@]")),
					C = r(F + "*"),
					A = r(F + "+"),
					H = r(r(s + "|" + t(h, p, "[\\@]")) + "+"),
					R = r(r("\\/" + C) + "*"),
					M = r("\\/" + r(A + R) + "?"),
					$ = r(H + R),
					z = r(A + R),
					U = "(?!" + F + ")",
					B = (r(R + "|" + M + "|" + $ + "|" + z + "|" + U), r(r(F + "|" + t("[\\/\\?]", c)) + "*")),
					W = r(r(F + "|[\\/\\?]") + "*"),
					V = r(r("\\/\\/" + j + R) + "|" + M + "|" + z + "|" + U),
					G = r(u + "\\:" + V + r("\\?" + B) + "?" + r("\\#" + W) + "?"),
					K = r(r("\\/\\/" + j + R) + "|" + M + "|" + $ + "|" + U),
					Q = r(K + r("\\?" + B) + "?" + r("\\#" + W) + "?");
				return r(G + "|" + Q), r(u + "\\:" + V + r("\\?" + B) + "?"), r(r("\\/\\/(" + r("(" + m + ")@") + "?(" + D + ")" + r("\\:(" + T + ")") + "?)") + "?(" + R + "|" + M + "|" + z + "|" + U + ")"), r("\\?(" + B + ")"), r("\\#(" + W + ")"), r(r("\\/\\/(" + r("(" + m + ")@") + "?(" + D + ")" + r("\\:(" + T + ")") + "?)") + "?(" + R + "|" + M + "|" + $ + "|" + U + ")"), r("\\?(" + B + ")"), r("\\#(" + W + ")"), r(r("\\/\\/(" + r("(" + m + ")@") + "?(" + D + ")" + r("\\:(" + T + ")") + "?)") + "?(" + R + "|" + M + "|" + z + "|" + U + ")"), r("\\?(" + B + ")"), r("\\#(" + W + ")"), r("(" + m + ")@"), r("\\:(" + T + ")"), {
					NOT_SCHEME: new RegExp(t("[^]", a, n, "[\\+\\-\\.]"), "g"),
					NOT_USERINFO: new RegExp(t("[^\\%\\:]", h, p), "g"),
					NOT_HOST: new RegExp(t("[^\\%\\[\\]\\:]", h, p), "g"),
					NOT_PATH: new RegExp(t("[^\\%\\/\\:\\@]", h, p), "g"),
					NOT_PATH_NOSCHEME: new RegExp(t("[^\\%\\/\\@]", h, p), "g"),
					NOT_QUERY: new RegExp(t("[^\\%]", h, p, "[\\:\\@\\/\\?]", c), "g"),
					NOT_FRAGMENT: new RegExp(t("[^\\%]", h, p, "[\\:\\@\\/\\?]"), "g"),
					ESCAPE: new RegExp(t("[^]", h, p), "g"),
					UNRESERVED: new RegExp(h, "g"),
					OTHER_CHARS: new RegExp(t("[^\\%]", h, o), "g"),
					PCT_ENCODED: new RegExp(s, "g"),
					IPV4ADDRESS: new RegExp("^(" + l + ")$"),
					IPV6ADDRESS: new RegExp("^\\[?(" + q + ")" + r(r("\\%25|\\%(?!" + i + "{2})") + "(" + L + ")") + "?\\]?$")
				}
			}
			var o = p(!1),
				c = p(!0),
				h = function() {
					function e(e, t) {
						var r = [],
							a = !0,
							n = !1,
							i = void 0;
						try {
							for (var s, p = e[Symbol.iterator](); !(a = (s = p.next()).done) && (r.push(s.value), !t || r.length !== t); a = !0);
						} catch (o) {
							n = !0, i = o
						} finally {
							try {
								!a && p.return && p.return()
							} finally {
								if (n) throw i
							}
						}
						return r
					}
					return function(t, r) {
						if (Array.isArray(t)) return t;
						if (Symbol.iterator in Object(t)) return e(t, r);
						throw new TypeError("Invalid attempt to destructure non-iterable instance")
					}
				}(),
				u = function(e) {
					if (Array.isArray(e)) {
						for (var t = 0, r = Array(e.length); t < e.length; t++) r[t] = e[t];
						return r
					}
					return Array.from(e)
				},
				m = 2147483647,
				d = 36,
				l = 1,
				y = 26,
				g = 38,
				f = 700,
				v = 72,
				b = 128,
				P = "-",
				S = /^xn--/,
				w = /[^\0-\x7E]/,
				k = /[\x2E\u3002\uFF0E\uFF61]/g,
				_ = {
					overflow: "Overflow: input needs wider integers to process",
					"not-basic": "Illegal input >= 0x80 (not a basic code point)",
					"invalid-input": "Invalid input"
				},
				I = d - l,
				q = Math.floor,
				L = String.fromCharCode;

			function x(e) {
				throw new RangeError(_[e])
			}

			function E(e, t) {
				for (var r = [], a = e.length; a--;) r[a] = t(e[a]);
				return r
			}

			function N(e, t) {
				var r = e.split("@"),
					a = "";
				return r.length > 1 && (a = r[0] + "@", e = r[1]), a + E((e = e.replace(k, ".")).split("."), t).join(".")
			}

			function O(e) {
				for (var t = [], r = 0, a = e.length; r < a;) {
					var n = e.charCodeAt(r++);
					if (n >= 55296 && n <= 56319 && r < a) {
						var i = e.charCodeAt(r++);
						56320 == (64512 & i) ? t.push(((1023 & n) << 10) + (1023 & i) + 65536) : (t.push(n), r--)
					} else t.push(n)
				}
				return t
			}
			var D = function(e) {
					return e - 48 < 10 ? e - 22 : e - 65 < 26 ? e - 65 : e - 97 < 26 ? e - 97 : d
				},
				T = function(e, t) {
					return e + 22 + 75 * (e < 26) - ((0 != t) << 5)
				},
				j = function(e, t, r) {
					var a = 0;
					for (e = r ? q(e / f) : e >> 1, e += q(e / t); e > I * y >> 1; a += d) e = q(e / I);
					return q(a + (I + 1) * e / (e + g))
				},
				F = function(e) {
					var t = [],
						r = e.length,
						a = 0,
						n = b,
						i = v,
						s = e.lastIndexOf(P);
					s < 0 && (s = 0);
					for (var p = 0; p < s; ++p) e.charCodeAt(p) >= 128 && x("not-basic"), t.push(e.charCodeAt(p));
					for (var o = s > 0 ? s + 1 : 0; o < r;) {
						for (var c = a, h = 1, u = d;; u += d) {
							o >= r && x("invalid-input");
							var g = D(e.charCodeAt(o++));
							(g >= d || g > q((m - a) / h)) && x("overflow"), a += g * h;
							var f = u <= i ? l : u >= i + y ? y : u - i;
							if (g < f) break;
							var S = d - f;
							h > q(m / S) && x("overflow"), h *= S
						}
						var w = t.length + 1;
						i = j(a - c, w, 0 == c), q(a / w) > m - n && x("overflow"), n += q(a / w), a %= w, t.splice(a++, 0, n)
					}
					return String.fromCodePoint.apply(String, t)
				},
				C = function(e) {
					var t = [],
						r = (e = O(e)).length,
						a = b,
						n = 0,
						i = v,
						s = !0,
						p = !1,
						o = void 0;
					try {
						for (var c, h = e[Symbol.iterator](); !(s = (c = h.next()).done); s = !0) {
							var u = c.value;
							u < 128 && t.push(L(u))
						}
					} catch (V) {
						p = !0, o = V
					} finally {
						try {
							!s && h.return && h.return()
						} finally {
							if (p) throw o
						}
					}
					var g = t.length,
						f = g;
					for (g && t.push(P); f < r;) {
						var S = m,
							w = !0,
							k = !1,
							_ = void 0;
						try {
							for (var I, E = e[Symbol.iterator](); !(w = (I = E.next()).done); w = !0) {
								var N = I.value;
								N >= a && N < S && (S = N)
							}
						} catch (V) {
							k = !0, _ = V
						} finally {
							try {
								!w && E.return && E.return()
							} finally {
								if (k) throw _
							}
						}
						var D = f + 1;
						S - a > q((m - n) / D) && x("overflow"), n += (S - a) * D, a = S;
						var F = !0,
							C = !1,
							A = void 0;
						try {
							for (var H, R = e[Symbol.iterator](); !(F = (H = R.next()).done); F = !0) {
								var M = H.value;
								if (M < a && ++n > m && x("overflow"), M == a) {
									for (var $ = n, z = d;; z += d) {
										var U = z <= i ? l : z >= i + y ? y : z - i;
										if ($ < U) break;
										var B = $ - U,
											W = d - U;
										t.push(L(T(U + B % W, 0))), $ = q(B / W)
									}
									t.push(L(T($, 0))), i = j(n, D, f == g), n = 0, ++f
								}
							}
						} catch (V) {
							C = !0, A = V
						} finally {
							try {
								!F && R.return && R.return()
							} finally {
								if (C) throw A
							}
						}++n, ++a
					}
					return t.join("")
				},
				A = function(e) {
					return N(e, (function(e) {
						return S.test(e) ? F(e.slice(4).toLowerCase()) : e
					}))
				},
				H = function(e) {
					return N(e, (function(e) {
						return w.test(e) ? "xn--" + C(e) : e
					}))
				},
				R = {
					version: "2.1.0",
					ucs2: {
						decode: O,
						encode: function(e) {
							return String.fromCodePoint.apply(String, u(e))
						}
					},
					decode: F,
					encode: C,
					toASCII: H,
					toUnicode: A
				},
				M = {};

			function $(e) {
				var t = e.charCodeAt(0);
				return t < 16 ? "%0" + t.toString(16).toUpperCase() : t < 128 ? "%" + t.toString(16).toUpperCase() : t < 2048 ? "%" + (t >> 6 | 192).toString(16).toUpperCase() + "%" + (63 & t | 128).toString(16).toUpperCase() : "%" + (t >> 12 | 224).toString(16).toUpperCase() + "%" + (t >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (63 & t | 128).toString(16).toUpperCase()
			}

			function z(e) {
				for (var t = "", r = 0, a = e.length; r < a;) {
					var n = parseInt(e.substr(r + 1, 2), 16);
					if (n < 128) t += String.fromCharCode(n), r += 3;
					else if (n >= 194 && n < 224) {
						if (a - r >= 6) {
							var i = parseInt(e.substr(r + 4, 2), 16);
							t += String.fromCharCode((31 & n) << 6 | 63 & i)
						} else t += e.substr(r, 6);
						r += 6
					} else if (n >= 224) {
						if (a - r >= 9) {
							var s = parseInt(e.substr(r + 4, 2), 16),
								p = parseInt(e.substr(r + 7, 2), 16);
							t += String.fromCharCode((15 & n) << 12 | (63 & s) << 6 | 63 & p)
						} else t += e.substr(r, 9);
						r += 9
					} else t += e.substr(r, 3), r += 3
				}
				return t
			}

			function U(e, t) {
				function r(e) {
					var r = z(e);
					return r.match(t.UNRESERVED) ? r : e
				}
				return e.scheme && (e.scheme = String(e.scheme).replace(t.PCT_ENCODED, r).toLowerCase().replace(t.NOT_SCHEME, "")), void 0 !== e.userinfo && (e.userinfo = String(e.userinfo).replace(t.PCT_ENCODED, r).replace(t.NOT_USERINFO, $).replace(t.PCT_ENCODED, n)), void 0 !== e.host && (e.host = String(e.host).replace(t.PCT_ENCODED, r).toLowerCase().replace(t.NOT_HOST, $).replace(t.PCT_ENCODED, n)), void 0 !== e.path && (e.path = String(e.path).replace(t.PCT_ENCODED, r).replace(e.scheme ? t.NOT_PATH : t.NOT_PATH_NOSCHEME, $).replace(t.PCT_ENCODED, n)), void 0 !== e.query && (e.query = String(e.query).replace(t.PCT_ENCODED, r).replace(t.NOT_QUERY, $).replace(t.PCT_ENCODED, n)), void 0 !== e.fragment && (e.fragment = String(e.fragment).replace(t.PCT_ENCODED, r).replace(t.NOT_FRAGMENT, $).replace(t.PCT_ENCODED, n)), e
			}

			function B(e) {
				return e.replace(/^0*(.*)/, "$1") || "0"
			}

			function W(e, t) {
				var r = e.match(t.IPV4ADDRESS) || [],
					a = h(r, 2)[1];
				return a ? a.split(".").map(B).join(".") : e
			}

			function V(e, t) {
				var r = e.match(t.IPV6ADDRESS) || [],
					a = h(r, 3),
					n = a[1],
					i = a[2];
				if (n) {
					for (var s = n.toLowerCase().split("::").reverse(), p = h(s, 2), o = p[0], c = p[1], u = c ? c.split(":").map(B) : [], m = o.split(":").map(B), d = t.IPV4ADDRESS.test(m[m.length - 1]), l = d ? 7 : 8, y = m.length - l, g = Array(l), f = 0; f < l; ++f) g[f] = u[f] || m[y + f] || "";
					d && (g[l - 1] = W(g[l - 1], t));
					var v = g.reduce((function(e, t, r) {
							if (!t || "0" === t) {
								var a = e[e.length - 1];
								a && a.index + a.length === r ? a.length++ : e.push({
									index: r,
									length: 1
								})
							}
							return e
						}), []).sort((function(e, t) {
							return t.length - e.length
						}))[0],
						b = void 0;
					if (v && v.length > 1) {
						var P = g.slice(0, v.index),
							S = g.slice(v.index + v.length);
						b = P.join(":") + "::" + S.join(":")
					} else b = g.join(":");
					return i && (b += "%" + i), b
				}
				return e
			}
			var G = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,
				K = void 0 === "".match(/(){0}/)[1];

			function Q(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
					r = {},
					a = !1 !== t.iri ? c : o;
				"suffix" === t.reference && (e = (t.scheme ? t.scheme + ":" : "") + "//" + e);
				var n = e.match(G);
				if (n) {
					K ? (r.scheme = n[1], r.userinfo = n[3], r.host = n[4], r.port = parseInt(n[5], 10), r.path = n[6] || "", r.query = n[7], r.fragment = n[8], isNaN(r.port) && (r.port = n[5])) : (r.scheme = n[1] || void 0, r.userinfo = -1 !== e.indexOf("@") ? n[3] : void 0, r.host = -1 !== e.indexOf("//") ? n[4] : void 0, r.port = parseInt(n[5], 10), r.path = n[6] || "", r.query = -1 !== e.indexOf("?") ? n[7] : void 0, r.fragment = -1 !== e.indexOf("#") ? n[8] : void 0, isNaN(r.port) && (r.port = e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? n[4] : void 0)), r.host && (r.host = V(W(r.host, a), a)), void 0 !== r.scheme || void 0 !== r.userinfo || void 0 !== r.host || void 0 !== r.port || r.path || void 0 !== r.query ? void 0 === r.scheme ? r.reference = "relative" : void 0 === r.fragment ? r.reference = "absolute" : r.reference = "uri" : r.reference = "same-document", t.reference && "suffix" !== t.reference && t.reference !== r.reference && (r.error = r.error || "URI is not a " + t.reference + " reference.");
					var i = M[(t.scheme || r.scheme || "").toLowerCase()];
					if (t.unicodeSupport || i && i.unicodeSupport) U(r, a);
					else {
						if (r.host && (t.domainHost || i && i.domainHost)) try {
							r.host = R.toASCII(r.host.replace(a.PCT_ENCODED, z).toLowerCase())
						} catch (s) {
							r.error = r.error || "Host's domain name can not be converted to ASCII via punycode: " + s
						}
						U(r, o)
					}
					i && i.parse && i.parse(r, t)
				} else r.error = r.error || "URI can not be parsed.";
				return r
			}

			function Y(e, t) {
				var r = !1 !== t.iri ? c : o,
					a = [];
				return void 0 !== e.userinfo && (a.push(e.userinfo), a.push("@")), void 0 !== e.host && a.push(V(W(String(e.host), r), r).replace(r.IPV6ADDRESS, (function(e, t, r) {
					return "[" + t + (r ? "%25" + r : "") + "]"
				}))), "number" !== typeof e.port && "string" !== typeof e.port || (a.push(":"), a.push(String(e.port))), a.length ? a.join("") : void 0
			}
			var J = /^\.\.?\//,
				X = /^\/\.(\/|$)/,
				Z = /^\/\.\.(\/|$)/,
				ee = /^\/?(?:.|\n)*?(?=\/|$)/;

			function te(e) {
				for (var t = []; e.length;)
					if (e.match(J)) e = e.replace(J, "");
					else if (e.match(X)) e = e.replace(X, "/");
				else if (e.match(Z)) e = e.replace(Z, "/"), t.pop();
				else if ("." === e || ".." === e) e = "";
				else {
					var r = e.match(ee);
					if (!r) throw new Error("Unexpected dot segment condition");
					var a = r[0];
					e = e.slice(a.length), t.push(a)
				}
				return t.join("")
			}

			function re(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
					r = t.iri ? c : o,
					a = [],
					n = M[(t.scheme || e.scheme || "").toLowerCase()];
				if (n && n.serialize && n.serialize(e, t), e.host)
					if (r.IPV6ADDRESS.test(e.host));
					else if (t.domainHost || n && n.domainHost) try {
					e.host = t.iri ? R.toUnicode(e.host) : R.toASCII(e.host.replace(r.PCT_ENCODED, z).toLowerCase())
				} catch (p) {
					e.error = e.error || "Host's domain name can not be converted to " + (t.iri ? "Unicode" : "ASCII") + " via punycode: " + p
				}
				U(e, r), "suffix" !== t.reference && e.scheme && (a.push(e.scheme), a.push(":"));
				var i = Y(e, t);
				if (void 0 !== i && ("suffix" !== t.reference && a.push("//"), a.push(i), e.path && "/" !== e.path.charAt(0) && a.push("/")), void 0 !== e.path) {
					var s = e.path;
					t.absolutePath || n && n.absolutePath || (s = te(s)), void 0 === i && (s = s.replace(/^\/\//, "/%2F")), a.push(s)
				}
				return void 0 !== e.query && (a.push("?"), a.push(e.query)), void 0 !== e.fragment && (a.push("#"), a.push(e.fragment)), a.join("")
			}

			function ae(e, t) {
				var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
					a = {};
				return arguments[3] || (e = Q(re(e, r), r), t = Q(re(t, r), r)), !(r = r || {}).tolerant && t.scheme ? (a.scheme = t.scheme, a.userinfo = t.userinfo, a.host = t.host, a.port = t.port, a.path = te(t.path || ""), a.query = t.query) : (void 0 !== t.userinfo || void 0 !== t.host || void 0 !== t.port ? (a.userinfo = t.userinfo, a.host = t.host, a.port = t.port, a.path = te(t.path || ""), a.query = t.query) : (t.path ? ("/" === t.path.charAt(0) ? a.path = te(t.path) : (void 0 === e.userinfo && void 0 === e.host && void 0 === e.port || e.path ? e.path ? a.path = e.path.slice(0, e.path.lastIndexOf("/") + 1) + t.path : a.path = t.path : a.path = "/" + t.path, a.path = te(a.path)), a.query = t.query) : (a.path = e.path, void 0 !== t.query ? a.query = t.query : a.query = e.query), a.userinfo = e.userinfo, a.host = e.host, a.port = e.port), a.scheme = e.scheme), a.fragment = t.fragment, a
			}

			function ne(e, t, r) {
				var a = s({
					scheme: "null"
				}, r);
				return re(ae(Q(e, a), Q(t, a), a, !0), a)
			}

			function ie(e, t) {
				return "string" === typeof e ? e = re(Q(e, t), t) : "object" === a(e) && (e = Q(re(e, t), t)), e
			}

			function se(e, t, r) {
				return "string" === typeof e ? e = re(Q(e, r), r) : "object" === a(e) && (e = re(e, r)), "string" === typeof t ? t = re(Q(t, r), r) : "object" === a(t) && (t = re(t, r)), e === t
			}

			function pe(e, t) {
				return e && e.toString().replace(t && t.iri ? c.ESCAPE : o.ESCAPE, $)
			}

			function oe(e, t) {
				return e && e.toString().replace(t && t.iri ? c.PCT_ENCODED : o.PCT_ENCODED, z)
			}
			var ce = {
					scheme: "http",
					domainHost: !0,
					parse: function(e, t) {
						return e.host || (e.error = e.error || "HTTP URIs must have a host."), e
					},
					serialize: function(e, t) {
						var r = "https" === String(e.scheme).toLowerCase();
						return e.port !== (r ? 443 : 80) && "" !== e.port || (e.port = void 0), e.path || (e.path = "/"), e
					}
				},
				he = {
					scheme: "https",
					domainHost: ce.domainHost,
					parse: ce.parse,
					serialize: ce.serialize
				};

			function ue(e) {
				return "boolean" === typeof e.secure ? e.secure : "wss" === String(e.scheme).toLowerCase()
			}
			var me = {
					scheme: "ws",
					domainHost: !0,
					parse: function(e, t) {
						var r = e;
						return r.secure = ue(r), r.resourceName = (r.path || "/") + (r.query ? "?" + r.query : ""), r.path = void 0, r.query = void 0, r
					},
					serialize: function(e, t) {
						if (e.port !== (ue(e) ? 443 : 80) && "" !== e.port || (e.port = void 0), "boolean" === typeof e.secure && (e.scheme = e.secure ? "wss" : "ws", e.secure = void 0), e.resourceName) {
							var r = e.resourceName.split("?"),
								a = h(r, 2),
								n = a[0],
								i = a[1];
							e.path = n && "/" !== n ? n : void 0, e.query = i, e.resourceName = void 0
						}
						return e.fragment = void 0, e
					}
				},
				de = {
					scheme: "wss",
					domainHost: me.domainHost,
					parse: me.parse,
					serialize: me.serialize
				},
				le = {},
				ye = "[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",
				ge = "[0-9A-Fa-f]",
				fe = r(r("%[EFef]" + ge + "%" + ge + ge + "%" + ge + ge) + "|" + r("%[89A-Fa-f]" + ge + "%" + ge + ge) + "|" + r("%" + ge + ge)),
				ve = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]",
				be = t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]", '[\\"\\\\]'),
				Pe = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]",
				Se = new RegExp(ye, "g"),
				we = new RegExp(fe, "g"),
				ke = new RegExp(t("[^]", ve, "[\\.]", '[\\"]', be), "g"),
				_e = new RegExp(t("[^]", ye, Pe), "g"),
				Ie = _e;

			function qe(e) {
				var t = z(e);
				return t.match(Se) ? t : e
			}
			var Le = {
					scheme: "mailto",
					parse: function(e, t) {
						var r = e,
							a = r.to = r.path ? r.path.split(",") : [];
						if (r.path = void 0, r.query) {
							for (var n = !1, i = {}, s = r.query.split("&"), p = 0, o = s.length; p < o; ++p) {
								var c = s[p].split("=");
								switch (c[0]) {
									case "to":
										for (var h = c[1].split(","), u = 0, m = h.length; u < m; ++u) a.push(h[u]);
										break;
									case "subject":
										r.subject = oe(c[1], t);
										break;
									case "body":
										r.body = oe(c[1], t);
										break;
									default:
										n = !0, i[oe(c[0], t)] = oe(c[1], t)
								}
							}
							n && (r.headers = i)
						}
						r.query = void 0;
						for (var d = 0, l = a.length; d < l; ++d) {
							var y = a[d].split("@");
							if (y[0] = oe(y[0]), t.unicodeSupport) y[1] = oe(y[1], t).toLowerCase();
							else try {
								y[1] = R.toASCII(oe(y[1], t).toLowerCase())
							} catch (g) {
								r.error = r.error || "Email address's domain name can not be converted to ASCII via punycode: " + g
							}
							a[d] = y.join("@")
						}
						return r
					},
					serialize: function(e, t) {
						var r = e,
							a = i(e.to);
						if (a) {
							for (var s = 0, p = a.length; s < p; ++s) {
								var o = String(a[s]),
									c = o.lastIndexOf("@"),
									h = o.slice(0, c).replace(we, qe).replace(we, n).replace(ke, $),
									u = o.slice(c + 1);
								try {
									u = t.iri ? R.toUnicode(u) : R.toASCII(oe(u, t).toLowerCase())
								} catch (y) {
									r.error = r.error || "Email address's domain name can not be converted to " + (t.iri ? "Unicode" : "ASCII") + " via punycode: " + y
								}
								a[s] = h + "@" + u
							}
							r.path = a.join(",")
						}
						var m = e.headers = e.headers || {};
						e.subject && (m.subject = e.subject), e.body && (m.body = e.body);
						var d = [];
						for (var l in m) m[l] !== le[l] && d.push(l.replace(we, qe).replace(we, n).replace(_e, $) + "=" + m[l].replace(we, qe).replace(we, n).replace(Ie, $));
						return d.length && (r.query = d.join("&")), r
					}
				},
				xe = /^([^\:]+)\:(.*)/,
				Ee = {
					scheme: "urn",
					parse: function(e, t) {
						var r = e.path && e.path.match(xe),
							a = e;
						if (r) {
							var n = t.scheme || a.scheme || "urn",
								i = r[1].toLowerCase(),
								s = r[2],
								p = n + ":" + (t.nid || i),
								o = M[p];
							a.nid = i, a.nss = s, a.path = void 0, o && (a = o.parse(a, t))
						} else a.error = a.error || "URN can not be parsed.";
						return a
					},
					serialize: function(e, t) {
						var r = t.scheme || e.scheme || "urn",
							a = e.nid,
							n = r + ":" + (t.nid || a),
							i = M[n];
						i && (e = i.serialize(e, t));
						var s = e,
							p = e.nss;
						return s.path = (a || t.nid) + ":" + p, s
					}
				},
				Ne = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,
				Oe = {
					scheme: "urn:uuid",
					parse: function(e, t) {
						var r = e;
						return r.uuid = r.nss, r.nss = void 0, t.tolerant || r.uuid && r.uuid.match(Ne) || (r.error = r.error || "UUID is not valid."), r
					},
					serialize: function(e, t) {
						var r = e;
						return r.nss = (e.uuid || "").toLowerCase(), r
					}
				};
			M[ce.scheme] = ce, M[he.scheme] = he, M[me.scheme] = me, M[de.scheme] = de, M[Le.scheme] = Le, M[Ee.scheme] = Ee, M[Oe.scheme] = Oe, e.SCHEMES = M, e.pctEncChar = $, e.pctDecChars = z, e.parse = Q, e.removeDotSegments = te, e.serialize = re, e.resolveComponents = ae, e.resolve = ne, e.normalize = ie, e.equal = se, e.escapeComponent = pe, e.unescapeComponent = oe, Object.defineProperty(e, "__esModule", {
				value: !0
			})
		}(t)
	}, function(e, t, r) {
		"use strict";
		var a = r(20),
			n = r(30),
			i = r(31),
			s = r(65);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = function(e) {
			n(r, e);
			var t = i(r);

			function r(e) {
				var n;
				return a(this, r), (n = t.call(this, "validation failed")).errors = e, n.ajv = n.validation = !0, n
			}
			return r
		}(s(Error));
		t.default = p
	}, function(e, t, r) {
		"use strict";
		var a = r(20),
			n = r(30),
			i = r(31),
			s = r(65);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = r(47),
			o = function(e) {
				n(r, e);
				var t = i(r);

				function r(e, n, i) {
					var s;
					return a(this, r), (s = t.call(this, i || "can't resolve reference ".concat(n, " from id ").concat(e))).missingRef = p.resolveUrl(e, n), s.missingSchema = p.normalizeId(p.getFullPath(s.missingRef)), s
				}
				return r
			}(s(Error));
		t.default = o
	}, function(e, t, r) {
		"use strict";
		var a, n, i = r(16),
			s = r(5),
			p = r(20);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.resolveSchema = t.getCompilingSchema = t.resolveRef = t.compileSchema = t.SchemaEnv = void 0;
		var o = r(4),
			c = r(81),
			h = r(24),
			u = r(47),
			m = r(7),
			d = r(43),
			l = r(80),
			y = function e(t) {
				var r, a;
				p(this, e), this.refs = {}, this.dynamicAnchors = {}, "object" == typeof t.schema && (a = t.schema), this.schema = t.schema, this.schemaId = t.schemaId, this.root = t.root || this, this.baseId = null !== (r = t.baseId) && void 0 !== r ? r : u.normalizeId(null === a || void 0 === a ? void 0 : a[t.schemaId || "$id"]), this.schemaPath = t.schemaPath, this.localRefs = t.localRefs, this.meta = t.meta, this.$async = null === a || void 0 === a ? void 0 : a.$async, this.refs = {}
			};

		function g(e) {
			var t = v.call(this, e);
			if (t) return t;
			var r, i = u.getFullPath(e.root.baseId),
				p = this.opts.code,
				m = p.es5,
				l = p.lines,
				y = this.opts.ownProperties,
				g = new o.CodeGen(this.scope, {
					es5: m,
					lines: l,
					ownProperties: y
				});
			e.$async && (r = g.scopeValue("Error", {
				ref: c.default,
				code: o._(a || (a = s(['require("ajv/dist/runtime/validation_error").default'])))
			}));
			var f = g.scopeName("validate");
			e.validateName = f;
			var b, P = {
				gen: g,
				allErrors: this.opts.allErrors,
				data: h.default.data,
				parentData: h.default.parentData,
				parentDataProperty: h.default.parentDataProperty,
				dataNames: [h.default.data],
				dataPathArr: [o.nil],
				dataLevel: 0,
				dataTypes: [],
				definedProperties: new Set,
				topSchemaRef: g.scopeValue("schema", !0 === this.opts.code.source ? {
					ref: e.schema,
					code: o.stringify(e.schema)
				} : {
					ref: e.schema
				}),
				validateName: f,
				ValidationError: r,
				schema: e.schema,
				schemaEnv: e,
				rootId: i,
				baseId: e.baseId || i,
				schemaPath: o.nil,
				errSchemaPath: e.schemaPath || (this.opts.jtd ? "" : "#"),
				errorPath: o._(n || (n = s(['""']))),
				opts: this.opts,
				self: this
			};
			try {
				this._compilations.add(e), d.validateFunctionCode(P), g.optimize(this.opts.code.optimize);
				var S = g.toString();
				b = "".concat(g.scopeRefs(h.default.scope), "return ").concat(S), this.opts.code.process && (b = this.opts.code.process(b, e));
				var w = new Function("".concat(h.default.self), "".concat(h.default.scope), b)(this, this.scope.get());
				if (this.scope.value(f, {
						ref: w
					}), w.errors = null, w.schema = e.schema, w.schemaEnv = e, e.$async && (w.$async = !0), !0 === this.opts.code.source && (w.source = {
						validateName: f,
						validateCode: S,
						scopeValues: g._values
					}), this.opts.unevaluated) {
					var k = P.props,
						_ = P.items;
					w.evaluated = {
						props: k instanceof o.Name ? void 0 : k,
						items: _ instanceof o.Name ? void 0 : _,
						dynamicProps: k instanceof o.Name,
						dynamicItems: _ instanceof o.Name
					}, w.source && (w.source.evaluated = o.stringify(w.evaluated))
				}
				return e.validate = w, e
			} catch (I) {
				throw delete e.validate, delete e.validateName, b && this.logger.error("Error compiling schema, function code:", b), I
			} finally {
				this._compilations.delete(e)
			}
		}

		function f(e) {
			return u.inlineRef(e.schema, this.opts.inlineRefs) ? e.schema : e.validate ? e : g.call(this, e)
		}

		function v(e) {
			var t, r, a, n = i(this._compilations);
			try {
				for (n.s(); !(t = n.n()).done;) {
					var s = t.value;
					if (a = e, (r = s).schema === a.schema && r.root === a.root && r.baseId === a.baseId) return s
				}
			} catch (p) {
				n.e(p)
			} finally {
				n.f()
			}
		}

		function b(e, t) {
			for (var r;
				"string" == typeof(r = this.refs[t]);) t = r;
			return r || this.schemas[t] || P.call(this, e, t)
		}

		function P(e, t) {
			var r = l.parse(t),
				a = u._getFullPath(r),
				n = u.getFullPath(e.baseId);
			if (Object.keys(e.schema).length > 0 && a === n) return w.call(this, r, e);
			var i = u.normalizeId(a),
				s = this.refs[i] || this.schemas[i];
			if ("string" == typeof s) {
				var p = P.call(this, e, s);
				if ("object" !== typeof(null === p || void 0 === p ? void 0 : p.schema)) return;
				return w.call(this, r, p)
			}
			if ("object" === typeof(null === s || void 0 === s ? void 0 : s.schema)) {
				if (s.validate || g.call(this, s), i === u.normalizeId(t)) {
					var o = s.schema,
						c = this.opts.schemaId,
						h = o[c];
					return h && (n = u.resolveUrl(n, h)), new y({
						schema: o,
						schemaId: c,
						root: e,
						baseId: n
					})
				}
				return w.call(this, r, s)
			}
		}
		t.SchemaEnv = y, t.compileSchema = g, t.resolveRef = function(e, t, r) {
			var a;
			r = u.resolveUrl(t, r);
			var n = e.refs[r];
			if (n) return n;
			var i = b.call(this, e, r);
			if (void 0 === i) {
				var s = null === (a = e.localRefs) || void 0 === a ? void 0 : a[r],
					p = this.opts.schemaId;
				s && (i = new y({
					schema: s,
					schemaId: p,
					root: e,
					baseId: t
				}))
			}
			return void 0 !== i ? e.refs[r] = f.call(this, i) : void 0
		}, t.getCompilingSchema = v, t.resolveSchema = P;
		var S = new Set(["properties", "patternProperties", "enum", "dependencies", "definitions"]);

		function w(e, t) {
			var r, a = t.baseId,
				n = t.schema,
				s = t.root;
			if ("/" === (null === (r = e.fragment) || void 0 === r ? void 0 : r[0])) {
				var p, o, c = i(e.fragment.slice(1).split("/"));
				try {
					for (c.s(); !(p = c.n()).done;) {
						var h = p.value;
						if ("boolean" == typeof n) return;
						if (void 0 === (n = n[m.unescapeFragment(h)])) return;
						var d = "object" == typeof n && n[this.opts.schemaId];
						!S.has(h) && d && (a = u.resolveUrl(a, d))
					}
				} catch (f) {
					c.e(f)
				} finally {
					c.f()
				}
				if ("boolean" != typeof n && n.$ref && !m.schemaHasRulesButRef(n, this.RULES)) {
					var l = u.resolveUrl(a, n.$ref);
					o = P.call(this, s, l)
				}
				var g = this.opts.schemaId;
				return (o = o || new y({
					schema: n,
					schemaId: g,
					root: s,
					baseId: a
				})).schema !== o.root.schema ? o : void 0
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.validateAdditionalItems = void 0;
		var c = r(4),
			h = r(7),
			u = {
				keyword: "additionalItems",
				type: "array",
				schemaType: ["boolean", "object"],
				before: "uniqueItems",
				error: {
					message: function(e) {
						var t = e.params.len;
						return c.str(a || (a = o(["must NOT have more than ", " items"])), t)
					},
					params: function(e) {
						var t = e.params.len;
						return c._(n || (n = o(["{limit: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.parentSchema,
						r = e.it,
						a = t.items;
					Array.isArray(a) ? m(e, a) : h.checkStrictMode(r, '"additionalItems" is ignored when "items" is not an array of schemas')
				}
			};

		function m(e, t) {
			var r = e.gen,
				a = e.schema,
				n = e.data,
				u = e.keyword,
				m = e.it;
			m.items = !0;
			var d = r.const("len", c._(i || (i = o(["", ".length"])), n));
			if (!1 === a) e.setParams({
				len: t.length
			}), e.pass(c._(s || (s = o(["", " <= ", ""])), d, t.length));
			else if ("object" == typeof a && !h.alwaysValidSchema(m, a)) {
				var l = r.var("valid", c._(p || (p = o(["", " <= ", ""])), d, t.length));
				r.if(c.not(l), (function() {
					return function(a) {
						r.forRange("i", t.length, d, (function(t) {
							e.subschema({
								keyword: u,
								dataProp: t,
								dataPropType: h.Type.Num
							}, a), m.allErrors || r.if(c.not(a), (function() {
								return r.break()
							}))
						}))
					}(l)
				})), e.ok(l)
			}
		}
		t.validateAdditionalItems = m, t.default = u
	}, function(e, t, r) {
		"use strict";
		var a, n, i = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.validateTuple = void 0;
		var s = r(4),
			p = r(7),
			o = r(15),
			c = {
				keyword: "items",
				type: "array",
				schemaType: ["object", "array", "boolean"],
				before: "uniqueItems",
				code: function(e) {
					var t = e.schema,
						r = e.it;
					if (Array.isArray(t)) return h(e, "additionalItems", t);
					r.items = !0, p.alwaysValidSchema(r, t) || e.ok(o.validateArray(e))
				}
			};

		function h(e, t) {
			var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.schema,
				o = e.gen,
				c = e.parentSchema,
				h = e.data,
				u = e.keyword,
				m = e.it;
			y(c), m.opts.unevaluated && r.length && !0 !== m.items && (m.items = p.mergeEvaluated.items(o, r.length, m.items));
			var d = o.name("valid"),
				l = o.const("len", s._(a || (a = i(["", ".length"])), h));

			function y(e) {
				var a = m.opts,
					n = m.errSchemaPath,
					i = r.length,
					s = i === e.minItems && (i === e.maxItems || !1 === e[t]);
				if (a.strictTuples && !s) {
					var o = '"'.concat(u, '" is ').concat(i, "-tuple, but minItems or maxItems/").concat(t, ' are not specified or different at path "').concat(n, '"');
					p.checkStrictMode(m, o, a.strictTuples)
				}
			}
			r.forEach((function(t, r) {
				p.alwaysValidSchema(m, t) || (o.if(s._(n || (n = i(["", " > ", ""])), l, r), (function() {
					return e.subschema({
						keyword: u,
						schemaProp: r,
						dataProp: r
					}, d)
				})), e.ok(d))
			}))
		}
		t.validateTuple = h, t.default = c
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o = r(33),
			c = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var h = r(15),
			u = r(4),
			m = r(24),
			d = r(7),
			l = {
				keyword: "additionalProperties",
				type: ["object"],
				schemaType: ["boolean", "object"],
				allowUndefined: !0,
				trackErrors: !0,
				error: {
					message: "must NOT have additional properties",
					params: function(e) {
						var t = e.params;
						return u._(a || (a = c(["{additionalProperty: ", "}"])), t.additionalProperty)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.schema,
						a = e.parentSchema,
						l = e.data,
						y = e.errsCount,
						g = e.it;
					if (!y) throw new Error("ajv implementation error");
					var f = g.allErrors,
						v = g.opts;
					if (g.props = !0, "all" === v.removeAdditional || !d.alwaysValidSchema(g, r)) {
						var b = h.allSchemaProperties(a.properties),
							P = h.allSchemaProperties(a.patternProperties);
						t.forIn("key", l, (function(r) {
							b.length || P.length ? t.if(function(r) {
								var n;
								if (b.length > 8) {
									var p = d.schemaRefOrVal(g, a.properties, "properties");
									n = h.isOwnProperty(t, p, r)
								} else n = b.length ? u.or.apply(u, o(b.map((function(e) {
									return u._(i || (i = c(["", " === ", ""])), r, e)
								})))) : u.nil;
								return P.length && (n = u.or.apply(u, [n].concat(o(P.map((function(t) {
									return u._(s || (s = c(["", ".test(", ")"])), h.usePattern(e, t), r)
								})))))), u.not(n)
							}(r), (function() {
								return w(r)
							})) : w(r)
						})), e.ok(u._(n || (n = c(["", " === ", ""])), y, m.default.errors))
					}

					function S(e) {
						t.code(u._(p || (p = c(["delete ", "[", "]"])), l, e))
					}

					function w(a) {
						if ("all" === v.removeAdditional || v.removeAdditional && !1 === r) S(a);
						else {
							if (!1 === r) return e.setParams({
								additionalProperty: a
							}), e.error(), void(f || t.break());
							if ("object" == typeof r && !d.alwaysValidSchema(g, r)) {
								var n = t.name("valid");
								"failing" === v.removeAdditional ? (k(a, n, !1), t.if(u.not(n), (function() {
									e.reset(), S(a)
								}))) : (k(a, n), f || t.if(u.not(n), (function() {
									return t.break()
								})))
							}
						}
					}

					function k(t, r, a) {
						var n = {
							keyword: "additionalProperties",
							dataProp: t,
							dataPropType: d.Type.Str
						};
						!1 === a && Object.assign(n, {
							compositeRule: !0,
							createErrors: !1,
							allErrors: !1
						}), e.subschema(n, r)
					}
				}
			};
		t.default = l
	}, function(e, t, r) {
		"use strict";

		function a(e, t) {
			return (a = Object.setPrototypeOf || function(e, t) {
				return e.__proto__ = t, e
			})(e, t)
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		"use strict";

		function a(e) {
			var t, r = e.Symbol;
			return "function" === typeof r ? r.observable ? t = r.observable : (t = r("observable"), r.observable = t) : t = "@@observable", t
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		"use strict";

		function a(e) {
			if ("undefined" !== typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e)
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		! function(e) {
			"use strict";

			function t() {}

			function r(e, t, r, a, n) {
				for (var i = 0, s = t.length, p = 0, o = 0; i < s; i++) {
					var c = t[i];
					if (c.removed) {
						if (c.value = e.join(a.slice(o, o + c.count)), o += c.count, i && t[i - 1].added) {
							var h = t[i - 1];
							t[i - 1] = t[i], t[i] = h
						}
					} else {
						if (!c.added && n) {
							var u = r.slice(p, p + c.count);
							u = u.map((function(e, t) {
								var r = a[o + t];
								return r.length > e.length ? r : e
							})), c.value = e.join(u)
						} else c.value = e.join(r.slice(p, p + c.count));
						p += c.count, c.added || (o += c.count)
					}
				}
				var m = t[s - 1];
				return s > 1 && "string" === typeof m.value && (m.added || m.removed) && e.equals("", m.value) && (t[s - 2].value += m.value, t.pop()), t
			}

			function a(e) {
				return {
					newPos: e.newPos,
					components: e.components.slice(0)
				}
			}
			t.prototype = {
				diff: function(e, t) {
					var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
						i = n.callback;
					"function" === typeof n && (i = n, n = {}), this.options = n;
					var s = this;

					function p(e) {
						return i ? (setTimeout((function() {
							i(void 0, e)
						}), 0), !0) : e
					}
					e = this.castInput(e), t = this.castInput(t), e = this.removeEmpty(this.tokenize(e));
					var o = (t = this.removeEmpty(this.tokenize(t))).length,
						c = e.length,
						h = 1,
						u = o + c,
						m = [{
							newPos: -1,
							components: []
						}],
						d = this.extractCommon(m[0], t, e, 0);
					if (m[0].newPos + 1 >= o && d + 1 >= c) return p([{
						value: this.join(t),
						count: t.length
					}]);

					function l() {
						for (var n = -1 * h; n <= h; n += 2) {
							var i = void 0,
								u = m[n - 1],
								d = m[n + 1],
								l = (d ? d.newPos : 0) - n;
							u && (m[n - 1] = void 0);
							var y = u && u.newPos + 1 < o,
								g = d && 0 <= l && l < c;
							if (y || g) {
								if (!y || g && u.newPos < d.newPos ? (i = a(d), s.pushComponent(i.components, void 0, !0)) : ((i = u).newPos++, s.pushComponent(i.components, !0, void 0)), l = s.extractCommon(i, t, e, n), i.newPos + 1 >= o && l + 1 >= c) return p(r(s, i.components, t, e, s.useLongestToken));
								m[n] = i
							} else m[n] = void 0
						}
						h++
					}
					if (i) ! function e() {
						setTimeout((function() {
							if (h > u) return i();
							l() || e()
						}), 0)
					}();
					else
						for (; h <= u;) {
							var y = l();
							if (y) return y
						}
				},
				pushComponent: function(e, t, r) {
					var a = e[e.length - 1];
					a && a.added === t && a.removed === r ? e[e.length - 1] = {
						count: a.count + 1,
						added: t,
						removed: r
					} : e.push({
						count: 1,
						added: t,
						removed: r
					})
				},
				extractCommon: function(e, t, r, a) {
					for (var n = t.length, i = r.length, s = e.newPos, p = s - a, o = 0; s + 1 < n && p + 1 < i && this.equals(t[s + 1], r[p + 1]);) s++, p++, o++;
					return o && e.components.push({
						count: o
					}), e.newPos = s, p
				},
				equals: function(e, t) {
					return this.options.comparator ? this.options.comparator(e, t) : e === t || this.options.ignoreCase && e.toLowerCase() === t.toLowerCase()
				},
				removeEmpty: function(e) {
					for (var t = [], r = 0; r < e.length; r++) e[r] && t.push(e[r]);
					return t
				},
				castInput: function(e) {
					return e
				},
				tokenize: function(e) {
					return e.split("")
				},
				join: function(e) {
					return e.join("")
				}
			};
			var n = new t;

			function i(e, t, r) {
				return n.diff(e, t, r)
			}

			function s(e, t) {
				if ("function" === typeof e) t.callback = e;
				else if (e)
					for (var r in e) e.hasOwnProperty(r) && (t[r] = e[r]);
				return t
			}
			var p = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/,
				o = /\S/,
				c = new t;

			function h(e, t, r) {
				return r = s(r, {
					ignoreWhitespace: !0
				}), c.diff(e, t, r)
			}

			function u(e, t, r) {
				return c.diff(e, t, r)
			}
			c.equals = function(e, t) {
				return this.options.ignoreCase && (e = e.toLowerCase(), t = t.toLowerCase()), e === t || this.options.ignoreWhitespace && !o.test(e) && !o.test(t)
			}, c.tokenize = function(e) {
				for (var t = e.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/), r = 0; r < t.length - 1; r++) !t[r + 1] && t[r + 2] && p.test(t[r]) && p.test(t[r + 2]) && (t[r] += t[r + 2], t.splice(r + 1, 2), r--);
				return t
			};
			var m = new t;

			function d(e, t, r) {
				return m.diff(e, t, r)
			}

			function l(e, t, r) {
				var a = s(r, {
					ignoreWhitespace: !0
				});
				return m.diff(e, t, a)
			}
			m.tokenize = function(e) {
				var t = [],
					r = e.split(/(\n|\r\n)/);
				r[r.length - 1] || r.pop();
				for (var a = 0; a < r.length; a++) {
					var n = r[a];
					a % 2 && !this.options.newlineIsToken ? t[t.length - 1] += n : (this.options.ignoreWhitespace && (n = n.trim()), t.push(n))
				}
				return t
			};
			var y = new t;

			function g(e, t, r) {
				return y.diff(e, t, r)
			}
			y.tokenize = function(e) {
				return e.split(/(\S.+?[.!?])(?=\s+|$)/)
			};
			var f = new t;

			function v(e, t, r) {
				return f.diff(e, t, r)
			}

			function b(e) {
				return (b = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(e) {
					return typeof e
				} : function(e) {
					return e && "function" === typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
				})(e)
			}

			function P(e) {
				return S(e) || w(e) || k(e) || I()
			}

			function S(e) {
				if (Array.isArray(e)) return _(e)
			}

			function w(e) {
				if ("undefined" !== typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e)
			}

			function k(e, t) {
				if (e) {
					if ("string" === typeof e) return _(e, t);
					var r = Object.prototype.toString.call(e).slice(8, -1);
					return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? _(e, t) : void 0
				}
			}

			function _(e, t) {
				(null == t || t > e.length) && (t = e.length);
				for (var r = 0, a = new Array(t); r < t; r++) a[r] = e[r];
				return a
			}

			function I() {
				throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
			}
			f.tokenize = function(e) {
				return e.split(/([{}:;,]|\s+)/)
			};
			var q = Object.prototype.toString,
				L = new t;

			function x(e, t, r) {
				return L.diff(e, t, r)
			}

			function E(e, t, r, a, n) {
				var i, s;
				for (t = t || [], r = r || [], a && (e = a(n, e)), i = 0; i < t.length; i += 1)
					if (t[i] === e) return r[i];
				if ("[object Array]" === q.call(e)) {
					for (t.push(e), s = new Array(e.length), r.push(s), i = 0; i < e.length; i += 1) s[i] = E(e[i], t, r, a, n);
					return t.pop(), r.pop(), s
				}
				if (e && e.toJSON && (e = e.toJSON()), "object" === b(e) && null !== e) {
					t.push(e), s = {}, r.push(s);
					var p, o = [];
					for (p in e) e.hasOwnProperty(p) && o.push(p);
					for (o.sort(), i = 0; i < o.length; i += 1) s[p = o[i]] = E(e[p], t, r, a, p);
					t.pop(), r.pop()
				} else s = e;
				return s
			}
			L.useLongestToken = !0, L.tokenize = m.tokenize, L.castInput = function(e) {
				var t = this.options,
					r = t.undefinedReplacement,
					a = t.stringifyReplacer,
					n = void 0 === a ? function(e, t) {
						return "undefined" === typeof t ? r : t
					} : a;
				return "string" === typeof e ? e : JSON.stringify(E(e, null, null, n), n, "  ")
			}, L.equals = function(e, r) {
				return t.prototype.equals.call(L, e.replace(/,([\r\n])/g, "$1"), r.replace(/,([\r\n])/g, "$1"))
			};
			var N = new t;

			function O(e, t, r) {
				return N.diff(e, t, r)
			}

			function D(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
					r = e.split(/\r\n|[\n\v\f\r\x85]/),
					a = e.match(/\r\n|[\n\v\f\r\x85]/g) || [],
					n = [],
					i = 0;

				function s() {
					var e = {};
					for (n.push(e); i < r.length;) {
						var a = r[i];
						if (/^(\-\-\-|\+\+\+|@@)\s/.test(a)) break;
						var s = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(a);
						s && (e.index = s[1]), i++
					}
					for (p(e), p(e), e.hunks = []; i < r.length;) {
						var c = r[i];
						if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(c)) break;
						if (/^@@/.test(c)) e.hunks.push(o());
						else {
							if (c && t.strict) throw new Error("Unknown line " + (i + 1) + " " + JSON.stringify(c));
							i++
						}
					}
				}

				function p(e) {
					var t = /^(---|\+\+\+)\s+(.*)$/.exec(r[i]);
					if (t) {
						var a = "---" === t[1] ? "old" : "new",
							n = t[2].split("\t", 2),
							s = n[0].replace(/\\\\/g, "\\");
						/^".*"$/.test(s) && (s = s.substr(1, s.length - 2)), e[a + "FileName"] = s, e[a + "Header"] = (n[1] || "").trim(), i++
					}
				}

				function o() {
					var e = i,
						n = r[i++].split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/),
						s = {
							oldStart: +n[1],
							oldLines: "undefined" === typeof n[2] ? 1 : +n[2],
							newStart: +n[3],
							newLines: "undefined" === typeof n[4] ? 1 : +n[4],
							lines: [],
							linedelimiters: []
						};
					0 === s.oldLines && (s.oldStart += 1), 0 === s.newLines && (s.newStart += 1);
					for (var p = 0, o = 0; i < r.length && !(0 === r[i].indexOf("--- ") && i + 2 < r.length && 0 === r[i + 1].indexOf("+++ ") && 0 === r[i + 2].indexOf("@@")); i++) {
						var c = 0 == r[i].length && i != r.length - 1 ? " " : r[i][0];
						if ("+" !== c && "-" !== c && " " !== c && "\\" !== c) break;
						s.lines.push(r[i]), s.linedelimiters.push(a[i] || "\n"), "+" === c ? p++ : "-" === c ? o++ : " " === c && (p++, o++)
					}
					if (p || 1 !== s.newLines || (s.newLines = 0), o || 1 !== s.oldLines || (s.oldLines = 0), t.strict) {
						if (p !== s.newLines) throw new Error("Added line count did not match for hunk at line " + (e + 1));
						if (o !== s.oldLines) throw new Error("Removed line count did not match for hunk at line " + (e + 1))
					}
					return s
				}
				for (; i < r.length;) s();
				return n
			}

			function T(e, t, r) {
				var a = !0,
					n = !1,
					i = !1,
					s = 1;
				return function p() {
					if (a && !i) {
						if (n ? s++ : a = !1, e + s <= r) return s;
						i = !0
					}
					if (!n) return i || (a = !0), t <= e - s ? -s++ : (n = !0, p())
				}
			}

			function j(e, t) {
				var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
				if ("string" === typeof t && (t = D(t)), Array.isArray(t)) {
					if (t.length > 1) throw new Error("applyPatch only works with a single input.");
					t = t[0]
				}
				var a, n, i = e.split(/\r\n|[\n\v\f\r\x85]/),
					s = e.match(/\r\n|[\n\v\f\r\x85]/g) || [],
					p = t.hunks,
					o = r.compareLine || function(e, t, r, a) {
						return t === a
					},
					c = 0,
					h = r.fuzzFactor || 0,
					u = 0,
					m = 0;

				function d(e, t) {
					for (var r = 0; r < e.lines.length; r++) {
						var a = e.lines[r],
							n = a.length > 0 ? a[0] : " ",
							s = a.length > 0 ? a.substr(1) : a;
						if (" " === n || "-" === n) {
							if (!o(t + 1, i[t], n, s) && ++c > h) return !1;
							t++
						}
					}
					return !0
				}
				for (var l = 0; l < p.length; l++) {
					for (var y = p[l], g = i.length - y.oldLines, f = 0, v = m + y.oldStart - 1, b = T(v, u, g); void 0 !== f; f = b())
						if (d(y, v + f)) {
							y.offset = m += f;
							break
						} if (void 0 === f) return !1;
					u = y.offset + y.oldStart + y.oldLines
				}
				for (var P = 0, S = 0; S < p.length; S++) {
					var w = p[S],
						k = w.oldStart + w.offset + P - 1;
					P += w.newLines - w.oldLines;
					for (var _ = 0; _ < w.lines.length; _++) {
						var I = w.lines[_],
							q = I.length > 0 ? I[0] : " ",
							L = I.length > 0 ? I.substr(1) : I,
							x = w.linedelimiters[_];
						if (" " === q) k++;
						else if ("-" === q) i.splice(k, 1), s.splice(k, 1);
						else if ("+" === q) i.splice(k, 0, L), s.splice(k, 0, x), k++;
						else if ("\\" === q) {
							var E = w.lines[_ - 1] ? w.lines[_ - 1][0] : null;
							"+" === E ? a = !0 : "-" === E && (n = !0)
						}
					}
				}
				if (a)
					for (; !i[i.length - 1];) i.pop(), s.pop();
				else n && (i.push(""), s.push("\n"));
				for (var N = 0; N < i.length - 1; N++) i[N] = i[N] + s[N];
				return i.join("")
			}

			function F(e, t) {
				"string" === typeof e && (e = D(e));
				var r = 0;

				function a() {
					var n = e[r++];
					if (!n) return t.complete();
					t.loadFile(n, (function(e, r) {
						if (e) return t.complete(e);
						var i = j(r, n, t);
						t.patched(n, i, (function(e) {
							if (e) return t.complete(e);
							a()
						}))
					}))
				}
				a()
			}

			function C(e, t, r, a, n, i, s) {
				s || (s = {}), "undefined" === typeof s.context && (s.context = 4);
				var p = d(r, a, s);

				function o(e) {
					return e.map((function(e) {
						return " " + e
					}))
				}
				p.push({
					value: "",
					lines: []
				});
				for (var c = [], h = 0, u = 0, m = [], l = 1, y = 1, g = function(e) {
						var t = p[e],
							n = t.lines || t.value.replace(/\n$/, "").split("\n");
						if (t.lines = n, t.added || t.removed) {
							var i;
							if (!h) {
								var d = p[e - 1];
								h = l, u = y, d && (m = s.context > 0 ? o(d.lines.slice(-s.context)) : [], h -= m.length, u -= m.length)
							}(i = m).push.apply(i, P(n.map((function(e) {
								return (t.added ? "+" : "-") + e
							})))), t.added ? y += n.length : l += n.length
						} else {
							if (h)
								if (n.length <= 2 * s.context && e < p.length - 2) {
									var g;
									(g = m).push.apply(g, P(o(n)))
								} else {
									var f, v = Math.min(n.length, s.context);
									(f = m).push.apply(f, P(o(n.slice(0, v))));
									var b = {
										oldStart: h,
										oldLines: l - h + v,
										newStart: u,
										newLines: y - u + v,
										lines: m
									};
									if (e >= p.length - 2 && n.length <= s.context) {
										var S = /\n$/.test(r),
											w = /\n$/.test(a),
											k = 0 == n.length && m.length > b.oldLines;
										!S && k && r.length > 0 && m.splice(b.oldLines, 0, "\\ No newline at end of file"), (S || k) && w || m.push("\\ No newline at end of file")
									}
									c.push(b), h = 0, u = 0, m = []
								} l += n.length, y += n.length
						}
					}, f = 0; f < p.length; f++) g(f);
				return {
					oldFileName: e,
					newFileName: t,
					oldHeader: n,
					newHeader: i,
					hunks: c
				}
			}

			function A(e) {
				var t = [];
				e.oldFileName == e.newFileName && t.push("Index: " + e.oldFileName), t.push("==================================================================="), t.push("--- " + e.oldFileName + ("undefined" === typeof e.oldHeader ? "" : "\t" + e.oldHeader)), t.push("+++ " + e.newFileName + ("undefined" === typeof e.newHeader ? "" : "\t" + e.newHeader));
				for (var r = 0; r < e.hunks.length; r++) {
					var a = e.hunks[r];
					0 === a.oldLines && (a.oldStart -= 1), 0 === a.newLines && (a.newStart -= 1), t.push("@@ -" + a.oldStart + "," + a.oldLines + " +" + a.newStart + "," + a.newLines + " @@"), t.push.apply(t, a.lines)
				}
				return t.join("\n") + "\n"
			}

			function H(e, t, r, a, n, i, s) {
				return A(C(e, t, r, a, n, i, s))
			}

			function R(e, t, r, a, n, i) {
				return H(e, e, t, r, a, n, i)
			}

			function M(e, t) {
				return e.length === t.length && $(e, t)
			}

			function $(e, t) {
				if (t.length > e.length) return !1;
				for (var r = 0; r < t.length; r++)
					if (t[r] !== e[r]) return !1;
				return !0
			}

			function z(e) {
				var t = ie(e.lines),
					r = t.oldLines,
					a = t.newLines;
				void 0 !== r ? e.oldLines = r : delete e.oldLines, void 0 !== a ? e.newLines = a : delete e.newLines
			}

			function U(e, t, r) {
				e = B(e, r), t = B(t, r);
				var a = {};
				(e.index || t.index) && (a.index = e.index || t.index), (e.newFileName || t.newFileName) && (W(e) ? W(t) ? (a.oldFileName = V(a, e.oldFileName, t.oldFileName), a.newFileName = V(a, e.newFileName, t.newFileName), a.oldHeader = V(a, e.oldHeader, t.oldHeader), a.newHeader = V(a, e.newHeader, t.newHeader)) : (a.oldFileName = e.oldFileName, a.newFileName = e.newFileName, a.oldHeader = e.oldHeader, a.newHeader = e.newHeader) : (a.oldFileName = t.oldFileName || e.oldFileName, a.newFileName = t.newFileName || e.newFileName, a.oldHeader = t.oldHeader || e.oldHeader, a.newHeader = t.newHeader || e.newHeader)), a.hunks = [];
				for (var n = 0, i = 0, s = 0, p = 0; n < e.hunks.length || i < t.hunks.length;) {
					var o = e.hunks[n] || {
							oldStart: 1 / 0
						},
						c = t.hunks[i] || {
							oldStart: 1 / 0
						};
					if (G(o, c)) a.hunks.push(K(o, s)), n++, p += o.newLines - o.oldLines;
					else if (G(c, o)) a.hunks.push(K(c, p)), i++, s += c.newLines - c.oldLines;
					else {
						var h = {
							oldStart: Math.min(o.oldStart, c.oldStart),
							oldLines: 0,
							newStart: Math.min(o.newStart + s, c.oldStart + p),
							newLines: 0,
							lines: []
						};
						Q(h, o.oldStart, o.lines, c.oldStart, c.lines), i++, n++, a.hunks.push(h)
					}
				}
				return a
			}

			function B(e, t) {
				if ("string" === typeof e) {
					if (/^@@/m.test(e) || /^Index:/m.test(e)) return D(e)[0];
					if (!t) throw new Error("Must provide a base reference or pass in a patch");
					return C(void 0, void 0, t, e)
				}
				return e
			}

			function W(e) {
				return e.newFileName && e.newFileName !== e.oldFileName
			}

			function V(e, t, r) {
				return t === r ? t : (e.conflict = !0, {
					mine: t,
					theirs: r
				})
			}

			function G(e, t) {
				return e.oldStart < t.oldStart && e.oldStart + e.oldLines < t.oldStart
			}

			function K(e, t) {
				return {
					oldStart: e.oldStart,
					oldLines: e.oldLines,
					newStart: e.newStart + t,
					newLines: e.newLines,
					lines: e.lines
				}
			}

			function Q(e, t, r, a, n) {
				var i = {
						offset: t,
						lines: r,
						index: 0
					},
					s = {
						offset: a,
						lines: n,
						index: 0
					};
				for (Z(e, i, s), Z(e, s, i); i.index < i.lines.length && s.index < s.lines.length;) {
					var p = i.lines[i.index],
						o = s.lines[s.index];
					if ("-" !== p[0] && "+" !== p[0] || "-" !== o[0] && "+" !== o[0])
						if ("+" === p[0] && " " === o[0]) {
							var c;
							(c = e.lines).push.apply(c, P(te(i)))
						} else if ("+" === o[0] && " " === p[0]) {
						var h;
						(h = e.lines).push.apply(h, P(te(s)))
					} else "-" === p[0] && " " === o[0] ? J(e, i, s) : "-" === o[0] && " " === p[0] ? J(e, s, i, !0) : p === o ? (e.lines.push(p), i.index++, s.index++) : X(e, te(i), te(s));
					else Y(e, i, s)
				}
				ee(e, i), ee(e, s), z(e)
			}

			function Y(e, t, r) {
				var a = te(t),
					n = te(r);
				if (ae(a) && ae(n)) {
					var i, s;
					if ($(a, n) && ne(r, a, a.length - n.length)) return void(i = e.lines).push.apply(i, P(a));
					if ($(n, a) && ne(t, n, n.length - a.length)) return void(s = e.lines).push.apply(s, P(n))
				} else if (M(a, n)) {
					var p;
					return void(p = e.lines).push.apply(p, P(a))
				}
				X(e, a, n)
			}

			function J(e, t, r, a) {
				var n, i = te(t),
					s = re(r, i);
				s.merged ? (n = e.lines).push.apply(n, P(s.merged)) : X(e, a ? s : i, a ? i : s)
			}

			function X(e, t, r) {
				e.conflict = !0, e.lines.push({
					conflict: !0,
					mine: t,
					theirs: r
				})
			}

			function Z(e, t, r) {
				for (; t.offset < r.offset && t.index < t.lines.length;) {
					var a = t.lines[t.index++];
					e.lines.push(a), t.offset++
				}
			}

			function ee(e, t) {
				for (; t.index < t.lines.length;) {
					var r = t.lines[t.index++];
					e.lines.push(r)
				}
			}

			function te(e) {
				for (var t = [], r = e.lines[e.index][0]; e.index < e.lines.length;) {
					var a = e.lines[e.index];
					if ("-" === r && "+" === a[0] && (r = "+"), r !== a[0]) break;
					t.push(a), e.index++
				}
				return t
			}

			function re(e, t) {
				for (var r = [], a = [], n = 0, i = !1, s = !1; n < t.length && e.index < e.lines.length;) {
					var p = e.lines[e.index],
						o = t[n];
					if ("+" === o[0]) break;
					if (i = i || " " !== p[0], a.push(o), n++, "+" === p[0])
						for (s = !0;
							"+" === p[0];) r.push(p), p = e.lines[++e.index];
					o.substr(1) === p.substr(1) ? (r.push(p), e.index++) : s = !0
				}
				if ("+" === (t[n] || "")[0] && i && (s = !0), s) return r;
				for (; n < t.length;) a.push(t[n++]);
				return {
					merged: a,
					changes: r
				}
			}

			function ae(e) {
				return e.reduce((function(e, t) {
					return e && "-" === t[0]
				}), !0)
			}

			function ne(e, t, r) {
				for (var a = 0; a < r; a++) {
					var n = t[t.length - r + a].substr(1);
					if (e.lines[e.index + a] !== " " + n) return !1
				}
				return e.index += r, !0
			}

			function ie(e) {
				var t = 0,
					r = 0;
				return e.forEach((function(e) {
					if ("string" !== typeof e) {
						var a = ie(e.mine),
							n = ie(e.theirs);
						void 0 !== t && (a.oldLines === n.oldLines ? t += a.oldLines : t = void 0), void 0 !== r && (a.newLines === n.newLines ? r += a.newLines : r = void 0)
					} else void 0 === r || "+" !== e[0] && " " !== e[0] || r++, void 0 === t || "-" !== e[0] && " " !== e[0] || t++
				})), {
					oldLines: t,
					newLines: r
				}
			}

			function se(e) {
				for (var t, r, a = [], n = 0; n < e.length; n++) r = (t = e[n]).added ? 1 : t.removed ? -1 : 0, a.push([r, t.value]);
				return a
			}

			function pe(e) {
				for (var t = [], r = 0; r < e.length; r++) {
					var a = e[r];
					a.added ? t.push("<ins>") : a.removed && t.push("<del>"), t.push(oe(a.value)), a.added ? t.push("</ins>") : a.removed && t.push("</del>")
				}
				return t.join("")
			}

			function oe(e) {
				var t = e;
				return t = (t = (t = (t = t.replace(/&/g, "&amp;")).replace(/</g, "&lt;")).replace(/>/g, "&gt;")).replace(/"/g, "&quot;")
			}
			N.tokenize = function(e) {
				return e.slice()
			}, N.join = N.removeEmpty = function(e) {
				return e
			}, e.Diff = t, e.applyPatch = j, e.applyPatches = F, e.canonicalize = E, e.convertChangesToDMP = se, e.convertChangesToXML = pe, e.createPatch = R, e.createTwoFilesPatch = H, e.diffArrays = O, e.diffChars = i, e.diffCss = v, e.diffJson = x, e.diffLines = d, e.diffSentences = g, e.diffTrimmedLines = l, e.diffWords = h, e.diffWordsWithSpace = u, e.merge = U, e.parsePatch = D, e.structuredPatch = C, Object.defineProperty(e, "__esModule", {
				value: !0
			})
		}(t)
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a, n = r(0),
			i = (a = n) && "object" === typeof a && "default" in a ? a.default : a,
			s = new(r(119)),
			p = s.getBrowser(),
			o = (s.getCPU(), s.getDevice()),
			c = s.getEngine(),
			h = s.getOS(),
			u = s.getUA(),
			m = function(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "none";
				return e || t
			},
			d = function() {
				return !("undefined" === typeof window || !window.navigator && !navigator) && (window.navigator || navigator)
			},
			l = function(e) {
				var t = d();
				return t && t.platform && (-1 !== t.platform.indexOf(e) || "MacIntel" === t.platform && t.maxTouchPoints > 1 && !window.MSStream)
			};

		function y(e) {
			return (y = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(e) {
				return typeof e
			} : function(e) {
				return e && "function" === typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
			})(e)
		}

		function g(e, t) {
			for (var r = 0; r < t.length; r++) {
				var a = t[r];
				a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
			}
		}

		function f(e, t, r) {
			return t in e ? Object.defineProperty(e, t, {
				value: r,
				enumerable: !0,
				configurable: !0,
				writable: !0
			}) : e[t] = r, e
		}

		function v() {
			return (v = Object.assign || function(e) {
				for (var t = 1; t < arguments.length; t++) {
					var r = arguments[t];
					for (var a in r) Object.prototype.hasOwnProperty.call(r, a) && (e[a] = r[a])
				}
				return e
			}).apply(this, arguments)
		}

		function b(e, t) {
			var r = Object.keys(e);
			if (Object.getOwnPropertySymbols) {
				var a = Object.getOwnPropertySymbols(e);
				t && (a = a.filter((function(t) {
					return Object.getOwnPropertyDescriptor(e, t).enumerable
				}))), r.push.apply(r, a)
			}
			return r
		}

		function P(e) {
			return (P = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {
				return e.__proto__ || Object.getPrototypeOf(e)
			})(e)
		}

		function S(e, t) {
			return (S = Object.setPrototypeOf || function(e, t) {
				return e.__proto__ = t, e
			})(e, t)
		}

		function w(e, t) {
			if (null == e) return {};
			var r, a, n = function(e, t) {
				if (null == e) return {};
				var r, a, n = {},
					i = Object.keys(e);
				for (a = 0; a < i.length; a++) r = i[a], t.indexOf(r) >= 0 || (n[r] = e[r]);
				return n
			}(e, t);
			if (Object.getOwnPropertySymbols) {
				var i = Object.getOwnPropertySymbols(e);
				for (a = 0; a < i.length; a++) r = i[a], t.indexOf(r) >= 0 || Object.prototype.propertyIsEnumerable.call(e, r) && (n[r] = e[r])
			}
			return n
		}

		function k(e) {
			if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			return e
		}
		var _ = "mobile",
			I = "tablet",
			q = "smarttv",
			L = "console",
			x = "wearable",
			E = void 0,
			N = {
				Chrome: "Chrome",
				Firefox: "Firefox",
				Opera: "Opera",
				Yandex: "Yandex",
				Safari: "Safari",
				InternetExplorer: "Internet Explorer",
				Edge: "Edge",
				Chromium: "Chromium",
				Ie: "IE",
				MobileSafari: "Mobile Safari",
				EdgeChromium: "Edge Chromium",
				MIUI: "MIUI Browser",
				SamsungBrowser: "Samsung Browser"
			},
			O = {
				IOS: "iOS",
				Android: "Android",
				WindowsPhone: "Windows Phone",
				Windows: "Windows",
				MAC_OS: "Mac OS"
			},
			D = {
				isMobile: !1,
				isTablet: !1,
				isBrowser: !1,
				isSmartTV: !1,
				isConsole: !1,
				isWearable: !1
			},
			T = function(e, t, r, a) {
				return function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var r = null != arguments[t] ? arguments[t] : {};
						t % 2 ? b(r, !0).forEach((function(t) {
							f(e, t, r[t])
						})) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : b(r).forEach((function(t) {
							Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t))
						}))
					}
					return e
				}({}, e, {
					vendor: m(t.vendor),
					model: m(t.model),
					os: m(r.name),
					osVersion: m(r.version),
					ua: m(a)
				})
			},
			j = function(e) {
				switch (e) {
					case _:
						return {
							isMobile: !0
						};
					case I:
						return {
							isTablet: !0
						};
					case q:
						return {
							isSmartTV: !0
						};
					case L:
						return {
							isConsole: !0
						};
					case x:
						return {
							isWearable: !0
						};
					case E:
						return {
							isBrowser: !0
						};
					default:
						return D
				}
			}(o.type);
		var F = function() {
				return "string" === typeof u && -1 !== u.indexOf("Edg/")
			},
			C = function() {
				return o.type === E
			},
			A = function() {
				return p.name === N.Edge
			},
			H = function() {
				return l("iPad")
			},
			R = o.type === q,
			M = o.type === L,
			$ = o.type === x,
			z = p.name === N.MobileSafari || H(),
			U = p.name === N.Chromium,
			B = function() {
				switch (o.type) {
					case _:
					case I:
						return !0;
					default:
						return !1
				}
			}() || H(),
			W = o.type === _,
			V = o.type === I || H(),
			G = C(),
			K = C(),
			Q = h.name === O.Android,
			Y = h.name === O.WindowsPhone,
			J = h.name === O.IOS || H(),
			X = p.name === N.Chrome,
			Z = p.name === N.Firefox,
			ee = p.name === N.Safari || p.name === N.MobileSafari,
			te = p.name === N.Opera,
			re = p.name === N.InternetExplorer || p.name === N.Ie,
			ae = m(h.version),
			ne = m(h.name),
			ie = m(p.version),
			se = m(p.major),
			pe = m(p.name),
			oe = m(o.vendor),
			ce = m(o.model),
			he = m(c.name),
			ue = m(c.version),
			me = m(u),
			de = A() || F(),
			le = p.name === N.Yandex,
			ye = m(o.type, "browser"),
			ge = function() {
				var e = d();
				return e && (/iPad|iPhone|iPod/.test(e.platform) || "MacIntel" === e.platform && e.maxTouchPoints > 1) && !window.MSStream
			}(),
			fe = H(),
			ve = l("iPhone"),
			be = l("iPod"),
			Pe = function() {
				var e = d(),
					t = e && e.userAgent && e.userAgent.toLowerCase();
				return "string" === typeof t && /electron/.test(t)
			}(),
			Se = F(),
			we = A() && !F(),
			ke = h.name === O.Windows,
			_e = h.name === O.MAC_OS,
			Ie = p.name === N.MIUI,
			qe = p.name === N.SamsungBrowser;
		t.AndroidView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return Q ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.BrowserTypes = N, t.BrowserView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return G ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.ConsoleView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return M ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.CustomView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = e.condition,
				o = w(e, ["renderWithFragment", "children", "viewClassName", "style", "condition"]);
			return p ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, o), r) : null
		}, t.IEView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return re ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.IOSView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return J ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.MobileOnlyView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return W ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.MobileView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return B ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.OsTypes = O, t.SmartTVView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return R ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.TabletView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return V ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.WearableView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return $ ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.WinPhoneView = function(e) {
			var t = e.renderWithFragment,
				r = e.children,
				a = e.viewClassName,
				s = e.style,
				p = w(e, ["renderWithFragment", "children", "viewClassName", "style"]);
			return Y ? t ? i.createElement(n.Fragment, null, r) : i.createElement("div", v({
				className: a,
				style: s
			}, p), r) : null
		}, t.browserName = pe, t.browserVersion = se, t.deviceDetect = function() {
			var e = j.isBrowser,
				t = j.isMobile,
				r = j.isTablet,
				a = j.isSmartTV,
				n = j.isConsole,
				i = j.isWearable;
			return e ? function(e, t, r, a, n) {
				return {
					isBrowser: e,
					browserMajorVersion: m(t.major),
					browserFullVersion: m(t.version),
					browserName: m(t.name),
					engineName: m(r.name),
					engineVersion: m(r.version),
					osName: m(a.name),
					osVersion: m(a.version),
					userAgent: m(n)
				}
			}(e, p, c, h, u) : a ? function(e, t, r, a) {
				return {
					isSmartTV: e,
					engineName: m(t.name),
					engineVersion: m(t.version),
					osName: m(r.name),
					osVersion: m(r.version),
					userAgent: m(a)
				}
			}(a, c, h, u) : n ? function(e, t, r, a) {
				return {
					isConsole: e,
					engineName: m(t.name),
					engineVersion: m(t.version),
					osName: m(r.name),
					osVersion: m(r.version),
					userAgent: m(a)
				}
			}(n, c, h, u) : t || r ? T(j, o, h, u) : i ? function(e, t, r, a) {
				return {
					isWearable: e,
					engineName: m(t.name),
					engineVersion: m(t.version),
					osName: m(r.name),
					osVersion: m(r.version),
					userAgent: m(a)
				}
			}(i, c, h, u) : void 0
		}, t.deviceType = ye, t.engineName = he, t.engineVersion = ue, t.fullBrowserVersion = ie, t.getUA = me, t.isAndroid = Q, t.isBrowser = G, t.isChrome = X, t.isChromium = U, t.isConsole = M, t.isDesktop = K, t.isEdge = de, t.isEdgeChromium = Se, t.isElectron = Pe, t.isFirefox = Z, t.isIE = re, t.isIOS = J, t.isIOS13 = ge, t.isIPad13 = fe, t.isIPhone13 = ve, t.isIPod13 = be, t.isLegacyEdge = we, t.isMIUI = Ie, t.isMacOs = _e, t.isMobile = B, t.isMobileOnly = W, t.isMobileSafari = z, t.isOpera = te, t.isSafari = ee, t.isSamsungBrowser = qe, t.isSmartTV = R, t.isTablet = V, t.isWearable = $, t.isWinPhone = Y, t.isWindows = ke, t.isYandex = le, t.mobileModel = ce, t.mobileVendor = oe, t.osName = ne, t.osVersion = ae, t.withOrientationChange = function(e) {
			return function(t) {
				function r(e) {
					var t;
					return function(e, t) {
						if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
					}(this, r), (t = function(e, t) {
						return !t || "object" !== typeof t && "function" !== typeof t ? k(e) : t
					}(this, P(r).call(this, e))).isEventListenerAdded = !1, t.handleOrientationChange = t.handleOrientationChange.bind(k(t)), t.onOrientationChange = t.onOrientationChange.bind(k(t)), t.onPageLoad = t.onPageLoad.bind(k(t)), t.state = {
						isLandscape: !1,
						isPortrait: !1
					}, t
				}
				var a, n, s;
				return function(e, t) {
					if ("function" !== typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
					e.prototype = Object.create(t && t.prototype, {
						constructor: {
							value: e,
							writable: !0,
							configurable: !0
						}
					}), t && S(e, t)
				}(r, t), a = r, (n = [{
					key: "handleOrientationChange",
					value: function() {
						this.isEventListenerAdded || (this.isEventListenerAdded = !0);
						var e = window.innerWidth > window.innerHeight ? 90 : 0;
						this.setState({
							isPortrait: 0 === e,
							isLandscape: 90 === e
						})
					}
				}, {
					key: "onOrientationChange",
					value: function() {
						this.handleOrientationChange()
					}
				}, {
					key: "onPageLoad",
					value: function() {
						this.handleOrientationChange()
					}
				}, {
					key: "componentDidMount",
					value: function() {
						void 0 !== ("undefined" === typeof window ? "undefined" : y(window)) && B && (this.isEventListenerAdded ? window.removeEventListener("load", this.onPageLoad, !1) : (this.handleOrientationChange(), window.addEventListener("load", this.onPageLoad, !1)), window.addEventListener("resize", this.onOrientationChange, !1))
					}
				}, {
					key: "componentWillUnmount",
					value: function() {
						window.removeEventListener("resize", this.onOrientationChange, !1)
					}
				}, {
					key: "render",
					value: function() {
						return i.createElement(e, v({}, this.props, {
							isLandscape: this.state.isLandscape,
							isPortrait: this.state.isPortrait
						}))
					}
				}]) && g(a.prototype, n), s && g(a, s), r
			}(i.Component)
		}
	}, function(e, t, r) {
		var a = r(120),
			n = function() {};
		n.prototype.start = function(e) {
			if (!e.key && !e.targetUrl && !e.customReportingFunction) throw new Error("Cannot initialize: No API key, target url or custom reporting function provided.");
			if (!e.projectId && !e.targetUrl && !e.customReportingFunction) throw new Error("Cannot initialize: No project ID, target url or custom reporting function provided.");
			this.customReportingFunction = e.customReportingFunction, this.apiKey = e.key, this.projectId = e.projectId, this.targetUrl = e.targetUrl, this.context = e.context || {}, this.serviceContext = {
					service: e.service || "web"
				}, e.version && (this.serviceContext.version = e.version), this.reportUncaughtExceptions = !1 !== e.reportUncaughtExceptions, this.reportUnhandledPromiseRejections = !1 !== e.reportUnhandledPromiseRejections, this.disabled = !!e.disabled,
				function(e) {
					var t = function() {};
					if (e.reportUncaughtExceptions) {
						var r = window.onerror || t;
						window.onerror = function(a, n, i, s, p) {
							return p && e.report(p).catch(t), r(a, n, i, s, p), !0
						}
					}
					if (e.reportUnhandledPromiseRejections) {
						var a = window.onunhandledrejection || t;
						window.onunhandledrejection = function(r) {
							return r && e.report(r.reason).catch(t), a(r.reason), !0
						}
					}
				}(this)
		}, n.prototype.report = function(e, t) {
			if (this.disabled) return Promise.resolve(null);
			if (!e) return Promise.reject(new Error("no error to report"));
			t = t || {};
			var r = {};
			r.serviceContext = this.serviceContext, r.context = this.context, r.context.httpRequest = {
				userAgent: window.navigator.userAgent,
				url: window.location.href
			};
			var n = 0;
			if ("string" == typeof e || e instanceof String) {
				try {
					throw new Error(e)
				} catch (p) {
					e = p
				}
				n = t.skipLocalFrames || 1
			}
			var i = this.targetUrl || "https://clouderrorreporting.googleapis.com/v1beta1/projects/" + this.projectId + "/events:report?key=" + this.apiKey,
				s = this.customReportingFunction;
			return function(e, t) {
				return a.fromError(e).then((function(r) {
					for (var a = [e.toString()], n = t; n < r.length; n++) a.push(["    at ", r[n].getFunctionName() || "<anonymous>", " (", r[n].getFileName(), ":", r[n].getLineNumber(), ":", r[n].getColumnNumber(), ")"].join(""));
					return a.join("\n")
				}), (function(t) {
					return ["Error extracting stack trace: ", t, "\n", e.toString(), "\n", "    (", e.file, ":", e.line, ":", e.column, ")"].join("")
				}))
			}(e, n).then((function(e) {
				return r.message = e, s ? s(r) : function(e, t) {
					var r = new XMLHttpRequest;
					return r.open("POST", e, !0), r.setRequestHeader("Content-Type", "application/json; charset=UTF-8"), new Promise((function(e, a) {
						r.onreadystatechange = function() {
							if (4 === r.readyState) {
								var n = r.status;
								if (n >= 200 && n < 300) e({
									message: t.message
								});
								else a(new Error((n ? n + " http response" : "network error") + " on stackdriver report"))
							}
						}, r.send(JSON.stringify(t))
					}))
				}(i, r)
			}))
		}, n.prototype.setUser = function(e) {
			this.context.user = e
		}, e.exports = n
	}, function(e, t, r) {
		"use strict";

		function a(e) {
			if (Array.isArray(e)) return e
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		"use strict";

		function a() {
			throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		"use strict";
		(function(e) {
			var r = "undefined" !== typeof window && "undefined" !== typeof document && "undefined" !== typeof navigator,
				a = function() {
					for (var e = ["Edge", "Trident", "Firefox"], t = 0; t < e.length; t += 1)
						if (r && navigator.userAgent.indexOf(e[t]) >= 0) return 1;
					return 0
				}();
			var n = r && window.Promise ? function(e) {
				var t = !1;
				return function() {
					t || (t = !0, window.Promise.resolve().then((function() {
						t = !1, e()
					})))
				}
			} : function(e) {
				var t = !1;
				return function() {
					t || (t = !0, setTimeout((function() {
						t = !1, e()
					}), a))
				}
			};

			function i(e) {
				return e && "[object Function]" === {}.toString.call(e)
			}

			function s(e, t) {
				if (1 !== e.nodeType) return [];
				var r = e.ownerDocument.defaultView.getComputedStyle(e, null);
				return t ? r[t] : r
			}

			function p(e) {
				return "HTML" === e.nodeName ? e : e.parentNode || e.host
			}

			function o(e) {
				if (!e) return document.body;
				switch (e.nodeName) {
					case "HTML":
					case "BODY":
						return e.ownerDocument.body;
					case "#document":
						return e.body
				}
				var t = s(e),
					r = t.overflow,
					a = t.overflowX,
					n = t.overflowY;
				return /(auto|scroll|overlay)/.test(r + n + a) ? e : o(p(e))
			}

			function c(e) {
				return e && e.referenceNode ? e.referenceNode : e
			}
			var h = r && !(!window.MSInputMethodContext || !document.documentMode),
				u = r && /MSIE 10/.test(navigator.userAgent);

			function m(e) {
				return 11 === e ? h : 10 === e ? u : h || u
			}

			function d(e) {
				if (!e) return document.documentElement;
				for (var t = m(10) ? document.body : null, r = e.offsetParent || null; r === t && e.nextElementSibling;) r = (e = e.nextElementSibling).offsetParent;
				var a = r && r.nodeName;
				return a && "BODY" !== a && "HTML" !== a ? -1 !== ["TH", "TD", "TABLE"].indexOf(r.nodeName) && "static" === s(r, "position") ? d(r) : r : e ? e.ownerDocument.documentElement : document.documentElement
			}

			function l(e) {
				return null !== e.parentNode ? l(e.parentNode) : e
			}

			function y(e, t) {
				if (!e || !e.nodeType || !t || !t.nodeType) return document.documentElement;
				var r = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
					a = r ? e : t,
					n = r ? t : e,
					i = document.createRange();
				i.setStart(a, 0), i.setEnd(n, 0);
				var s = i.commonAncestorContainer;
				if (e !== s && t !== s || a.contains(n)) return function(e) {
					var t = e.nodeName;
					return "BODY" !== t && ("HTML" === t || d(e.firstElementChild) === e)
				}(s) ? s : d(s);
				var p = l(e);
				return p.host ? y(p.host, t) : y(e, l(t).host)
			}

			function g(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "top",
					r = "top" === t ? "scrollTop" : "scrollLeft",
					a = e.nodeName;
				if ("BODY" === a || "HTML" === a) {
					var n = e.ownerDocument.documentElement,
						i = e.ownerDocument.scrollingElement || n;
					return i[r]
				}
				return e[r]
			}

			function f(e, t) {
				var r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
					a = g(t, "top"),
					n = g(t, "left"),
					i = r ? -1 : 1;
				return e.top += a * i, e.bottom += a * i, e.left += n * i, e.right += n * i, e
			}

			function v(e, t) {
				var r = "x" === t ? "Left" : "Top",
					a = "Left" === r ? "Right" : "Bottom";
				return parseFloat(e["border" + r + "Width"]) + parseFloat(e["border" + a + "Width"])
			}

			function b(e, t, r, a) {
				return Math.max(t["offset" + e], t["scroll" + e], r["client" + e], r["offset" + e], r["scroll" + e], m(10) ? parseInt(r["offset" + e]) + parseInt(a["margin" + ("Height" === e ? "Top" : "Left")]) + parseInt(a["margin" + ("Height" === e ? "Bottom" : "Right")]) : 0)
			}

			function P(e) {
				var t = e.body,
					r = e.documentElement,
					a = m(10) && getComputedStyle(r);
				return {
					height: b("Height", t, r, a),
					width: b("Width", t, r, a)
				}
			}
			var S = function(e, t) {
					if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
				},
				w = function() {
					function e(e, t) {
						for (var r = 0; r < t.length; r++) {
							var a = t[r];
							a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
						}
					}
					return function(t, r, a) {
						return r && e(t.prototype, r), a && e(t, a), t
					}
				}(),
				k = function(e, t, r) {
					return t in e ? Object.defineProperty(e, t, {
						value: r,
						enumerable: !0,
						configurable: !0,
						writable: !0
					}) : e[t] = r, e
				},
				_ = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var r = arguments[t];
						for (var a in r) Object.prototype.hasOwnProperty.call(r, a) && (e[a] = r[a])
					}
					return e
				};

			function I(e) {
				return _({}, e, {
					right: e.left + e.width,
					bottom: e.top + e.height
				})
			}

			function q(e) {
				var t = {};
				try {
					if (m(10)) {
						t = e.getBoundingClientRect();
						var r = g(e, "top"),
							a = g(e, "left");
						t.top += r, t.left += a, t.bottom += r, t.right += a
					} else t = e.getBoundingClientRect()
				} catch (d) {}
				var n = {
						left: t.left,
						top: t.top,
						width: t.right - t.left,
						height: t.bottom - t.top
					},
					i = "HTML" === e.nodeName ? P(e.ownerDocument) : {},
					p = i.width || e.clientWidth || n.width,
					o = i.height || e.clientHeight || n.height,
					c = e.offsetWidth - p,
					h = e.offsetHeight - o;
				if (c || h) {
					var u = s(e);
					c -= v(u, "x"), h -= v(u, "y"), n.width -= c, n.height -= h
				}
				return I(n)
			}

			function L(e, t) {
				var r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
					a = m(10),
					n = "HTML" === t.nodeName,
					i = q(e),
					p = q(t),
					c = o(e),
					h = s(t),
					u = parseFloat(h.borderTopWidth),
					d = parseFloat(h.borderLeftWidth);
				r && n && (p.top = Math.max(p.top, 0), p.left = Math.max(p.left, 0));
				var l = I({
					top: i.top - p.top - u,
					left: i.left - p.left - d,
					width: i.width,
					height: i.height
				});
				if (l.marginTop = 0, l.marginLeft = 0, !a && n) {
					var y = parseFloat(h.marginTop),
						g = parseFloat(h.marginLeft);
					l.top -= u - y, l.bottom -= u - y, l.left -= d - g, l.right -= d - g, l.marginTop = y, l.marginLeft = g
				}
				return (a && !r ? t.contains(c) : t === c && "BODY" !== c.nodeName) && (l = f(l, t)), l
			}

			function x(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
					r = e.ownerDocument.documentElement,
					a = L(e, r),
					n = Math.max(r.clientWidth, window.innerWidth || 0),
					i = Math.max(r.clientHeight, window.innerHeight || 0),
					s = t ? 0 : g(r),
					p = t ? 0 : g(r, "left"),
					o = {
						top: s - a.top + a.marginTop,
						left: p - a.left + a.marginLeft,
						width: n,
						height: i
					};
				return I(o)
			}

			function E(e) {
				var t = e.nodeName;
				if ("BODY" === t || "HTML" === t) return !1;
				if ("fixed" === s(e, "position")) return !0;
				var r = p(e);
				return !!r && E(r)
			}

			function N(e) {
				if (!e || !e.parentElement || m()) return document.documentElement;
				for (var t = e.parentElement; t && "none" === s(t, "transform");) t = t.parentElement;
				return t || document.documentElement
			}

			function O(e, t, r, a) {
				var n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
					i = {
						top: 0,
						left: 0
					},
					s = n ? N(e) : y(e, c(t));
				if ("viewport" === a) i = x(s, n);
				else {
					var h = void 0;
					"scrollParent" === a ? "BODY" === (h = o(p(t))).nodeName && (h = e.ownerDocument.documentElement) : h = "window" === a ? e.ownerDocument.documentElement : a;
					var u = L(h, s, n);
					if ("HTML" !== h.nodeName || E(s)) i = u;
					else {
						var m = P(e.ownerDocument),
							d = m.height,
							l = m.width;
						i.top += u.top - u.marginTop, i.bottom = d + u.top, i.left += u.left - u.marginLeft, i.right = l + u.left
					}
				}
				var g = "number" === typeof(r = r || 0);
				return i.left += g ? r : r.left || 0, i.top += g ? r : r.top || 0, i.right -= g ? r : r.right || 0, i.bottom -= g ? r : r.bottom || 0, i
			}

			function D(e) {
				return e.width * e.height
			}

			function T(e, t, r, a, n) {
				var i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
				if (-1 === e.indexOf("auto")) return e;
				var s = O(r, a, i, n),
					p = {
						top: {
							width: s.width,
							height: t.top - s.top
						},
						right: {
							width: s.right - t.right,
							height: s.height
						},
						bottom: {
							width: s.width,
							height: s.bottom - t.bottom
						},
						left: {
							width: t.left - s.left,
							height: s.height
						}
					},
					o = Object.keys(p).map((function(e) {
						return _({
							key: e
						}, p[e], {
							area: D(p[e])
						})
					})).sort((function(e, t) {
						return t.area - e.area
					})),
					c = o.filter((function(e) {
						var t = e.width,
							a = e.height;
						return t >= r.clientWidth && a >= r.clientHeight
					})),
					h = c.length > 0 ? c[0].key : o[0].key,
					u = e.split("-")[1];
				return h + (u ? "-" + u : "")
			}

			function j(e, t, r) {
				var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
					n = a ? N(t) : y(t, c(r));
				return L(r, n, a)
			}

			function F(e) {
				var t = e.ownerDocument.defaultView.getComputedStyle(e),
					r = parseFloat(t.marginTop || 0) + parseFloat(t.marginBottom || 0),
					a = parseFloat(t.marginLeft || 0) + parseFloat(t.marginRight || 0);
				return {
					width: e.offsetWidth + a,
					height: e.offsetHeight + r
				}
			}

			function C(e) {
				var t = {
					left: "right",
					right: "left",
					bottom: "top",
					top: "bottom"
				};
				return e.replace(/left|right|bottom|top/g, (function(e) {
					return t[e]
				}))
			}

			function A(e, t, r) {
				r = r.split("-")[0];
				var a = F(e),
					n = {
						width: a.width,
						height: a.height
					},
					i = -1 !== ["right", "left"].indexOf(r),
					s = i ? "top" : "left",
					p = i ? "left" : "top",
					o = i ? "height" : "width",
					c = i ? "width" : "height";
				return n[s] = t[s] + t[o] / 2 - a[o] / 2, n[p] = r === p ? t[p] - a[c] : t[C(p)], n
			}

			function H(e, t) {
				return Array.prototype.find ? e.find(t) : e.filter(t)[0]
			}

			function R(e, t, r) {
				return (void 0 === r ? e : e.slice(0, function(e, t, r) {
					if (Array.prototype.findIndex) return e.findIndex((function(e) {
						return e[t] === r
					}));
					var a = H(e, (function(e) {
						return e[t] === r
					}));
					return e.indexOf(a)
				}(e, "name", r))).forEach((function(e) {
					e.function && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
					var r = e.function || e.fn;
					e.enabled && i(r) && (t.offsets.popper = I(t.offsets.popper), t.offsets.reference = I(t.offsets.reference), t = r(t, e))
				})), t
			}

			function M() {
				if (!this.state.isDestroyed) {
					var e = {
						instance: this,
						styles: {},
						arrowStyles: {},
						attributes: {},
						flipped: !1,
						offsets: {}
					};
					e.offsets.reference = j(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = T(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = A(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", e = R(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e))
				}
			}

			function $(e, t) {
				return e.some((function(e) {
					var r = e.name;
					return e.enabled && r === t
				}))
			}

			function z(e) {
				for (var t = [!1, "ms", "Webkit", "Moz", "O"], r = e.charAt(0).toUpperCase() + e.slice(1), a = 0; a < t.length; a++) {
					var n = t[a],
						i = n ? "" + n + r : e;
					if ("undefined" !== typeof document.body.style[i]) return i
				}
				return null
			}

			function U() {
				return this.state.isDestroyed = !0, $(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", this.popper.style[z("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this
			}

			function B(e) {
				var t = e.ownerDocument;
				return t ? t.defaultView : window
			}

			function W(e, t, r, a) {
				var n = "BODY" === e.nodeName,
					i = n ? e.ownerDocument.defaultView : e;
				i.addEventListener(t, r, {
					passive: !0
				}), n || W(o(i.parentNode), t, r, a), a.push(i)
			}

			function V(e, t, r, a) {
				r.updateBound = a, B(e).addEventListener("resize", r.updateBound, {
					passive: !0
				});
				var n = o(e);
				return W(n, "scroll", r.updateBound, r.scrollParents), r.scrollElement = n, r.eventsEnabled = !0, r
			}

			function G() {
				this.state.eventsEnabled || (this.state = V(this.reference, this.options, this.state, this.scheduleUpdate))
			}

			function K() {
				var e, t;
				this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (e = this.reference, t = this.state, B(e).removeEventListener("resize", t.updateBound), t.scrollParents.forEach((function(e) {
					e.removeEventListener("scroll", t.updateBound)
				})), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t))
			}

			function Q(e) {
				return "" !== e && !isNaN(parseFloat(e)) && isFinite(e)
			}

			function Y(e, t) {
				Object.keys(t).forEach((function(r) {
					var a = ""; - 1 !== ["width", "height", "top", "right", "bottom", "left"].indexOf(r) && Q(t[r]) && (a = "px"), e.style[r] = t[r] + a
				}))
			}
			var J = r && /Firefox/i.test(navigator.userAgent);

			function X(e, t, r) {
				var a = H(e, (function(e) {
						return e.name === t
					})),
					n = !!a && e.some((function(e) {
						return e.name === r && e.enabled && e.order < a.order
					}));
				if (!n) {
					var i = "`" + t + "`",
						s = "`" + r + "`";
					console.warn(s + " modifier is required by " + i + " modifier in order to work, be sure to include it before " + i + "!")
				}
				return n
			}
			var Z = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"],
				ee = Z.slice(3);

			function te(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
					r = ee.indexOf(e),
					a = ee.slice(r + 1).concat(ee.slice(0, r));
				return t ? a.reverse() : a
			}
			var re = "flip",
				ae = "clockwise",
				ne = "counterclockwise";

			function ie(e, t, r, a) {
				var n = [0, 0],
					i = -1 !== ["right", "left"].indexOf(a),
					s = e.split(/(\+|\-)/).map((function(e) {
						return e.trim()
					})),
					p = s.indexOf(H(s, (function(e) {
						return -1 !== e.search(/,|\s/)
					})));
				s[p] && -1 === s[p].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
				var o = /\s*,\s*|\s+/,
					c = -1 !== p ? [s.slice(0, p).concat([s[p].split(o)[0]]), [s[p].split(o)[1]].concat(s.slice(p + 1))] : [s];
				return (c = c.map((function(e, a) {
					var n = (1 === a ? !i : i) ? "height" : "width",
						s = !1;
					return e.reduce((function(e, t) {
						return "" === e[e.length - 1] && -1 !== ["+", "-"].indexOf(t) ? (e[e.length - 1] = t, s = !0, e) : s ? (e[e.length - 1] += t, s = !1, e) : e.concat(t)
					}), []).map((function(e) {
						return function(e, t, r, a) {
							var n = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
								i = +n[1],
								s = n[2];
							if (!i) return e;
							if (0 === s.indexOf("%")) {
								var p = void 0;
								switch (s) {
									case "%p":
										p = r;
										break;
									case "%":
									case "%r":
									default:
										p = a
								}
								return I(p)[t] / 100 * i
							}
							if ("vh" === s || "vw" === s) return ("vh" === s ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * i;
							return i
						}(e, n, t, r)
					}))
				}))).forEach((function(e, t) {
					e.forEach((function(r, a) {
						Q(r) && (n[t] += r * ("-" === e[a - 1] ? -1 : 1))
					}))
				})), n
			}
			var se = {
					placement: "bottom",
					positionFixed: !1,
					eventsEnabled: !0,
					removeOnDestroy: !1,
					onCreate: function() {},
					onUpdate: function() {},
					modifiers: {
						shift: {
							order: 100,
							enabled: !0,
							fn: function(e) {
								var t = e.placement,
									r = t.split("-")[0],
									a = t.split("-")[1];
								if (a) {
									var n = e.offsets,
										i = n.reference,
										s = n.popper,
										p = -1 !== ["bottom", "top"].indexOf(r),
										o = p ? "left" : "top",
										c = p ? "width" : "height",
										h = {
											start: k({}, o, i[o]),
											end: k({}, o, i[o] + i[c] - s[c])
										};
									e.offsets.popper = _({}, s, h[a])
								}
								return e
							}
						},
						offset: {
							order: 200,
							enabled: !0,
							fn: function(e, t) {
								var r = t.offset,
									a = e.placement,
									n = e.offsets,
									i = n.popper,
									s = n.reference,
									p = a.split("-")[0],
									o = void 0;
								return o = Q(+r) ? [+r, 0] : ie(r, i, s, p), "left" === p ? (i.top += o[0], i.left -= o[1]) : "right" === p ? (i.top += o[0], i.left += o[1]) : "top" === p ? (i.left += o[0], i.top -= o[1]) : "bottom" === p && (i.left += o[0], i.top += o[1]), e.popper = i, e
							},
							offset: 0
						},
						preventOverflow: {
							order: 300,
							enabled: !0,
							fn: function(e, t) {
								var r = t.boundariesElement || d(e.instance.popper);
								e.instance.reference === r && (r = d(r));
								var a = z("transform"),
									n = e.instance.popper.style,
									i = n.top,
									s = n.left,
									p = n[a];
								n.top = "", n.left = "", n[a] = "";
								var o = O(e.instance.popper, e.instance.reference, t.padding, r, e.positionFixed);
								n.top = i, n.left = s, n[a] = p, t.boundaries = o;
								var c = t.priority,
									h = e.offsets.popper,
									u = {
										primary: function(e) {
											var r = h[e];
											return h[e] < o[e] && !t.escapeWithReference && (r = Math.max(h[e], o[e])), k({}, e, r)
										},
										secondary: function(e) {
											var r = "right" === e ? "left" : "top",
												a = h[r];
											return h[e] > o[e] && !t.escapeWithReference && (a = Math.min(h[r], o[e] - ("right" === e ? h.width : h.height))), k({}, r, a)
										}
									};
								return c.forEach((function(e) {
									var t = -1 !== ["left", "top"].indexOf(e) ? "primary" : "secondary";
									h = _({}, h, u[t](e))
								})), e.offsets.popper = h, e
							},
							priority: ["left", "right", "top", "bottom"],
							padding: 5,
							boundariesElement: "scrollParent"
						},
						keepTogether: {
							order: 400,
							enabled: !0,
							fn: function(e) {
								var t = e.offsets,
									r = t.popper,
									a = t.reference,
									n = e.placement.split("-")[0],
									i = Math.floor,
									s = -1 !== ["top", "bottom"].indexOf(n),
									p = s ? "right" : "bottom",
									o = s ? "left" : "top",
									c = s ? "width" : "height";
								return r[p] < i(a[o]) && (e.offsets.popper[o] = i(a[o]) - r[c]), r[o] > i(a[p]) && (e.offsets.popper[o] = i(a[p])), e
							}
						},
						arrow: {
							order: 500,
							enabled: !0,
							fn: function(e, t) {
								var r;
								if (!X(e.instance.modifiers, "arrow", "keepTogether")) return e;
								var a = t.element;
								if ("string" === typeof a) {
									if (!(a = e.instance.popper.querySelector(a))) return e
								} else if (!e.instance.popper.contains(a)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), e;
								var n = e.placement.split("-")[0],
									i = e.offsets,
									p = i.popper,
									o = i.reference,
									c = -1 !== ["left", "right"].indexOf(n),
									h = c ? "height" : "width",
									u = c ? "Top" : "Left",
									m = u.toLowerCase(),
									d = c ? "left" : "top",
									l = c ? "bottom" : "right",
									y = F(a)[h];
								o[l] - y < p[m] && (e.offsets.popper[m] -= p[m] - (o[l] - y)), o[m] + y > p[l] && (e.offsets.popper[m] += o[m] + y - p[l]), e.offsets.popper = I(e.offsets.popper);
								var g = o[m] + o[h] / 2 - y / 2,
									f = s(e.instance.popper),
									v = parseFloat(f["margin" + u]),
									b = parseFloat(f["border" + u + "Width"]),
									P = g - e.offsets.popper[m] - v - b;
								return P = Math.max(Math.min(p[h] - y, P), 0), e.arrowElement = a, e.offsets.arrow = (k(r = {}, m, Math.round(P)), k(r, d, ""), r), e
							},
							element: "[x-arrow]"
						},
						flip: {
							order: 600,
							enabled: !0,
							fn: function(e, t) {
								if ($(e.instance.modifiers, "inner")) return e;
								if (e.flipped && e.placement === e.originalPlacement) return e;
								var r = O(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement, e.positionFixed),
									a = e.placement.split("-")[0],
									n = C(a),
									i = e.placement.split("-")[1] || "",
									s = [];
								switch (t.behavior) {
									case re:
										s = [a, n];
										break;
									case ae:
										s = te(a);
										break;
									case ne:
										s = te(a, !0);
										break;
									default:
										s = t.behavior
								}
								return s.forEach((function(p, o) {
									if (a !== p || s.length === o + 1) return e;
									a = e.placement.split("-")[0], n = C(a);
									var c = e.offsets.popper,
										h = e.offsets.reference,
										u = Math.floor,
										m = "left" === a && u(c.right) > u(h.left) || "right" === a && u(c.left) < u(h.right) || "top" === a && u(c.bottom) > u(h.top) || "bottom" === a && u(c.top) < u(h.bottom),
										d = u(c.left) < u(r.left),
										l = u(c.right) > u(r.right),
										y = u(c.top) < u(r.top),
										g = u(c.bottom) > u(r.bottom),
										f = "left" === a && d || "right" === a && l || "top" === a && y || "bottom" === a && g,
										v = -1 !== ["top", "bottom"].indexOf(a),
										b = !!t.flipVariations && (v && "start" === i && d || v && "end" === i && l || !v && "start" === i && y || !v && "end" === i && g),
										P = !!t.flipVariationsByContent && (v && "start" === i && l || v && "end" === i && d || !v && "start" === i && g || !v && "end" === i && y),
										S = b || P;
									(m || f || S) && (e.flipped = !0, (m || f) && (a = s[o + 1]), S && (i = function(e) {
										return "end" === e ? "start" : "start" === e ? "end" : e
									}(i)), e.placement = a + (i ? "-" + i : ""), e.offsets.popper = _({}, e.offsets.popper, A(e.instance.popper, e.offsets.reference, e.placement)), e = R(e.instance.modifiers, e, "flip"))
								})), e
							},
							behavior: "flip",
							padding: 5,
							boundariesElement: "viewport",
							flipVariations: !1,
							flipVariationsByContent: !1
						},
						inner: {
							order: 700,
							enabled: !1,
							fn: function(e) {
								var t = e.placement,
									r = t.split("-")[0],
									a = e.offsets,
									n = a.popper,
									i = a.reference,
									s = -1 !== ["left", "right"].indexOf(r),
									p = -1 === ["top", "left"].indexOf(r);
								return n[s ? "left" : "top"] = i[r] - (p ? n[s ? "width" : "height"] : 0), e.placement = C(t), e.offsets.popper = I(n), e
							}
						},
						hide: {
							order: 800,
							enabled: !0,
							fn: function(e) {
								if (!X(e.instance.modifiers, "hide", "preventOverflow")) return e;
								var t = e.offsets.reference,
									r = H(e.instance.modifiers, (function(e) {
										return "preventOverflow" === e.name
									})).boundaries;
								if (t.bottom < r.top || t.left > r.right || t.top > r.bottom || t.right < r.left) {
									if (!0 === e.hide) return e;
									e.hide = !0, e.attributes["x-out-of-boundaries"] = ""
								} else {
									if (!1 === e.hide) return e;
									e.hide = !1, e.attributes["x-out-of-boundaries"] = !1
								}
								return e
							}
						},
						computeStyle: {
							order: 850,
							enabled: !0,
							fn: function(e, t) {
								var r = t.x,
									a = t.y,
									n = e.offsets.popper,
									i = H(e.instance.modifiers, (function(e) {
										return "applyStyle" === e.name
									})).gpuAcceleration;
								void 0 !== i && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
								var s = void 0 !== i ? i : t.gpuAcceleration,
									p = d(e.instance.popper),
									o = q(p),
									c = {
										position: n.position
									},
									h = function(e, t) {
										var r = e.offsets,
											a = r.popper,
											n = r.reference,
											i = Math.round,
											s = Math.floor,
											p = function(e) {
												return e
											},
											o = i(n.width),
											c = i(a.width),
											h = -1 !== ["left", "right"].indexOf(e.placement),
											u = -1 !== e.placement.indexOf("-"),
											m = t ? h || u || o % 2 === c % 2 ? i : s : p,
											d = t ? i : p;
										return {
											left: m(o % 2 === 1 && c % 2 === 1 && !u && t ? a.left - 1 : a.left),
											top: d(a.top),
											bottom: d(a.bottom),
											right: m(a.right)
										}
									}(e, window.devicePixelRatio < 2 || !J),
									u = "bottom" === r ? "top" : "bottom",
									m = "right" === a ? "left" : "right",
									l = z("transform"),
									y = void 0,
									g = void 0;
								if (g = "bottom" === u ? "HTML" === p.nodeName ? -p.clientHeight + h.bottom : -o.height + h.bottom : h.top, y = "right" === m ? "HTML" === p.nodeName ? -p.clientWidth + h.right : -o.width + h.right : h.left, s && l) c[l] = "translate3d(" + y + "px, " + g + "px, 0)", c[u] = 0, c[m] = 0, c.willChange = "transform";
								else {
									var f = "bottom" === u ? -1 : 1,
										v = "right" === m ? -1 : 1;
									c[u] = g * f, c[m] = y * v, c.willChange = u + ", " + m
								}
								var b = {
									"x-placement": e.placement
								};
								return e.attributes = _({}, b, e.attributes), e.styles = _({}, c, e.styles), e.arrowStyles = _({}, e.offsets.arrow, e.arrowStyles), e
							},
							gpuAcceleration: !0,
							x: "bottom",
							y: "right"
						},
						applyStyle: {
							order: 900,
							enabled: !0,
							fn: function(e) {
								var t, r;
								return Y(e.instance.popper, e.styles), t = e.instance.popper, r = e.attributes, Object.keys(r).forEach((function(e) {
									!1 !== r[e] ? t.setAttribute(e, r[e]) : t.removeAttribute(e)
								})), e.arrowElement && Object.keys(e.arrowStyles).length && Y(e.arrowElement, e.arrowStyles), e
							},
							onLoad: function(e, t, r, a, n) {
								var i = j(n, t, e, r.positionFixed),
									s = T(r.placement, i, t, e, r.modifiers.flip.boundariesElement, r.modifiers.flip.padding);
								return t.setAttribute("x-placement", s), Y(t, {
									position: r.positionFixed ? "fixed" : "absolute"
								}), r
							},
							gpuAcceleration: void 0
						}
					}
				},
				pe = function() {
					function e(t, r) {
						var a = this,
							s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
						S(this, e), this.scheduleUpdate = function() {
							return requestAnimationFrame(a.update)
						}, this.update = n(this.update.bind(this)), this.options = _({}, e.Defaults, s), this.state = {
							isDestroyed: !1,
							isCreated: !1,
							scrollParents: []
						}, this.reference = t && t.jquery ? t[0] : t, this.popper = r && r.jquery ? r[0] : r, this.options.modifiers = {}, Object.keys(_({}, e.Defaults.modifiers, s.modifiers)).forEach((function(t) {
							a.options.modifiers[t] = _({}, e.Defaults.modifiers[t] || {}, s.modifiers ? s.modifiers[t] : {})
						})), this.modifiers = Object.keys(this.options.modifiers).map((function(e) {
							return _({
								name: e
							}, a.options.modifiers[e])
						})).sort((function(e, t) {
							return e.order - t.order
						})), this.modifiers.forEach((function(e) {
							e.enabled && i(e.onLoad) && e.onLoad(a.reference, a.popper, a.options, e, a.state)
						})), this.update();
						var p = this.options.eventsEnabled;
						p && this.enableEventListeners(), this.state.eventsEnabled = p
					}
					return w(e, [{
						key: "update",
						value: function() {
							return M.call(this)
						}
					}, {
						key: "destroy",
						value: function() {
							return U.call(this)
						}
					}, {
						key: "enableEventListeners",
						value: function() {
							return G.call(this)
						}
					}, {
						key: "disableEventListeners",
						value: function() {
							return K.call(this)
						}
					}]), e
				}();
			pe.Utils = ("undefined" !== typeof window ? window : e).PopperUtils, pe.placements = Z, pe.Defaults = se, t.a = pe
		}).call(this, r(42))
	}, function(e, t, r) {
		"use strict";

		function a(e) {
			return function(t) {
				var r = t.dispatch,
					a = t.getState;
				return function(t) {
					return function(n) {
						return "function" === typeof n ? n(r, a, e) : t(n)
					}
				}
			}
		}
		var n = a();
		n.withExtraArgument = a, t.a = n
	}, function(e, t, r) {
		"use strict";
		t.AccountCTAPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				n = r.instancePath,
				i = void 0 === n ? "" : n,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.referer) {
					var o = {
						instancePath: i,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "referer"
						},
						message: "must have required property 'referer'",
						schema: a.required,
						parentSchema: a,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				for (var c in t)
					if ("referer" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: i,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: a,
							data: t
						};
						null === s ? s = [h] : s.push(h), p++
					} if (void 0 !== t.referer) {
					var u = t.referer;
					if ("string" !== typeof u) {
						var m = {
							instancePath: i + "/referer",
							schemaPath: "#/properties/referer/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: a.properties.referer.type,
							parentSchema: a.properties.referer,
							data: u
						};
						null === s ? s = [m] : s.push(m), p++
					}
				}
				if (void 0 !== t.configString) {
					var d = t.configString;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: i + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: a.properties.configString.type
							},
							message: "must be string,null",
							schema: a.properties.configString.type,
							parentSchema: a.properties.configString,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.tabId) {
					var y = t.tabId;
					if (("number" != typeof y || y % 1 || isNaN(y) || !isFinite(y)) && null !== y) {
						var g = {
							instancePath: i + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: a.properties.tabId.type
							},
							message: "must be integer,null",
							schema: a.properties.tabId.type,
							parentSchema: a.properties.tabId,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.app) {
					var f = t.app;
					if ("string" !== typeof f && null !== f) {
						var v = {
							instancePath: i + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: a.properties.app.type
							},
							message: "must be string,null",
							schema: a.properties.app.type,
							parentSchema: a.properties.app,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.host) {
					var b = t.host;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: i + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: a.properties.host.type
							},
							message: "must be string,null",
							schema: a.properties.host.type,
							parentSchema: a.properties.host,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
			} else {
				var S = {
					instancePath: i,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: a.type,
					parentSchema: a,
					data: t
				};
				null === s ? s = [S] : s.push(S), p++
			}
			return e.errors = s, 0 === p
		};
		var a = {
			properties: {
				referer: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["referer"],
			$id: "AccountCTAPressed",
			additionalProperties: !1
		};
		t.AppFeedbackEntered = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				s = void 0 === a ? "" : a,
				p = (r.parentData, r.parentDataProperty, r.rootData, null),
				o = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var c = {
						instancePath: s,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: n.required,
						parentSchema: n,
						data: t
					};
					null === p ? p = [c] : p.push(c), o++
				}
				for (var h in t)
					if (!i.call(n.properties, h)) {
						var u = {
							instancePath: s,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: n,
							data: t
						};
						null === p ? p = [u] : p.push(u), o++
					} if (void 0 !== t.platform) {
					var m = t.platform;
					if ("string" !== typeof m) {
						var d = {
							instancePath: s + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: n.properties.platform.type,
							parentSchema: n.properties.platform,
							data: m
						};
						null === p ? p = [d] : p.push(d), o++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var l = t.spanSelectionHash;
					if ("string" !== typeof l) {
						var y = {
							instancePath: s + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: n.properties.spanSelectionHash.type,
							parentSchema: n.properties.spanSelectionHash,
							data: l
						};
						null === p ? p = [y] : p.push(y), o++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var g = t.spanSelectionLength;
					if ("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) {
						var f = {
							instancePath: s + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: n.properties.spanSelectionLength.type,
							parentSchema: n.properties.spanSelectionLength,
							data: g
						};
						null === p ? p = [f] : p.push(f), o++
					}
				}
				if (void 0 !== t.origin) {
					var v = t.origin;
					if ("string" !== typeof v) {
						var b = {
							instancePath: s + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: n.properties.origin.type,
							parentSchema: n.properties.origin,
							data: v
						};
						null === p ? p = [b] : p.push(b), o++
					}
				}
				if (void 0 !== t.contextLength) {
					var P = t.contextLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: s + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: n.properties.contextLength.type,
							parentSchema: n.properties.contextLength,
							data: P
						};
						null === p ? p = [S] : p.push(S), o++
					}
				}
				if (void 0 !== t.caretLocation) {
					var w = t.caretLocation;
					if (!Array.isArray(w)) {
						var k = {
							instancePath: s + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: n.properties.caretLocation.type,
							parentSchema: n.properties.caretLocation,
							data: w
						};
						null === p ? p = [k] : p.push(k), o++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var _ = t.isFirstEngagement;
					if ("boolean" !== typeof _) {
						var I = {
							instancePath: s + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: n.properties.isFirstEngagement.type,
							parentSchema: n.properties.isFirstEngagement,
							data: _
						};
						null === p ? p = [I] : p.push(I), o++
					}
				}
				if (void 0 !== t.draftId) {
					var q = t.draftId;
					if ("string" !== typeof q) {
						var L = {
							instancePath: s + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: n.properties.draftId.type,
							parentSchema: n.properties.draftId,
							data: q
						};
						null === p ? p = [L] : p.push(L), o++
					}
				}
				if (void 0 !== t.configString) {
					var x = t.configString;
					if ("string" !== typeof x && null !== x) {
						var E = {
							instancePath: s + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: n.properties.configString.type
							},
							message: "must be string,null",
							schema: n.properties.configString.type,
							parentSchema: n.properties.configString,
							data: x
						};
						null === p ? p = [E] : p.push(E), o++
					}
				}
				if (void 0 !== t.tabId) {
					var N = t.tabId;
					if (("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) && null !== N) {
						var O = {
							instancePath: s + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: n.properties.tabId.type
							},
							message: "must be integer,null",
							schema: n.properties.tabId.type,
							parentSchema: n.properties.tabId,
							data: N
						};
						null === p ? p = [O] : p.push(O), o++
					}
				}
				if (void 0 !== t.app) {
					var D = t.app;
					if ("string" !== typeof D && null !== D) {
						var T = {
							instancePath: s + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: n.properties.app.type
							},
							message: "must be string,null",
							schema: n.properties.app.type,
							parentSchema: n.properties.app,
							data: D
						};
						null === p ? p = [T] : p.push(T), o++
					}
				}
				if (void 0 !== t.host) {
					var j = t.host;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: s + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: n.properties.host.type
							},
							message: "must be string,null",
							schema: n.properties.host.type,
							parentSchema: n.properties.host,
							data: j
						};
						null === p ? p = [F] : p.push(F), o++
					}
				}
			} else {
				var C = {
					instancePath: s,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: n.type,
					parentSchema: n,
					data: t
				};
				null === p ? p = [C] : p.push(C), o++
			}
			return e.errors = p, 0 === o
		};
		var n = {
				properties: {
					platform: {
						type: "string"
					},
					spanSelectionHash: {
						type: "string"
					},
					spanSelectionLength: {
						type: "integer"
					},
					origin: {
						type: "string"
					},
					contextLength: {
						type: "integer"
					},
					caretLocation: {
						type: "array"
					},
					isFirstEngagement: {
						type: "boolean"
					},
					draftId: {
						type: "string"
					},
					configString: {
						type: ["string", "null"]
					},
					tabId: {
						type: ["integer", "null"]
					},
					app: {
						type: ["string", "null"]
					},
					host: {
						type: ["string", "null"]
					}
				},
				type: "object",
				required: ["origin"],
				$id: "AppFeedbackEntered",
				additionalProperties: !1
			},
			i = Object.prototype.hasOwnProperty;
		t.AppFeedbackExited = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: s.required,
						parentSchema: s,
						data: t
					};
					null === i ? i = [o] : i.push(o), p++
				}
				for (var c in t)
					if ("origin" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: s,
							data: t
						};
						null === i ? i = [h] : i.push(h), p++
					} if (void 0 !== t.origin) {
					var u = t.origin;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: s.properties.origin.type,
							parentSchema: s.properties.origin,
							data: u
						};
						null === i ? i = [m] : i.push(m), p++
					}
				}
				if (void 0 !== t.configString) {
					var d = t.configString;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: s.properties.configString.type
							},
							message: "must be string,null",
							schema: s.properties.configString.type,
							parentSchema: s.properties.configString,
							data: d
						};
						null === i ? i = [l] : i.push(l), p++
					}
				}
				if (void 0 !== t.tabId) {
					var y = t.tabId;
					if (("number" != typeof y || y % 1 || isNaN(y) || !isFinite(y)) && null !== y) {
						var g = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: s.properties.tabId.type
							},
							message: "must be integer,null",
							schema: s.properties.tabId.type,
							parentSchema: s.properties.tabId,
							data: y
						};
						null === i ? i = [g] : i.push(g), p++
					}
				}
				if (void 0 !== t.app) {
					var f = t.app;
					if ("string" !== typeof f && null !== f) {
						var v = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: s.properties.app.type
							},
							message: "must be string,null",
							schema: s.properties.app.type,
							parentSchema: s.properties.app,
							data: f
						};
						null === i ? i = [v] : i.push(v), p++
					}
				}
				if (void 0 !== t.host) {
					var b = t.host;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: s.properties.host.type
							},
							message: "must be string,null",
							schema: s.properties.host.type,
							parentSchema: s.properties.host,
							data: b
						};
						null === i ? i = [P] : i.push(P), p++
					}
				}
			} else {
				var S = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: s.type,
					parentSchema: s,
					data: t
				};
				null === i ? i = [S] : i.push(S), p++
			}
			return e.errors = i, 0 === p
		};
		var s = {
			properties: {
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "AppFeedbackExited",
			additionalProperties: !1
		};
		t.appFeedbackRating = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var o = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: p.type,
					parentSchema: p,
					data: t
				};
				null === i ? i = [o] : i.push(o), s++
			}
			return e.errors = i, 0 === s
		};
		var p = {
			type: "integer",
			$id: "appFeedbackRating"
		};
		t.AppFeedbackSubmitted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.text_filled) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "text_filled"
						},
						message: "must have required property 'text_filled'",
						schema: o.required,
						parentSchema: o,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: o.required,
						parentSchema: o,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.level) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "level"
						},
						message: "must have required property 'level'",
						schema: o.required,
						parentSchema: o,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.level_filled) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "level_filled"
						},
						message: "must have required property 'level_filled'",
						schema: o.required,
						parentSchema: o,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(o.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: o,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.spanSelectionLength) {
					var y = t.spanSelectionLength;
					if ("number" != typeof y || y % 1 || isNaN(y) || !isFinite(y)) {
						var g = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: o.properties.spanSelectionLength.type,
							parentSchema: o.properties.spanSelectionLength,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.text_filled) {
					var f = t.text_filled;
					if ("boolean" !== typeof f) {
						var v = {
							instancePath: n + "/text_filled",
							schemaPath: "#/properties/text_filled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: o.properties.text_filled.type,
							parentSchema: o.properties.text_filled,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var b = t.isFirstEngagement;
					if ("boolean" !== typeof b) {
						var P = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: o.properties.isFirstEngagement.type,
							parentSchema: o.properties.isFirstEngagement,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.platform) {
					var S = t.platform;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: o.properties.platform.type,
							parentSchema: o.properties.platform,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var k = t.spanSelectionHash;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: o.properties.spanSelectionHash.type,
							parentSchema: o.properties.spanSelectionHash,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.origin) {
					var I = t.origin;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: o.properties.origin.type,
							parentSchema: o.properties.origin,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.level) {
					var L = t.level;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/level",
							schemaPath: "#/properties/level/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: o.properties.level.type,
							parentSchema: o.properties.level,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var E = t.contextLength;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: o.properties.contextLength.type,
							parentSchema: o.properties.contextLength,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.draftId) {
					var O = t.draftId;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: o.properties.draftId.type,
							parentSchema: o.properties.draftId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.level_filled) {
					var T = t.level_filled;
					if ("boolean" !== typeof T) {
						var j = {
							instancePath: n + "/level_filled",
							schemaPath: "#/properties/level_filled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: o.properties.level_filled.type,
							parentSchema: o.properties.level_filled,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var F = t.caretLocation;
					if (!Array.isArray(F)) {
						var C = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: o.properties.caretLocation.type,
							parentSchema: o.properties.caretLocation,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.configString) {
					var A = t.configString;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: o.properties.configString.type
							},
							message: "must be string,null",
							schema: o.properties.configString.type,
							parentSchema: o.properties.configString,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.tabId) {
					var R = t.tabId;
					if (("number" != typeof R || R % 1 || isNaN(R) || !isFinite(R)) && null !== R) {
						var M = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: o.properties.tabId.type
							},
							message: "must be integer,null",
							schema: o.properties.tabId.type,
							parentSchema: o.properties.tabId,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.app) {
					var $ = t.app;
					if ("string" !== typeof $ && null !== $) {
						var z = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: o.properties.app.type
							},
							message: "must be string,null",
							schema: o.properties.app.type,
							parentSchema: o.properties.app,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.host) {
					var U = t.host;
					if ("string" !== typeof U && null !== U) {
						var B = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: o.properties.host.type
							},
							message: "must be string,null",
							schema: o.properties.host.type,
							parentSchema: o.properties.host,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
			} else {
				var W = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: o.type,
					parentSchema: o,
					data: t
				};
				null === s ? s = [W] : s.push(W), p++
			}
			return e.errors = s, 0 === p
		};
		var o = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				text_filled: {
					type: "boolean"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				level: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				level_filled: {
					type: "boolean"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["text_filled", "origin", "level", "level_filled"],
			$id: "AppFeedbackSubmitted",
			additionalProperties: !1
		};
		t.AppSatisfactionLevelSelected = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: c.required,
						parentSchema: c,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.level) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "level"
						},
						message: "must have required property 'level'",
						schema: c.required,
						parentSchema: c,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				for (var u in t)
					if (!i.call(c.properties, u)) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: u
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: c,
							data: t
						};
						null === s ? s = [m] : s.push(m), p++
					} if (void 0 !== t.spanSelectionLength) {
					var d = t.spanSelectionLength;
					if ("number" != typeof d || d % 1 || isNaN(d) || !isFinite(d)) {
						var l = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: c.properties.spanSelectionLength.type,
							parentSchema: c.properties.spanSelectionLength,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var y = t.isFirstEngagement;
					if ("boolean" !== typeof y) {
						var g = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: c.properties.isFirstEngagement.type,
							parentSchema: c.properties.isFirstEngagement,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.platform) {
					var f = t.platform;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: c.properties.platform.type,
							parentSchema: c.properties.platform,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var b = t.spanSelectionHash;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: c.properties.spanSelectionHash.type,
							parentSchema: c.properties.spanSelectionHash,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.origin) {
					var S = t.origin;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: c.properties.origin.type,
							parentSchema: c.properties.origin,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.level) {
					var k = t.level;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/level",
							schemaPath: "#/properties/level/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: c.properties.level.type,
							parentSchema: c.properties.level,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var I = t.contextLength;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: c.properties.contextLength.type,
							parentSchema: c.properties.contextLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.draftId) {
					var L = t.draftId;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: c.properties.draftId.type,
							parentSchema: c.properties.draftId,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var E = t.caretLocation;
					if (!Array.isArray(E)) {
						var N = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: c.properties.caretLocation.type,
							parentSchema: c.properties.caretLocation,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.configString) {
					var O = t.configString;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: c.properties.configString.type
							},
							message: "must be string,null",
							schema: c.properties.configString.type,
							parentSchema: c.properties.configString,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.tabId) {
					var T = t.tabId;
					if (("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) && null !== T) {
						var j = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: c.properties.tabId.type
							},
							message: "must be integer,null",
							schema: c.properties.tabId.type,
							parentSchema: c.properties.tabId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.app) {
					var F = t.app;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: c.properties.app.type
							},
							message: "must be string,null",
							schema: c.properties.app.type,
							parentSchema: c.properties.app,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.host) {
					var A = t.host;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: c.properties.host.type
							},
							message: "must be string,null",
							schema: c.properties.host.type,
							parentSchema: c.properties.host,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
			} else {
				var R = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: c.type,
					parentSchema: c,
					data: t
				};
				null === s ? s = [R] : s.push(R), p++
			}
			return e.errors = s, 0 === p
		};
		var c = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				level: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin", "level"],
			$id: "AppSatisfactionLevelSelected",
			additionalProperties: !1
		};
		t.AppToolbarCollapsed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: h.required,
						parentSchema: h,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.contextLength) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: h.required,
						parentSchema: h,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				for (var u in t)
					if (!i.call(h.properties, u)) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: u
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: h,
							data: t
						};
						null === s ? s = [m] : s.push(m), p++
					} if (void 0 !== t.platform) {
					var d = t.platform;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: h.properties.platform.type,
							parentSchema: h.properties.platform,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var y = t.spanSelectionHash;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: h.properties.spanSelectionHash.type,
							parentSchema: h.properties.spanSelectionHash,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var f = t.contextLength;
					if ("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) {
						var v = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: h.properties.contextLength.type,
							parentSchema: h.properties.contextLength,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var b = t.caretLocation;
					if (!Array.isArray(b)) {
						var P = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: h.properties.caretLocation.type,
							parentSchema: h.properties.caretLocation,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.draftId) {
					var S = t.draftId;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: h.properties.draftId.type,
							parentSchema: h.properties.draftId,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var k = t.isFirstEngagement;
					if ("boolean" !== typeof k) {
						var _ = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: h.properties.isFirstEngagement.type,
							parentSchema: h.properties.isFirstEngagement,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var I = t.spanSelectionLength;
					if (("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) && null !== I) {
						var q = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: h.properties.spanSelectionLength.type
							},
							message: "must be integer,null",
							schema: h.properties.spanSelectionLength.type,
							parentSchema: h.properties.spanSelectionLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.configString) {
					var L = t.configString;
					if ("string" !== typeof L && null !== L) {
						var x = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: h.properties.configString.type
							},
							message: "must be string,null",
							schema: h.properties.configString.type,
							parentSchema: h.properties.configString,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.tabId) {
					var E = t.tabId;
					if (("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) && null !== E) {
						var N = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: h.properties.tabId.type
							},
							message: "must be integer,null",
							schema: h.properties.tabId.type,
							parentSchema: h.properties.tabId,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.app) {
					var O = t.app;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: h.properties.app.type
							},
							message: "must be string,null",
							schema: h.properties.app.type,
							parentSchema: h.properties.app,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.host) {
					var T = t.host;
					if ("string" !== typeof T && null !== T) {
						var j = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: h.properties.host.type
							},
							message: "must be string,null",
							schema: h.properties.host.type,
							parentSchema: h.properties.host,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
			} else {
				var F = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: h.type,
					parentSchema: h,
					data: t
				};
				null === s ? s = [F] : s.push(F), p++
			}
			return e.errors = s, 0 === p
		};
		var h = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: ["integer", "null"]
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "contextLength"],
			$id: "AppToolbarCollapsed",
			additionalProperties: !1
		};
		t.AppToolbarExpanded = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: u.required,
						parentSchema: u,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.contextLength) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: u.required,
						parentSchema: u,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				for (var h in t)
					if (!i.call(u.properties, h)) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: u,
							data: t
						};
						null === s ? s = [m] : s.push(m), p++
					} if (void 0 !== t.platform) {
					var d = t.platform;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: u.properties.platform.type,
							parentSchema: u.properties.platform,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var y = t.spanSelectionHash;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: u.properties.spanSelectionHash.type,
							parentSchema: u.properties.spanSelectionHash,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var f = t.contextLength;
					if ("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) {
						var v = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: u.properties.contextLength.type,
							parentSchema: u.properties.contextLength,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var b = t.caretLocation;
					if (!Array.isArray(b)) {
						var P = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: u.properties.caretLocation.type,
							parentSchema: u.properties.caretLocation,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.draftId) {
					var S = t.draftId;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: u.properties.draftId.type,
							parentSchema: u.properties.draftId,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var k = t.isFirstEngagement;
					if ("boolean" !== typeof k) {
						var _ = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: u.properties.isFirstEngagement.type,
							parentSchema: u.properties.isFirstEngagement,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var I = t.spanSelectionLength;
					if (("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) && null !== I) {
						var q = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: u.properties.spanSelectionLength.type
							},
							message: "must be integer,null",
							schema: u.properties.spanSelectionLength.type,
							parentSchema: u.properties.spanSelectionLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.configString) {
					var L = t.configString;
					if ("string" !== typeof L && null !== L) {
						var x = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: u.properties.configString.type
							},
							message: "must be string,null",
							schema: u.properties.configString.type,
							parentSchema: u.properties.configString,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.tabId) {
					var E = t.tabId;
					if (("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) && null !== E) {
						var N = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: u.properties.tabId.type
							},
							message: "must be integer,null",
							schema: u.properties.tabId.type,
							parentSchema: u.properties.tabId,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.app) {
					var O = t.app;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: u.properties.app.type
							},
							message: "must be string,null",
							schema: u.properties.app.type,
							parentSchema: u.properties.app,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.host) {
					var T = t.host;
					if ("string" !== typeof T && null !== T) {
						var j = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: u.properties.host.type
							},
							message: "must be string,null",
							schema: u.properties.host.type,
							parentSchema: u.properties.host,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
			} else {
				var F = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: u.type,
					parentSchema: u,
					data: t
				};
				null === s ? s = [F] : s.push(F), p++
			}
			return e.errors = s, 0 === p
		};
		var u = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: ["integer", "null"]
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "contextLength"],
			$id: "AppToolbarExpanded",
			additionalProperties: !1
		};
		t.AppToolbarIconPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: m.required,
						parentSchema: m,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.appSuspended) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "appSuspended"
						},
						message: "must have required property 'appSuspended'",
						schema: m.required,
						parentSchema: m,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: m.required,
						parentSchema: m,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.hasCorrectionsIndicator) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "hasCorrectionsIndicator"
						},
						message: "must have required property 'hasCorrectionsIndicator'",
						schema: m.required,
						parentSchema: m,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var d in t)
					if (!i.call(m.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: m,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: m.properties.platform.type,
							parentSchema: m.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.appSuspended) {
					var f = t.appSuspended;
					if ("boolean" !== typeof f) {
						var v = {
							instancePath: n + "/appSuspended",
							schemaPath: "#/properties/appSuspended/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: m.properties.appSuspended.type,
							parentSchema: m.properties.appSuspended,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var b = t.spanSelectionHash;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: m.properties.spanSelectionHash.type,
							parentSchema: m.properties.spanSelectionHash,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var S = t.spanSelectionLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: m.properties.spanSelectionLength.type,
							parentSchema: m.properties.spanSelectionLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.hasCorrectionsIndicator) {
					var k = t.hasCorrectionsIndicator;
					if ("boolean" !== typeof k) {
						var _ = {
							instancePath: n + "/hasCorrectionsIndicator",
							schemaPath: "#/properties/hasCorrectionsIndicator/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: m.properties.hasCorrectionsIndicator.type,
							parentSchema: m.properties.hasCorrectionsIndicator,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var I = t.contextLength;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: m.properties.contextLength.type,
							parentSchema: m.properties.contextLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.draftId) {
					var L = t.draftId;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: m.properties.draftId.type,
							parentSchema: m.properties.draftId,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var E = t.caretLocation;
					if (!Array.isArray(E)) {
						var N = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: m.properties.caretLocation.type,
							parentSchema: m.properties.caretLocation,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.upgradeIcon) {
					var O = t.upgradeIcon;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/upgradeIcon",
							schemaPath: "#/properties/upgradeIcon/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: m.properties.upgradeIcon.type,
							parentSchema: m.properties.upgradeIcon,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.upgradeButtonText) {
					var T = t.upgradeButtonText;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/upgradeButtonText",
							schemaPath: "#/properties/upgradeButtonText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: m.properties.upgradeButtonText.type,
							parentSchema: m.properties.upgradeButtonText,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.configString) {
					var F = t.configString;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: m.properties.configString.type
							},
							message: "must be string,null",
							schema: m.properties.configString.type,
							parentSchema: m.properties.configString,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.tabId) {
					var A = t.tabId;
					if (("number" != typeof A || A % 1 || isNaN(A) || !isFinite(A)) && null !== A) {
						var H = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: m.properties.tabId.type
							},
							message: "must be integer,null",
							schema: m.properties.tabId.type,
							parentSchema: m.properties.tabId,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.app) {
					var R = t.app;
					if ("string" !== typeof R && null !== R) {
						var M = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: m.properties.app.type
							},
							message: "must be string,null",
							schema: m.properties.app.type,
							parentSchema: m.properties.app,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.host) {
					var $ = t.host;
					if ("string" !== typeof $ && null !== $) {
						var z = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: m.properties.host.type
							},
							message: "must be string,null",
							schema: m.properties.host.type,
							parentSchema: m.properties.host,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
			} else {
				var U = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: m.type,
					parentSchema: m,
					data: t
				};
				null === s ? s = [U] : s.push(U), p++
			}
			return e.errors = s, 0 === p
		};
		var m = {
			properties: {
				platform: {
					type: "string"
				},
				appSuspended: {
					type: "boolean"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				hasCorrectionsIndicator: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				upgradeIcon: {
					type: "string"
				},
				upgradeButtonText: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "appSuspended", "spanSelectionHash", "hasCorrectionsIndicator"],
			$id: "AppToolbarIconPressed",
			additionalProperties: !1
		};
		t.AppToolbarKeepExpanded = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: d.type,
					parentSchema: d,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var d = {
			type: "boolean",
			$id: "AppToolbarKeepExpanded"
		};
		t.AppToolbarNotificationDismiss = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: l.required,
						parentSchema: l,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: l.required,
						parentSchema: l,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.draftId) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: l.required,
						parentSchema: l,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.reason) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "reason"
						},
						message: "must have required property 'reason'",
						schema: l.required,
						parentSchema: l,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(l.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: l,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: l.properties.platform.type,
							parentSchema: l.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var f = t.spanSelectionHash;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: l.properties.spanSelectionHash.type,
							parentSchema: l.properties.spanSelectionHash,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var b = t.contextLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: l.properties.contextLength.type,
							parentSchema: l.properties.contextLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.draftId) {
					var S = t.draftId;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: l.properties.draftId.type,
							parentSchema: l.properties.draftId,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.reason) {
					var k = t.reason;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/reason",
							schemaPath: "#/properties/reason/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: l.properties.reason.type,
							parentSchema: l.properties.reason,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var I = t.caretLocation;
					if (!Array.isArray(I)) {
						var q = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: l.properties.caretLocation.type,
							parentSchema: l.properties.caretLocation,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var L = t.spanSelectionLength;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: l.properties.spanSelectionLength.type,
							parentSchema: l.properties.spanSelectionLength,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var E = t.isFirstEngagement;
					if ("boolean" !== typeof E) {
						var N = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: l.properties.isFirstEngagement.type,
							parentSchema: l.properties.isFirstEngagement,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.configString) {
					var O = t.configString;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: l.properties.configString.type
							},
							message: "must be string,null",
							schema: l.properties.configString.type,
							parentSchema: l.properties.configString,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.tabId) {
					var T = t.tabId;
					if (("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) && null !== T) {
						var j = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: l.properties.tabId.type
							},
							message: "must be integer,null",
							schema: l.properties.tabId.type,
							parentSchema: l.properties.tabId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.app) {
					var F = t.app;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: l.properties.app.type
							},
							message: "must be string,null",
							schema: l.properties.app.type,
							parentSchema: l.properties.app,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.host) {
					var A = t.host;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: l.properties.host.type
							},
							message: "must be string,null",
							schema: l.properties.host.type,
							parentSchema: l.properties.host,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
			} else {
				var R = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: l.type,
					parentSchema: l,
					data: t
				};
				null === s ? s = [R] : s.push(R), p++
			}
			return e.errors = s, 0 === p
		};
		var l = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				reason: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "draftId", "reason"],
			$id: "AppToolbarNotificationDismiss",
			additionalProperties: !1
		};
		t.AppToolbarNotificationShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: y.required,
						parentSchema: y,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: y.required,
						parentSchema: y,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.draftId) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: y.required,
						parentSchema: y,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.notification) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "notification"
						},
						message: "must have required property 'notification'",
						schema: y.required,
						parentSchema: y,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(y.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: y,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: y.properties.platform.type,
							parentSchema: y.properties.platform,
							data: l
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var f = t.spanSelectionHash;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: y.properties.spanSelectionHash.type,
							parentSchema: y.properties.spanSelectionHash,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var b = t.contextLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: y.properties.contextLength.type,
							parentSchema: y.properties.contextLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.draftId) {
					var S = t.draftId;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: y.properties.draftId.type,
							parentSchema: y.properties.draftId,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.notification) {
					var k = t.notification;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/notification",
							schemaPath: "#/properties/notification/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: y.properties.notification.type,
							parentSchema: y.properties.notification,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var I = t.caretLocation;
					if (!Array.isArray(I)) {
						var q = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: y.properties.caretLocation.type,
							parentSchema: y.properties.caretLocation,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var L = t.spanSelectionLength;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: y.properties.spanSelectionLength.type,
							parentSchema: y.properties.spanSelectionLength,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var E = t.isFirstEngagement;
					if ("boolean" !== typeof E) {
						var N = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: y.properties.isFirstEngagement.type,
							parentSchema: y.properties.isFirstEngagement,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.configString) {
					var O = t.configString;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: y.properties.configString.type
							},
							message: "must be string,null",
							schema: y.properties.configString.type,
							parentSchema: y.properties.configString,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.tabId) {
					var T = t.tabId;
					if (("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) && null !== T) {
						var j = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: y.properties.tabId.type
							},
							message: "must be integer,null",
							schema: y.properties.tabId.type,
							parentSchema: y.properties.tabId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.app) {
					var F = t.app;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: y.properties.app.type
							},
							message: "must be string,null",
							schema: y.properties.app.type,
							parentSchema: y.properties.app,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.host) {
					var A = t.host;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: y.properties.host.type
							},
							message: "must be string,null",
							schema: y.properties.host.type,
							parentSchema: y.properties.host,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
			} else {
				var R = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: y.type,
					parentSchema: y,
					data: t
				};
				null === s ? s = [R] : s.push(R), p++
			}
			return e.errors = s, 0 === p
		};
		var y = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				notification: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "draftId", "notification"],
			$id: "AppToolbarNotificationShown",
			additionalProperties: !1
		};
		t.AppToolbarOnboardingShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: g.required,
						parentSchema: g,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: g.required,
						parentSchema: g,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				for (var h in t)
					if (!i.call(g.properties, h)) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: g,
							data: t
						};
						null === s ? s = [u] : s.push(u), p++
					} if (void 0 !== t.platform) {
					var m = t.platform;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: g.properties.platform.type,
							parentSchema: g.properties.platform,
							data: m
						};
						null === s ? s = [d] : s.push(d), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var l = t.spanSelectionHash;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: g.properties.spanSelectionHash.type,
							parentSchema: g.properties.spanSelectionHash,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var f = t.spanSelectionLength;
					if ("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) {
						var v = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: g.properties.spanSelectionLength.type,
							parentSchema: g.properties.spanSelectionLength,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var b = t.contextLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: g.properties.contextLength.type,
							parentSchema: g.properties.contextLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.draftId) {
					var S = t.draftId;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: g.properties.draftId.type,
							parentSchema: g.properties.draftId,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var k = t.caretLocation;
					if (!Array.isArray(k)) {
						var _ = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: g.properties.caretLocation.type,
							parentSchema: g.properties.caretLocation,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var I = t.isFirstEngagement;
					if ("boolean" !== typeof I) {
						var q = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: g.properties.isFirstEngagement.type,
							parentSchema: g.properties.isFirstEngagement,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.configString) {
					var L = t.configString;
					if ("string" !== typeof L && null !== L) {
						var x = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: g.properties.configString.type
							},
							message: "must be string,null",
							schema: g.properties.configString.type,
							parentSchema: g.properties.configString,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.tabId) {
					var E = t.tabId;
					if (("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) && null !== E) {
						var N = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: g.properties.tabId.type
							},
							message: "must be integer,null",
							schema: g.properties.tabId.type,
							parentSchema: g.properties.tabId,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.app) {
					var O = t.app;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: g.properties.app.type
							},
							message: "must be string,null",
							schema: g.properties.app.type,
							parentSchema: g.properties.app,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.host) {
					var T = t.host;
					if ("string" !== typeof T && null !== T) {
						var j = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: g.properties.host.type
							},
							message: "must be string,null",
							schema: g.properties.host.type,
							parentSchema: g.properties.host,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
			} else {
				var F = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: g.type,
					parentSchema: g,
					data: t
				};
				null === s ? s = [F] : s.push(F), p++
			}
			return e.errors = s, 0 === p
		};
		var g = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash"],
			$id: "AppToolbarOnboardingShown",
			additionalProperties: !1
		};
		t.AppToolbarRewriteIconHovered = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: f.required,
						parentSchema: f,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: f.required,
						parentSchema: f,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.promptText) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "promptText"
						},
						message: "must have required property 'promptText'",
						schema: f.required,
						parentSchema: f,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.featureDisabled) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "featureDisabled"
						},
						message: "must have required property 'featureDisabled'",
						schema: f.required,
						parentSchema: f,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.promptIcon) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "promptIcon"
						},
						message: "must have required property 'promptIcon'",
						schema: f.required,
						parentSchema: f,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(f.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: f,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: f.properties.platform.type,
							parentSchema: f.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var v = t.spanSelectionHash;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: f.properties.spanSelectionHash.type,
							parentSchema: f.properties.spanSelectionHash,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.promptText) {
					var P = t.promptText;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/promptText",
							schemaPath: "#/properties/promptText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: f.properties.promptText.type,
							parentSchema: f.properties.promptText,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.featureDisabled) {
					var w = t.featureDisabled;
					if ("boolean" !== typeof w) {
						var k = {
							instancePath: n + "/featureDisabled",
							schemaPath: "#/properties/featureDisabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: f.properties.featureDisabled.type,
							parentSchema: f.properties.featureDisabled,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.promptIcon) {
					var _ = t.promptIcon;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/promptIcon",
							schemaPath: "#/properties/promptIcon/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: f.properties.promptIcon.type,
							parentSchema: f.properties.promptIcon,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var q = t.contextLength;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: f.properties.contextLength.type,
							parentSchema: f.properties.contextLength,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var x = t.caretLocation;
					if (!Array.isArray(x)) {
						var E = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: f.properties.caretLocation.type,
							parentSchema: f.properties.caretLocation,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var N = t.isFirstEngagement;
					if ("boolean" !== typeof N) {
						var O = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: f.properties.isFirstEngagement.type,
							parentSchema: f.properties.isFirstEngagement,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var D = t.spanSelectionLength;
					if ("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) {
						var T = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: f.properties.spanSelectionLength.type,
							parentSchema: f.properties.spanSelectionLength,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.draftId) {
					var j = t.draftId;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: f.properties.draftId.type,
							parentSchema: f.properties.draftId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.configString) {
					var C = t.configString;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: f.properties.configString.type
							},
							message: "must be string,null",
							schema: f.properties.configString.type,
							parentSchema: f.properties.configString,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.tabId) {
					var H = t.tabId;
					if (("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) && null !== H) {
						var R = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: f.properties.tabId.type
							},
							message: "must be integer,null",
							schema: f.properties.tabId.type,
							parentSchema: f.properties.tabId,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.app) {
					var M = t.app;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: f.properties.app.type
							},
							message: "must be string,null",
							schema: f.properties.app.type,
							parentSchema: f.properties.app,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.host) {
					var z = t.host;
					if ("string" !== typeof z && null !== z) {
						var U = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: f.properties.host.type
							},
							message: "must be string,null",
							schema: f.properties.host.type,
							parentSchema: f.properties.host,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
			} else {
				var B = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: f.type,
					parentSchema: f,
					data: t
				};
				null === s ? s = [B] : s.push(B), p++
			}
			return e.errors = s, 0 === p
		};
		var f = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				promptText: {
					type: "string"
				},
				featureDisabled: {
					type: "boolean"
				},
				promptIcon: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "promptText", "featureDisabled", "promptIcon"],
			$id: "AppToolbarRewriteIconHovered",
			additionalProperties: !1
		};
		t.AppUserCreated = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: v.required,
						parentSchema: v,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("origin" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: v,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.origin) {
					var h = t.origin;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: v.properties.origin.type,
							parentSchema: v.properties.origin,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: v.properties.configString.type
							},
							message: "must be string,null",
							schema: v.properties.configString.type,
							parentSchema: v.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: v.properties.tabId.type
							},
							message: "must be integer,null",
							schema: v.properties.tabId.type,
							parentSchema: v.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: v.properties.app.type
							},
							message: "must be string,null",
							schema: v.properties.app.type,
							parentSchema: v.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var b = t.host;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: v.properties.host.type
							},
							message: "must be string,null",
							schema: v.properties.host.type,
							parentSchema: v.properties.host,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
			} else {
				var S = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: v.type,
					parentSchema: v,
					data: t
				};
				null === i ? i = [S] : i.push(S), s++
			}
			return e.errors = i, 0 === s
		};
		var v = {
			properties: {
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "AppUserCreated",
			additionalProperties: !1
		};
		t.attributionAnswer = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: b.type,
					parentSchema: b,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var b = {
			type: "string",
			$id: "attributionAnswer"
		};
		t.AttributionFormShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: P.required,
						parentSchema: P,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("origin" !== o && "app" !== o && "configString" !== o && "tabId" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: P,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.origin) {
					var h = t.origin;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: P.properties.origin.type,
							parentSchema: P.properties.origin,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.app) {
					var m = t.app;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: P.properties.app.type
							},
							message: "must be string,null",
							schema: P.properties.app.type,
							parentSchema: P.properties.app,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.configString) {
					var l = t.configString;
					if ("string" !== typeof l && null !== l) {
						var y = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: P.properties.configString.type
							},
							message: "must be string,null",
							schema: P.properties.configString.type,
							parentSchema: P.properties.configString,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.tabId) {
					var g = t.tabId;
					if (("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) && null !== g) {
						var f = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: P.properties.tabId.type
							},
							message: "must be integer,null",
							schema: P.properties.tabId.type,
							parentSchema: P.properties.tabId,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: P.properties.host.type
							},
							message: "must be string,null",
							schema: P.properties.host.type,
							parentSchema: P.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var S = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: P.type,
					parentSchema: P,
					data: t
				};
				null === i ? i = [S] : i.push(S), s++
			}
			return e.errors = i, 0 === s
		};
		var P = {
			properties: {
				origin: {
					type: "string"
				},
				app: {
					type: ["string", "null"]
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "AttributionFormShown",
			additionalProperties: !1
		};
		t.AttributionFormSubmitted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.attributionAnswer) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "attributionAnswer"
						},
						message: "must have required property 'attributionAnswer'",
						schema: S.required,
						parentSchema: S,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.interactionId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: S.required,
						parentSchema: S,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				if (void 0 === t.reason) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "reason"
						},
						message: "must have required property 'reason'",
						schema: S.required,
						parentSchema: S,
						data: t
					};
					null === i ? i = [c] : i.push(c), s++
				}
				if (void 0 === t.duration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: S.required,
						parentSchema: S,
						data: t
					};
					null === i ? i = [h] : i.push(h), s++
				}
				for (var u in t)
					if ("attributionAnswer" !== u && "interactionId" !== u && "reason" !== u && "duration" !== u && "configString" !== u && "tabId" !== u && "app" !== u && "host" !== u) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: u
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: S,
							data: t
						};
						null === i ? i = [m] : i.push(m), s++
					} if (void 0 !== t.attributionAnswer) {
					var d = t.attributionAnswer;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/attributionAnswer",
							schemaPath: "#/properties/attributionAnswer/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: S.properties.attributionAnswer.type,
							parentSchema: S.properties.attributionAnswer,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.interactionId) {
					var y = t.interactionId;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: S.properties.interactionId.type,
							parentSchema: S.properties.interactionId,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.reason) {
					var f = t.reason;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/reason",
							schemaPath: "#/properties/reason/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: S.properties.reason.type,
							parentSchema: S.properties.reason,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.duration) {
					var b = t.duration;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: S.properties.duration.type,
							parentSchema: S.properties.duration,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.configString) {
					var w = t.configString;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: S.properties.configString.type
							},
							message: "must be string,null",
							schema: S.properties.configString.type,
							parentSchema: S.properties.configString,
							data: w
						};
						null === i ? i = [k] : i.push(k), s++
					}
				}
				if (void 0 !== t.tabId) {
					var _ = t.tabId;
					if (("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) && null !== _) {
						var I = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: S.properties.tabId.type
							},
							message: "must be integer,null",
							schema: S.properties.tabId.type,
							parentSchema: S.properties.tabId,
							data: _
						};
						null === i ? i = [I] : i.push(I), s++
					}
				}
				if (void 0 !== t.app) {
					var q = t.app;
					if ("string" !== typeof q && null !== q) {
						var L = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: S.properties.app.type
							},
							message: "must be string,null",
							schema: S.properties.app.type,
							parentSchema: S.properties.app,
							data: q
						};
						null === i ? i = [L] : i.push(L), s++
					}
				}
				if (void 0 !== t.host) {
					var x = t.host;
					if ("string" !== typeof x && null !== x) {
						var E = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: S.properties.host.type
							},
							message: "must be string,null",
							schema: S.properties.host.type,
							parentSchema: S.properties.host,
							data: x
						};
						null === i ? i = [E] : i.push(E), s++
					}
				}
			} else {
				var N = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: S.type,
					parentSchema: S,
					data: t
				};
				null === i ? i = [N] : i.push(N), s++
			}
			return e.errors = i, 0 === s
		};
		var S = {
			properties: {
				attributionAnswer: {
					type: "string"
				},
				interactionId: {
					type: "string"
				},
				reason: {
					type: "string"
				},
				duration: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["attributionAnswer", "interactionId", "reason", "duration"],
			$id: "AttributionFormSubmitted",
			additionalProperties: !1
		};
		t.BackgroundKeepalive = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: w,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: w.properties.configString.type
							},
							message: "must be string,null",
							schema: w.properties.configString.type,
							parentSchema: w.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: w.properties.tabId.type
							},
							message: "must be integer,null",
							schema: w.properties.tabId.type,
							parentSchema: w.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: w.properties.app.type
							},
							message: "must be string,null",
							schema: w.properties.app.type,
							parentSchema: w.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: w.properties.host.type
							},
							message: "must be string,null",
							schema: w.properties.host.type,
							parentSchema: w.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: w.type,
					parentSchema: w,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var w = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "BackgroundKeepalive",
			additionalProperties: !1
		};
		t.BatchRewriteClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.intent) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "intent"
						},
						message: "must have required property 'intent'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.batchTotalSelections) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSelections"
						},
						message: "must have required property 'batchTotalSelections'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.batchTotalCharacters) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalCharacters"
						},
						message: "must have required property 'batchTotalCharacters'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.batchInteractionId) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchInteractionId"
						},
						message: "must have required property 'batchInteractionId'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.duration) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.contextLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: k.required,
						parentSchema: k,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				for (var v in t)
					if (!i.call(k.properties, v)) {
						var b = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: v
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: k,
							data: t
						};
						null === s ? s = [b] : s.push(b), p++
					} if (void 0 !== t.platform) {
					var P = t.platform;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: k.properties.platform.type,
							parentSchema: k.properties.platform,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.intent) {
					var w = t.intent;
					if ("string" !== typeof w) {
						var _ = {
							instancePath: n + "/intent",
							schemaPath: "#/properties/intent/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: k.properties.intent.type,
							parentSchema: k.properties.intent,
							data: w
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var I = t.spanSelectionHash;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: k.properties.spanSelectionHash.type,
							parentSchema: k.properties.spanSelectionHash,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.batchTotalSelections) {
					var L = t.batchTotalSelections;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/batchTotalSelections",
							schemaPath: "#/properties/batchTotalSelections/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: k.properties.batchTotalSelections.type,
							parentSchema: k.properties.batchTotalSelections,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.batchTotalCharacters) {
					var E = t.batchTotalCharacters;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/batchTotalCharacters",
							schemaPath: "#/properties/batchTotalCharacters/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: k.properties.batchTotalCharacters.type,
							parentSchema: k.properties.batchTotalCharacters,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var O = t.batchInteractionId;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: k.properties.batchInteractionId.type,
							parentSchema: k.properties.batchInteractionId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.duration) {
					var T = t.duration;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: k.properties.duration.type,
							parentSchema: k.properties.duration,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var F = t.batchTotalSentences;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: k.properties.batchTotalSentences.type,
							parentSchema: k.properties.batchTotalSentences,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var A = t.spanSelectionLength;
					if ("number" != typeof A || A % 1 || isNaN(A) || !isFinite(A)) {
						var H = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: k.properties.spanSelectionLength.type,
							parentSchema: k.properties.spanSelectionLength,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var R = t.contextLength;
					if ("number" != typeof R || R % 1 || isNaN(R) || !isFinite(R)) {
						var M = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: k.properties.contextLength.type,
							parentSchema: k.properties.contextLength,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.draftId) {
					var $ = t.draftId;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: k.properties.draftId.type,
							parentSchema: k.properties.draftId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var U = t.caretLocation;
					if (!Array.isArray(U)) {
						var B = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: k.properties.caretLocation.type,
							parentSchema: k.properties.caretLocation,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var W = t.isFirstEngagement;
					if ("boolean" !== typeof W) {
						var V = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: k.properties.isFirstEngagement.type,
							parentSchema: k.properties.isFirstEngagement,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.configString) {
					var G = t.configString;
					if ("string" !== typeof G && null !== G) {
						var K = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: k.properties.configString.type
							},
							message: "must be string,null",
							schema: k.properties.configString.type,
							parentSchema: k.properties.configString,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Q = t.tabId;
					if (("number" != typeof Q || Q % 1 || isNaN(Q) || !isFinite(Q)) && null !== Q) {
						var Y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: k.properties.tabId.type
							},
							message: "must be integer,null",
							schema: k.properties.tabId.type,
							parentSchema: k.properties.tabId,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.app) {
					var J = t.app;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: k.properties.app.type
							},
							message: "must be string,null",
							schema: k.properties.app.type,
							parentSchema: k.properties.app,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.host) {
					var Z = t.host;
					if ("string" !== typeof Z && null !== Z) {
						var ee = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: k.properties.host.type
							},
							message: "must be string,null",
							schema: k.properties.host.type,
							parentSchema: k.properties.host,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
			} else {
				var te = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: k.type,
					parentSchema: k,
					data: t
				};
				null === s ? s = [te] : s.push(te), p++
			}
			return e.errors = s, 0 === p
		};
		var k = {
			properties: {
				platform: {
					type: "string"
				},
				intent: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				batchTotalSelections: {
					type: "integer"
				},
				batchTotalCharacters: {
					type: "integer"
				},
				batchInteractionId: {
					type: "string"
				},
				duration: {
					type: "integer"
				},
				batchTotalSentences: {
					type: "integer"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "intent", "spanSelectionHash", "batchTotalSelections", "batchTotalCharacters", "batchInteractionId", "duration", "batchTotalSentences", "contextLength", "draftId"],
			$id: "BatchRewriteClosed",
			additionalProperties: !1
		};
		t.BatchRewriteOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: _.required,
						parentSchema: _,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.intent) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "intent"
						},
						message: "must have required property 'intent'",
						schema: _.required,
						parentSchema: _,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: _.required,
						parentSchema: _,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.origin) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: _.required,
						parentSchema: _,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.batchTotalCharacters) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalCharacters"
						},
						message: "must have required property 'batchTotalCharacters'",
						schema: _.required,
						parentSchema: _,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: _.required,
						parentSchema: _,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.batchInteractionId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchInteractionId"
						},
						message: "must have required property 'batchInteractionId'",
						schema: _.required,
						parentSchema: _,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.draftId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: _.required,
						parentSchema: _,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: _.required,
						parentSchema: _,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				for (var f in t)
					if (!i.call(_.properties, f)) {
						var v = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: f
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: _,
							data: t
						};
						null === s ? s = [v] : s.push(v), p++
					} if (void 0 !== t.spanSelectionLength) {
					var b = t.spanSelectionLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: _.properties.spanSelectionLength.type,
							parentSchema: _.properties.spanSelectionLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.platform) {
					var S = t.platform;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _.properties.platform.type,
							parentSchema: _.properties.platform,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.intent) {
					var k = t.intent;
					if ("string" !== typeof k) {
						var I = {
							instancePath: n + "/intent",
							schemaPath: "#/properties/intent/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _.properties.intent.type,
							parentSchema: _.properties.intent,
							data: k
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var q = t.spanSelectionHash;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _.properties.spanSelectionHash.type,
							parentSchema: _.properties.spanSelectionHash,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.origin) {
					var x = t.origin;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _.properties.origin.type,
							parentSchema: _.properties.origin,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.batchTotalCharacters) {
					var N = t.batchTotalCharacters;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/batchTotalCharacters",
							schemaPath: "#/properties/batchTotalCharacters/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: _.properties.batchTotalCharacters.type,
							parentSchema: _.properties.batchTotalCharacters,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var D = t.contextLength;
					if ("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) {
						var T = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: _.properties.contextLength.type,
							parentSchema: _.properties.contextLength,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var j = t.batchInteractionId;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _.properties.batchInteractionId.type,
							parentSchema: _.properties.batchInteractionId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.draftId) {
					var C = t.draftId;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _.properties.draftId.type,
							parentSchema: _.properties.draftId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var H = t.batchTotalSentences;
					if ("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) {
						var R = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: _.properties.batchTotalSentences.type,
							parentSchema: _.properties.batchTotalSentences,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var M = t.caretLocation;
					if (!Array.isArray(M)) {
						var $ = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: _.properties.caretLocation.type,
							parentSchema: _.properties.caretLocation,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var z = t.isFirstEngagement;
					if ("boolean" !== typeof z) {
						var U = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: _.properties.isFirstEngagement.type,
							parentSchema: _.properties.isFirstEngagement,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.configString) {
					var B = t.configString;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: _.properties.configString.type
							},
							message: "must be string,null",
							schema: _.properties.configString.type,
							parentSchema: _.properties.configString,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.tabId) {
					var V = t.tabId;
					if (("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) && null !== V) {
						var G = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: _.properties.tabId.type
							},
							message: "must be integer,null",
							schema: _.properties.tabId.type,
							parentSchema: _.properties.tabId,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.app) {
					var K = t.app;
					if ("string" !== typeof K && null !== K) {
						var Q = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: _.properties.app.type
							},
							message: "must be string,null",
							schema: _.properties.app.type,
							parentSchema: _.properties.app,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.host) {
					var Y = t.host;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: _.properties.host.type
							},
							message: "must be string,null",
							schema: _.properties.host.type,
							parentSchema: _.properties.host,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
			} else {
				var X = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: _.type,
					parentSchema: _,
					data: t
				};
				null === s ? s = [X] : s.push(X), p++
			}
			return e.errors = s, 0 === p
		};
		var _ = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				intent: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				batchTotalCharacters: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				batchInteractionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				batchTotalSentences: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "intent", "spanSelectionHash", "origin", "batchTotalCharacters", "contextLength", "batchInteractionId", "draftId", "batchTotalSentences"],
			$id: "BatchRewriteOpened",
			additionalProperties: !1
		};
		t.browserLanguages = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (!Array.isArray(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "array"
					},
					message: "must be array",
					schema: I.type,
					parentSchema: I,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var I = {
			type: "array",
			$id: "browserLanguages"
		};
		t.CaptchaModalViewShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: q.required,
						parentSchema: q,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("origin" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: q,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.origin) {
					var h = t.origin;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: q.properties.origin.type,
							parentSchema: q.properties.origin,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: q.properties.configString.type
							},
							message: "must be string,null",
							schema: q.properties.configString.type,
							parentSchema: q.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: q.properties.tabId.type
							},
							message: "must be integer,null",
							schema: q.properties.tabId.type,
							parentSchema: q.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: q.properties.app.type
							},
							message: "must be string,null",
							schema: q.properties.app.type,
							parentSchema: q.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: q.properties.host.type
							},
							message: "must be string,null",
							schema: q.properties.host.type,
							parentSchema: q.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: q.type,
					parentSchema: q,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var q = {
			properties: {
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "CaptchaModalViewShown",
			additionalProperties: !1
		};
		t.CasualClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.randomizedSuggestions) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: L.required,
						parentSchema: L,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: L.required,
						parentSchema: L,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: L.required,
						parentSchema: L,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: L.required,
						parentSchema: L,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.origin) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: L.required,
						parentSchema: L,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: L.required,
						parentSchema: L,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.interactionId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: L.required,
						parentSchema: L,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				for (var y in t)
					if (!i.call(L.properties, y)) {
						var g = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: y
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: L,
							data: t
						};
						null === s ? s = [g] : s.push(g), p++
					} if (void 0 !== t.spanSelectionLength) {
					var f = t.spanSelectionLength;
					if ("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) {
						var v = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: L.properties.spanSelectionLength.type,
							parentSchema: L.properties.spanSelectionLength,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var b = t.randomizedSuggestions;
					if ("boolean" !== typeof b) {
						var P = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: L.properties.randomizedSuggestions.type,
							parentSchema: L.properties.randomizedSuggestions,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.duration) {
					var S = t.duration;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: L.properties.duration.type,
							parentSchema: L.properties.duration,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.platform) {
					var k = t.platform;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: L.properties.platform.type,
							parentSchema: L.properties.platform,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var I = t.spanSelectionHash;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: L.properties.spanSelectionHash.type,
							parentSchema: L.properties.spanSelectionHash,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.origin) {
					var x = t.origin;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: L.properties.origin.type,
							parentSchema: L.properties.origin,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var N = t.contextLength;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: L.properties.contextLength.type,
							parentSchema: L.properties.contextLength,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var D = t.interactionId;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: L.properties.interactionId.type,
							parentSchema: L.properties.interactionId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.draftId) {
					var j = t.draftId;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: L.properties.draftId.type,
							parentSchema: L.properties.draftId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var C = t.caretLocation;
					if (!Array.isArray(C)) {
						var A = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: L.properties.caretLocation.type,
							parentSchema: L.properties.caretLocation,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var H = t.isFirstEngagement;
					if ("boolean" !== typeof H) {
						var R = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: L.properties.isFirstEngagement.type,
							parentSchema: L.properties.isFirstEngagement,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.configString) {
					var M = t.configString;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: L.properties.configString.type
							},
							message: "must be string,null",
							schema: L.properties.configString.type,
							parentSchema: L.properties.configString,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.tabId) {
					var z = t.tabId;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: L.properties.tabId.type
							},
							message: "must be integer,null",
							schema: L.properties.tabId.type,
							parentSchema: L.properties.tabId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.app) {
					var B = t.app;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: L.properties.app.type
							},
							message: "must be string,null",
							schema: L.properties.app.type,
							parentSchema: L.properties.app,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.host) {
					var V = t.host;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: L.properties.host.type
							},
							message: "must be string,null",
							schema: L.properties.host.type,
							parentSchema: L.properties.host,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
			} else {
				var K = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: L.type,
					parentSchema: L,
					data: t
				};
				null === s ? s = [K] : s.push(K), p++
			}
			return e.errors = s, 0 === p
		};
		var L = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["randomizedSuggestions", "duration", "platform", "spanSelectionHash", "origin", "contextLength", "interactionId"],
			$id: "CasualClosed",
			additionalProperties: !1
		};
		t.CasualError = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: x.required,
						parentSchema: x,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: x.required,
						parentSchema: x,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.loadingDuration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: x.required,
						parentSchema: x,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: x.required,
						parentSchema: x,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.draftId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: x.required,
						parentSchema: x,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.errorMsg) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "errorMsg"
						},
						message: "must have required property 'errorMsg'",
						schema: x.required,
						parentSchema: x,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.errorCode) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "errorCode"
						},
						message: "must have required property 'errorCode'",
						schema: x.required,
						parentSchema: x,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.interactionId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: x.required,
						parentSchema: x,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(x.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: x,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.platform) {
					var v = t.platform;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: x.properties.platform.type,
							parentSchema: x.properties.platform,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var P = t.spanSelectionHash;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: x.properties.spanSelectionHash.type,
							parentSchema: x.properties.spanSelectionHash,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var w = t.spanSelectionLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: x.properties.spanSelectionLength.type,
							parentSchema: x.properties.spanSelectionLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.loadingDuration) {
					var _ = t.loadingDuration;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: x.properties.loadingDuration.type,
							parentSchema: x.properties.loadingDuration,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var q = t.contextLength;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: x.properties.contextLength.type,
							parentSchema: x.properties.contextLength,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.draftId) {
					var E = t.draftId;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: x.properties.draftId.type,
							parentSchema: x.properties.draftId,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var O = t.caretLocation;
					if (!Array.isArray(O)) {
						var D = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: x.properties.caretLocation.type,
							parentSchema: x.properties.caretLocation,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.errorMsg) {
					var T = t.errorMsg;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/errorMsg",
							schemaPath: "#/properties/errorMsg/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: x.properties.errorMsg.type,
							parentSchema: x.properties.errorMsg,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.errorCode) {
					var F = t.errorCode;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/errorCode",
							schemaPath: "#/properties/errorCode/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: x.properties.errorCode.type,
							parentSchema: x.properties.errorCode,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var A = t.interactionId;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: x.properties.interactionId.type,
							parentSchema: x.properties.interactionId,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var R = t.isFirstEngagement;
					if ("boolean" !== typeof R) {
						var M = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: x.properties.isFirstEngagement.type,
							parentSchema: x.properties.isFirstEngagement,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.configString) {
					var $ = t.configString;
					if ("string" !== typeof $ && null !== $) {
						var z = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: x.properties.configString.type
							},
							message: "must be string,null",
							schema: x.properties.configString.type,
							parentSchema: x.properties.configString,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.tabId) {
					var U = t.tabId;
					if (("number" != typeof U || U % 1 || isNaN(U) || !isFinite(U)) && null !== U) {
						var B = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: x.properties.tabId.type
							},
							message: "must be integer,null",
							schema: x.properties.tabId.type,
							parentSchema: x.properties.tabId,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.app) {
					var W = t.app;
					if ("string" !== typeof W && null !== W) {
						var V = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: x.properties.app.type
							},
							message: "must be string,null",
							schema: x.properties.app.type,
							parentSchema: x.properties.app,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.host) {
					var G = t.host;
					if ("string" !== typeof G && null !== G) {
						var K = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: x.properties.host.type
							},
							message: "must be string,null",
							schema: x.properties.host.type,
							parentSchema: x.properties.host,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
			} else {
				var Q = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: x.type,
					parentSchema: x,
					data: t
				};
				null === s ? s = [Q] : s.push(Q), p++
			}
			return e.errors = s, 0 === p
		};
		var x = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				loadingDuration: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				errorMsg: {
					type: "string"
				},
				errorCode: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "loadingDuration", "contextLength", "draftId", "errorMsg", "errorCode", "interactionId"],
			$id: "CasualError",
			additionalProperties: !1
		};
		t.CasualFetchStarted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: E.required,
						parentSchema: E,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: E.required,
						parentSchema: E,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: E.required,
						parentSchema: E,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: E.required,
						parentSchema: E,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(E.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: E,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: E.properties.platform.type,
							parentSchema: E.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: E.properties.spanSelectionHash.type,
							parentSchema: E.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: E.properties.spanSelectionLength.type,
							parentSchema: E.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.origin) {
					var P = t.origin;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: E.properties.origin.type,
							parentSchema: E.properties.origin,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var w = t.contextLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: E.properties.contextLength.type,
							parentSchema: E.properties.contextLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.draftId) {
					var _ = t.draftId;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: E.properties.draftId.type,
							parentSchema: E.properties.draftId,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var q = t.caretLocation;
					if (!Array.isArray(q)) {
						var L = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: E.properties.caretLocation.type,
							parentSchema: E.properties.caretLocation,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var x = t.isFirstEngagement;
					if ("boolean" !== typeof x) {
						var N = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: E.properties.isFirstEngagement.type,
							parentSchema: E.properties.isFirstEngagement,
							data: x
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.configString) {
					var O = t.configString;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: E.properties.configString.type
							},
							message: "must be string,null",
							schema: E.properties.configString.type,
							parentSchema: E.properties.configString,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.tabId) {
					var T = t.tabId;
					if (("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) && null !== T) {
						var j = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: E.properties.tabId.type
							},
							message: "must be integer,null",
							schema: E.properties.tabId.type,
							parentSchema: E.properties.tabId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.app) {
					var F = t.app;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: E.properties.app.type
							},
							message: "must be string,null",
							schema: E.properties.app.type,
							parentSchema: E.properties.app,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.host) {
					var A = t.host;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: E.properties.host.type
							},
							message: "must be string,null",
							schema: E.properties.host.type,
							parentSchema: E.properties.host,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
			} else {
				var R = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: E.type,
					parentSchema: E,
					data: t
				};
				null === s ? s = [R] : s.push(R), p++
			}
			return e.errors = s, 0 === p
		};
		var E = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "contextLength"],
			$id: "CasualFetchStarted",
			additionalProperties: !1
		};
		t.CasualOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.loadingDuration) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.randomizedSuggestions) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.isNudged) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isNudged"
						},
						message: "must have required property 'isNudged'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isBatch) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isBatch"
						},
						message: "must have required property 'isBatch'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.isLimitedSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isLimitedSuggestions"
						},
						message: "must have required property 'isLimitedSuggestions'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.origin) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.contextLength) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.spanEncompassingSentenceHash) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceHash"
						},
						message: "must have required property 'spanEncompassingSentenceHash'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				if (void 0 === t.spanEncompassingSentenceLength) {
					var b = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceLength"
						},
						message: "must have required property 'spanEncompassingSentenceLength'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [b] : s.push(b), p++
				}
				if (void 0 === t.interactionId) {
					var P = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [P] : s.push(P), p++
				}
				if (void 0 === t.numOfLockedSuggestions) {
					var S = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfLockedSuggestions"
						},
						message: "must have required property 'numOfLockedSuggestions'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [S] : s.push(S), p++
				}
				if (void 0 === t.batchIndex) {
					var w = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchIndex"
						},
						message: "must have required property 'batchIndex'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [w] : s.push(w), p++
				}
				if (void 0 === t.spanSelectionModificationShown) {
					var k = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionModificationShown"
						},
						message: "must have required property 'spanSelectionModificationShown'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [k] : s.push(k), p++
				}
				if (void 0 === t.cacheInteractionId) {
					var _ = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "cacheInteractionId"
						},
						message: "must have required property 'cacheInteractionId'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [_] : s.push(_), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var I = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: N.required,
						parentSchema: N,
						data: t
					};
					null === s ? s = [I] : s.push(I), p++
				}
				for (var q in t)
					if (!i.call(N.properties, q)) {
						var L = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: q
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: N,
							data: t
						};
						null === s ? s = [L] : s.push(L), p++
					} if (void 0 !== t.loadingDuration) {
					var x = t.loadingDuration;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: N.properties.loadingDuration.type,
							parentSchema: N.properties.loadingDuration,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var O = t.randomizedSuggestions;
					if ("boolean" !== typeof O) {
						var D = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: N.properties.randomizedSuggestions.type,
							parentSchema: N.properties.randomizedSuggestions,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.isNudged) {
					var T = t.isNudged;
					if ("boolean" !== typeof T) {
						var j = {
							instancePath: n + "/isNudged",
							schemaPath: "#/properties/isNudged/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: N.properties.isNudged.type,
							parentSchema: N.properties.isNudged,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.platform) {
					var F = t.platform;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: N.properties.platform.type,
							parentSchema: N.properties.platform,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var A = t.spanSelectionHash;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: N.properties.spanSelectionHash.type,
							parentSchema: N.properties.spanSelectionHash,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var R = t.isBatch;
					if ("boolean" !== typeof R) {
						var M = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: N.properties.isBatch.type,
							parentSchema: N.properties.isBatch,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.isLimitedSuggestions) {
					var $ = t.isLimitedSuggestions;
					if ("boolean" !== typeof $) {
						var z = {
							instancePath: n + "/isLimitedSuggestions",
							schemaPath: "#/properties/isLimitedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: N.properties.isLimitedSuggestions.type,
							parentSchema: N.properties.isLimitedSuggestions,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var U = t.numOfSuggestions;
					if ("number" != typeof U || U % 1 || isNaN(U) || !isFinite(U)) {
						var B = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: N.properties.numOfSuggestions.type,
							parentSchema: N.properties.numOfSuggestions,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.origin) {
					var W = t.origin;
					if ("string" !== typeof W) {
						var V = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: N.properties.origin.type,
							parentSchema: N.properties.origin,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var G = t.contextLength;
					if ("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) {
						var K = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: N.properties.contextLength.type,
							parentSchema: N.properties.contextLength,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceHash) {
					var Q = t.spanEncompassingSentenceHash;
					if ("string" !== typeof Q) {
						var Y = {
							instancePath: n + "/spanEncompassingSentenceHash",
							schemaPath: "#/properties/spanEncompassingSentenceHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: N.properties.spanEncompassingSentenceHash.type,
							parentSchema: N.properties.spanEncompassingSentenceHash,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceLength) {
					var J = t.spanEncompassingSentenceLength;
					if ("number" != typeof J || J % 1 || isNaN(J) || !isFinite(J)) {
						var X = {
							instancePath: n + "/spanEncompassingSentenceLength",
							schemaPath: "#/properties/spanEncompassingSentenceLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: N.properties.spanEncompassingSentenceLength.type,
							parentSchema: N.properties.spanEncompassingSentenceLength,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var Z = t.interactionId;
					if ("string" !== typeof Z) {
						var ee = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: N.properties.interactionId.type,
							parentSchema: N.properties.interactionId,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.numOfLockedSuggestions) {
					var te = t.numOfLockedSuggestions;
					if ("number" != typeof te || te % 1 || isNaN(te) || !isFinite(te)) {
						var re = {
							instancePath: n + "/numOfLockedSuggestions",
							schemaPath: "#/properties/numOfLockedSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: N.properties.numOfLockedSuggestions.type,
							parentSchema: N.properties.numOfLockedSuggestions,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
				if (void 0 !== t.draftId) {
					var ae = t.draftId;
					if ("string" !== typeof ae) {
						var ne = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: N.properties.draftId.type,
							parentSchema: N.properties.draftId,
							data: ae
						};
						null === s ? s = [ne] : s.push(ne), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var ie = t.caretLocation;
					if (!Array.isArray(ie)) {
						var se = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: N.properties.caretLocation.type,
							parentSchema: N.properties.caretLocation,
							data: ie
						};
						null === s ? s = [se] : s.push(se), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var pe = t.spanSelectionLength;
					if ("number" != typeof pe || pe % 1 || isNaN(pe) || !isFinite(pe)) {
						var oe = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: N.properties.spanSelectionLength.type,
							parentSchema: N.properties.spanSelectionLength,
							data: pe
						};
						null === s ? s = [oe] : s.push(oe), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var ce = t.batchIndex;
					if (("number" != typeof ce || ce % 1 || isNaN(ce) || !isFinite(ce)) && null !== ce) {
						var he = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: N.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: N.properties.batchIndex.type,
							parentSchema: N.properties.batchIndex,
							data: ce
						};
						null === s ? s = [he] : s.push(he), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var ue = t.batchInteractionId;
					if ("string" !== typeof ue) {
						var me = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: N.properties.batchInteractionId.type,
							parentSchema: N.properties.batchInteractionId,
							data: ue
						};
						null === s ? s = [me] : s.push(me), p++
					}
				}
				if (void 0 !== t.spanSelectionModificationShown) {
					var de = t.spanSelectionModificationShown;
					if ("string" !== typeof de && null !== de) {
						var le = {
							instancePath: n + "/spanSelectionModificationShown",
							schemaPath: "#/properties/spanSelectionModificationShown/type",
							keyword: "type",
							params: {
								type: N.properties.spanSelectionModificationShown.type
							},
							message: "must be string,null",
							schema: N.properties.spanSelectionModificationShown.type,
							parentSchema: N.properties.spanSelectionModificationShown,
							data: de
						};
						null === s ? s = [le] : s.push(le), p++
					}
				}
				if (void 0 !== t.cacheInteractionId) {
					var ye = t.cacheInteractionId;
					if ("string" !== typeof ye && null !== ye) {
						var ge = {
							instancePath: n + "/cacheInteractionId",
							schemaPath: "#/properties/cacheInteractionId/type",
							keyword: "type",
							params: {
								type: N.properties.cacheInteractionId.type
							},
							message: "must be string,null",
							schema: N.properties.cacheInteractionId.type,
							parentSchema: N.properties.cacheInteractionId,
							data: ye
						};
						null === s ? s = [ge] : s.push(ge), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var fe = t.batchTotalSentences;
					if (("number" != typeof fe || fe % 1 || isNaN(fe) || !isFinite(fe)) && null !== fe) {
						var ve = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: N.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: N.properties.batchTotalSentences.type,
							parentSchema: N.properties.batchTotalSentences,
							data: fe
						};
						null === s ? s = [ve] : s.push(ve), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var be = t.isFirstEngagement;
					if ("boolean" !== typeof be) {
						var Pe = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: N.properties.isFirstEngagement.type,
							parentSchema: N.properties.isFirstEngagement,
							data: be
						};
						null === s ? s = [Pe] : s.push(Pe), p++
					}
				}
				if (void 0 !== t.configString) {
					var Se = t.configString;
					if ("string" !== typeof Se && null !== Se) {
						var we = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: N.properties.configString.type
							},
							message: "must be string,null",
							schema: N.properties.configString.type,
							parentSchema: N.properties.configString,
							data: Se
						};
						null === s ? s = [we] : s.push(we), p++
					}
				}
				if (void 0 !== t.tabId) {
					var ke = t.tabId;
					if (("number" != typeof ke || ke % 1 || isNaN(ke) || !isFinite(ke)) && null !== ke) {
						var _e = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: N.properties.tabId.type
							},
							message: "must be integer,null",
							schema: N.properties.tabId.type,
							parentSchema: N.properties.tabId,
							data: ke
						};
						null === s ? s = [_e] : s.push(_e), p++
					}
				}
				if (void 0 !== t.app) {
					var Ie = t.app;
					if ("string" !== typeof Ie && null !== Ie) {
						var qe = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: N.properties.app.type
							},
							message: "must be string,null",
							schema: N.properties.app.type,
							parentSchema: N.properties.app,
							data: Ie
						};
						null === s ? s = [qe] : s.push(qe), p++
					}
				}
				if (void 0 !== t.host) {
					var Le = t.host;
					if ("string" !== typeof Le && null !== Le) {
						var xe = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: N.properties.host.type
							},
							message: "must be string,null",
							schema: N.properties.host.type,
							parentSchema: N.properties.host,
							data: Le
						};
						null === s ? s = [xe] : s.push(xe), p++
					}
				}
			} else {
				var Ee = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: N.type,
					parentSchema: N,
					data: t
				};
				null === s ? s = [Ee] : s.push(Ee), p++
			}
			return e.errors = s, 0 === p
		};
		var N = {
			properties: {
				loadingDuration: {
					type: "integer"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				isNudged: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				isLimitedSuggestions: {
					type: "boolean"
				},
				numOfSuggestions: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				spanEncompassingSentenceHash: {
					type: "string"
				},
				spanEncompassingSentenceLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				numOfLockedSuggestions: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				batchInteractionId: {
					type: "string"
				},
				spanSelectionModificationShown: {
					type: ["string", "null"]
				},
				cacheInteractionId: {
					type: ["string", "null"]
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["loadingDuration", "randomizedSuggestions", "isNudged", "platform", "spanSelectionHash", "isBatch", "isLimitedSuggestions", "numOfSuggestions", "origin", "contextLength", "spanEncompassingSentenceHash", "spanEncompassingSentenceLength", "interactionId", "numOfLockedSuggestions", "batchIndex", "spanSelectionModificationShown", "cacheInteractionId", "batchTotalSentences"],
			$id: "CasualOpened",
			additionalProperties: !1
		};
		t.CasualSuggestionCopied = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.suggestionIndex) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "suggestionIndex"
						},
						message: "must have required property 'suggestionIndex'",
						schema: O.required,
						parentSchema: O,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: O.required,
						parentSchema: O,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.mode) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "mode"
						},
						message: "must have required property 'mode'",
						schema: O.required,
						parentSchema: O,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: O.required,
						parentSchema: O,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: O.required,
						parentSchema: O,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.counter) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "counter"
						},
						message: "must have required property 'counter'",
						schema: O.required,
						parentSchema: O,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: O.required,
						parentSchema: O,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: O.required,
						parentSchema: O,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.interactionId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: O.required,
						parentSchema: O,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				for (var f in t)
					if (!i.call(O.properties, f)) {
						var v = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: f
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: O,
							data: t
						};
						null === s ? s = [v] : s.push(v), p++
					} if (void 0 !== t.spanSelectionLength) {
					var b = t.spanSelectionLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: O.properties.spanSelectionLength.type,
							parentSchema: O.properties.spanSelectionLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var S = t.isFirstEngagement;
					if ("boolean" !== typeof S) {
						var w = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: O.properties.isFirstEngagement.type,
							parentSchema: O.properties.isFirstEngagement,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.suggestionIndex) {
					var k = t.suggestionIndex;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/suggestionIndex",
							schemaPath: "#/properties/suggestionIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: O.properties.suggestionIndex.type,
							parentSchema: O.properties.suggestionIndex,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.duration) {
					var I = t.duration;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: O.properties.duration.type,
							parentSchema: O.properties.duration,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.mode) {
					var L = t.mode;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: O.properties.mode.type,
							parentSchema: O.properties.mode,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.platform) {
					var E = t.platform;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: O.properties.platform.type,
							parentSchema: O.properties.platform,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var D = t.spanSelectionHash;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: O.properties.spanSelectionHash.type,
							parentSchema: O.properties.spanSelectionHash,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.counter) {
					var j = t.counter;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/counter",
							schemaPath: "#/properties/counter/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: O.properties.counter.type,
							parentSchema: O.properties.counter,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var C = t.numOfSuggestions;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: O.properties.numOfSuggestions.type,
							parentSchema: O.properties.numOfSuggestions,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var H = t.contextLength;
					if ("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) {
						var R = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: O.properties.contextLength.type,
							parentSchema: O.properties.contextLength,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var M = t.interactionId;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: O.properties.interactionId.type,
							parentSchema: O.properties.interactionId,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.draftId) {
					var z = t.draftId;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: O.properties.draftId.type,
							parentSchema: O.properties.draftId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var B = t.caretLocation;
					if (!Array.isArray(B)) {
						var W = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: O.properties.caretLocation.type,
							parentSchema: O.properties.caretLocation,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.configString) {
					var V = t.configString;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: O.properties.configString.type
							},
							message: "must be string,null",
							schema: O.properties.configString.type,
							parentSchema: O.properties.configString,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.tabId) {
					var K = t.tabId;
					if (("number" != typeof K || K % 1 || isNaN(K) || !isFinite(K)) && null !== K) {
						var Q = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: O.properties.tabId.type
							},
							message: "must be integer,null",
							schema: O.properties.tabId.type,
							parentSchema: O.properties.tabId,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.app) {
					var Y = t.app;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: O.properties.app.type
							},
							message: "must be string,null",
							schema: O.properties.app.type,
							parentSchema: O.properties.app,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.host) {
					var X = t.host;
					if ("string" !== typeof X && null !== X) {
						var Z = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: O.properties.host.type
							},
							message: "must be string,null",
							schema: O.properties.host.type,
							parentSchema: O.properties.host,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
			} else {
				var ee = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: O.type,
					parentSchema: O,
					data: t
				};
				null === s ? s = [ee] : s.push(ee), p++
			}
			return e.errors = s, 0 === p
		};
		var O = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				suggestionIndex: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				counter: {
					type: "integer"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["suggestionIndex", "duration", "mode", "platform", "spanSelectionHash", "counter", "numOfSuggestions", "contextLength", "interactionId"],
			$id: "CasualSuggestionCopied",
			additionalProperties: !1
		};
		t.CasualSuggestionSelected = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.idx) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "idx"
						},
						message: "must have required property 'idx'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.total) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "total"
						},
						message: "must have required property 'total'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.mode) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "mode"
						},
						message: "must have required property 'mode'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isBatch) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isBatch"
						},
						message: "must have required property 'isBatch'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.contextLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.interactionId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.batchIndex) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchIndex"
						},
						message: "must have required property 'batchIndex'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: D.required,
						parentSchema: D,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(D.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: D,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.spanSelectionLength) {
					var S = t.spanSelectionLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: D.properties.spanSelectionLength.type,
							parentSchema: D.properties.spanSelectionLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.idx) {
					var k = t.idx;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/idx",
							schemaPath: "#/properties/idx/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: D.properties.idx.type,
							parentSchema: D.properties.idx,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.total) {
					var I = t.total;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/total",
							schemaPath: "#/properties/total/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: D.properties.total.type,
							parentSchema: D.properties.total,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.mode) {
					var L = t.mode;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: D.properties.mode.type,
							parentSchema: D.properties.mode,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.platform) {
					var E = t.platform;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: D.properties.platform.type,
							parentSchema: D.properties.platform,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var O = t.spanSelectionHash;
					if ("string" !== typeof O) {
						var T = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: D.properties.spanSelectionHash.type,
							parentSchema: D.properties.spanSelectionHash,
							data: O
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var j = t.isBatch;
					if ("boolean" !== typeof j) {
						var F = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: D.properties.isBatch.type,
							parentSchema: D.properties.isBatch,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var C = t.contextLength;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: D.properties.contextLength.type,
							parentSchema: D.properties.contextLength,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var H = t.interactionId;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: D.properties.interactionId.type,
							parentSchema: D.properties.interactionId,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var M = t.caretLocation;
					if (!Array.isArray(M)) {
						var $ = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: D.properties.caretLocation.type,
							parentSchema: D.properties.caretLocation,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var z = t.batchIndex;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: D.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: D.properties.batchIndex.type,
							parentSchema: D.properties.batchIndex,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var B = t.batchInteractionId;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: D.properties.batchInteractionId.type,
							parentSchema: D.properties.batchInteractionId,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.draftId) {
					var V = t.draftId;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: D.properties.draftId.type,
							parentSchema: D.properties.draftId,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var K = t.batchTotalSentences;
					if (("number" != typeof K || K % 1 || isNaN(K) || !isFinite(K)) && null !== K) {
						var Q = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: D.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: D.properties.batchTotalSentences.type,
							parentSchema: D.properties.batchTotalSentences,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var Y = t.isFirstEngagement;
					if ("boolean" !== typeof Y) {
						var J = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: D.properties.isFirstEngagement.type,
							parentSchema: D.properties.isFirstEngagement,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.configString) {
					var X = t.configString;
					if ("string" !== typeof X && null !== X) {
						var Z = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: D.properties.configString.type
							},
							message: "must be string,null",
							schema: D.properties.configString.type,
							parentSchema: D.properties.configString,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.tabId) {
					var ee = t.tabId;
					if (("number" != typeof ee || ee % 1 || isNaN(ee) || !isFinite(ee)) && null !== ee) {
						var te = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: D.properties.tabId.type
							},
							message: "must be integer,null",
							schema: D.properties.tabId.type,
							parentSchema: D.properties.tabId,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.app) {
					var re = t.app;
					if ("string" !== typeof re && null !== re) {
						var ae = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: D.properties.app.type
							},
							message: "must be string,null",
							schema: D.properties.app.type,
							parentSchema: D.properties.app,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.host) {
					var ne = t.host;
					if ("string" !== typeof ne && null !== ne) {
						var ie = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: D.properties.host.type
							},
							message: "must be string,null",
							schema: D.properties.host.type,
							parentSchema: D.properties.host,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
			} else {
				var se = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: D.type,
					parentSchema: D,
					data: t
				};
				null === s ? s = [se] : s.push(se), p++
			}
			return e.errors = s, 0 === p
		};
		var D = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				idx: {
					type: "integer"
				},
				total: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				batchInteractionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["idx", "total", "mode", "platform", "spanSelectionHash", "isBatch", "contextLength", "interactionId", "batchIndex", "draftId", "batchTotalSentences"],
			$id: "CasualSuggestionSelected",
			additionalProperties: !1
		};
		t.ChangePaymentMethodSuccess = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.customerId) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "customerId"
						},
						message: "must have required property 'customerId'",
						schema: T.required,
						parentSchema: T,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.paymentMethodId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "paymentMethodId"
						},
						message: "must have required property 'paymentMethodId'",
						schema: T.required,
						parentSchema: T,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("customerId" !== c && "paymentMethodId" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: T,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.customerId) {
					var u = t.customerId;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/customerId",
							schemaPath: "#/properties/customerId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: T.properties.customerId.type,
							parentSchema: T.properties.customerId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.paymentMethodId) {
					var d = t.paymentMethodId;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/paymentMethodId",
							schemaPath: "#/properties/paymentMethodId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: T.properties.paymentMethodId.type,
							parentSchema: T.properties.paymentMethodId,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: T.properties.configString.type
							},
							message: "must be string,null",
							schema: T.properties.configString.type,
							parentSchema: T.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: T.properties.tabId.type
							},
							message: "must be integer,null",
							schema: T.properties.tabId.type,
							parentSchema: T.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: T.properties.app.type
							},
							message: "must be string,null",
							schema: T.properties.app.type,
							parentSchema: T.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: T.properties.host.type
							},
							message: "must be string,null",
							schema: T.properties.host.type,
							parentSchema: T.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: T.type,
					parentSchema: T,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var T = {
			properties: {
				customerId: {
					type: "string"
				},
				paymentMethodId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["customerId", "paymentMethodId"],
			$id: "ChangePaymentMethodSuccess",
			additionalProperties: !1
		};
		t.ComposeClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: j.required,
						parentSchema: j,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: j.required,
						parentSchema: j,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.isWebsiteEnabled) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isWebsiteEnabled"
						},
						message: "must have required property 'isWebsiteEnabled'",
						schema: j.required,
						parentSchema: j,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: j.required,
						parentSchema: j,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.contextLength) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: j.required,
						parentSchema: j,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(j.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: j,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: j.properties.platform.type,
							parentSchema: j.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var f = t.spanSelectionHash;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: j.properties.spanSelectionHash.type,
							parentSchema: j.properties.spanSelectionHash,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.isWebsiteEnabled) {
					var b = t.isWebsiteEnabled;
					if ("boolean" !== typeof b) {
						var P = {
							instancePath: n + "/isWebsiteEnabled",
							schemaPath: "#/properties/isWebsiteEnabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: j.properties.isWebsiteEnabled.type,
							parentSchema: j.properties.isWebsiteEnabled,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var S = t.isFirstEngagement;
					if ("boolean" !== typeof S) {
						var w = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: j.properties.isFirstEngagement.type,
							parentSchema: j.properties.isFirstEngagement,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.draftId) {
					var k = t.draftId;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: j.properties.draftId.type,
							parentSchema: j.properties.draftId,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var I = t.contextLength;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: j.properties.contextLength.type,
							parentSchema: j.properties.contextLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var L = t.caretLocation;
					if (!Array.isArray(L)) {
						var x = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: j.properties.caretLocation.type,
							parentSchema: j.properties.caretLocation,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.configString) {
					var E = t.configString;
					if ("string" !== typeof E && null !== E) {
						var N = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: j.properties.configString.type
							},
							message: "must be string,null",
							schema: j.properties.configString.type,
							parentSchema: j.properties.configString,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.tabId) {
					var O = t.tabId;
					if (("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) && null !== O) {
						var D = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: j.properties.tabId.type
							},
							message: "must be integer,null",
							schema: j.properties.tabId.type,
							parentSchema: j.properties.tabId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.app) {
					var T = t.app;
					if ("string" !== typeof T && null !== T) {
						var F = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: j.properties.app.type
							},
							message: "must be string,null",
							schema: j.properties.app.type,
							parentSchema: j.properties.app,
							data: T
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.host) {
					var C = t.host;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: j.properties.host.type
							},
							message: "must be string,null",
							schema: j.properties.host.type,
							parentSchema: j.properties.host,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
			} else {
				var H = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: j.type,
					parentSchema: j,
					data: t
				};
				null === s ? s = [H] : s.push(H), p++
			}
			return e.errors = s, 0 === p
		};
		var j = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isWebsiteEnabled: {
					type: "boolean"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				draftId: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "isWebsiteEnabled", "draftId", "contextLength"],
			$id: "ComposeClosed",
			additionalProperties: !1
		};
		t.ComposeDiscarded = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.spanSelectionHash) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: F.required,
						parentSchema: F,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.draftId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: F.required,
						parentSchema: F,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("platform" !== c && "spanSelectionHash" !== c && "contextLength" !== c && "isWebsiteEnabled" !== c && "draftId" !== c && "caretLocation" !== c && "spanSelectionLength" !== c && "configString" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: F,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.platform) {
					var u = t.platform;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: F.properties.platform.type,
							parentSchema: F.properties.platform,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var d = t.spanSelectionHash;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: F.properties.spanSelectionHash.type,
							parentSchema: F.properties.spanSelectionHash,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.contextLength) {
					var y = t.contextLength;
					if ("number" != typeof y || y % 1 || isNaN(y) || !isFinite(y)) {
						var g = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: F.properties.contextLength.type,
							parentSchema: F.properties.contextLength,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.isWebsiteEnabled) {
					var f = t.isWebsiteEnabled;
					if ("boolean" !== typeof f) {
						var v = {
							instancePath: n + "/isWebsiteEnabled",
							schemaPath: "#/properties/isWebsiteEnabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: F.properties.isWebsiteEnabled.type,
							parentSchema: F.properties.isWebsiteEnabled,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.draftId) {
					var b = t.draftId;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: F.properties.draftId.type,
							parentSchema: F.properties.draftId,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.caretLocation) {
					var S = t.caretLocation;
					if (!Array.isArray(S)) {
						var w = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: F.properties.caretLocation.type,
							parentSchema: F.properties.caretLocation,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var k = t.spanSelectionLength;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: F.properties.spanSelectionLength.type,
							parentSchema: F.properties.spanSelectionLength,
							data: k
						};
						null === i ? i = [_] : i.push(_), s++
					}
				}
				if (void 0 !== t.configString) {
					var I = t.configString;
					if ("string" !== typeof I && null !== I) {
						var q = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: F.properties.configString.type
							},
							message: "must be string,null",
							schema: F.properties.configString.type,
							parentSchema: F.properties.configString,
							data: I
						};
						null === i ? i = [q] : i.push(q), s++
					}
				}
			} else {
				var L = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: F.type,
					parentSchema: F,
					data: t
				};
				null === i ? i = [L] : i.push(L), s++
			}
			return e.errors = i, 0 === s
		};
		var F = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				isWebsiteEnabled: {
					type: "boolean"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["spanSelectionHash", "draftId"],
			$id: "ComposeDiscarded",
			additionalProperties: !1
		};
		t.ComposeMinimized = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: C.required,
						parentSchema: C,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: C.required,
						parentSchema: C,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.isWebsiteEnabled) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isWebsiteEnabled"
						},
						message: "must have required property 'isWebsiteEnabled'",
						schema: C.required,
						parentSchema: C,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				for (var u in t)
					if (!i.call(C.properties, u)) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: u
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: C,
							data: t
						};
						null === s ? s = [m] : s.push(m), p++
					} if (void 0 !== t.platform) {
					var d = t.platform;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: C.properties.platform.type,
							parentSchema: C.properties.platform,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var y = t.spanSelectionHash;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: C.properties.spanSelectionHash.type,
							parentSchema: C.properties.spanSelectionHash,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.isWebsiteEnabled) {
					var f = t.isWebsiteEnabled;
					if ("boolean" !== typeof f) {
						var v = {
							instancePath: n + "/isWebsiteEnabled",
							schemaPath: "#/properties/isWebsiteEnabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: C.properties.isWebsiteEnabled.type,
							parentSchema: C.properties.isWebsiteEnabled,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var b = t.spanSelectionLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: C.properties.spanSelectionLength.type,
							parentSchema: C.properties.spanSelectionLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var S = t.contextLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: C.properties.contextLength.type,
							parentSchema: C.properties.contextLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.draftId) {
					var k = t.draftId;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: C.properties.draftId.type,
							parentSchema: C.properties.draftId,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var I = t.caretLocation;
					if (!Array.isArray(I)) {
						var q = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: C.properties.caretLocation.type,
							parentSchema: C.properties.caretLocation,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var L = t.isFirstEngagement;
					if ("boolean" !== typeof L) {
						var x = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: C.properties.isFirstEngagement.type,
							parentSchema: C.properties.isFirstEngagement,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.configString) {
					var E = t.configString;
					if ("string" !== typeof E && null !== E) {
						var N = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: C.properties.configString.type
							},
							message: "must be string,null",
							schema: C.properties.configString.type,
							parentSchema: C.properties.configString,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.tabId) {
					var O = t.tabId;
					if (("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) && null !== O) {
						var D = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: C.properties.tabId.type
							},
							message: "must be integer,null",
							schema: C.properties.tabId.type,
							parentSchema: C.properties.tabId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.app) {
					var T = t.app;
					if ("string" !== typeof T && null !== T) {
						var j = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: C.properties.app.type
							},
							message: "must be string,null",
							schema: C.properties.app.type,
							parentSchema: C.properties.app,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.host) {
					var F = t.host;
					if ("string" !== typeof F && null !== F) {
						var A = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: C.properties.host.type
							},
							message: "must be string,null",
							schema: C.properties.host.type,
							parentSchema: C.properties.host,
							data: F
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
			} else {
				var H = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: C.type,
					parentSchema: C,
					data: t
				};
				null === s ? s = [H] : s.push(H), p++
			}
			return e.errors = s, 0 === p
		};
		var C = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isWebsiteEnabled: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "isWebsiteEnabled"],
			$id: "ComposeMinimized",
			additionalProperties: !1
		};
		t.ComposeStarted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.draftId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: A.required,
						parentSchema: A,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				for (var c in t)
					if (!i.call(A.properties, c)) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: A,
							data: t
						};
						null === s ? s = [h] : s.push(h), p++
					} if (void 0 !== t.platform) {
					var u = t.platform;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.platform.type,
							parentSchema: A.properties.platform,
							data: u
						};
						null === s ? s = [m] : s.push(m), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var d = t.spanSelectionHash;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.spanSelectionHash.type,
							parentSchema: A.properties.spanSelectionHash,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.isCorrectionEnabled) {
					var y = t.isCorrectionEnabled;
					if ("boolean" !== typeof y) {
						var g = {
							instancePath: n + "/isCorrectionEnabled",
							schemaPath: "#/properties/isCorrectionEnabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: A.properties.isCorrectionEnabled.type,
							parentSchema: A.properties.isCorrectionEnabled,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.isGrammarlyIconShown) {
					var f = t.isGrammarlyIconShown;
					if ("boolean" !== typeof f) {
						var v = {
							instancePath: n + "/isGrammarlyIconShown",
							schemaPath: "#/properties/isGrammarlyIconShown/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: A.properties.isGrammarlyIconShown.type,
							parentSchema: A.properties.isGrammarlyIconShown,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.isWebsiteEnabled) {
					var b = t.isWebsiteEnabled;
					if ("boolean" !== typeof b) {
						var P = {
							instancePath: n + "/isWebsiteEnabled",
							schemaPath: "#/properties/isWebsiteEnabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: A.properties.isWebsiteEnabled.type,
							parentSchema: A.properties.isWebsiteEnabled,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.draftId) {
					var S = t.draftId;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.draftId.type,
							parentSchema: A.properties.draftId,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var k = t.caretLocation;
					if (!Array.isArray(k)) {
						var _ = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: A.properties.caretLocation.type,
							parentSchema: A.properties.caretLocation,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var I = t.isFirstEngagement;
					if ("boolean" !== typeof I) {
						var q = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: A.properties.isFirstEngagement.type,
							parentSchema: A.properties.isFirstEngagement,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var L = t.contextLength;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: A.properties.contextLength.type,
							parentSchema: A.properties.contextLength,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var E = t.spanSelectionLength;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: A.properties.spanSelectionLength.type,
							parentSchema: A.properties.spanSelectionLength,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.utm_source) {
					var O = t.utm_source;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.utm_source.type,
							parentSchema: A.properties.utm_source,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var T = t.ad_set_name;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.ad_set_name.type,
							parentSchema: A.properties.ad_set_name,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var F = t.utm_medium;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.utm_medium.type,
							parentSchema: A.properties.utm_medium,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.origin) {
					var H = t.origin;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.origin.type,
							parentSchema: A.properties.origin,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var M = t.utm_campaign;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.utm_campaign.type,
							parentSchema: A.properties.utm_campaign,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.gclid) {
					var z = t.gclid;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.gclid.type,
							parentSchema: A.properties.gclid,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var B = t.utm_term;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.utm_term.type,
							parentSchema: A.properties.utm_term,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.p) {
					var V = t.p;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.p.type,
							parentSchema: A.properties.p,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.gbraid) {
					var K = t.gbraid;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/gbraid",
							schemaPath: "#/properties/gbraid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.gbraid.type,
							parentSchema: A.properties.gbraid,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var Y = t.ad_name;
					if ("string" !== typeof Y) {
						var J = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.ad_name.type,
							parentSchema: A.properties.ad_name,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var X = t.fbclid;
					if ("string" !== typeof X) {
						var Z = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.fbclid.type,
							parentSchema: A.properties.fbclid,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.ref) {
					var ee = t.ref;
					if ("string" !== typeof ee) {
						var te = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.ref.type,
							parentSchema: A.properties.ref,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.ivk_sa) {
					var re = t.ivk_sa;
					if ("string" !== typeof re) {
						var ae = {
							instancePath: n + "/ivk_sa",
							schemaPath: "#/properties/ivk_sa/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.ivk_sa.type,
							parentSchema: A.properties.ivk_sa,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.msclkid) {
					var ne = t.msclkid;
					if ("string" !== typeof ne) {
						var ie = {
							instancePath: n + "/msclkid",
							schemaPath: "#/properties/msclkid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.msclkid.type,
							parentSchema: A.properties.msclkid,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.s) {
					var se = t.s;
					if ("string" !== typeof se) {
						var pe = {
							instancePath: n + "/s",
							schemaPath: "#/properties/s/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.s.type,
							parentSchema: A.properties.s,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
				if (void 0 !== t.fui) {
					var oe = t.fui;
					if ("string" !== typeof oe) {
						var ce = {
							instancePath: n + "/fui",
							schemaPath: "#/properties/fui/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.fui.type,
							parentSchema: A.properties.fui,
							data: oe
						};
						null === s ? s = [ce] : s.push(ce), p++
					}
				}
				if (void 0 !== t.ad_set_) {
					var he = t.ad_set_;
					if ("string" !== typeof he) {
						var ue = {
							instancePath: n + "/ad_set_",
							schemaPath: "#/properties/ad_set_/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.ad_set_.type,
							parentSchema: A.properties.ad_set_,
							data: he
						};
						null === s ? s = [ue] : s.push(ue), p++
					}
				}
				if (void 0 !== t.utm_campain) {
					var me = t.utm_campain;
					if ("string" !== typeof me) {
						var de = {
							instancePath: n + "/utm_campain",
							schemaPath: "#/properties/utm_campain/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.utm_campain.type,
							parentSchema: A.properties.utm_campain,
							data: me
						};
						null === s ? s = [de] : s.push(de), p++
					}
				}
				if (void 0 !== t.utm_content) {
					var le = t.utm_content;
					if ("string" !== typeof le) {
						var ye = {
							instancePath: n + "/utm_content",
							schemaPath: "#/properties/utm_content/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.utm_content.type,
							parentSchema: A.properties.utm_content,
							data: le
						};
						null === s ? s = [ye] : s.push(ye), p++
					}
				}
				if (void 0 !== t.path) {
					var ge = t.path;
					if ("string" !== typeof ge) {
						var fe = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: A.properties.path.type,
							parentSchema: A.properties.path,
							data: ge
						};
						null === s ? s = [fe] : s.push(fe), p++
					}
				}
				if (void 0 !== t.configString) {
					var ve = t.configString;
					if ("string" !== typeof ve && null !== ve) {
						var be = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: A.properties.configString.type
							},
							message: "must be string,null",
							schema: A.properties.configString.type,
							parentSchema: A.properties.configString,
							data: ve
						};
						null === s ? s = [be] : s.push(be), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Pe = t.tabId;
					if (("number" != typeof Pe || Pe % 1 || isNaN(Pe) || !isFinite(Pe)) && null !== Pe) {
						var Se = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: A.properties.tabId.type
							},
							message: "must be integer,null",
							schema: A.properties.tabId.type,
							parentSchema: A.properties.tabId,
							data: Pe
						};
						null === s ? s = [Se] : s.push(Se), p++
					}
				}
				if (void 0 !== t.app) {
					var we = t.app;
					if ("string" !== typeof we && null !== we) {
						var ke = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: A.properties.app.type
							},
							message: "must be string,null",
							schema: A.properties.app.type,
							parentSchema: A.properties.app,
							data: we
						};
						null === s ? s = [ke] : s.push(ke), p++
					}
				}
				if (void 0 !== t.host) {
					var _e = t.host;
					if ("string" !== typeof _e && null !== _e) {
						var Ie = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: A.properties.host.type
							},
							message: "must be string,null",
							schema: A.properties.host.type,
							parentSchema: A.properties.host,
							data: _e
						};
						null === s ? s = [Ie] : s.push(Ie), p++
					}
				}
			} else {
				var qe = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: A.type,
					parentSchema: A,
					data: t
				};
				null === s ? s = [qe] : s.push(qe), p++
			}
			return e.errors = s, 0 === p
		};
		var A = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isCorrectionEnabled: {
					type: "boolean"
				},
				isGrammarlyIconShown: {
					type: "boolean"
				},
				isWebsiteEnabled: {
					type: "boolean"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				spanSelectionLength: {
					type: "integer"
				},
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				utm_medium: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				p: {
					type: "string"
				},
				gbraid: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				fbclid: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				ivk_sa: {
					type: "string"
				},
				msclkid: {
					type: "string"
				},
				s: {
					type: "string"
				},
				fui: {
					type: "string"
				},
				ad_set_: {
					type: "string"
				},
				utm_campain: {
					type: "string"
				},
				utm_content: {
					type: "string"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["draftId"],
			$id: "ComposeStarted",
			additionalProperties: !1
		};
		t.configLastUpdateTime = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (!t || "object" != typeof t || Array.isArray(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: H.type,
					parentSchema: H,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var H = {
			type: "object",
			$id: "configLastUpdateTime"
		};
		t.ContinueWithEmailViewShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: R,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: R.properties.configString.type
							},
							message: "must be string,null",
							schema: R.properties.configString.type,
							parentSchema: R.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: R.properties.tabId.type
							},
							message: "must be integer,null",
							schema: R.properties.tabId.type,
							parentSchema: R.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: R.properties.app.type
							},
							message: "must be string,null",
							schema: R.properties.app.type,
							parentSchema: R.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: R.properties.host.type
							},
							message: "must be string,null",
							schema: R.properties.host.type,
							parentSchema: R.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: R.type,
					parentSchema: R,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var R = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "ContinueWithEmailViewShown",
			additionalProperties: !1
		};
		t.CopyAllPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: M.required,
						parentSchema: M,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: M.required,
						parentSchema: M,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.bodyLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "bodyLength"
						},
						message: "must have required property 'bodyLength'",
						schema: M.required,
						parentSchema: M,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.origin) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: M.required,
						parentSchema: M,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.contextLength) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: M.required,
						parentSchema: M,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.draftId) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: M.required,
						parentSchema: M,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.spanSelectionLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionLength"
						},
						message: "must have required property 'spanSelectionLength'",
						schema: M.required,
						parentSchema: M,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				for (var y in t)
					if (!i.call(M.properties, y)) {
						var g = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: y
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: M,
							data: t
						};
						null === s ? s = [g] : s.push(g), p++
					} if (void 0 !== t.platform) {
					var f = t.platform;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: M.properties.platform.type,
							parentSchema: M.properties.platform,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var b = t.spanSelectionHash;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: M.properties.spanSelectionHash.type,
							parentSchema: M.properties.spanSelectionHash,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.bodyLength) {
					var S = t.bodyLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/bodyLength",
							schemaPath: "#/properties/bodyLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: M.properties.bodyLength.type,
							parentSchema: M.properties.bodyLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.origin) {
					var k = t.origin;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: M.properties.origin.type,
							parentSchema: M.properties.origin,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var I = t.contextLength;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: M.properties.contextLength.type,
							parentSchema: M.properties.contextLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.draftId) {
					var L = t.draftId;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: M.properties.draftId.type,
							parentSchema: M.properties.draftId,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var E = t.caretLocation;
					if (!Array.isArray(E)) {
						var N = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: M.properties.caretLocation.type,
							parentSchema: M.properties.caretLocation,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var O = t.spanSelectionLength;
					if ("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) {
						var D = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: M.properties.spanSelectionLength.type,
							parentSchema: M.properties.spanSelectionLength,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.configString) {
					var T = t.configString;
					if ("string" !== typeof T && null !== T) {
						var j = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: M.properties.configString.type
							},
							message: "must be string,null",
							schema: M.properties.configString.type,
							parentSchema: M.properties.configString,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.tabId) {
					var F = t.tabId;
					if (("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) && null !== F) {
						var C = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: M.properties.tabId.type
							},
							message: "must be integer,null",
							schema: M.properties.tabId.type,
							parentSchema: M.properties.tabId,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.app) {
					var A = t.app;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: M.properties.app.type
							},
							message: "must be string,null",
							schema: M.properties.app.type,
							parentSchema: M.properties.app,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.host) {
					var R = t.host;
					if ("string" !== typeof R && null !== R) {
						var $ = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: M.properties.host.type
							},
							message: "must be string,null",
							schema: M.properties.host.type,
							parentSchema: M.properties.host,
							data: R
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
			} else {
				var z = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: M.type,
					parentSchema: M,
					data: t
				};
				null === s ? s = [z] : s.push(z), p++
			}
			return e.errors = s, 0 === p
		};
		var M = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				bodyLength: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "bodyLength", "origin", "contextLength", "draftId", "spanSelectionLength"],
			$id: "CopyAllPressed",
			additionalProperties: !1
		};
		t.CorrectionEnabled = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: $.required,
						parentSchema: $,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("origin" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: $,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.origin) {
					var h = t.origin;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: $.properties.origin.type,
							parentSchema: $.properties.origin,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: $.properties.configString.type
							},
							message: "must be string,null",
							schema: $.properties.configString.type,
							parentSchema: $.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: $.properties.tabId.type
							},
							message: "must be integer,null",
							schema: $.properties.tabId.type,
							parentSchema: $.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: $.properties.app.type
							},
							message: "must be string,null",
							schema: $.properties.app.type,
							parentSchema: $.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: $.properties.host.type
							},
							message: "must be string,null",
							schema: $.properties.host.type,
							parentSchema: $.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: $.type,
					parentSchema: $,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var $ = {
			properties: {
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "CorrectionEnabled",
			additionalProperties: !1
		};
		t.CorrectionErrorClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.isPhrase) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isPhrase"
						},
						message: "must have required property 'isPhrase'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.contextErrorIndex) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextErrorIndex"
						},
						message: "must have required property 'contextErrorIndex'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.duration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.type) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "type"
						},
						message: "must have required property 'type'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.interactionId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: z.required,
						parentSchema: z,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				for (var v in t)
					if (!i.call(z.properties, v)) {
						var b = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: v
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: z,
							data: t
						};
						null === s ? s = [b] : s.push(b), p++
					} if (void 0 !== t.isPhrase) {
					var P = t.isPhrase;
					if ("boolean" !== typeof P) {
						var S = {
							instancePath: n + "/isPhrase",
							schemaPath: "#/properties/isPhrase/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: z.properties.isPhrase.type,
							parentSchema: z.properties.isPhrase,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.contextErrorIndex) {
					var w = t.contextErrorIndex;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/contextErrorIndex",
							schemaPath: "#/properties/contextErrorIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: z.properties.contextErrorIndex.type,
							parentSchema: z.properties.contextErrorIndex,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.duration) {
					var _ = t.duration;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: z.properties.duration.type,
							parentSchema: z.properties.duration,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.platform) {
					var q = t.platform;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: z.properties.platform.type,
							parentSchema: z.properties.platform,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var x = t.spanSelectionHash;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: z.properties.spanSelectionHash.type,
							parentSchema: z.properties.spanSelectionHash,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.type) {
					var N = t.type;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/type",
							schemaPath: "#/properties/type/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: z.properties.type.type,
							parentSchema: z.properties.type,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var D = t.numOfSuggestions;
					if ("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) {
						var T = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: z.properties.numOfSuggestions.type,
							parentSchema: z.properties.numOfSuggestions,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var j = t.contextLength;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: z.properties.contextLength.type,
							parentSchema: z.properties.contextLength,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var C = t.interactionId;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: z.properties.interactionId.type,
							parentSchema: z.properties.interactionId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var H = t.caretLocation;
					if (!Array.isArray(H)) {
						var R = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: z.properties.caretLocation.type,
							parentSchema: z.properties.caretLocation,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.draftId) {
					var M = t.draftId;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: z.properties.draftId.type,
							parentSchema: z.properties.draftId,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var U = t.isFirstEngagement;
					if ("boolean" !== typeof U) {
						var B = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: z.properties.isFirstEngagement.type,
							parentSchema: z.properties.isFirstEngagement,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var W = t.spanSelectionLength;
					if ("number" != typeof W || W % 1 || isNaN(W) || !isFinite(W)) {
						var V = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: z.properties.spanSelectionLength.type,
							parentSchema: z.properties.spanSelectionLength,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.configString) {
					var G = t.configString;
					if ("string" !== typeof G && null !== G) {
						var K = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: z.properties.configString.type
							},
							message: "must be string,null",
							schema: z.properties.configString.type,
							parentSchema: z.properties.configString,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Q = t.tabId;
					if (("number" != typeof Q || Q % 1 || isNaN(Q) || !isFinite(Q)) && null !== Q) {
						var Y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: z.properties.tabId.type
							},
							message: "must be integer,null",
							schema: z.properties.tabId.type,
							parentSchema: z.properties.tabId,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.app) {
					var J = t.app;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: z.properties.app.type
							},
							message: "must be string,null",
							schema: z.properties.app.type,
							parentSchema: z.properties.app,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.host) {
					var Z = t.host;
					if ("string" !== typeof Z && null !== Z) {
						var ee = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: z.properties.host.type
							},
							message: "must be string,null",
							schema: z.properties.host.type,
							parentSchema: z.properties.host,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
			} else {
				var te = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: z.type,
					parentSchema: z,
					data: t
				};
				null === s ? s = [te] : s.push(te), p++
			}
			return e.errors = s, 0 === p
		};
		var z = {
			properties: {
				isPhrase: {
					type: "boolean"
				},
				contextErrorIndex: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				type: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["isPhrase", "contextErrorIndex", "duration", "platform", "spanSelectionHash", "type", "numOfSuggestions", "contextLength", "interactionId", "draftId"],
			$id: "CorrectionErrorClosed",
			additionalProperties: !1
		};
		t.CorrectionErrorIgnored = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.isPhrase) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isPhrase"
						},
						message: "must have required property 'isPhrase'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.contextErrorIndex) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextErrorIndex"
						},
						message: "must have required property 'contextErrorIndex'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.duration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.type) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "type"
						},
						message: "must have required property 'type'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.interactionId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: U.required,
						parentSchema: U,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				for (var v in t)
					if (!i.call(U.properties, v)) {
						var b = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: v
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: U,
							data: t
						};
						null === s ? s = [b] : s.push(b), p++
					} if (void 0 !== t.isPhrase) {
					var P = t.isPhrase;
					if ("boolean" !== typeof P) {
						var S = {
							instancePath: n + "/isPhrase",
							schemaPath: "#/properties/isPhrase/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: U.properties.isPhrase.type,
							parentSchema: U.properties.isPhrase,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.contextErrorIndex) {
					var w = t.contextErrorIndex;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/contextErrorIndex",
							schemaPath: "#/properties/contextErrorIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: U.properties.contextErrorIndex.type,
							parentSchema: U.properties.contextErrorIndex,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.duration) {
					var _ = t.duration;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: U.properties.duration.type,
							parentSchema: U.properties.duration,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.platform) {
					var q = t.platform;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: U.properties.platform.type,
							parentSchema: U.properties.platform,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var x = t.spanSelectionHash;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: U.properties.spanSelectionHash.type,
							parentSchema: U.properties.spanSelectionHash,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.type) {
					var N = t.type;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/type",
							schemaPath: "#/properties/type/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: U.properties.type.type,
							parentSchema: U.properties.type,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var D = t.numOfSuggestions;
					if ("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) {
						var T = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: U.properties.numOfSuggestions.type,
							parentSchema: U.properties.numOfSuggestions,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var j = t.contextLength;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: U.properties.contextLength.type,
							parentSchema: U.properties.contextLength,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var C = t.interactionId;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: U.properties.interactionId.type,
							parentSchema: U.properties.interactionId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.draftId) {
					var H = t.draftId;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: U.properties.draftId.type,
							parentSchema: U.properties.draftId,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var M = t.caretLocation;
					if (!Array.isArray(M)) {
						var $ = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: U.properties.caretLocation.type,
							parentSchema: U.properties.caretLocation,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var z = t.isFirstEngagement;
					if ("boolean" !== typeof z) {
						var B = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: U.properties.isFirstEngagement.type,
							parentSchema: U.properties.isFirstEngagement,
							data: z
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var W = t.spanSelectionLength;
					if ("number" != typeof W || W % 1 || isNaN(W) || !isFinite(W)) {
						var V = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: U.properties.spanSelectionLength.type,
							parentSchema: U.properties.spanSelectionLength,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.configString) {
					var G = t.configString;
					if ("string" !== typeof G && null !== G) {
						var K = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: U.properties.configString.type
							},
							message: "must be string,null",
							schema: U.properties.configString.type,
							parentSchema: U.properties.configString,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Q = t.tabId;
					if (("number" != typeof Q || Q % 1 || isNaN(Q) || !isFinite(Q)) && null !== Q) {
						var Y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: U.properties.tabId.type
							},
							message: "must be integer,null",
							schema: U.properties.tabId.type,
							parentSchema: U.properties.tabId,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.app) {
					var J = t.app;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: U.properties.app.type
							},
							message: "must be string,null",
							schema: U.properties.app.type,
							parentSchema: U.properties.app,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.host) {
					var Z = t.host;
					if ("string" !== typeof Z && null !== Z) {
						var ee = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: U.properties.host.type
							},
							message: "must be string,null",
							schema: U.properties.host.type,
							parentSchema: U.properties.host,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
			} else {
				var te = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: U.type,
					parentSchema: U,
					data: t
				};
				null === s ? s = [te] : s.push(te), p++
			}
			return e.errors = s, 0 === p
		};
		var U = {
			properties: {
				isPhrase: {
					type: "boolean"
				},
				contextErrorIndex: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				type: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["isPhrase", "contextErrorIndex", "duration", "platform", "spanSelectionHash", "type", "numOfSuggestions", "contextLength", "interactionId", "draftId"],
			$id: "CorrectionErrorIgnored",
			additionalProperties: !1
		};
		t.CorrectionErrorOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.isPhrase) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isPhrase"
						},
						message: "must have required property 'isPhrase'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.contextErrorIndex) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextErrorIndex"
						},
						message: "must have required property 'contextErrorIndex'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.type) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "type"
						},
						message: "must have required property 'type'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.origin) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.contextErrors) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextErrors"
						},
						message: "must have required property 'contextErrors'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.interactionId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.draftId) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: B.required,
						parentSchema: B,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(B.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: B,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.isFirstEngagement) {
					var S = t.isFirstEngagement;
					if ("boolean" !== typeof S) {
						var w = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: B.properties.isFirstEngagement.type,
							parentSchema: B.properties.isFirstEngagement,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.isPhrase) {
					var k = t.isPhrase;
					if ("boolean" !== typeof k) {
						var _ = {
							instancePath: n + "/isPhrase",
							schemaPath: "#/properties/isPhrase/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: B.properties.isPhrase.type,
							parentSchema: B.properties.isPhrase,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.contextErrorIndex) {
					var I = t.contextErrorIndex;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/contextErrorIndex",
							schemaPath: "#/properties/contextErrorIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: B.properties.contextErrorIndex.type,
							parentSchema: B.properties.contextErrorIndex,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.platform) {
					var L = t.platform;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: B.properties.platform.type,
							parentSchema: B.properties.platform,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var E = t.spanSelectionHash;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: B.properties.spanSelectionHash.type,
							parentSchema: B.properties.spanSelectionHash,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.type) {
					var O = t.type;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/type",
							schemaPath: "#/properties/type/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: B.properties.type.type,
							parentSchema: B.properties.type,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var T = t.numOfSuggestions;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: B.properties.numOfSuggestions.type,
							parentSchema: B.properties.numOfSuggestions,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.origin) {
					var F = t.origin;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: B.properties.origin.type,
							parentSchema: B.properties.origin,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var A = t.contextLength;
					if ("number" != typeof A || A % 1 || isNaN(A) || !isFinite(A)) {
						var H = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: B.properties.contextLength.type,
							parentSchema: B.properties.contextLength,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.contextErrors) {
					var R = t.contextErrors;
					if ("number" != typeof R || R % 1 || isNaN(R) || !isFinite(R)) {
						var M = {
							instancePath: n + "/contextErrors",
							schemaPath: "#/properties/contextErrors/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: B.properties.contextErrors.type,
							parentSchema: B.properties.contextErrors,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var $ = t.interactionId;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: B.properties.interactionId.type,
							parentSchema: B.properties.interactionId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var U = t.caretLocation;
					if (!Array.isArray(U)) {
						var W = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: B.properties.caretLocation.type,
							parentSchema: B.properties.caretLocation,
							data: U
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.draftId) {
					var V = t.draftId;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: B.properties.draftId.type,
							parentSchema: B.properties.draftId,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var K = t.spanSelectionLength;
					if ("number" != typeof K || K % 1 || isNaN(K) || !isFinite(K)) {
						var Q = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: B.properties.spanSelectionLength.type,
							parentSchema: B.properties.spanSelectionLength,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.configString) {
					var Y = t.configString;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: B.properties.configString.type
							},
							message: "must be string,null",
							schema: B.properties.configString.type,
							parentSchema: B.properties.configString,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.tabId) {
					var X = t.tabId;
					if (("number" != typeof X || X % 1 || isNaN(X) || !isFinite(X)) && null !== X) {
						var Z = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: B.properties.tabId.type
							},
							message: "must be integer,null",
							schema: B.properties.tabId.type,
							parentSchema: B.properties.tabId,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.app) {
					var ee = t.app;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: B.properties.app.type
							},
							message: "must be string,null",
							schema: B.properties.app.type,
							parentSchema: B.properties.app,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.host) {
					var re = t.host;
					if ("string" !== typeof re && null !== re) {
						var ae = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: B.properties.host.type
							},
							message: "must be string,null",
							schema: B.properties.host.type,
							parentSchema: B.properties.host,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
			} else {
				var ne = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: B.type,
					parentSchema: B,
					data: t
				};
				null === s ? s = [ne] : s.push(ne), p++
			}
			return e.errors = s, 0 === p
		};
		var B = {
			properties: {
				isFirstEngagement: {
					type: "boolean"
				},
				isPhrase: {
					type: "boolean"
				},
				contextErrorIndex: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				type: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				contextErrors: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["isPhrase", "contextErrorIndex", "platform", "spanSelectionHash", "type", "numOfSuggestions", "origin", "contextLength", "contextErrors", "interactionId", "draftId"],
			$id: "CorrectionErrorOpened",
			additionalProperties: !1
		};
		t.CorrectionErrorsShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: W.required,
						parentSchema: W,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: W.required,
						parentSchema: W,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.loadingDuration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: W.required,
						parentSchema: W,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: W.required,
						parentSchema: W,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.contextErrors) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextErrors"
						},
						message: "must have required property 'contextErrors'",
						schema: W.required,
						parentSchema: W,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.draftId) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: W.required,
						parentSchema: W,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				for (var l in t)
					if (!i.call(W.properties, l)) {
						var y = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: l
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: W,
							data: t
						};
						null === s ? s = [y] : s.push(y), p++
					} if (void 0 !== t.platform) {
					var g = t.platform;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: W.properties.platform.type,
							parentSchema: W.properties.platform,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var v = t.spanSelectionHash;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: W.properties.spanSelectionHash.type,
							parentSchema: W.properties.spanSelectionHash,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.loadingDuration) {
					var P = t.loadingDuration;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: W.properties.loadingDuration.type,
							parentSchema: W.properties.loadingDuration,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var w = t.contextLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: W.properties.contextLength.type,
							parentSchema: W.properties.contextLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.contextErrors) {
					var _ = t.contextErrors;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/contextErrors",
							schemaPath: "#/properties/contextErrors/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: W.properties.contextErrors.type,
							parentSchema: W.properties.contextErrors,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.draftId) {
					var q = t.draftId;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: W.properties.draftId.type,
							parentSchema: W.properties.draftId,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var x = t.caretLocation;
					if (!Array.isArray(x)) {
						var E = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: W.properties.caretLocation.type,
							parentSchema: W.properties.caretLocation,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var N = t.isFirstEngagement;
					if ("boolean" !== typeof N) {
						var O = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: W.properties.isFirstEngagement.type,
							parentSchema: W.properties.isFirstEngagement,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var D = t.spanSelectionLength;
					if ("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) {
						var T = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: W.properties.spanSelectionLength.type,
							parentSchema: W.properties.spanSelectionLength,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.configString) {
					var j = t.configString;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: W.properties.configString.type
							},
							message: "must be string,null",
							schema: W.properties.configString.type,
							parentSchema: W.properties.configString,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.tabId) {
					var C = t.tabId;
					if (("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) && null !== C) {
						var A = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: W.properties.tabId.type
							},
							message: "must be integer,null",
							schema: W.properties.tabId.type,
							parentSchema: W.properties.tabId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.app) {
					var H = t.app;
					if ("string" !== typeof H && null !== H) {
						var R = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: W.properties.app.type
							},
							message: "must be string,null",
							schema: W.properties.app.type,
							parentSchema: W.properties.app,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.host) {
					var M = t.host;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: W.properties.host.type
							},
							message: "must be string,null",
							schema: W.properties.host.type,
							parentSchema: W.properties.host,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
			} else {
				var z = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: W.type,
					parentSchema: W,
					data: t
				};
				null === s ? s = [z] : s.push(z), p++
			}
			return e.errors = s, 0 === p
		};
		var W = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				loadingDuration: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				contextErrors: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "loadingDuration", "contextLength", "contextErrors", "draftId"],
			$id: "CorrectionErrorsShown",
			additionalProperties: !1
		};
		t.CorrectionErrorSuggestionSelected = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.isPhrase) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isPhrase"
						},
						message: "must have required property 'isPhrase'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.contextErrorIndex) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextErrorIndex"
						},
						message: "must have required property 'contextErrorIndex'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.duration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.type) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "type"
						},
						message: "must have required property 'type'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.selectionIndex) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "selectionIndex"
						},
						message: "must have required property 'selectionIndex'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.interactionId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.draftId) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: V.required,
						parentSchema: V,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(V.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: V,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.isPhrase) {
					var S = t.isPhrase;
					if ("boolean" !== typeof S) {
						var w = {
							instancePath: n + "/isPhrase",
							schemaPath: "#/properties/isPhrase/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: V.properties.isPhrase.type,
							parentSchema: V.properties.isPhrase,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.contextErrorIndex) {
					var k = t.contextErrorIndex;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/contextErrorIndex",
							schemaPath: "#/properties/contextErrorIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: V.properties.contextErrorIndex.type,
							parentSchema: V.properties.contextErrorIndex,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.duration) {
					var I = t.duration;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: V.properties.duration.type,
							parentSchema: V.properties.duration,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.platform) {
					var L = t.platform;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: V.properties.platform.type,
							parentSchema: V.properties.platform,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var E = t.spanSelectionHash;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: V.properties.spanSelectionHash.type,
							parentSchema: V.properties.spanSelectionHash,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.type) {
					var O = t.type;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/type",
							schemaPath: "#/properties/type/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: V.properties.type.type,
							parentSchema: V.properties.type,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var T = t.numOfSuggestions;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: V.properties.numOfSuggestions.type,
							parentSchema: V.properties.numOfSuggestions,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var F = t.contextLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: V.properties.contextLength.type,
							parentSchema: V.properties.contextLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.selectionIndex) {
					var A = t.selectionIndex;
					if ("number" != typeof A || A % 1 || isNaN(A) || !isFinite(A)) {
						var H = {
							instancePath: n + "/selectionIndex",
							schemaPath: "#/properties/selectionIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: V.properties.selectionIndex.type,
							parentSchema: V.properties.selectionIndex,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var R = t.interactionId;
					if ("string" !== typeof R) {
						var M = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: V.properties.interactionId.type,
							parentSchema: V.properties.interactionId,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.draftId) {
					var $ = t.draftId;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: V.properties.draftId.type,
							parentSchema: V.properties.draftId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var U = t.caretLocation;
					if (!Array.isArray(U)) {
						var B = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: V.properties.caretLocation.type,
							parentSchema: V.properties.caretLocation,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var W = t.isFirstEngagement;
					if ("boolean" !== typeof W) {
						var G = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: V.properties.isFirstEngagement.type,
							parentSchema: V.properties.isFirstEngagement,
							data: W
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var K = t.spanSelectionLength;
					if ("number" != typeof K || K % 1 || isNaN(K) || !isFinite(K)) {
						var Q = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: V.properties.spanSelectionLength.type,
							parentSchema: V.properties.spanSelectionLength,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.configString) {
					var Y = t.configString;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: V.properties.configString.type
							},
							message: "must be string,null",
							schema: V.properties.configString.type,
							parentSchema: V.properties.configString,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.tabId) {
					var X = t.tabId;
					if (("number" != typeof X || X % 1 || isNaN(X) || !isFinite(X)) && null !== X) {
						var Z = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: V.properties.tabId.type
							},
							message: "must be integer,null",
							schema: V.properties.tabId.type,
							parentSchema: V.properties.tabId,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.app) {
					var ee = t.app;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: V.properties.app.type
							},
							message: "must be string,null",
							schema: V.properties.app.type,
							parentSchema: V.properties.app,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.host) {
					var re = t.host;
					if ("string" !== typeof re && null !== re) {
						var ae = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: V.properties.host.type
							},
							message: "must be string,null",
							schema: V.properties.host.type,
							parentSchema: V.properties.host,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
			} else {
				var ne = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: V.type,
					parentSchema: V,
					data: t
				};
				null === s ? s = [ne] : s.push(ne), p++
			}
			return e.errors = s, 0 === p
		};
		var V = {
			properties: {
				isPhrase: {
					type: "boolean"
				},
				contextErrorIndex: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				type: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				selectionIndex: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["isPhrase", "contextErrorIndex", "duration", "platform", "spanSelectionHash", "type", "numOfSuggestions", "contextLength", "selectionIndex", "interactionId", "draftId"],
			$id: "CorrectionErrorSuggestionSelected",
			additionalProperties: !1
		};
		t.CorrectionFoundErrorPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: G.required,
						parentSchema: G,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: G.required,
						parentSchema: G,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.totalLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "totalLength"
						},
						message: "must have required property 'totalLength'",
						schema: G.required,
						parentSchema: G,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.totalErrors) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "totalErrors"
						},
						message: "must have required property 'totalErrors'",
						schema: G.required,
						parentSchema: G,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.origin) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: G.required,
						parentSchema: G,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: G.required,
						parentSchema: G,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.draftId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: G.required,
						parentSchema: G,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.caretLocation) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "caretLocation"
						},
						message: "must have required property 'caretLocation'",
						schema: G.required,
						parentSchema: G,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(G.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: G,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: G.properties.spanSelectionLength.type,
							parentSchema: G.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.platform) {
					var P = t.platform;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: G.properties.platform.type,
							parentSchema: G.properties.platform,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var w = t.spanSelectionHash;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: G.properties.spanSelectionHash.type,
							parentSchema: G.properties.spanSelectionHash,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.totalLength) {
					var _ = t.totalLength;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/totalLength",
							schemaPath: "#/properties/totalLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: G.properties.totalLength.type,
							parentSchema: G.properties.totalLength,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.totalErrors) {
					var q = t.totalErrors;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/totalErrors",
							schemaPath: "#/properties/totalErrors/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: G.properties.totalErrors.type,
							parentSchema: G.properties.totalErrors,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.origin) {
					var x = t.origin;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: G.properties.origin.type,
							parentSchema: G.properties.origin,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var N = t.contextLength;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: G.properties.contextLength.type,
							parentSchema: G.properties.contextLength,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.draftId) {
					var D = t.draftId;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: G.properties.draftId.type,
							parentSchema: G.properties.draftId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var j = t.caretLocation;
					if (!Array.isArray(j)) {
						var F = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: G.properties.caretLocation.type,
							parentSchema: G.properties.caretLocation,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.configString) {
					var C = t.configString;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: G.properties.configString.type
							},
							message: "must be string,null",
							schema: G.properties.configString.type,
							parentSchema: G.properties.configString,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.tabId) {
					var H = t.tabId;
					if (("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) && null !== H) {
						var R = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: G.properties.tabId.type
							},
							message: "must be integer,null",
							schema: G.properties.tabId.type,
							parentSchema: G.properties.tabId,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.app) {
					var M = t.app;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: G.properties.app.type
							},
							message: "must be string,null",
							schema: G.properties.app.type,
							parentSchema: G.properties.app,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.host) {
					var z = t.host;
					if ("string" !== typeof z && null !== z) {
						var U = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: G.properties.host.type
							},
							message: "must be string,null",
							schema: G.properties.host.type,
							parentSchema: G.properties.host,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
			} else {
				var B = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: G.type,
					parentSchema: G,
					data: t
				};
				null === s ? s = [B] : s.push(B), p++
			}
			return e.errors = s, 0 === p
		};
		var G = {
			properties: {
				spanSelectionLength: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				totalLength: {
					type: "integer"
				},
				totalErrors: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "totalLength", "totalErrors", "origin", "contextLength", "draftId", "caretLocation"],
			$id: "CorrectionFoundErrorPressed",
			additionalProperties: !1
		};
		t.CorrectionSuspended = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: K.required,
						parentSchema: K,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("origin" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: K,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.origin) {
					var h = t.origin;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: K.properties.origin.type,
							parentSchema: K.properties.origin,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: K.properties.configString.type
							},
							message: "must be string,null",
							schema: K.properties.configString.type,
							parentSchema: K.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: K.properties.tabId.type
							},
							message: "must be integer,null",
							schema: K.properties.tabId.type,
							parentSchema: K.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: K.properties.app.type
							},
							message: "must be string,null",
							schema: K.properties.app.type,
							parentSchema: K.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: K.properties.host.type
							},
							message: "must be string,null",
							schema: K.properties.host.type,
							parentSchema: K.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: K.type,
					parentSchema: K,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var K = {
			properties: {
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "CorrectionSuspended",
			additionalProperties: !1
		};
		t.currentConfig = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t && null !== t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: Q.type
					},
					message: "must be string,null",
					schema: Q.type,
					parentSchema: Q,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Q = {
			type: ["string", "null"],
			$id: "currentConfig"
		};
		t.currentExperiment = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t && null !== t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: Y.type
					},
					message: "must be string,null",
					schema: Y.type,
					parentSchema: Y,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Y = {
			type: ["string", "null"],
			$id: "currentExperiment"
		};
		t.currentExperimentVariant = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t && null !== t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: J.type
					},
					message: "must be string,null",
					schema: J.type,
					parentSchema: J,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var J = {
			type: ["string", "null"],
			$id: "currentExperimentVariant"
		};
		t.currentMemberSegment = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: X.type,
					parentSchema: X,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var X = {
			type: "string",
			$id: "currentMemberSegment"
		};
		t.currentVersion = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Z.type,
					parentSchema: Z,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Z = {
			type: "string",
			$id: "currentVersion"
		};
		t.daysUntilRenewal = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: ee.type,
					parentSchema: ee,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ee = {
			type: "integer",
			$id: "daysUntilRenewal"
		};
		t.disabledWebsitesList = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (!Array.isArray(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "array"
					},
					message: "must be array",
					schema: te.type,
					parentSchema: te,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var te = {
			type: "array",
			$id: "disabledWebsitesList"
		};
		t.DocumentMetadataSent = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: re.required,
						parentSchema: re,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: re.required,
						parentSchema: re,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.delay) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "delay"
						},
						message: "must have required property 'delay'",
						schema: re.required,
						parentSchema: re,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.numOfPages) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfPages"
						},
						message: "must have required property 'numOfPages'",
						schema: re.required,
						parentSchema: re,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.draftId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: re.required,
						parentSchema: re,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(re.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: re,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: re.properties.platform.type,
							parentSchema: re.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var f = t.spanSelectionHash;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: re.properties.spanSelectionHash.type,
							parentSchema: re.properties.spanSelectionHash,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var b = t.spanSelectionLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: re.properties.spanSelectionLength.type,
							parentSchema: re.properties.spanSelectionLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var S = t.contextLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: re.properties.contextLength.type,
							parentSchema: re.properties.contextLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.delay) {
					var k = t.delay;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/delay",
							schemaPath: "#/properties/delay/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: re.properties.delay.type,
							parentSchema: re.properties.delay,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.numOfPages) {
					var I = t.numOfPages;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/numOfPages",
							schemaPath: "#/properties/numOfPages/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: re.properties.numOfPages.type,
							parentSchema: re.properties.numOfPages,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.draftId) {
					var L = t.draftId;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: re.properties.draftId.type,
							parentSchema: re.properties.draftId,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var E = t.caretLocation;
					if (!Array.isArray(E)) {
						var N = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: re.properties.caretLocation.type,
							parentSchema: re.properties.caretLocation,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.configString) {
					var O = t.configString;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: re.properties.configString.type
							},
							message: "must be string,null",
							schema: re.properties.configString.type,
							parentSchema: re.properties.configString,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.tabId) {
					var T = t.tabId;
					if (("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) && null !== T) {
						var j = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: re.properties.tabId.type
							},
							message: "must be integer,null",
							schema: re.properties.tabId.type,
							parentSchema: re.properties.tabId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.app) {
					var F = t.app;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: re.properties.app.type
							},
							message: "must be string,null",
							schema: re.properties.app.type,
							parentSchema: re.properties.app,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.host) {
					var A = t.host;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: re.properties.host.type
							},
							message: "must be string,null",
							schema: re.properties.host.type,
							parentSchema: re.properties.host,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var R = t.isFirstEngagement;
					if ("boolean" !== typeof R) {
						var M = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: re.properties.isFirstEngagement.type,
							parentSchema: re.properties.isFirstEngagement,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
			} else {
				var $ = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: re.type,
					parentSchema: re,
					data: t
				};
				null === s ? s = [$] : s.push($), p++
			}
			return e.errors = s, 0 === p
		};
		var re = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				delay: {
					type: "integer"
				},
				numOfPages: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				},
				isFirstEngagement: {
					type: "boolean"
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "delay", "numOfPages", "draftId"],
			$id: "DocumentMetadataSent",
			additionalProperties: !1
		};
		t.EditorCTAPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.referer) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "referer"
						},
						message: "must have required property 'referer'",
						schema: ae.required,
						parentSchema: ae,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("path" !== o && "referer" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ae,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.path) {
					var h = t.path;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ae.properties.path.type,
							parentSchema: ae.properties.path,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.referer) {
					var m = t.referer;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/referer",
							schemaPath: "#/properties/referer/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ae.properties.referer.type,
							parentSchema: ae.properties.referer,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.configString) {
					var l = t.configString;
					if ("string" !== typeof l && null !== l) {
						var y = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ae.properties.configString.type
							},
							message: "must be string,null",
							schema: ae.properties.configString.type,
							parentSchema: ae.properties.configString,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.tabId) {
					var g = t.tabId;
					if (("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) && null !== g) {
						var f = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ae.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ae.properties.tabId.type,
							parentSchema: ae.properties.tabId,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.app) {
					var v = t.app;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ae.properties.app.type
							},
							message: "must be string,null",
							schema: ae.properties.app.type,
							parentSchema: ae.properties.app,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.host) {
					var P = t.host;
					if ("string" !== typeof P && null !== P) {
						var S = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ae.properties.host.type
							},
							message: "must be string,null",
							schema: ae.properties.host.type,
							parentSchema: ae.properties.host,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
			} else {
				var w = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ae.type,
					parentSchema: ae,
					data: t
				};
				null === i ? i = [w] : i.push(w), s++
			}
			return e.errors = i, 0 === s
		};
		var ae = {
			properties: {
				path: {
					type: "string"
				},
				referer: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["referer"],
			$id: "EditorCTAPressed",
			additionalProperties: !1
		};
		t.EditorPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ne.required,
						parentSchema: ne,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.isSupportedHost) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isSupportedHost"
						},
						message: "must have required property 'isSupportedHost'",
						schema: ne.required,
						parentSchema: ne,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("origin" !== c && "isSupportedHost" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ne,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.origin) {
					var u = t.origin;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ne.properties.origin.type,
							parentSchema: ne.properties.origin,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.isSupportedHost) {
					var d = t.isSupportedHost;
					if ("boolean" !== typeof d) {
						var l = {
							instancePath: n + "/isSupportedHost",
							schemaPath: "#/properties/isSupportedHost/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ne.properties.isSupportedHost.type,
							parentSchema: ne.properties.isSupportedHost,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ne.properties.configString.type
							},
							message: "must be string,null",
							schema: ne.properties.configString.type,
							parentSchema: ne.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ne.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ne.properties.tabId.type,
							parentSchema: ne.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ne.properties.app.type
							},
							message: "must be string,null",
							schema: ne.properties.app.type,
							parentSchema: ne.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ne.properties.host.type
							},
							message: "must be string,null",
							schema: ne.properties.host.type,
							parentSchema: ne.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ne.type,
					parentSchema: ne,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var ne = {
			properties: {
				origin: {
					type: "string"
				},
				isSupportedHost: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin", "isSupportedHost"],
			$id: "EditorPressed",
			additionalProperties: !1
		};
		t.emailHash = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: ie.type,
					parentSchema: ie,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ie = {
			type: "string",
			$id: "emailHash"
		};
		t.EmailSent = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.emailLength) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "emailLength"
						},
						message: "must have required property 'emailLength'",
						schema: se.required,
						parentSchema: se,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.platform) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: se.required,
						parentSchema: se,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: se.required,
						parentSchema: se,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.subjectLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "subjectLength"
						},
						message: "must have required property 'subjectLength'",
						schema: se.required,
						parentSchema: se,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.numSelections) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numSelections"
						},
						message: "must have required property 'numSelections'",
						schema: se.required,
						parentSchema: se,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.numTo) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numTo"
						},
						message: "must have required property 'numTo'",
						schema: se.required,
						parentSchema: se,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.isWebsiteEnabled) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isWebsiteEnabled"
						},
						message: "must have required property 'isWebsiteEnabled'",
						schema: se.required,
						parentSchema: se,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.numCc) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numCc"
						},
						message: "must have required property 'numCc'",
						schema: se.required,
						parentSchema: se,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(se.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: se,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.emailLength) {
					var v = t.emailLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/emailLength",
							schemaPath: "#/properties/emailLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: se.properties.emailLength.type,
							parentSchema: se.properties.emailLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.platform) {
					var P = t.platform;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: se.properties.platform.type,
							parentSchema: se.properties.platform,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var w = t.spanSelectionHash;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: se.properties.spanSelectionHash.type,
							parentSchema: se.properties.spanSelectionHash,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.subjectLength) {
					var _ = t.subjectLength;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/subjectLength",
							schemaPath: "#/properties/subjectLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: se.properties.subjectLength.type,
							parentSchema: se.properties.subjectLength,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.numSelections) {
					var q = t.numSelections;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/numSelections",
							schemaPath: "#/properties/numSelections/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: se.properties.numSelections.type,
							parentSchema: se.properties.numSelections,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.numTo) {
					var x = t.numTo;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/numTo",
							schemaPath: "#/properties/numTo/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: se.properties.numTo.type,
							parentSchema: se.properties.numTo,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var N = t.contextLength;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: se.properties.contextLength.type,
							parentSchema: se.properties.contextLength,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isWebsiteEnabled) {
					var D = t.isWebsiteEnabled;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isWebsiteEnabled",
							schemaPath: "#/properties/isWebsiteEnabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: se.properties.isWebsiteEnabled.type,
							parentSchema: se.properties.isWebsiteEnabled,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.numCc) {
					var j = t.numCc;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/numCc",
							schemaPath: "#/properties/numCc/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: se.properties.numCc.type,
							parentSchema: se.properties.numCc,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.draftId) {
					var C = t.draftId;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: se.properties.draftId.type,
							parentSchema: se.properties.draftId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var H = t.caretLocation;
					if (!Array.isArray(H)) {
						var R = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: se.properties.caretLocation.type,
							parentSchema: se.properties.caretLocation,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var M = t.spanSelectionLength;
					if ("number" != typeof M || M % 1 || isNaN(M) || !isFinite(M)) {
						var $ = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: se.properties.spanSelectionLength.type,
							parentSchema: se.properties.spanSelectionLength,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var z = t.isFirstEngagement;
					if ("boolean" !== typeof z) {
						var U = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: se.properties.isFirstEngagement.type,
							parentSchema: se.properties.isFirstEngagement,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.configString) {
					var B = t.configString;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: se.properties.configString.type
							},
							message: "must be string,null",
							schema: se.properties.configString.type,
							parentSchema: se.properties.configString,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.tabId) {
					var V = t.tabId;
					if (("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) && null !== V) {
						var G = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: se.properties.tabId.type
							},
							message: "must be integer,null",
							schema: se.properties.tabId.type,
							parentSchema: se.properties.tabId,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.app) {
					var K = t.app;
					if ("string" !== typeof K && null !== K) {
						var Q = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: se.properties.app.type
							},
							message: "must be string,null",
							schema: se.properties.app.type,
							parentSchema: se.properties.app,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.host) {
					var Y = t.host;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: se.properties.host.type
							},
							message: "must be string,null",
							schema: se.properties.host.type,
							parentSchema: se.properties.host,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
			} else {
				var X = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: se.type,
					parentSchema: se,
					data: t
				};
				null === s ? s = [X] : s.push(X), p++
			}
			return e.errors = s, 0 === p
		};
		var se = {
			properties: {
				emailLength: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				subjectLength: {
					type: "integer"
				},
				numSelections: {
					type: "integer"
				},
				numTo: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				isWebsiteEnabled: {
					type: "boolean"
				},
				numCc: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["emailLength", "platform", "spanSelectionHash", "subjectLength", "numSelections", "numTo", "isWebsiteEnabled", "numCc"],
			$id: "EmailSent",
			additionalProperties: !1
		};
		t.ExpandClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.randomizedSuggestions) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: pe.required,
						parentSchema: pe,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: pe.required,
						parentSchema: pe,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: pe.required,
						parentSchema: pe,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: pe.required,
						parentSchema: pe,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.origin) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: pe.required,
						parentSchema: pe,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: pe.required,
						parentSchema: pe,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.interactionId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: pe.required,
						parentSchema: pe,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				for (var y in t)
					if (!i.call(pe.properties, y)) {
						var g = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: y
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: pe,
							data: t
						};
						null === s ? s = [g] : s.push(g), p++
					} if (void 0 !== t.randomizedSuggestions) {
					var f = t.randomizedSuggestions;
					if ("boolean" !== typeof f) {
						var v = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: pe.properties.randomizedSuggestions.type,
							parentSchema: pe.properties.randomizedSuggestions,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.duration) {
					var b = t.duration;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pe.properties.duration.type,
							parentSchema: pe.properties.duration,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.platform) {
					var S = t.platform;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pe.properties.platform.type,
							parentSchema: pe.properties.platform,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var k = t.spanSelectionHash;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pe.properties.spanSelectionHash.type,
							parentSchema: pe.properties.spanSelectionHash,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.origin) {
					var I = t.origin;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pe.properties.origin.type,
							parentSchema: pe.properties.origin,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var L = t.contextLength;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pe.properties.contextLength.type,
							parentSchema: pe.properties.contextLength,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var E = t.interactionId;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pe.properties.interactionId.type,
							parentSchema: pe.properties.interactionId,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.draftId) {
					var O = t.draftId;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pe.properties.draftId.type,
							parentSchema: pe.properties.draftId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var T = t.caretLocation;
					if (!Array.isArray(T)) {
						var j = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: pe.properties.caretLocation.type,
							parentSchema: pe.properties.caretLocation,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var F = t.spanSelectionLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pe.properties.spanSelectionLength.type,
							parentSchema: pe.properties.spanSelectionLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var A = t.isFirstEngagement;
					if ("boolean" !== typeof A) {
						var H = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: pe.properties.isFirstEngagement.type,
							parentSchema: pe.properties.isFirstEngagement,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.configString) {
					var R = t.configString;
					if ("string" !== typeof R && null !== R) {
						var M = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: pe.properties.configString.type
							},
							message: "must be string,null",
							schema: pe.properties.configString.type,
							parentSchema: pe.properties.configString,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.tabId) {
					var $ = t.tabId;
					if (("number" != typeof $ || $ % 1 || isNaN($) || !isFinite($)) && null !== $) {
						var z = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: pe.properties.tabId.type
							},
							message: "must be integer,null",
							schema: pe.properties.tabId.type,
							parentSchema: pe.properties.tabId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.app) {
					var U = t.app;
					if ("string" !== typeof U && null !== U) {
						var B = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: pe.properties.app.type
							},
							message: "must be string,null",
							schema: pe.properties.app.type,
							parentSchema: pe.properties.app,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.host) {
					var W = t.host;
					if ("string" !== typeof W && null !== W) {
						var V = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: pe.properties.host.type
							},
							message: "must be string,null",
							schema: pe.properties.host.type,
							parentSchema: pe.properties.host,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
			} else {
				var G = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: pe.type,
					parentSchema: pe,
					data: t
				};
				null === s ? s = [G] : s.push(G), p++
			}
			return e.errors = s, 0 === p
		};
		var pe = {
			properties: {
				randomizedSuggestions: {
					type: "boolean"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["randomizedSuggestions", "duration", "platform", "spanSelectionHash", "origin", "contextLength", "interactionId"],
			$id: "ExpandClosed",
			additionalProperties: !1
		};
		t.ExpandError = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: oe.required,
						parentSchema: oe,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: oe.required,
						parentSchema: oe,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.loadingDuration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: oe.required,
						parentSchema: oe,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: oe.required,
						parentSchema: oe,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.draftId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: oe.required,
						parentSchema: oe,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.errorMsg) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "errorMsg"
						},
						message: "must have required property 'errorMsg'",
						schema: oe.required,
						parentSchema: oe,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.errorCode) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "errorCode"
						},
						message: "must have required property 'errorCode'",
						schema: oe.required,
						parentSchema: oe,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.interactionId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: oe.required,
						parentSchema: oe,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(oe.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: oe,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.platform) {
					var v = t.platform;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oe.properties.platform.type,
							parentSchema: oe.properties.platform,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var P = t.spanSelectionHash;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oe.properties.spanSelectionHash.type,
							parentSchema: oe.properties.spanSelectionHash,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var w = t.spanSelectionLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: oe.properties.spanSelectionLength.type,
							parentSchema: oe.properties.spanSelectionLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.loadingDuration) {
					var _ = t.loadingDuration;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: oe.properties.loadingDuration.type,
							parentSchema: oe.properties.loadingDuration,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var q = t.contextLength;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: oe.properties.contextLength.type,
							parentSchema: oe.properties.contextLength,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.draftId) {
					var x = t.draftId;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oe.properties.draftId.type,
							parentSchema: oe.properties.draftId,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var N = t.caretLocation;
					if (!Array.isArray(N)) {
						var O = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: oe.properties.caretLocation.type,
							parentSchema: oe.properties.caretLocation,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.errorMsg) {
					var D = t.errorMsg;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/errorMsg",
							schemaPath: "#/properties/errorMsg/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oe.properties.errorMsg.type,
							parentSchema: oe.properties.errorMsg,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.errorCode) {
					var j = t.errorCode;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/errorCode",
							schemaPath: "#/properties/errorCode/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: oe.properties.errorCode.type,
							parentSchema: oe.properties.errorCode,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var C = t.interactionId;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oe.properties.interactionId.type,
							parentSchema: oe.properties.interactionId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var H = t.isFirstEngagement;
					if ("boolean" !== typeof H) {
						var R = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: oe.properties.isFirstEngagement.type,
							parentSchema: oe.properties.isFirstEngagement,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.configString) {
					var M = t.configString;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: oe.properties.configString.type
							},
							message: "must be string,null",
							schema: oe.properties.configString.type,
							parentSchema: oe.properties.configString,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.tabId) {
					var z = t.tabId;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: oe.properties.tabId.type
							},
							message: "must be integer,null",
							schema: oe.properties.tabId.type,
							parentSchema: oe.properties.tabId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.app) {
					var B = t.app;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: oe.properties.app.type
							},
							message: "must be string,null",
							schema: oe.properties.app.type,
							parentSchema: oe.properties.app,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.host) {
					var V = t.host;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: oe.properties.host.type
							},
							message: "must be string,null",
							schema: oe.properties.host.type,
							parentSchema: oe.properties.host,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
			} else {
				var K = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: oe.type,
					parentSchema: oe,
					data: t
				};
				null === s ? s = [K] : s.push(K), p++
			}
			return e.errors = s, 0 === p
		};
		var oe = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				loadingDuration: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				errorMsg: {
					type: "string"
				},
				errorCode: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "loadingDuration", "contextLength", "draftId", "errorMsg", "errorCode", "interactionId"],
			$id: "ExpandError",
			additionalProperties: !1
		};
		t.ExpandFetchStarted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: ce.required,
						parentSchema: ce,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: ce.required,
						parentSchema: ce,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ce.required,
						parentSchema: ce,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ce.required,
						parentSchema: ce,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(ce.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ce,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ce.properties.platform.type,
							parentSchema: ce.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ce.properties.spanSelectionHash.type,
							parentSchema: ce.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.origin) {
					var v = t.origin;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ce.properties.origin.type,
							parentSchema: ce.properties.origin,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var P = t.contextLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ce.properties.contextLength.type,
							parentSchema: ce.properties.contextLength,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.draftId) {
					var w = t.draftId;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ce.properties.draftId.type,
							parentSchema: ce.properties.draftId,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var _ = t.caretLocation;
					if (!Array.isArray(_)) {
						var I = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ce.properties.caretLocation.type,
							parentSchema: ce.properties.caretLocation,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var q = t.spanSelectionLength;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ce.properties.spanSelectionLength.type,
							parentSchema: ce.properties.spanSelectionLength,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var x = t.isFirstEngagement;
					if ("boolean" !== typeof x) {
						var E = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ce.properties.isFirstEngagement.type,
							parentSchema: ce.properties.isFirstEngagement,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.configString) {
					var N = t.configString;
					if ("string" !== typeof N && null !== N) {
						var O = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ce.properties.configString.type
							},
							message: "must be string,null",
							schema: ce.properties.configString.type,
							parentSchema: ce.properties.configString,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.tabId) {
					var D = t.tabId;
					if (("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) && null !== D) {
						var T = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ce.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ce.properties.tabId.type,
							parentSchema: ce.properties.tabId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.app) {
					var j = t.app;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ce.properties.app.type
							},
							message: "must be string,null",
							schema: ce.properties.app.type,
							parentSchema: ce.properties.app,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.host) {
					var C = t.host;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ce.properties.host.type
							},
							message: "must be string,null",
							schema: ce.properties.host.type,
							parentSchema: ce.properties.host,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
			} else {
				var H = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ce.type,
					parentSchema: ce,
					data: t
				};
				null === s ? s = [H] : s.push(H), p++
			}
			return e.errors = s, 0 === p
		};
		var ce = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "contextLength"],
			$id: "ExpandFetchStarted",
			additionalProperties: !1
		};
		t.ExpandOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.loadingDuration) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.randomizedSuggestions) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.isNudged) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isNudged"
						},
						message: "must have required property 'isNudged'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isBatch) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isBatch"
						},
						message: "must have required property 'isBatch'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.isLimitedSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isLimitedSuggestions"
						},
						message: "must have required property 'isLimitedSuggestions'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.origin) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.contextLength) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.spanEncompassingSentenceHash) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceHash"
						},
						message: "must have required property 'spanEncompassingSentenceHash'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				if (void 0 === t.spanEncompassingSentenceLength) {
					var b = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceLength"
						},
						message: "must have required property 'spanEncompassingSentenceLength'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [b] : s.push(b), p++
				}
				if (void 0 === t.interactionId) {
					var P = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [P] : s.push(P), p++
				}
				if (void 0 === t.numOfLockedSuggestions) {
					var S = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfLockedSuggestions"
						},
						message: "must have required property 'numOfLockedSuggestions'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [S] : s.push(S), p++
				}
				if (void 0 === t.batchIndex) {
					var w = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchIndex"
						},
						message: "must have required property 'batchIndex'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [w] : s.push(w), p++
				}
				if (void 0 === t.spanSelectionModificationShown) {
					var k = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionModificationShown"
						},
						message: "must have required property 'spanSelectionModificationShown'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [k] : s.push(k), p++
				}
				if (void 0 === t.cacheInteractionId) {
					var _ = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "cacheInteractionId"
						},
						message: "must have required property 'cacheInteractionId'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [_] : s.push(_), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var I = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: he.required,
						parentSchema: he,
						data: t
					};
					null === s ? s = [I] : s.push(I), p++
				}
				for (var q in t)
					if (!i.call(he.properties, q)) {
						var L = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: q
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: he,
							data: t
						};
						null === s ? s = [L] : s.push(L), p++
					} if (void 0 !== t.loadingDuration) {
					var x = t.loadingDuration;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: he.properties.loadingDuration.type,
							parentSchema: he.properties.loadingDuration,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var N = t.randomizedSuggestions;
					if ("boolean" !== typeof N) {
						var O = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: he.properties.randomizedSuggestions.type,
							parentSchema: he.properties.randomizedSuggestions,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isNudged) {
					var D = t.isNudged;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isNudged",
							schemaPath: "#/properties/isNudged/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: he.properties.isNudged.type,
							parentSchema: he.properties.isNudged,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.platform) {
					var j = t.platform;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: he.properties.platform.type,
							parentSchema: he.properties.platform,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var C = t.spanSelectionHash;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: he.properties.spanSelectionHash.type,
							parentSchema: he.properties.spanSelectionHash,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var H = t.isBatch;
					if ("boolean" !== typeof H) {
						var R = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: he.properties.isBatch.type,
							parentSchema: he.properties.isBatch,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.isLimitedSuggestions) {
					var M = t.isLimitedSuggestions;
					if ("boolean" !== typeof M) {
						var $ = {
							instancePath: n + "/isLimitedSuggestions",
							schemaPath: "#/properties/isLimitedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: he.properties.isLimitedSuggestions.type,
							parentSchema: he.properties.isLimitedSuggestions,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var z = t.numOfSuggestions;
					if ("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) {
						var U = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: he.properties.numOfSuggestions.type,
							parentSchema: he.properties.numOfSuggestions,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.origin) {
					var B = t.origin;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: he.properties.origin.type,
							parentSchema: he.properties.origin,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var V = t.contextLength;
					if ("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) {
						var G = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: he.properties.contextLength.type,
							parentSchema: he.properties.contextLength,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceHash) {
					var K = t.spanEncompassingSentenceHash;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/spanEncompassingSentenceHash",
							schemaPath: "#/properties/spanEncompassingSentenceHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: he.properties.spanEncompassingSentenceHash.type,
							parentSchema: he.properties.spanEncompassingSentenceHash,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceLength) {
					var Y = t.spanEncompassingSentenceLength;
					if ("number" != typeof Y || Y % 1 || isNaN(Y) || !isFinite(Y)) {
						var J = {
							instancePath: n + "/spanEncompassingSentenceLength",
							schemaPath: "#/properties/spanEncompassingSentenceLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: he.properties.spanEncompassingSentenceLength.type,
							parentSchema: he.properties.spanEncompassingSentenceLength,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var X = t.interactionId;
					if ("string" !== typeof X) {
						var Z = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: he.properties.interactionId.type,
							parentSchema: he.properties.interactionId,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.numOfLockedSuggestions) {
					var ee = t.numOfLockedSuggestions;
					if ("number" != typeof ee || ee % 1 || isNaN(ee) || !isFinite(ee)) {
						var te = {
							instancePath: n + "/numOfLockedSuggestions",
							schemaPath: "#/properties/numOfLockedSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: he.properties.numOfLockedSuggestions.type,
							parentSchema: he.properties.numOfLockedSuggestions,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.draftId) {
					var re = t.draftId;
					if ("string" !== typeof re) {
						var ae = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: he.properties.draftId.type,
							parentSchema: he.properties.draftId,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var ne = t.caretLocation;
					if (!Array.isArray(ne)) {
						var ie = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: he.properties.caretLocation.type,
							parentSchema: he.properties.caretLocation,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var se = t.spanSelectionLength;
					if ("number" != typeof se || se % 1 || isNaN(se) || !isFinite(se)) {
						var pe = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: he.properties.spanSelectionLength.type,
							parentSchema: he.properties.spanSelectionLength,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var oe = t.batchIndex;
					if (("number" != typeof oe || oe % 1 || isNaN(oe) || !isFinite(oe)) && null !== oe) {
						var ce = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: he.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: he.properties.batchIndex.type,
							parentSchema: he.properties.batchIndex,
							data: oe
						};
						null === s ? s = [ce] : s.push(ce), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var ue = t.batchInteractionId;
					if ("string" !== typeof ue) {
						var me = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: he.properties.batchInteractionId.type,
							parentSchema: he.properties.batchInteractionId,
							data: ue
						};
						null === s ? s = [me] : s.push(me), p++
					}
				}
				if (void 0 !== t.spanSelectionModificationShown) {
					var de = t.spanSelectionModificationShown;
					if ("string" !== typeof de && null !== de) {
						var le = {
							instancePath: n + "/spanSelectionModificationShown",
							schemaPath: "#/properties/spanSelectionModificationShown/type",
							keyword: "type",
							params: {
								type: he.properties.spanSelectionModificationShown.type
							},
							message: "must be string,null",
							schema: he.properties.spanSelectionModificationShown.type,
							parentSchema: he.properties.spanSelectionModificationShown,
							data: de
						};
						null === s ? s = [le] : s.push(le), p++
					}
				}
				if (void 0 !== t.cacheInteractionId) {
					var ye = t.cacheInteractionId;
					if ("string" !== typeof ye && null !== ye) {
						var ge = {
							instancePath: n + "/cacheInteractionId",
							schemaPath: "#/properties/cacheInteractionId/type",
							keyword: "type",
							params: {
								type: he.properties.cacheInteractionId.type
							},
							message: "must be string,null",
							schema: he.properties.cacheInteractionId.type,
							parentSchema: he.properties.cacheInteractionId,
							data: ye
						};
						null === s ? s = [ge] : s.push(ge), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var fe = t.batchTotalSentences;
					if (("number" != typeof fe || fe % 1 || isNaN(fe) || !isFinite(fe)) && null !== fe) {
						var ve = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: he.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: he.properties.batchTotalSentences.type,
							parentSchema: he.properties.batchTotalSentences,
							data: fe
						};
						null === s ? s = [ve] : s.push(ve), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var be = t.isFirstEngagement;
					if ("boolean" !== typeof be) {
						var Pe = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: he.properties.isFirstEngagement.type,
							parentSchema: he.properties.isFirstEngagement,
							data: be
						};
						null === s ? s = [Pe] : s.push(Pe), p++
					}
				}
				if (void 0 !== t.configString) {
					var Se = t.configString;
					if ("string" !== typeof Se && null !== Se) {
						var we = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: he.properties.configString.type
							},
							message: "must be string,null",
							schema: he.properties.configString.type,
							parentSchema: he.properties.configString,
							data: Se
						};
						null === s ? s = [we] : s.push(we), p++
					}
				}
				if (void 0 !== t.tabId) {
					var ke = t.tabId;
					if (("number" != typeof ke || ke % 1 || isNaN(ke) || !isFinite(ke)) && null !== ke) {
						var _e = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: he.properties.tabId.type
							},
							message: "must be integer,null",
							schema: he.properties.tabId.type,
							parentSchema: he.properties.tabId,
							data: ke
						};
						null === s ? s = [_e] : s.push(_e), p++
					}
				}
				if (void 0 !== t.app) {
					var Ie = t.app;
					if ("string" !== typeof Ie && null !== Ie) {
						var qe = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: he.properties.app.type
							},
							message: "must be string,null",
							schema: he.properties.app.type,
							parentSchema: he.properties.app,
							data: Ie
						};
						null === s ? s = [qe] : s.push(qe), p++
					}
				}
				if (void 0 !== t.host) {
					var Le = t.host;
					if ("string" !== typeof Le && null !== Le) {
						var xe = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: he.properties.host.type
							},
							message: "must be string,null",
							schema: he.properties.host.type,
							parentSchema: he.properties.host,
							data: Le
						};
						null === s ? s = [xe] : s.push(xe), p++
					}
				}
			} else {
				var Ee = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: he.type,
					parentSchema: he,
					data: t
				};
				null === s ? s = [Ee] : s.push(Ee), p++
			}
			return e.errors = s, 0 === p
		};
		var he = {
			properties: {
				loadingDuration: {
					type: "integer"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				isNudged: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				isLimitedSuggestions: {
					type: "boolean"
				},
				numOfSuggestions: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				spanEncompassingSentenceHash: {
					type: "string"
				},
				spanEncompassingSentenceLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				numOfLockedSuggestions: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				batchInteractionId: {
					type: "string"
				},
				spanSelectionModificationShown: {
					type: ["string", "null"]
				},
				cacheInteractionId: {
					type: ["string", "null"]
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["loadingDuration", "randomizedSuggestions", "isNudged", "platform", "spanSelectionHash", "isBatch", "isLimitedSuggestions", "numOfSuggestions", "origin", "contextLength", "spanEncompassingSentenceHash", "spanEncompassingSentenceLength", "interactionId", "numOfLockedSuggestions", "batchIndex", "spanSelectionModificationShown", "cacheInteractionId", "batchTotalSentences"],
			$id: "ExpandOpened",
			additionalProperties: !1
		};
		t.ExpandSelectionPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.spanSelectionLength) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionLength"
						},
						message: "must have required property 'spanSelectionLength'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.randomizedSuggestions) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.isLimitedSuggestions) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isLimitedSuggestions"
						},
						message: "must have required property 'isLimitedSuggestions'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.contextLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.spanEncompassingSentenceHash) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceHash"
						},
						message: "must have required property 'spanEncompassingSentenceHash'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.spanEncompassingSentenceLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceLength"
						},
						message: "must have required property 'spanEncompassingSentenceLength'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.interactionId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.numOfLockedSuggestions) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfLockedSuggestions"
						},
						message: "must have required property 'numOfLockedSuggestions'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				if (void 0 === t.draftId) {
					var b = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: ue.required,
						parentSchema: ue,
						data: t
					};
					null === s ? s = [b] : s.push(b), p++
				}
				for (var P in t)
					if (!i.call(ue.properties, P)) {
						var S = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: P
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ue,
							data: t
						};
						null === s ? s = [S] : s.push(S), p++
					} if (void 0 !== t.spanSelectionLength) {
					var w = t.spanSelectionLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ue.properties.spanSelectionLength.type,
							parentSchema: ue.properties.spanSelectionLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var _ = t.isFirstEngagement;
					if ("boolean" !== typeof _) {
						var I = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ue.properties.isFirstEngagement.type,
							parentSchema: ue.properties.isFirstEngagement,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var q = t.randomizedSuggestions;
					if ("boolean" !== typeof q) {
						var L = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ue.properties.randomizedSuggestions.type,
							parentSchema: ue.properties.randomizedSuggestions,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.platform) {
					var x = t.platform;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ue.properties.platform.type,
							parentSchema: ue.properties.platform,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var N = t.spanSelectionHash;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ue.properties.spanSelectionHash.type,
							parentSchema: ue.properties.spanSelectionHash,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isLimitedSuggestions) {
					var D = t.isLimitedSuggestions;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isLimitedSuggestions",
							schemaPath: "#/properties/isLimitedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ue.properties.isLimitedSuggestions.type,
							parentSchema: ue.properties.isLimitedSuggestions,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var j = t.numOfSuggestions;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ue.properties.numOfSuggestions.type,
							parentSchema: ue.properties.numOfSuggestions,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var C = t.contextLength;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ue.properties.contextLength.type,
							parentSchema: ue.properties.contextLength,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceHash) {
					var H = t.spanEncompassingSentenceHash;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/spanEncompassingSentenceHash",
							schemaPath: "#/properties/spanEncompassingSentenceHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ue.properties.spanEncompassingSentenceHash.type,
							parentSchema: ue.properties.spanEncompassingSentenceHash,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceLength) {
					var M = t.spanEncompassingSentenceLength;
					if ("number" != typeof M || M % 1 || isNaN(M) || !isFinite(M)) {
						var $ = {
							instancePath: n + "/spanEncompassingSentenceLength",
							schemaPath: "#/properties/spanEncompassingSentenceLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ue.properties.spanEncompassingSentenceLength.type,
							parentSchema: ue.properties.spanEncompassingSentenceLength,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var z = t.interactionId;
					if ("string" !== typeof z && null !== z) {
						var U = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: ue.properties.interactionId.type
							},
							message: "must be string,null",
							schema: ue.properties.interactionId.type,
							parentSchema: ue.properties.interactionId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.numOfLockedSuggestions) {
					var B = t.numOfLockedSuggestions;
					if ("number" != typeof B || B % 1 || isNaN(B) || !isFinite(B)) {
						var W = {
							instancePath: n + "/numOfLockedSuggestions",
							schemaPath: "#/properties/numOfLockedSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ue.properties.numOfLockedSuggestions.type,
							parentSchema: ue.properties.numOfLockedSuggestions,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var V = t.caretLocation;
					if (!Array.isArray(V)) {
						var G = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ue.properties.caretLocation.type,
							parentSchema: ue.properties.caretLocation,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.draftId) {
					var K = t.draftId;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ue.properties.draftId.type,
							parentSchema: ue.properties.draftId,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.configString) {
					var Y = t.configString;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ue.properties.configString.type
							},
							message: "must be string,null",
							schema: ue.properties.configString.type,
							parentSchema: ue.properties.configString,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.tabId) {
					var X = t.tabId;
					if (("number" != typeof X || X % 1 || isNaN(X) || !isFinite(X)) && null !== X) {
						var Z = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ue.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ue.properties.tabId.type,
							parentSchema: ue.properties.tabId,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.app) {
					var ee = t.app;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ue.properties.app.type
							},
							message: "must be string,null",
							schema: ue.properties.app.type,
							parentSchema: ue.properties.app,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.host) {
					var re = t.host;
					if ("string" !== typeof re && null !== re) {
						var ae = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ue.properties.host.type
							},
							message: "must be string,null",
							schema: ue.properties.host.type,
							parentSchema: ue.properties.host,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
			} else {
				var ne = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ue.type,
					parentSchema: ue,
					data: t
				};
				null === s ? s = [ne] : s.push(ne), p++
			}
			return e.errors = s, 0 === p
		};
		var ue = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isLimitedSuggestions: {
					type: "boolean"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				spanEncompassingSentenceHash: {
					type: "string"
				},
				spanEncompassingSentenceLength: {
					type: "integer"
				},
				interactionId: {
					type: ["string", "null"]
				},
				numOfLockedSuggestions: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["spanSelectionLength", "randomizedSuggestions", "platform", "spanSelectionHash", "isLimitedSuggestions", "numOfSuggestions", "contextLength", "spanEncompassingSentenceHash", "spanEncompassingSentenceLength", "interactionId", "numOfLockedSuggestions", "draftId"],
			$id: "ExpandSelectionPressed",
			additionalProperties: !1
		};
		t.ExpandSuggestionCopied = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.suggestionIndex) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "suggestionIndex"
						},
						message: "must have required property 'suggestionIndex'",
						schema: me.required,
						parentSchema: me,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: me.required,
						parentSchema: me,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.mode) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "mode"
						},
						message: "must have required property 'mode'",
						schema: me.required,
						parentSchema: me,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: me.required,
						parentSchema: me,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: me.required,
						parentSchema: me,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.counter) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "counter"
						},
						message: "must have required property 'counter'",
						schema: me.required,
						parentSchema: me,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: me.required,
						parentSchema: me,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: me.required,
						parentSchema: me,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.interactionId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: me.required,
						parentSchema: me,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				for (var f in t)
					if (!i.call(me.properties, f)) {
						var v = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: f
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: me,
							data: t
						};
						null === s ? s = [v] : s.push(v), p++
					} if (void 0 !== t.spanSelectionLength) {
					var b = t.spanSelectionLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: me.properties.spanSelectionLength.type,
							parentSchema: me.properties.spanSelectionLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.suggestionIndex) {
					var S = t.suggestionIndex;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/suggestionIndex",
							schemaPath: "#/properties/suggestionIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: me.properties.suggestionIndex.type,
							parentSchema: me.properties.suggestionIndex,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.duration) {
					var k = t.duration;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: me.properties.duration.type,
							parentSchema: me.properties.duration,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.mode) {
					var I = t.mode;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: me.properties.mode.type,
							parentSchema: me.properties.mode,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.platform) {
					var L = t.platform;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: me.properties.platform.type,
							parentSchema: me.properties.platform,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var E = t.spanSelectionHash;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: me.properties.spanSelectionHash.type,
							parentSchema: me.properties.spanSelectionHash,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.counter) {
					var O = t.counter;
					if ("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) {
						var D = {
							instancePath: n + "/counter",
							schemaPath: "#/properties/counter/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: me.properties.counter.type,
							parentSchema: me.properties.counter,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var T = t.numOfSuggestions;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: me.properties.numOfSuggestions.type,
							parentSchema: me.properties.numOfSuggestions,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var F = t.contextLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: me.properties.contextLength.type,
							parentSchema: me.properties.contextLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var A = t.interactionId;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: me.properties.interactionId.type,
							parentSchema: me.properties.interactionId,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.draftId) {
					var R = t.draftId;
					if ("string" !== typeof R) {
						var M = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: me.properties.draftId.type,
							parentSchema: me.properties.draftId,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var $ = t.caretLocation;
					if (!Array.isArray($)) {
						var z = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: me.properties.caretLocation.type,
							parentSchema: me.properties.caretLocation,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var U = t.isFirstEngagement;
					if ("boolean" !== typeof U) {
						var B = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: me.properties.isFirstEngagement.type,
							parentSchema: me.properties.isFirstEngagement,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.configString) {
					var W = t.configString;
					if ("string" !== typeof W && null !== W) {
						var V = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: me.properties.configString.type
							},
							message: "must be string,null",
							schema: me.properties.configString.type,
							parentSchema: me.properties.configString,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.tabId) {
					var G = t.tabId;
					if (("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) && null !== G) {
						var K = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: me.properties.tabId.type
							},
							message: "must be integer,null",
							schema: me.properties.tabId.type,
							parentSchema: me.properties.tabId,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.app) {
					var Q = t.app;
					if ("string" !== typeof Q && null !== Q) {
						var Y = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: me.properties.app.type
							},
							message: "must be string,null",
							schema: me.properties.app.type,
							parentSchema: me.properties.app,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.host) {
					var J = t.host;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: me.properties.host.type
							},
							message: "must be string,null",
							schema: me.properties.host.type,
							parentSchema: me.properties.host,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
			} else {
				var Z = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: me.type,
					parentSchema: me,
					data: t
				};
				null === s ? s = [Z] : s.push(Z), p++
			}
			return e.errors = s, 0 === p
		};
		var me = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				suggestionIndex: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				counter: {
					type: "integer"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["suggestionIndex", "duration", "mode", "platform", "spanSelectionHash", "counter", "numOfSuggestions", "contextLength", "interactionId"],
			$id: "ExpandSuggestionCopied",
			additionalProperties: !1
		};
		t.ExpandSuggestionSelected = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.idx) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "idx"
						},
						message: "must have required property 'idx'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.total) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "total"
						},
						message: "must have required property 'total'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.mode) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "mode"
						},
						message: "must have required property 'mode'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isBatch) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isBatch"
						},
						message: "must have required property 'isBatch'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.contextLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.interactionId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.batchIndex) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchIndex"
						},
						message: "must have required property 'batchIndex'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: de.required,
						parentSchema: de,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(de.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: de,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.spanSelectionLength) {
					var S = t.spanSelectionLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: de.properties.spanSelectionLength.type,
							parentSchema: de.properties.spanSelectionLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.idx) {
					var k = t.idx;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/idx",
							schemaPath: "#/properties/idx/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: de.properties.idx.type,
							parentSchema: de.properties.idx,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.total) {
					var I = t.total;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/total",
							schemaPath: "#/properties/total/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: de.properties.total.type,
							parentSchema: de.properties.total,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.mode) {
					var L = t.mode;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: de.properties.mode.type,
							parentSchema: de.properties.mode,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.platform) {
					var E = t.platform;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: de.properties.platform.type,
							parentSchema: de.properties.platform,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var O = t.spanSelectionHash;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: de.properties.spanSelectionHash.type,
							parentSchema: de.properties.spanSelectionHash,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var T = t.isBatch;
					if ("boolean" !== typeof T) {
						var j = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: de.properties.isBatch.type,
							parentSchema: de.properties.isBatch,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var F = t.contextLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: de.properties.contextLength.type,
							parentSchema: de.properties.contextLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var A = t.interactionId;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: de.properties.interactionId.type,
							parentSchema: de.properties.interactionId,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var R = t.caretLocation;
					if (!Array.isArray(R)) {
						var M = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: de.properties.caretLocation.type,
							parentSchema: de.properties.caretLocation,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var $ = t.batchIndex;
					if (("number" != typeof $ || $ % 1 || isNaN($) || !isFinite($)) && null !== $) {
						var z = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: de.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: de.properties.batchIndex.type,
							parentSchema: de.properties.batchIndex,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var U = t.batchInteractionId;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: de.properties.batchInteractionId.type,
							parentSchema: de.properties.batchInteractionId,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.draftId) {
					var W = t.draftId;
					if ("string" !== typeof W) {
						var V = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: de.properties.draftId.type,
							parentSchema: de.properties.draftId,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var G = t.batchTotalSentences;
					if (("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) && null !== G) {
						var K = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: de.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: de.properties.batchTotalSentences.type,
							parentSchema: de.properties.batchTotalSentences,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var Q = t.isFirstEngagement;
					if ("boolean" !== typeof Q) {
						var Y = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: de.properties.isFirstEngagement.type,
							parentSchema: de.properties.isFirstEngagement,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.configString) {
					var J = t.configString;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: de.properties.configString.type
							},
							message: "must be string,null",
							schema: de.properties.configString.type,
							parentSchema: de.properties.configString,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Z = t.tabId;
					if (("number" != typeof Z || Z % 1 || isNaN(Z) || !isFinite(Z)) && null !== Z) {
						var ee = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: de.properties.tabId.type
							},
							message: "must be integer,null",
							schema: de.properties.tabId.type,
							parentSchema: de.properties.tabId,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.app) {
					var te = t.app;
					if ("string" !== typeof te && null !== te) {
						var re = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: de.properties.app.type
							},
							message: "must be string,null",
							schema: de.properties.app.type,
							parentSchema: de.properties.app,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
				if (void 0 !== t.host) {
					var ae = t.host;
					if ("string" !== typeof ae && null !== ae) {
						var ne = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: de.properties.host.type
							},
							message: "must be string,null",
							schema: de.properties.host.type,
							parentSchema: de.properties.host,
							data: ae
						};
						null === s ? s = [ne] : s.push(ne), p++
					}
				}
			} else {
				var ie = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: de.type,
					parentSchema: de,
					data: t
				};
				null === s ? s = [ie] : s.push(ie), p++
			}
			return e.errors = s, 0 === p
		};
		var de = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				idx: {
					type: "integer"
				},
				total: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				batchInteractionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["idx", "total", "mode", "platform", "spanSelectionHash", "isBatch", "contextLength", "interactionId", "batchIndex", "draftId", "batchTotalSentences"],
			$id: "ExpandSuggestionSelected",
			additionalProperties: !1
		};
		t.ExtensionChange = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.version) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "version"
						},
						message: "must have required property 'version'",
						schema: le.required,
						parentSchema: le,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.reason) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "reason"
						},
						message: "must have required property 'reason'",
						schema: le.required,
						parentSchema: le,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("version" !== c && "reason" !== c && "previous" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: le,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.version) {
					var u = t.version;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/version",
							schemaPath: "#/properties/version/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: le.properties.version.type,
							parentSchema: le.properties.version,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.reason) {
					var d = t.reason;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/reason",
							schemaPath: "#/properties/reason/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: le.properties.reason.type,
							parentSchema: le.properties.reason,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.previous) {
					var y = t.previous;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/previous",
							schemaPath: "#/properties/previous/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: le.properties.previous.type,
							parentSchema: le.properties.previous,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.configString) {
					var f = t.configString;
					if ("string" !== typeof f && null !== f) {
						var v = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: le.properties.configString.type
							},
							message: "must be string,null",
							schema: le.properties.configString.type,
							parentSchema: le.properties.configString,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.tabId) {
					var b = t.tabId;
					if (("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) && null !== b) {
						var P = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: le.properties.tabId.type
							},
							message: "must be integer,null",
							schema: le.properties.tabId.type,
							parentSchema: le.properties.tabId,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.app) {
					var S = t.app;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: le.properties.app.type
							},
							message: "must be string,null",
							schema: le.properties.app.type,
							parentSchema: le.properties.app,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
				if (void 0 !== t.host) {
					var k = t.host;
					if ("string" !== typeof k && null !== k) {
						var _ = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: le.properties.host.type
							},
							message: "must be string,null",
							schema: le.properties.host.type,
							parentSchema: le.properties.host,
							data: k
						};
						null === i ? i = [_] : i.push(_), s++
					}
				}
			} else {
				var I = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: le.type,
					parentSchema: le,
					data: t
				};
				null === i ? i = [I] : i.push(I), s++
			}
			return e.errors = i, 0 === s
		};
		var le = {
			properties: {
				version: {
					type: "string"
				},
				reason: {
					type: "string"
				},
				previous: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["version", "reason"],
			$id: "ExtensionChange",
			additionalProperties: !1
		};
		t.ExtensionInWebsiteEnabled = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.disableMode) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "disableMode"
						},
						message: "must have required property 'disableMode'",
						schema: ye.required,
						parentSchema: ye,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ye.required,
						parentSchema: ye,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("disableMode" !== c && "origin" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ye,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.disableMode) {
					var u = t.disableMode;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/disableMode",
							schemaPath: "#/properties/disableMode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ye.properties.disableMode.type,
							parentSchema: ye.properties.disableMode,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.origin) {
					var d = t.origin;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ye.properties.origin.type,
							parentSchema: ye.properties.origin,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ye.properties.configString.type
							},
							message: "must be string,null",
							schema: ye.properties.configString.type,
							parentSchema: ye.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ye.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ye.properties.tabId.type,
							parentSchema: ye.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ye.properties.app.type
							},
							message: "must be string,null",
							schema: ye.properties.app.type,
							parentSchema: ye.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ye.properties.host.type
							},
							message: "must be string,null",
							schema: ye.properties.host.type,
							parentSchema: ye.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ye.type,
					parentSchema: ye,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var ye = {
			properties: {
				disableMode: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["disableMode", "origin"],
			$id: "ExtensionInWebsiteEnabled",
			additionalProperties: !1
		};
		t.ExtensionInWebsiteSuspended = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.disableMode) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "disableMode"
						},
						message: "must have required property 'disableMode'",
						schema: ge.required,
						parentSchema: ge,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ge.required,
						parentSchema: ge,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("disableMode" !== c && "origin" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ge,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.disableMode) {
					var u = t.disableMode;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/disableMode",
							schemaPath: "#/properties/disableMode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ge.properties.disableMode.type,
							parentSchema: ge.properties.disableMode,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.origin) {
					var d = t.origin;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ge.properties.origin.type,
							parentSchema: ge.properties.origin,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ge.properties.configString.type
							},
							message: "must be string,null",
							schema: ge.properties.configString.type,
							parentSchema: ge.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ge.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ge.properties.tabId.type,
							parentSchema: ge.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ge.properties.app.type
							},
							message: "must be string,null",
							schema: ge.properties.app.type,
							parentSchema: ge.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ge.properties.host.type
							},
							message: "must be string,null",
							schema: ge.properties.host.type,
							parentSchema: ge.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ge.type,
					parentSchema: ge,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var ge = {
			properties: {
				disableMode: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["disableMode", "origin"],
			$id: "ExtensionInWebsiteSuspended",
			additionalProperties: !1
		};
		t.ExtensionNotificationDisappeared = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: fe.required,
						parentSchema: fe,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: fe.required,
						parentSchema: fe,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.contextLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: fe.required,
						parentSchema: fe,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: fe.required,
						parentSchema: fe,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(fe.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: fe,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: fe.properties.platform.type,
							parentSchema: fe.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: fe.properties.spanSelectionHash.type,
							parentSchema: fe.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: fe.properties.spanSelectionLength.type,
							parentSchema: fe.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var P = t.contextLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: fe.properties.contextLength.type,
							parentSchema: fe.properties.contextLength,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.draftId) {
					var w = t.draftId;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: fe.properties.draftId.type,
							parentSchema: fe.properties.draftId,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var _ = t.caretLocation;
					if (!Array.isArray(_)) {
						var I = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: fe.properties.caretLocation.type,
							parentSchema: fe.properties.caretLocation,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var q = t.isFirstEngagement;
					if ("boolean" !== typeof q) {
						var L = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: fe.properties.isFirstEngagement.type,
							parentSchema: fe.properties.isFirstEngagement,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.configString) {
					var x = t.configString;
					if ("string" !== typeof x && null !== x) {
						var E = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: fe.properties.configString.type
							},
							message: "must be string,null",
							schema: fe.properties.configString.type,
							parentSchema: fe.properties.configString,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.tabId) {
					var N = t.tabId;
					if (("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) && null !== N) {
						var O = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: fe.properties.tabId.type
							},
							message: "must be integer,null",
							schema: fe.properties.tabId.type,
							parentSchema: fe.properties.tabId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.app) {
					var D = t.app;
					if ("string" !== typeof D && null !== D) {
						var T = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: fe.properties.app.type
							},
							message: "must be string,null",
							schema: fe.properties.app.type,
							parentSchema: fe.properties.app,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.host) {
					var j = t.host;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: fe.properties.host.type
							},
							message: "must be string,null",
							schema: fe.properties.host.type,
							parentSchema: fe.properties.host,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
			} else {
				var C = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: fe.type,
					parentSchema: fe,
					data: t
				};
				null === s ? s = [C] : s.push(C), p++
			}
			return e.errors = s, 0 === p
		};
		var fe = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "contextLength", "draftId"],
			$id: "ExtensionNotificationDisappeared",
			additionalProperties: !1
		};
		t.ExtensionNotificationPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.notificationId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "notificationId"
						},
						message: "must have required property 'notificationId'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.isDismiss) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isDismiss"
						},
						message: "must have required property 'isDismiss'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.type) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "type"
						},
						message: "must have required property 'type'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.title) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "title"
						},
						message: "must have required property 'title'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.contextLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.draftId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.buttonText) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "buttonText"
						},
						message: "must have required property 'buttonText'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.buttonUrl) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "buttonUrl"
						},
						message: "must have required property 'buttonUrl'",
						schema: ve.required,
						parentSchema: ve,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				for (var v in t)
					if (!i.call(ve.properties, v)) {
						var b = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: v
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ve,
							data: t
						};
						null === s ? s = [b] : s.push(b), p++
					} if (void 0 !== t.spanSelectionLength) {
					var P = t.spanSelectionLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ve.properties.spanSelectionLength.type,
							parentSchema: ve.properties.spanSelectionLength,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.notificationId) {
					var w = t.notificationId;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/notificationId",
							schemaPath: "#/properties/notificationId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ve.properties.notificationId.type,
							parentSchema: ve.properties.notificationId,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.isDismiss) {
					var _ = t.isDismiss;
					if ("boolean" !== typeof _) {
						var I = {
							instancePath: n + "/isDismiss",
							schemaPath: "#/properties/isDismiss/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ve.properties.isDismiss.type,
							parentSchema: ve.properties.isDismiss,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.platform) {
					var q = t.platform;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ve.properties.platform.type,
							parentSchema: ve.properties.platform,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var x = t.spanSelectionHash;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ve.properties.spanSelectionHash.type,
							parentSchema: ve.properties.spanSelectionHash,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.type) {
					var N = t.type;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/type",
							schemaPath: "#/properties/type/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ve.properties.type.type,
							parentSchema: ve.properties.type,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.title) {
					var D = t.title;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/title",
							schemaPath: "#/properties/title/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ve.properties.title.type,
							parentSchema: ve.properties.title,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var j = t.contextLength;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ve.properties.contextLength.type,
							parentSchema: ve.properties.contextLength,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.draftId) {
					var C = t.draftId;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ve.properties.draftId.type,
							parentSchema: ve.properties.draftId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.buttonText) {
					var H = t.buttonText;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/buttonText",
							schemaPath: "#/properties/buttonText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ve.properties.buttonText.type,
							parentSchema: ve.properties.buttonText,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var M = t.caretLocation;
					if (!Array.isArray(M)) {
						var $ = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ve.properties.caretLocation.type,
							parentSchema: ve.properties.caretLocation,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var z = t.isFirstEngagement;
					if ("boolean" !== typeof z) {
						var U = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ve.properties.isFirstEngagement.type,
							parentSchema: ve.properties.isFirstEngagement,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.buttonUrl) {
					var B = t.buttonUrl;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/buttonUrl",
							schemaPath: "#/properties/buttonUrl/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ve.properties.buttonUrl.type,
							parentSchema: ve.properties.buttonUrl,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.configString) {
					var V = t.configString;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ve.properties.configString.type
							},
							message: "must be string,null",
							schema: ve.properties.configString.type,
							parentSchema: ve.properties.configString,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.tabId) {
					var K = t.tabId;
					if (("number" != typeof K || K % 1 || isNaN(K) || !isFinite(K)) && null !== K) {
						var Q = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ve.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ve.properties.tabId.type,
							parentSchema: ve.properties.tabId,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.app) {
					var Y = t.app;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ve.properties.app.type
							},
							message: "must be string,null",
							schema: ve.properties.app.type,
							parentSchema: ve.properties.app,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.host) {
					var X = t.host;
					if ("string" !== typeof X && null !== X) {
						var Z = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ve.properties.host.type
							},
							message: "must be string,null",
							schema: ve.properties.host.type,
							parentSchema: ve.properties.host,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
			} else {
				var ee = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ve.type,
					parentSchema: ve,
					data: t
				};
				null === s ? s = [ee] : s.push(ee), p++
			}
			return e.errors = s, 0 === p
		};
		var ve = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				notificationId: {
					type: "string"
				},
				isDismiss: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				type: {
					type: "string"
				},
				title: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				buttonText: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				buttonUrl: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["notificationId", "isDismiss", "platform", "spanSelectionHash", "type", "title", "contextLength", "draftId", "buttonText", "buttonUrl"],
			$id: "ExtensionNotificationPressed",
			additionalProperties: !1
		};
		t.ExtensionNotificationShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.contextLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.notification) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "notification"
						},
						message: "must have required property 'notification'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.draftId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.notification_type) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "notification_type"
						},
						message: "must have required property 'notification_type'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.notification_title) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "notification_title"
						},
						message: "must have required property 'notification_title'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.notification_body) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "notification_body"
						},
						message: "must have required property 'notification_body'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.notification_id) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "notification_id"
						},
						message: "must have required property 'notification_id'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.notification_header_image) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "notification_header_image"
						},
						message: "must have required property 'notification_header_image'",
						schema: be.required,
						parentSchema: be,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				for (var v in t)
					if (!i.call(be.properties, v)) {
						var b = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: v
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: be,
							data: t
						};
						null === s ? s = [b] : s.push(b), p++
					} if (void 0 !== t.platform) {
					var P = t.platform;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: be.properties.platform.type,
							parentSchema: be.properties.platform,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var w = t.spanSelectionHash;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: be.properties.spanSelectionHash.type,
							parentSchema: be.properties.spanSelectionHash,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var _ = t.contextLength;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: be.properties.contextLength.type,
							parentSchema: be.properties.contextLength,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.notification) {
					var q = t.notification;
					if ("boolean" !== typeof q) {
						var L = {
							instancePath: n + "/notification",
							schemaPath: "#/properties/notification/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: be.properties.notification.type,
							parentSchema: be.properties.notification,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var x = t.caretLocation;
					if (!Array.isArray(x)) {
						var E = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: be.properties.caretLocation.type,
							parentSchema: be.properties.caretLocation,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.draftId) {
					var N = t.draftId;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: be.properties.draftId.type,
							parentSchema: be.properties.draftId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.notification_type) {
					var D = t.notification_type;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/notification_type",
							schemaPath: "#/properties/notification_type/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: be.properties.notification_type.type,
							parentSchema: be.properties.notification_type,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.notification_title) {
					var j = t.notification_title;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/notification_title",
							schemaPath: "#/properties/notification_title/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: be.properties.notification_title.type,
							parentSchema: be.properties.notification_title,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.notification_body) {
					var C = t.notification_body;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/notification_body",
							schemaPath: "#/properties/notification_body/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: be.properties.notification_body.type,
							parentSchema: be.properties.notification_body,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.notification_id) {
					var H = t.notification_id;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/notification_id",
							schemaPath: "#/properties/notification_id/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: be.properties.notification_id.type,
							parentSchema: be.properties.notification_id,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.notification_buttons) {
					var M = t.notification_buttons;
					if (!Array.isArray(M)) {
						var $ = {
							instancePath: n + "/notification_buttons",
							schemaPath: "#/properties/notification_buttons/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: be.properties.notification_buttons.type,
							parentSchema: be.properties.notification_buttons,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.notification_header_image) {
					var z = t.notification_header_image;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/notification_header_image",
							schemaPath: "#/properties/notification_header_image/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: be.properties.notification_header_image.type,
							parentSchema: be.properties.notification_header_image,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var B = t.isFirstEngagement;
					if ("boolean" !== typeof B) {
						var W = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: be.properties.isFirstEngagement.type,
							parentSchema: be.properties.isFirstEngagement,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var V = t.spanSelectionLength;
					if ("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) {
						var G = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: be.properties.spanSelectionLength.type,
							parentSchema: be.properties.spanSelectionLength,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.configString) {
					var K = t.configString;
					if ("string" !== typeof K && null !== K) {
						var Q = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: be.properties.configString.type
							},
							message: "must be string,null",
							schema: be.properties.configString.type,
							parentSchema: be.properties.configString,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Y = t.tabId;
					if (("number" != typeof Y || Y % 1 || isNaN(Y) || !isFinite(Y)) && null !== Y) {
						var J = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: be.properties.tabId.type
							},
							message: "must be integer,null",
							schema: be.properties.tabId.type,
							parentSchema: be.properties.tabId,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.app) {
					var X = t.app;
					if ("string" !== typeof X && null !== X) {
						var Z = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: be.properties.app.type
							},
							message: "must be string,null",
							schema: be.properties.app.type,
							parentSchema: be.properties.app,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.host) {
					var ee = t.host;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: be.properties.host.type
							},
							message: "must be string,null",
							schema: be.properties.host.type,
							parentSchema: be.properties.host,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
			} else {
				var re = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: be.type,
					parentSchema: be,
					data: t
				};
				null === s ? s = [re] : s.push(re), p++
			}
			return e.errors = s, 0 === p
		};
		var be = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				notification: {
					type: "boolean"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				notification_type: {
					type: "string"
				},
				notification_title: {
					type: "string"
				},
				notification_body: {
					type: "string"
				},
				notification_id: {
					type: "string"
				},
				notification_buttons: {
					type: "array"
				},
				notification_header_image: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "contextLength", "notification", "draftId", "notification_type", "notification_title", "notification_body", "notification_id", "notification_header_image"],
			$id: "ExtensionNotificationShown",
			additionalProperties: !1
		};
		t.ExtensionPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.upgradeButtonText) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "upgradeButtonText"
						},
						message: "must have required property 'upgradeButtonText'",
						schema: Pe.required,
						parentSchema: Pe,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.trialPromptText) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "trialPromptText"
						},
						message: "must have required property 'trialPromptText'",
						schema: Pe.required,
						parentSchema: Pe,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				if (void 0 === t.upgradeIcon) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "upgradeIcon"
						},
						message: "must have required property 'upgradeIcon'",
						schema: Pe.required,
						parentSchema: Pe,
						data: t
					};
					null === i ? i = [c] : i.push(c), s++
				}
				if (void 0 === t.trialDaysLeft) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "trialDaysLeft"
						},
						message: "must have required property 'trialDaysLeft'",
						schema: Pe.required,
						parentSchema: Pe,
						data: t
					};
					null === i ? i = [h] : i.push(h), s++
				}
				for (var u in t)
					if ("upgradeButtonText" !== u && "trialPromptText" !== u && "upgradeIcon" !== u && "trialDaysLeft" !== u && "configString" !== u && "tabId" !== u && "app" !== u && "host" !== u) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: u
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Pe,
							data: t
						};
						null === i ? i = [m] : i.push(m), s++
					} if (void 0 !== t.upgradeButtonText) {
					var d = t.upgradeButtonText;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/upgradeButtonText",
							schemaPath: "#/properties/upgradeButtonText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pe.properties.upgradeButtonText.type,
							parentSchema: Pe.properties.upgradeButtonText,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.trialPromptText) {
					var y = t.trialPromptText;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/trialPromptText",
							schemaPath: "#/properties/trialPromptText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pe.properties.trialPromptText.type,
							parentSchema: Pe.properties.trialPromptText,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.upgradeIcon) {
					var f = t.upgradeIcon;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/upgradeIcon",
							schemaPath: "#/properties/upgradeIcon/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pe.properties.upgradeIcon.type,
							parentSchema: Pe.properties.upgradeIcon,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.trialDaysLeft) {
					var b = t.trialDaysLeft;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/trialDaysLeft",
							schemaPath: "#/properties/trialDaysLeft/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Pe.properties.trialDaysLeft.type,
							parentSchema: Pe.properties.trialDaysLeft,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.configString) {
					var S = t.configString;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Pe.properties.configString.type
							},
							message: "must be string,null",
							schema: Pe.properties.configString.type,
							parentSchema: Pe.properties.configString,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
				if (void 0 !== t.tabId) {
					var k = t.tabId;
					if (("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) && null !== k) {
						var _ = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Pe.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Pe.properties.tabId.type,
							parentSchema: Pe.properties.tabId,
							data: k
						};
						null === i ? i = [_] : i.push(_), s++
					}
				}
				if (void 0 !== t.app) {
					var I = t.app;
					if ("string" !== typeof I && null !== I) {
						var q = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Pe.properties.app.type
							},
							message: "must be string,null",
							schema: Pe.properties.app.type,
							parentSchema: Pe.properties.app,
							data: I
						};
						null === i ? i = [q] : i.push(q), s++
					}
				}
				if (void 0 !== t.host) {
					var L = t.host;
					if ("string" !== typeof L && null !== L) {
						var x = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Pe.properties.host.type
							},
							message: "must be string,null",
							schema: Pe.properties.host.type,
							parentSchema: Pe.properties.host,
							data: L
						};
						null === i ? i = [x] : i.push(x), s++
					}
				}
			} else {
				var E = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Pe.type,
					parentSchema: Pe,
					data: t
				};
				null === i ? i = [E] : i.push(E), s++
			}
			return e.errors = i, 0 === s
		};
		var Pe = {
			properties: {
				upgradeButtonText: {
					type: "string"
				},
				trialPromptText: {
					type: "string"
				},
				upgradeIcon: {
					type: "string"
				},
				trialDaysLeft: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["upgradeButtonText", "trialPromptText", "upgradeIcon", "trialDaysLeft"],
			$id: "ExtensionPressed",
			additionalProperties: !1
		};
		t.FeatureShake = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Se.required,
						parentSchema: Se,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Se.required,
						parentSchema: Se,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.feature) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "feature"
						},
						message: "must have required property 'feature'",
						schema: Se.required,
						parentSchema: Se,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Se.required,
						parentSchema: Se,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.draftId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Se.required,
						parentSchema: Se,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(Se.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Se,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Se.properties.platform.type,
							parentSchema: Se.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var f = t.spanSelectionHash;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Se.properties.spanSelectionHash.type,
							parentSchema: Se.properties.spanSelectionHash,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var b = t.isFirstEngagement;
					if ("boolean" !== typeof b) {
						var P = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Se.properties.isFirstEngagement.type,
							parentSchema: Se.properties.isFirstEngagement,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.feature) {
					var S = t.feature;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/feature",
							schemaPath: "#/properties/feature/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Se.properties.feature.type,
							parentSchema: Se.properties.feature,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var k = t.contextLength;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Se.properties.contextLength.type,
							parentSchema: Se.properties.contextLength,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var I = t.caretLocation;
					if (!Array.isArray(I)) {
						var q = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Se.properties.caretLocation.type,
							parentSchema: Se.properties.caretLocation,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.draftId) {
					var L = t.draftId;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Se.properties.draftId.type,
							parentSchema: Se.properties.draftId,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var E = t.spanSelectionLength;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Se.properties.spanSelectionLength.type,
							parentSchema: Se.properties.spanSelectionLength,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.configString) {
					var O = t.configString;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Se.properties.configString.type
							},
							message: "must be string,null",
							schema: Se.properties.configString.type,
							parentSchema: Se.properties.configString,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.tabId) {
					var T = t.tabId;
					if (("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) && null !== T) {
						var j = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Se.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Se.properties.tabId.type,
							parentSchema: Se.properties.tabId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.app) {
					var F = t.app;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Se.properties.app.type
							},
							message: "must be string,null",
							schema: Se.properties.app.type,
							parentSchema: Se.properties.app,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.host) {
					var A = t.host;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Se.properties.host.type
							},
							message: "must be string,null",
							schema: Se.properties.host.type,
							parentSchema: Se.properties.host,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
			} else {
				var R = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Se.type,
					parentSchema: Se,
					data: t
				};
				null === s ? s = [R] : s.push(R), p++
			}
			return e.errors = s, 0 === p
		};
		var Se = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				feature: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "feature", "contextLength", "draftId"],
			$id: "FeatureShake",
			additionalProperties: !1
		};
		t.FindMissingWordsActivated = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: we.required,
						parentSchema: we,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: we.required,
						parentSchema: we,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: we.required,
						parentSchema: we,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionLength"
						},
						message: "must have required property 'spanSelectionLength'",
						schema: we.required,
						parentSchema: we,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.contextLength) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: we.required,
						parentSchema: we,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.draftId) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: we.required,
						parentSchema: we,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				for (var l in t)
					if (!i.call(we.properties, l)) {
						var y = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: l
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: we,
							data: t
						};
						null === s ? s = [y] : s.push(y), p++
					} if (void 0 !== t.platform) {
					var g = t.platform;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: we.properties.platform.type,
							parentSchema: we.properties.platform,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var v = t.spanSelectionHash;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: we.properties.spanSelectionHash.type,
							parentSchema: we.properties.spanSelectionHash,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var P = t.isFirstEngagement;
					if ("boolean" !== typeof P) {
						var S = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: we.properties.isFirstEngagement.type,
							parentSchema: we.properties.isFirstEngagement,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.origin) {
					var w = t.origin;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: we.properties.origin.type,
							parentSchema: we.properties.origin,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var _ = t.caretLocation;
					if (!Array.isArray(_)) {
						var I = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: we.properties.caretLocation.type,
							parentSchema: we.properties.caretLocation,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var q = t.spanSelectionLength;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: we.properties.spanSelectionLength.type,
							parentSchema: we.properties.spanSelectionLength,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var x = t.contextLength;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: we.properties.contextLength.type,
							parentSchema: we.properties.contextLength,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.draftId) {
					var N = t.draftId;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: we.properties.draftId.type,
							parentSchema: we.properties.draftId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.configString) {
					var D = t.configString;
					if ("string" !== typeof D && null !== D) {
						var T = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: we.properties.configString.type
							},
							message: "must be string,null",
							schema: we.properties.configString.type,
							parentSchema: we.properties.configString,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.tabId) {
					var j = t.tabId;
					if (("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) && null !== j) {
						var F = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: we.properties.tabId.type
							},
							message: "must be integer,null",
							schema: we.properties.tabId.type,
							parentSchema: we.properties.tabId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.app) {
					var C = t.app;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: we.properties.app.type
							},
							message: "must be string,null",
							schema: we.properties.app.type,
							parentSchema: we.properties.app,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.host) {
					var H = t.host;
					if ("string" !== typeof H && null !== H) {
						var R = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: we.properties.host.type
							},
							message: "must be string,null",
							schema: we.properties.host.type,
							parentSchema: we.properties.host,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
			} else {
				var M = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: we.type,
					parentSchema: we,
					data: t
				};
				null === s ? s = [M] : s.push(M), p++
			}
			return e.errors = s, 0 === p
		};
		var we = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				origin: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "spanSelectionLength", "contextLength", "draftId"],
			$id: "FindMissingWordsActivated",
			additionalProperties: !1
		};
		t.FindMissingWordsClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.numberOfSuggestions) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numberOfSuggestions"
						},
						message: "must have required property 'numberOfSuggestions'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.origin) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.numberOfClues) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numberOfClues"
						},
						message: "must have required property 'numberOfClues'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.interactionId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.spanSelectionLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionLength"
						},
						message: "must have required property 'spanSelectionLength'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.contextLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: ke.required,
						parentSchema: ke,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				for (var v in t)
					if (!i.call(ke.properties, v)) {
						var b = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: v
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ke,
							data: t
						};
						null === s ? s = [b] : s.push(b), p++
					} if (void 0 !== t.isFirstEngagement) {
					var P = t.isFirstEngagement;
					if ("boolean" !== typeof P) {
						var S = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ke.properties.isFirstEngagement.type,
							parentSchema: ke.properties.isFirstEngagement,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.numberOfSuggestions) {
					var w = t.numberOfSuggestions;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/numberOfSuggestions",
							schemaPath: "#/properties/numberOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ke.properties.numberOfSuggestions.type,
							parentSchema: ke.properties.numberOfSuggestions,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.duration) {
					var _ = t.duration;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ke.properties.duration.type,
							parentSchema: ke.properties.duration,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.platform) {
					var q = t.platform;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ke.properties.platform.type,
							parentSchema: ke.properties.platform,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var x = t.spanSelectionHash;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ke.properties.spanSelectionHash.type,
							parentSchema: ke.properties.spanSelectionHash,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.origin) {
					var N = t.origin;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ke.properties.origin.type,
							parentSchema: ke.properties.origin,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.numberOfClues) {
					var D = t.numberOfClues;
					if ("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) {
						var T = {
							instancePath: n + "/numberOfClues",
							schemaPath: "#/properties/numberOfClues/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ke.properties.numberOfClues.type,
							parentSchema: ke.properties.numberOfClues,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var j = t.interactionId;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ke.properties.interactionId.type,
							parentSchema: ke.properties.interactionId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var C = t.caretLocation;
					if (!Array.isArray(C)) {
						var A = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ke.properties.caretLocation.type,
							parentSchema: ke.properties.caretLocation,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var H = t.spanSelectionLength;
					if ("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) {
						var R = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ke.properties.spanSelectionLength.type,
							parentSchema: ke.properties.spanSelectionLength,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var M = t.contextLength;
					if ("number" != typeof M || M % 1 || isNaN(M) || !isFinite(M)) {
						var $ = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ke.properties.contextLength.type,
							parentSchema: ke.properties.contextLength,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.draftId) {
					var z = t.draftId;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ke.properties.draftId.type,
							parentSchema: ke.properties.draftId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.configString) {
					var B = t.configString;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ke.properties.configString.type
							},
							message: "must be string,null",
							schema: ke.properties.configString.type,
							parentSchema: ke.properties.configString,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.tabId) {
					var V = t.tabId;
					if (("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) && null !== V) {
						var G = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ke.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ke.properties.tabId.type,
							parentSchema: ke.properties.tabId,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.app) {
					var K = t.app;
					if ("string" !== typeof K && null !== K) {
						var Q = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ke.properties.app.type
							},
							message: "must be string,null",
							schema: ke.properties.app.type,
							parentSchema: ke.properties.app,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.host) {
					var Y = t.host;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ke.properties.host.type
							},
							message: "must be string,null",
							schema: ke.properties.host.type,
							parentSchema: ke.properties.host,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
			} else {
				var X = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ke.type,
					parentSchema: ke,
					data: t
				};
				null === s ? s = [X] : s.push(X), p++
			}
			return e.errors = s, 0 === p
		};
		var ke = {
			properties: {
				isFirstEngagement: {
					type: "boolean"
				},
				numberOfSuggestions: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				numberOfClues: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["numberOfSuggestions", "duration", "platform", "spanSelectionHash", "origin", "numberOfClues", "interactionId", "spanSelectionLength", "contextLength", "draftId"],
			$id: "FindMissingWordsClosed",
			additionalProperties: !1
		};
		t.FindMissingWordsFetchStarted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: _e.required,
						parentSchema: _e,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: _e.required,
						parentSchema: _e,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanStart) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanStart"
						},
						message: "must have required property 'spanStart'",
						schema: _e.required,
						parentSchema: _e,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionLength"
						},
						message: "must have required property 'spanSelectionLength'",
						schema: _e.required,
						parentSchema: _e,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.contextLength) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: _e.required,
						parentSchema: _e,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.draftId) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: _e.required,
						parentSchema: _e,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				for (var l in t)
					if (!i.call(_e.properties, l)) {
						var y = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: l
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: _e,
							data: t
						};
						null === s ? s = [y] : s.push(y), p++
					} if (void 0 !== t.platform) {
					var g = t.platform;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _e.properties.platform.type,
							parentSchema: _e.properties.platform,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var v = t.spanSelectionHash;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _e.properties.spanSelectionHash.type,
							parentSchema: _e.properties.spanSelectionHash,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var P = t.isFirstEngagement;
					if ("boolean" !== typeof P) {
						var S = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: _e.properties.isFirstEngagement.type,
							parentSchema: _e.properties.isFirstEngagement,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanStart) {
					var w = t.spanStart;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/spanStart",
							schemaPath: "#/properties/spanStart/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: _e.properties.spanStart.type,
							parentSchema: _e.properties.spanStart,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var _ = t.caretLocation;
					if (!Array.isArray(_)) {
						var I = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: _e.properties.caretLocation.type,
							parentSchema: _e.properties.caretLocation,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var q = t.spanSelectionLength;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: _e.properties.spanSelectionLength.type,
							parentSchema: _e.properties.spanSelectionLength,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var x = t.contextLength;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: _e.properties.contextLength.type,
							parentSchema: _e.properties.contextLength,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.draftId) {
					var N = t.draftId;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _e.properties.draftId.type,
							parentSchema: _e.properties.draftId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.configString) {
					var D = t.configString;
					if ("string" !== typeof D && null !== D) {
						var T = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: _e.properties.configString.type
							},
							message: "must be string,null",
							schema: _e.properties.configString.type,
							parentSchema: _e.properties.configString,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.tabId) {
					var j = t.tabId;
					if (("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) && null !== j) {
						var F = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: _e.properties.tabId.type
							},
							message: "must be integer,null",
							schema: _e.properties.tabId.type,
							parentSchema: _e.properties.tabId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.app) {
					var C = t.app;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: _e.properties.app.type
							},
							message: "must be string,null",
							schema: _e.properties.app.type,
							parentSchema: _e.properties.app,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.host) {
					var H = t.host;
					if ("string" !== typeof H && null !== H) {
						var R = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: _e.properties.host.type
							},
							message: "must be string,null",
							schema: _e.properties.host.type,
							parentSchema: _e.properties.host,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
			} else {
				var M = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: _e.type,
					parentSchema: _e,
					data: t
				};
				null === s ? s = [M] : s.push(M), p++
			}
			return e.errors = s, 0 === p
		};
		var _e = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanStart: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "spanStart", "spanSelectionLength", "contextLength", "draftId"],
			$id: "FindMissingWordsFetchStarted",
			additionalProperties: !1
		};
		t.FindMissingWordsOnboardingShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Ie.required,
						parentSchema: Ie,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Ie.required,
						parentSchema: Ie,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.contextLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Ie.required,
						parentSchema: Ie,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Ie.required,
						parentSchema: Ie,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(Ie.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ie,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ie.properties.platform.type,
							parentSchema: Ie.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ie.properties.spanSelectionHash.type,
							parentSchema: Ie.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var v = t.isFirstEngagement;
					if ("boolean" !== typeof v) {
						var b = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ie.properties.isFirstEngagement.type,
							parentSchema: Ie.properties.isFirstEngagement,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var P = t.caretLocation;
					if (!Array.isArray(P)) {
						var S = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Ie.properties.caretLocation.type,
							parentSchema: Ie.properties.caretLocation,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var w = t.spanSelectionLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ie.properties.spanSelectionLength.type,
							parentSchema: Ie.properties.spanSelectionLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var _ = t.contextLength;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ie.properties.contextLength.type,
							parentSchema: Ie.properties.contextLength,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.draftId) {
					var q = t.draftId;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ie.properties.draftId.type,
							parentSchema: Ie.properties.draftId,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.configString) {
					var x = t.configString;
					if ("string" !== typeof x && null !== x) {
						var E = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ie.properties.configString.type
							},
							message: "must be string,null",
							schema: Ie.properties.configString.type,
							parentSchema: Ie.properties.configString,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.tabId) {
					var N = t.tabId;
					if (("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) && null !== N) {
						var O = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ie.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ie.properties.tabId.type,
							parentSchema: Ie.properties.tabId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.app) {
					var D = t.app;
					if ("string" !== typeof D && null !== D) {
						var T = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ie.properties.app.type
							},
							message: "must be string,null",
							schema: Ie.properties.app.type,
							parentSchema: Ie.properties.app,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.host) {
					var j = t.host;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ie.properties.host.type
							},
							message: "must be string,null",
							schema: Ie.properties.host.type,
							parentSchema: Ie.properties.host,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
			} else {
				var C = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ie.type,
					parentSchema: Ie,
					data: t
				};
				null === s ? s = [C] : s.push(C), p++
			}
			return e.errors = s, 0 === p
		};
		var Ie = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "contextLength", "draftId"],
			$id: "FindMissingWordsOnboardingShown",
			additionalProperties: !1
		};
		t.FindMissingWordsOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.fetchDuration) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "fetchDuration"
						},
						message: "must have required property 'fetchDuration'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.platform) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.isLimitedSuggestions) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isLimitedSuggestions"
						},
						message: "must have required property 'isLimitedSuggestions'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfLockedSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfLockedSuggestions"
						},
						message: "must have required property 'numOfLockedSuggestions'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.spanStart) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanStart"
						},
						message: "must have required property 'spanStart'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.interactionId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: qe.required,
						parentSchema: qe,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				for (var v in t)
					if (!i.call(qe.properties, v)) {
						var b = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: v
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: qe,
							data: t
						};
						null === s ? s = [b] : s.push(b), p++
					} if (void 0 !== t.fetchDuration) {
					var P = t.fetchDuration;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/fetchDuration",
							schemaPath: "#/properties/fetchDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: qe.properties.fetchDuration.type,
							parentSchema: qe.properties.fetchDuration,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.platform) {
					var w = t.platform;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: qe.properties.platform.type,
							parentSchema: qe.properties.platform,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var _ = t.spanSelectionHash;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: qe.properties.spanSelectionHash.type,
							parentSchema: qe.properties.spanSelectionHash,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.isLimitedSuggestions) {
					var q = t.isLimitedSuggestions;
					if ("boolean" !== typeof q) {
						var L = {
							instancePath: n + "/isLimitedSuggestions",
							schemaPath: "#/properties/isLimitedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: qe.properties.isLimitedSuggestions.type,
							parentSchema: qe.properties.isLimitedSuggestions,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var x = t.numOfSuggestions;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: qe.properties.numOfSuggestions.type,
							parentSchema: qe.properties.numOfSuggestions,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.languages) {
					var N = t.languages;
					if (!Array.isArray(N)) {
						var O = {
							instancePath: n + "/languages",
							schemaPath: "#/properties/languages/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: qe.properties.languages.type,
							parentSchema: qe.properties.languages,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var D = t.contextLength;
					if ("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) {
						var T = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: qe.properties.contextLength.type,
							parentSchema: qe.properties.contextLength,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.numOfLockedSuggestions) {
					var j = t.numOfLockedSuggestions;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/numOfLockedSuggestions",
							schemaPath: "#/properties/numOfLockedSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: qe.properties.numOfLockedSuggestions.type,
							parentSchema: qe.properties.numOfLockedSuggestions,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.spanStart) {
					var C = t.spanStart;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/spanStart",
							schemaPath: "#/properties/spanStart/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: qe.properties.spanStart.type,
							parentSchema: qe.properties.spanStart,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var H = t.interactionId;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: qe.properties.interactionId.type,
							parentSchema: qe.properties.interactionId,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.draftId) {
					var M = t.draftId;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: qe.properties.draftId.type,
							parentSchema: qe.properties.draftId,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var z = t.caretLocation;
					if (!Array.isArray(z)) {
						var U = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: qe.properties.caretLocation.type,
							parentSchema: qe.properties.caretLocation,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.configString) {
					var B = t.configString;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: qe.properties.configString.type
							},
							message: "must be string,null",
							schema: qe.properties.configString.type,
							parentSchema: qe.properties.configString,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.tabId) {
					var V = t.tabId;
					if (("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) && null !== V) {
						var G = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: qe.properties.tabId.type
							},
							message: "must be integer,null",
							schema: qe.properties.tabId.type,
							parentSchema: qe.properties.tabId,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.app) {
					var K = t.app;
					if ("string" !== typeof K && null !== K) {
						var Q = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: qe.properties.app.type
							},
							message: "must be string,null",
							schema: qe.properties.app.type,
							parentSchema: qe.properties.app,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.host) {
					var Y = t.host;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: qe.properties.host.type
							},
							message: "must be string,null",
							schema: qe.properties.host.type,
							parentSchema: qe.properties.host,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
			} else {
				var X = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: qe.type,
					parentSchema: qe,
					data: t
				};
				null === s ? s = [X] : s.push(X), p++
			}
			return e.errors = s, 0 === p
		};
		var qe = {
			properties: {
				fetchDuration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isLimitedSuggestions: {
					type: "boolean"
				},
				numOfSuggestions: {
					type: "integer"
				},
				languages: {
					type: "array"
				},
				contextLength: {
					type: "integer"
				},
				numOfLockedSuggestions: {
					type: "integer"
				},
				spanStart: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["fetchDuration", "platform", "spanSelectionHash", "isLimitedSuggestions", "numOfSuggestions", "contextLength", "numOfLockedSuggestions", "spanStart", "interactionId", "draftId"],
			$id: "FindMissingWordsOpened",
			additionalProperties: !1
		};
		t.FormalClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Le.required,
						parentSchema: Le,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Le.required,
						parentSchema: Le,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Le.required,
						parentSchema: Le,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.randomizedSuggestions) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: Le.required,
						parentSchema: Le,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.interactionId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Le.required,
						parentSchema: Le,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.duration) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: Le.required,
						parentSchema: Le,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.spanSelectionLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionLength"
						},
						message: "must have required property 'spanSelectionLength'",
						schema: Le.required,
						parentSchema: Le,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Le.required,
						parentSchema: Le,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(Le.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Le,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.platform) {
					var v = t.platform;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Le.properties.platform.type,
							parentSchema: Le.properties.platform,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var P = t.spanSelectionHash;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Le.properties.spanSelectionHash.type,
							parentSchema: Le.properties.spanSelectionHash,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.origin) {
					var w = t.origin;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Le.properties.origin.type,
							parentSchema: Le.properties.origin,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var _ = t.randomizedSuggestions;
					if ("boolean" !== typeof _) {
						var I = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Le.properties.randomizedSuggestions.type,
							parentSchema: Le.properties.randomizedSuggestions,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var q = t.interactionId;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Le.properties.interactionId.type,
							parentSchema: Le.properties.interactionId,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.draftId) {
					var x = t.draftId;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Le.properties.draftId.type,
							parentSchema: Le.properties.draftId,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.duration) {
					var N = t.duration;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Le.properties.duration.type,
							parentSchema: Le.properties.duration,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var D = t.spanSelectionLength;
					if ("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) {
						var T = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Le.properties.spanSelectionLength.type,
							parentSchema: Le.properties.spanSelectionLength,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var j = t.isFirstEngagement;
					if ("boolean" !== typeof j) {
						var F = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Le.properties.isFirstEngagement.type,
							parentSchema: Le.properties.isFirstEngagement,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var C = t.contextLength;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Le.properties.contextLength.type,
							parentSchema: Le.properties.contextLength,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var H = t.caretLocation;
					if (!Array.isArray(H)) {
						var R = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Le.properties.caretLocation.type,
							parentSchema: Le.properties.caretLocation,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.configString) {
					var M = t.configString;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Le.properties.configString.type
							},
							message: "must be string,null",
							schema: Le.properties.configString.type,
							parentSchema: Le.properties.configString,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.tabId) {
					var z = t.tabId;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Le.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Le.properties.tabId.type,
							parentSchema: Le.properties.tabId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.app) {
					var B = t.app;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Le.properties.app.type
							},
							message: "must be string,null",
							schema: Le.properties.app.type,
							parentSchema: Le.properties.app,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.host) {
					var V = t.host;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Le.properties.host.type
							},
							message: "must be string,null",
							schema: Le.properties.host.type,
							parentSchema: Le.properties.host,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
			} else {
				var K = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Le.type,
					parentSchema: Le,
					data: t
				};
				null === s ? s = [K] : s.push(K), p++
			}
			return e.errors = s, 0 === p
		};
		var Le = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				duration: {
					type: "integer"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "randomizedSuggestions", "interactionId", "duration", "spanSelectionLength", "contextLength"],
			$id: "FormalClosed",
			additionalProperties: !1
		};
		t.FormalError = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: xe.required,
						parentSchema: xe,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: xe.required,
						parentSchema: xe,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.loadingDuration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: xe.required,
						parentSchema: xe,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: xe.required,
						parentSchema: xe,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.draftId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: xe.required,
						parentSchema: xe,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.errorMsg) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "errorMsg"
						},
						message: "must have required property 'errorMsg'",
						schema: xe.required,
						parentSchema: xe,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.errorCode) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "errorCode"
						},
						message: "must have required property 'errorCode'",
						schema: xe.required,
						parentSchema: xe,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.interactionId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: xe.required,
						parentSchema: xe,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(xe.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: xe,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.platform) {
					var v = t.platform;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xe.properties.platform.type,
							parentSchema: xe.properties.platform,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var P = t.spanSelectionHash;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xe.properties.spanSelectionHash.type,
							parentSchema: xe.properties.spanSelectionHash,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var w = t.spanSelectionLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: xe.properties.spanSelectionLength.type,
							parentSchema: xe.properties.spanSelectionLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.loadingDuration) {
					var _ = t.loadingDuration;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: xe.properties.loadingDuration.type,
							parentSchema: xe.properties.loadingDuration,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var q = t.contextLength;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: xe.properties.contextLength.type,
							parentSchema: xe.properties.contextLength,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.draftId) {
					var x = t.draftId;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xe.properties.draftId.type,
							parentSchema: xe.properties.draftId,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var N = t.caretLocation;
					if (!Array.isArray(N)) {
						var O = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: xe.properties.caretLocation.type,
							parentSchema: xe.properties.caretLocation,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.errorMsg) {
					var D = t.errorMsg;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/errorMsg",
							schemaPath: "#/properties/errorMsg/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xe.properties.errorMsg.type,
							parentSchema: xe.properties.errorMsg,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.errorCode) {
					var j = t.errorCode;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/errorCode",
							schemaPath: "#/properties/errorCode/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: xe.properties.errorCode.type,
							parentSchema: xe.properties.errorCode,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var C = t.interactionId;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xe.properties.interactionId.type,
							parentSchema: xe.properties.interactionId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var H = t.isFirstEngagement;
					if ("boolean" !== typeof H) {
						var R = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: xe.properties.isFirstEngagement.type,
							parentSchema: xe.properties.isFirstEngagement,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.configString) {
					var M = t.configString;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: xe.properties.configString.type
							},
							message: "must be string,null",
							schema: xe.properties.configString.type,
							parentSchema: xe.properties.configString,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.tabId) {
					var z = t.tabId;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: xe.properties.tabId.type
							},
							message: "must be integer,null",
							schema: xe.properties.tabId.type,
							parentSchema: xe.properties.tabId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.app) {
					var B = t.app;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: xe.properties.app.type
							},
							message: "must be string,null",
							schema: xe.properties.app.type,
							parentSchema: xe.properties.app,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.host) {
					var V = t.host;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: xe.properties.host.type
							},
							message: "must be string,null",
							schema: xe.properties.host.type,
							parentSchema: xe.properties.host,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
			} else {
				var K = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: xe.type,
					parentSchema: xe,
					data: t
				};
				null === s ? s = [K] : s.push(K), p++
			}
			return e.errors = s, 0 === p
		};
		var xe = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				loadingDuration: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				errorMsg: {
					type: "string"
				},
				errorCode: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "loadingDuration", "contextLength", "draftId", "errorMsg", "errorCode", "interactionId"],
			$id: "FormalError",
			additionalProperties: !1
		};
		t.FormalFetchStarted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Ee.required,
						parentSchema: Ee,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Ee.required,
						parentSchema: Ee,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Ee.required,
						parentSchema: Ee,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Ee.required,
						parentSchema: Ee,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(Ee.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ee,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ee.properties.platform.type,
							parentSchema: Ee.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ee.properties.spanSelectionHash.type,
							parentSchema: Ee.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ee.properties.spanSelectionLength.type,
							parentSchema: Ee.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.origin) {
					var P = t.origin;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ee.properties.origin.type,
							parentSchema: Ee.properties.origin,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var w = t.contextLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ee.properties.contextLength.type,
							parentSchema: Ee.properties.contextLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.draftId) {
					var _ = t.draftId;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ee.properties.draftId.type,
							parentSchema: Ee.properties.draftId,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var q = t.caretLocation;
					if (!Array.isArray(q)) {
						var L = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Ee.properties.caretLocation.type,
							parentSchema: Ee.properties.caretLocation,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var x = t.isFirstEngagement;
					if ("boolean" !== typeof x) {
						var E = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ee.properties.isFirstEngagement.type,
							parentSchema: Ee.properties.isFirstEngagement,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.configString) {
					var N = t.configString;
					if ("string" !== typeof N && null !== N) {
						var O = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ee.properties.configString.type
							},
							message: "must be string,null",
							schema: Ee.properties.configString.type,
							parentSchema: Ee.properties.configString,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.tabId) {
					var D = t.tabId;
					if (("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) && null !== D) {
						var T = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ee.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ee.properties.tabId.type,
							parentSchema: Ee.properties.tabId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.app) {
					var j = t.app;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ee.properties.app.type
							},
							message: "must be string,null",
							schema: Ee.properties.app.type,
							parentSchema: Ee.properties.app,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.host) {
					var C = t.host;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ee.properties.host.type
							},
							message: "must be string,null",
							schema: Ee.properties.host.type,
							parentSchema: Ee.properties.host,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
			} else {
				var H = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ee.type,
					parentSchema: Ee,
					data: t
				};
				null === s ? s = [H] : s.push(H), p++
			}
			return e.errors = s, 0 === p
		};
		var Ee = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "contextLength"],
			$id: "FormalFetchStarted",
			additionalProperties: !1
		};
		t.FormalOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.loadingDuration) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.randomizedSuggestions) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.isNudged) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isNudged"
						},
						message: "must have required property 'isNudged'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isBatch) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isBatch"
						},
						message: "must have required property 'isBatch'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.isLimitedSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isLimitedSuggestions"
						},
						message: "must have required property 'isLimitedSuggestions'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.origin) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.contextLength) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.spanEncompassingSentenceHash) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceHash"
						},
						message: "must have required property 'spanEncompassingSentenceHash'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				if (void 0 === t.spanEncompassingSentenceLength) {
					var b = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceLength"
						},
						message: "must have required property 'spanEncompassingSentenceLength'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [b] : s.push(b), p++
				}
				if (void 0 === t.interactionId) {
					var P = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [P] : s.push(P), p++
				}
				if (void 0 === t.numOfLockedSuggestions) {
					var S = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfLockedSuggestions"
						},
						message: "must have required property 'numOfLockedSuggestions'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [S] : s.push(S), p++
				}
				if (void 0 === t.batchIndex) {
					var w = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchIndex"
						},
						message: "must have required property 'batchIndex'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [w] : s.push(w), p++
				}
				if (void 0 === t.spanSelectionModificationShown) {
					var k = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionModificationShown"
						},
						message: "must have required property 'spanSelectionModificationShown'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [k] : s.push(k), p++
				}
				if (void 0 === t.cacheInteractionId) {
					var _ = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "cacheInteractionId"
						},
						message: "must have required property 'cacheInteractionId'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [_] : s.push(_), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var I = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: Ne.required,
						parentSchema: Ne,
						data: t
					};
					null === s ? s = [I] : s.push(I), p++
				}
				for (var q in t)
					if (!i.call(Ne.properties, q)) {
						var L = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: q
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ne,
							data: t
						};
						null === s ? s = [L] : s.push(L), p++
					} if (void 0 !== t.loadingDuration) {
					var x = t.loadingDuration;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ne.properties.loadingDuration.type,
							parentSchema: Ne.properties.loadingDuration,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var N = t.randomizedSuggestions;
					if ("boolean" !== typeof N) {
						var O = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ne.properties.randomizedSuggestions.type,
							parentSchema: Ne.properties.randomizedSuggestions,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isNudged) {
					var D = t.isNudged;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isNudged",
							schemaPath: "#/properties/isNudged/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ne.properties.isNudged.type,
							parentSchema: Ne.properties.isNudged,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.platform) {
					var j = t.platform;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ne.properties.platform.type,
							parentSchema: Ne.properties.platform,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var C = t.spanSelectionHash;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ne.properties.spanSelectionHash.type,
							parentSchema: Ne.properties.spanSelectionHash,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var H = t.isBatch;
					if ("boolean" !== typeof H) {
						var R = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ne.properties.isBatch.type,
							parentSchema: Ne.properties.isBatch,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.isLimitedSuggestions) {
					var M = t.isLimitedSuggestions;
					if ("boolean" !== typeof M) {
						var $ = {
							instancePath: n + "/isLimitedSuggestions",
							schemaPath: "#/properties/isLimitedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ne.properties.isLimitedSuggestions.type,
							parentSchema: Ne.properties.isLimitedSuggestions,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var z = t.numOfSuggestions;
					if ("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) {
						var U = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ne.properties.numOfSuggestions.type,
							parentSchema: Ne.properties.numOfSuggestions,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.origin) {
					var B = t.origin;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ne.properties.origin.type,
							parentSchema: Ne.properties.origin,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var V = t.contextLength;
					if ("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) {
						var G = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ne.properties.contextLength.type,
							parentSchema: Ne.properties.contextLength,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceHash) {
					var K = t.spanEncompassingSentenceHash;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/spanEncompassingSentenceHash",
							schemaPath: "#/properties/spanEncompassingSentenceHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ne.properties.spanEncompassingSentenceHash.type,
							parentSchema: Ne.properties.spanEncompassingSentenceHash,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceLength) {
					var Y = t.spanEncompassingSentenceLength;
					if ("number" != typeof Y || Y % 1 || isNaN(Y) || !isFinite(Y)) {
						var J = {
							instancePath: n + "/spanEncompassingSentenceLength",
							schemaPath: "#/properties/spanEncompassingSentenceLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ne.properties.spanEncompassingSentenceLength.type,
							parentSchema: Ne.properties.spanEncompassingSentenceLength,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var X = t.interactionId;
					if ("string" !== typeof X) {
						var Z = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ne.properties.interactionId.type,
							parentSchema: Ne.properties.interactionId,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.numOfLockedSuggestions) {
					var ee = t.numOfLockedSuggestions;
					if ("number" != typeof ee || ee % 1 || isNaN(ee) || !isFinite(ee)) {
						var te = {
							instancePath: n + "/numOfLockedSuggestions",
							schemaPath: "#/properties/numOfLockedSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ne.properties.numOfLockedSuggestions.type,
							parentSchema: Ne.properties.numOfLockedSuggestions,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.draftId) {
					var re = t.draftId;
					if ("string" !== typeof re) {
						var ae = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ne.properties.draftId.type,
							parentSchema: Ne.properties.draftId,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var ne = t.caretLocation;
					if (!Array.isArray(ne)) {
						var ie = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Ne.properties.caretLocation.type,
							parentSchema: Ne.properties.caretLocation,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var se = t.spanSelectionLength;
					if ("number" != typeof se || se % 1 || isNaN(se) || !isFinite(se)) {
						var pe = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ne.properties.spanSelectionLength.type,
							parentSchema: Ne.properties.spanSelectionLength,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var oe = t.batchIndex;
					if (("number" != typeof oe || oe % 1 || isNaN(oe) || !isFinite(oe)) && null !== oe) {
						var ce = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: Ne.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: Ne.properties.batchIndex.type,
							parentSchema: Ne.properties.batchIndex,
							data: oe
						};
						null === s ? s = [ce] : s.push(ce), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var he = t.batchInteractionId;
					if ("string" !== typeof he) {
						var ue = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ne.properties.batchInteractionId.type,
							parentSchema: Ne.properties.batchInteractionId,
							data: he
						};
						null === s ? s = [ue] : s.push(ue), p++
					}
				}
				if (void 0 !== t.spanSelectionModificationShown) {
					var me = t.spanSelectionModificationShown;
					if ("string" !== typeof me && null !== me) {
						var de = {
							instancePath: n + "/spanSelectionModificationShown",
							schemaPath: "#/properties/spanSelectionModificationShown/type",
							keyword: "type",
							params: {
								type: Ne.properties.spanSelectionModificationShown.type
							},
							message: "must be string,null",
							schema: Ne.properties.spanSelectionModificationShown.type,
							parentSchema: Ne.properties.spanSelectionModificationShown,
							data: me
						};
						null === s ? s = [de] : s.push(de), p++
					}
				}
				if (void 0 !== t.cacheInteractionId) {
					var le = t.cacheInteractionId;
					if ("string" !== typeof le && null !== le) {
						var ye = {
							instancePath: n + "/cacheInteractionId",
							schemaPath: "#/properties/cacheInteractionId/type",
							keyword: "type",
							params: {
								type: Ne.properties.cacheInteractionId.type
							},
							message: "must be string,null",
							schema: Ne.properties.cacheInteractionId.type,
							parentSchema: Ne.properties.cacheInteractionId,
							data: le
						};
						null === s ? s = [ye] : s.push(ye), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var ge = t.batchTotalSentences;
					if (("number" != typeof ge || ge % 1 || isNaN(ge) || !isFinite(ge)) && null !== ge) {
						var fe = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: Ne.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: Ne.properties.batchTotalSentences.type,
							parentSchema: Ne.properties.batchTotalSentences,
							data: ge
						};
						null === s ? s = [fe] : s.push(fe), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var ve = t.isFirstEngagement;
					if ("boolean" !== typeof ve) {
						var be = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ne.properties.isFirstEngagement.type,
							parentSchema: Ne.properties.isFirstEngagement,
							data: ve
						};
						null === s ? s = [be] : s.push(be), p++
					}
				}
				if (void 0 !== t.configString) {
					var Pe = t.configString;
					if ("string" !== typeof Pe && null !== Pe) {
						var Se = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ne.properties.configString.type
							},
							message: "must be string,null",
							schema: Ne.properties.configString.type,
							parentSchema: Ne.properties.configString,
							data: Pe
						};
						null === s ? s = [Se] : s.push(Se), p++
					}
				}
				if (void 0 !== t.tabId) {
					var we = t.tabId;
					if (("number" != typeof we || we % 1 || isNaN(we) || !isFinite(we)) && null !== we) {
						var ke = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ne.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ne.properties.tabId.type,
							parentSchema: Ne.properties.tabId,
							data: we
						};
						null === s ? s = [ke] : s.push(ke), p++
					}
				}
				if (void 0 !== t.app) {
					var _e = t.app;
					if ("string" !== typeof _e && null !== _e) {
						var Ie = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ne.properties.app.type
							},
							message: "must be string,null",
							schema: Ne.properties.app.type,
							parentSchema: Ne.properties.app,
							data: _e
						};
						null === s ? s = [Ie] : s.push(Ie), p++
					}
				}
				if (void 0 !== t.host) {
					var qe = t.host;
					if ("string" !== typeof qe && null !== qe) {
						var Le = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ne.properties.host.type
							},
							message: "must be string,null",
							schema: Ne.properties.host.type,
							parentSchema: Ne.properties.host,
							data: qe
						};
						null === s ? s = [Le] : s.push(Le), p++
					}
				}
			} else {
				var xe = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ne.type,
					parentSchema: Ne,
					data: t
				};
				null === s ? s = [xe] : s.push(xe), p++
			}
			return e.errors = s, 0 === p
		};
		var Ne = {
			properties: {
				loadingDuration: {
					type: "integer"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				isNudged: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				isLimitedSuggestions: {
					type: "boolean"
				},
				numOfSuggestions: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				spanEncompassingSentenceHash: {
					type: "string"
				},
				spanEncompassingSentenceLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				numOfLockedSuggestions: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				batchInteractionId: {
					type: "string"
				},
				spanSelectionModificationShown: {
					type: ["string", "null"]
				},
				cacheInteractionId: {
					type: ["string", "null"]
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["loadingDuration", "randomizedSuggestions", "isNudged", "platform", "spanSelectionHash", "isBatch", "isLimitedSuggestions", "numOfSuggestions", "origin", "contextLength", "spanEncompassingSentenceHash", "spanEncompassingSentenceLength", "interactionId", "numOfLockedSuggestions", "batchIndex", "spanSelectionModificationShown", "cacheInteractionId", "batchTotalSentences"],
			$id: "FormalOpened",
			additionalProperties: !1
		};
		t.FormalSuggestionCopied = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.suggestionIndex) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "suggestionIndex"
						},
						message: "must have required property 'suggestionIndex'",
						schema: Oe.required,
						parentSchema: Oe,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: Oe.required,
						parentSchema: Oe,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.mode) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "mode"
						},
						message: "must have required property 'mode'",
						schema: Oe.required,
						parentSchema: Oe,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Oe.required,
						parentSchema: Oe,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Oe.required,
						parentSchema: Oe,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.counter) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "counter"
						},
						message: "must have required property 'counter'",
						schema: Oe.required,
						parentSchema: Oe,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Oe.required,
						parentSchema: Oe,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Oe.required,
						parentSchema: Oe,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.interactionId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Oe.required,
						parentSchema: Oe,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				for (var f in t)
					if (!i.call(Oe.properties, f)) {
						var v = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: f
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Oe,
							data: t
						};
						null === s ? s = [v] : s.push(v), p++
					} if (void 0 !== t.suggestionIndex) {
					var b = t.suggestionIndex;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/suggestionIndex",
							schemaPath: "#/properties/suggestionIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Oe.properties.suggestionIndex.type,
							parentSchema: Oe.properties.suggestionIndex,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.duration) {
					var S = t.duration;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Oe.properties.duration.type,
							parentSchema: Oe.properties.duration,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.mode) {
					var k = t.mode;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Oe.properties.mode.type,
							parentSchema: Oe.properties.mode,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.platform) {
					var I = t.platform;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Oe.properties.platform.type,
							parentSchema: Oe.properties.platform,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var L = t.spanSelectionHash;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Oe.properties.spanSelectionHash.type,
							parentSchema: Oe.properties.spanSelectionHash,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.counter) {
					var E = t.counter;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/counter",
							schemaPath: "#/properties/counter/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Oe.properties.counter.type,
							parentSchema: Oe.properties.counter,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var O = t.numOfSuggestions;
					if ("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) {
						var D = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Oe.properties.numOfSuggestions.type,
							parentSchema: Oe.properties.numOfSuggestions,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var T = t.contextLength;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Oe.properties.contextLength.type,
							parentSchema: Oe.properties.contextLength,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var F = t.interactionId;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Oe.properties.interactionId.type,
							parentSchema: Oe.properties.interactionId,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.draftId) {
					var A = t.draftId;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Oe.properties.draftId.type,
							parentSchema: Oe.properties.draftId,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var R = t.caretLocation;
					if (!Array.isArray(R)) {
						var M = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Oe.properties.caretLocation.type,
							parentSchema: Oe.properties.caretLocation,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var $ = t.spanSelectionLength;
					if ("number" != typeof $ || $ % 1 || isNaN($) || !isFinite($)) {
						var z = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Oe.properties.spanSelectionLength.type,
							parentSchema: Oe.properties.spanSelectionLength,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var U = t.isFirstEngagement;
					if ("boolean" !== typeof U) {
						var B = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Oe.properties.isFirstEngagement.type,
							parentSchema: Oe.properties.isFirstEngagement,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.configString) {
					var W = t.configString;
					if ("string" !== typeof W && null !== W) {
						var V = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Oe.properties.configString.type
							},
							message: "must be string,null",
							schema: Oe.properties.configString.type,
							parentSchema: Oe.properties.configString,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.tabId) {
					var G = t.tabId;
					if (("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) && null !== G) {
						var K = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Oe.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Oe.properties.tabId.type,
							parentSchema: Oe.properties.tabId,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.app) {
					var Q = t.app;
					if ("string" !== typeof Q && null !== Q) {
						var Y = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Oe.properties.app.type
							},
							message: "must be string,null",
							schema: Oe.properties.app.type,
							parentSchema: Oe.properties.app,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.host) {
					var J = t.host;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Oe.properties.host.type
							},
							message: "must be string,null",
							schema: Oe.properties.host.type,
							parentSchema: Oe.properties.host,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
			} else {
				var Z = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Oe.type,
					parentSchema: Oe,
					data: t
				};
				null === s ? s = [Z] : s.push(Z), p++
			}
			return e.errors = s, 0 === p
		};
		var Oe = {
			properties: {
				suggestionIndex: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				counter: {
					type: "integer"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["suggestionIndex", "duration", "mode", "platform", "spanSelectionHash", "counter", "numOfSuggestions", "contextLength", "interactionId"],
			$id: "FormalSuggestionCopied",
			additionalProperties: !1
		};
		t.FormalSuggestionSelected = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.idx) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "idx"
						},
						message: "must have required property 'idx'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.total) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "total"
						},
						message: "must have required property 'total'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.mode) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "mode"
						},
						message: "must have required property 'mode'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isBatch) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isBatch"
						},
						message: "must have required property 'isBatch'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.contextLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.interactionId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.batchIndex) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchIndex"
						},
						message: "must have required property 'batchIndex'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: De.required,
						parentSchema: De,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(De.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: De,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.spanSelectionLength) {
					var S = t.spanSelectionLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: De.properties.spanSelectionLength.type,
							parentSchema: De.properties.spanSelectionLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.idx) {
					var k = t.idx;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/idx",
							schemaPath: "#/properties/idx/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: De.properties.idx.type,
							parentSchema: De.properties.idx,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.total) {
					var I = t.total;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/total",
							schemaPath: "#/properties/total/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: De.properties.total.type,
							parentSchema: De.properties.total,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.mode) {
					var L = t.mode;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: De.properties.mode.type,
							parentSchema: De.properties.mode,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.platform) {
					var E = t.platform;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: De.properties.platform.type,
							parentSchema: De.properties.platform,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var O = t.spanSelectionHash;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: De.properties.spanSelectionHash.type,
							parentSchema: De.properties.spanSelectionHash,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var T = t.isBatch;
					if ("boolean" !== typeof T) {
						var j = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: De.properties.isBatch.type,
							parentSchema: De.properties.isBatch,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var F = t.contextLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: De.properties.contextLength.type,
							parentSchema: De.properties.contextLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var A = t.interactionId;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: De.properties.interactionId.type,
							parentSchema: De.properties.interactionId,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var R = t.caretLocation;
					if (!Array.isArray(R)) {
						var M = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: De.properties.caretLocation.type,
							parentSchema: De.properties.caretLocation,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var $ = t.batchIndex;
					if (("number" != typeof $ || $ % 1 || isNaN($) || !isFinite($)) && null !== $) {
						var z = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: De.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: De.properties.batchIndex.type,
							parentSchema: De.properties.batchIndex,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var U = t.batchInteractionId;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: De.properties.batchInteractionId.type,
							parentSchema: De.properties.batchInteractionId,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.draftId) {
					var W = t.draftId;
					if ("string" !== typeof W) {
						var V = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: De.properties.draftId.type,
							parentSchema: De.properties.draftId,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var G = t.batchTotalSentences;
					if (("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) && null !== G) {
						var K = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: De.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: De.properties.batchTotalSentences.type,
							parentSchema: De.properties.batchTotalSentences,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var Q = t.isFirstEngagement;
					if ("boolean" !== typeof Q) {
						var Y = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: De.properties.isFirstEngagement.type,
							parentSchema: De.properties.isFirstEngagement,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.configString) {
					var J = t.configString;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: De.properties.configString.type
							},
							message: "must be string,null",
							schema: De.properties.configString.type,
							parentSchema: De.properties.configString,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Z = t.tabId;
					if (("number" != typeof Z || Z % 1 || isNaN(Z) || !isFinite(Z)) && null !== Z) {
						var ee = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: De.properties.tabId.type
							},
							message: "must be integer,null",
							schema: De.properties.tabId.type,
							parentSchema: De.properties.tabId,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.app) {
					var te = t.app;
					if ("string" !== typeof te && null !== te) {
						var re = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: De.properties.app.type
							},
							message: "must be string,null",
							schema: De.properties.app.type,
							parentSchema: De.properties.app,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
				if (void 0 !== t.host) {
					var ae = t.host;
					if ("string" !== typeof ae && null !== ae) {
						var ne = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: De.properties.host.type
							},
							message: "must be string,null",
							schema: De.properties.host.type,
							parentSchema: De.properties.host,
							data: ae
						};
						null === s ? s = [ne] : s.push(ne), p++
					}
				}
			} else {
				var ie = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: De.type,
					parentSchema: De,
					data: t
				};
				null === s ? s = [ie] : s.push(ie), p++
			}
			return e.errors = s, 0 === p
		};
		var De = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				idx: {
					type: "integer"
				},
				total: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				batchInteractionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["idx", "total", "mode", "platform", "spanSelectionHash", "isBatch", "contextLength", "interactionId", "batchIndex", "draftId", "batchTotalSentences"],
			$id: "FormalSuggestionSelected",
			additionalProperties: !1
		};
		t.FreeActivated = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.startDate) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "startDate"
						},
						message: "must have required property 'startDate'",
						schema: Te.required,
						parentSchema: Te,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.previousPlan) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "previousPlan"
						},
						message: "must have required property 'previousPlan'",
						schema: Te.required,
						parentSchema: Te,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				if (void 0 === t.endDate) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "endDate"
						},
						message: "must have required property 'endDate'",
						schema: Te.required,
						parentSchema: Te,
						data: t
					};
					null === i ? i = [c] : i.push(c), s++
				}
				for (var h in t)
					if ("startDate" !== h && "previousPlan" !== h && "endDate" !== h && "configString" !== h && "tabId" !== h && "app" !== h && "host" !== h) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Te,
							data: t
						};
						null === i ? i = [u] : i.push(u), s++
					} if (void 0 !== t.startDate) {
					var m = t.startDate;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/startDate",
							schemaPath: "#/properties/startDate/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Te.properties.startDate.type,
							parentSchema: Te.properties.startDate,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.previousPlan) {
					var l = t.previousPlan;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/previousPlan",
							schemaPath: "#/properties/previousPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Te.properties.previousPlan.type,
							parentSchema: Te.properties.previousPlan,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.endDate) {
					var g = t.endDate;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/endDate",
							schemaPath: "#/properties/endDate/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Te.properties.endDate.type,
							parentSchema: Te.properties.endDate,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.configString) {
					var v = t.configString;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Te.properties.configString.type
							},
							message: "must be string,null",
							schema: Te.properties.configString.type,
							parentSchema: Te.properties.configString,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.tabId) {
					var P = t.tabId;
					if (("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) && null !== P) {
						var S = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Te.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Te.properties.tabId.type,
							parentSchema: Te.properties.tabId,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
				if (void 0 !== t.app) {
					var w = t.app;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Te.properties.app.type
							},
							message: "must be string,null",
							schema: Te.properties.app.type,
							parentSchema: Te.properties.app,
							data: w
						};
						null === i ? i = [k] : i.push(k), s++
					}
				}
				if (void 0 !== t.host) {
					var _ = t.host;
					if ("string" !== typeof _ && null !== _) {
						var I = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Te.properties.host.type
							},
							message: "must be string,null",
							schema: Te.properties.host.type,
							parentSchema: Te.properties.host,
							data: _
						};
						null === i ? i = [I] : i.push(I), s++
					}
				}
			} else {
				var q = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Te.type,
					parentSchema: Te,
					data: t
				};
				null === i ? i = [q] : i.push(q), s++
			}
			return e.errors = i, 0 === s
		};
		var Te = {
			properties: {
				startDate: {
					type: "string"
				},
				previousPlan: {
					type: "string"
				},
				endDate: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["startDate", "previousPlan", "endDate"],
			$id: "FreeActivated",
			additionalProperties: !1
		};
		t.freeCumulativeDays = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: je.type,
					parentSchema: je,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var je = {
			type: "integer",
			$id: "freeCumulativeDays"
		};
		t.fromEmailHash = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Fe.type,
					parentSchema: Fe,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Fe = {
			type: "string",
			$id: "fromEmailHash"
		};
		t.FrontendError = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ce,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ce.properties.configString.type
							},
							message: "must be string,null",
							schema: Ce.properties.configString.type,
							parentSchema: Ce.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ce.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ce.properties.tabId.type,
							parentSchema: Ce.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ce.properties.app.type
							},
							message: "must be string,null",
							schema: Ce.properties.app.type,
							parentSchema: Ce.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ce.properties.host.type
							},
							message: "must be string,null",
							schema: Ce.properties.host.type,
							parentSchema: Ce.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ce.type,
					parentSchema: Ce,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var Ce = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "FrontendError",
			additionalProperties: !1
		};
		t.gclid = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Ae.type,
					parentSchema: Ae,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ae = {
			type: "string",
			$id: "gclid"
		};
		t.GdocsCanvasMode = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: He,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: He.properties.configString.type
							},
							message: "must be string,null",
							schema: He.properties.configString.type,
							parentSchema: He.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: He.properties.tabId.type
							},
							message: "must be integer,null",
							schema: He.properties.tabId.type,
							parentSchema: He.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: He.properties.app.type
							},
							message: "must be string,null",
							schema: He.properties.app.type,
							parentSchema: He.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: He.properties.host.type
							},
							message: "must be string,null",
							schema: He.properties.host.type,
							parentSchema: He.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: He.type,
					parentSchema: He,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var He = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "GdocsCanvasMode",
			additionalProperties: !1
		};
		t.GdocsDocNotInEditMode = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Re,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Re.properties.configString.type
							},
							message: "must be string,null",
							schema: Re.properties.configString.type,
							parentSchema: Re.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Re.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Re.properties.tabId.type,
							parentSchema: Re.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Re.properties.app.type
							},
							message: "must be string,null",
							schema: Re.properties.app.type,
							parentSchema: Re.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Re.properties.host.type
							},
							message: "must be string,null",
							schema: Re.properties.host.type,
							parentSchema: Re.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Re.type,
					parentSchema: Re,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var Re = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "GdocsDocNotInEditMode",
			additionalProperties: !1
		};
		t.GetStartedPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Me.required,
						parentSchema: Me,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.platform) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Me.required,
						parentSchema: Me,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Me.required,
						parentSchema: Me,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Me.required,
						parentSchema: Me,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.draftId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Me.required,
						parentSchema: Me,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(Me.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Me,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.origin) {
					var y = t.origin;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Me.properties.origin.type,
							parentSchema: Me.properties.origin,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.platform) {
					var f = t.platform;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Me.properties.platform.type,
							parentSchema: Me.properties.platform,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var b = t.spanSelectionHash;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Me.properties.spanSelectionHash.type,
							parentSchema: Me.properties.spanSelectionHash,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var S = t.spanSelectionLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Me.properties.spanSelectionLength.type,
							parentSchema: Me.properties.spanSelectionLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var k = t.contextLength;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Me.properties.contextLength.type,
							parentSchema: Me.properties.contextLength,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.draftId) {
					var I = t.draftId;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Me.properties.draftId.type,
							parentSchema: Me.properties.draftId,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var L = t.caretLocation;
					if (!Array.isArray(L)) {
						var x = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Me.properties.caretLocation.type,
							parentSchema: Me.properties.caretLocation,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.configString) {
					var E = t.configString;
					if ("string" !== typeof E && null !== E) {
						var N = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Me.properties.configString.type
							},
							message: "must be string,null",
							schema: Me.properties.configString.type,
							parentSchema: Me.properties.configString,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.tabId) {
					var O = t.tabId;
					if (("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) && null !== O) {
						var D = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Me.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Me.properties.tabId.type,
							parentSchema: Me.properties.tabId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.app) {
					var T = t.app;
					if ("string" !== typeof T && null !== T) {
						var j = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Me.properties.app.type
							},
							message: "must be string,null",
							schema: Me.properties.app.type,
							parentSchema: Me.properties.app,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.host) {
					var F = t.host;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Me.properties.host.type
							},
							message: "must be string,null",
							schema: Me.properties.host.type,
							parentSchema: Me.properties.host,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
			} else {
				var A = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Me.type,
					parentSchema: Me,
					data: t
				};
				null === s ? s = [A] : s.push(A), p++
			}
			return e.errors = s, 0 === p
		};
		var Me = {
			properties: {
				origin: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin", "platform", "spanSelectionHash", "contextLength", "draftId"],
			$id: "GetStartedPressed",
			additionalProperties: !1
		};
		t.grammarly = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: $e.type,
					parentSchema: $e,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var $e = {
			type: "boolean",
			$id: "grammarly"
		};
		t.inactiveUser = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: ze.type,
					parentSchema: ze,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ze = {
			type: "boolean",
			$id: "inactiveUser"
		};
		t.InitError = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.error) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "error"
						},
						message: "must have required property 'error'",
						schema: Ue.required,
						parentSchema: Ue,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("error" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ue,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.error) {
					var h = t.error;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/error",
							schemaPath: "#/properties/error/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ue.properties.error.type,
							parentSchema: Ue.properties.error,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ue.properties.configString.type
							},
							message: "must be string,null",
							schema: Ue.properties.configString.type,
							parentSchema: Ue.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ue.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ue.properties.tabId.type,
							parentSchema: Ue.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ue.properties.app.type
							},
							message: "must be string,null",
							schema: Ue.properties.app.type,
							parentSchema: Ue.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ue.properties.host.type
							},
							message: "must be string,null",
							schema: Ue.properties.host.type,
							parentSchema: Ue.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ue.type,
					parentSchema: Ue,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Ue = {
			properties: {
				error: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["error"],
			$id: "InitError",
			additionalProperties: !1
		};
		t.initial_gclid = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Be.type,
					parentSchema: Be,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Be = {
			type: "string",
			$id: "initial_gclid"
		};
		t.initial_referrer = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: We.type,
					parentSchema: We,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var We = {
			type: "string",
			$id: "initial_referrer"
		};
		t.initial_referring_domain = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Ve.type,
					parentSchema: Ve,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ve = {
			type: "string",
			$id: "initial_referring_domain"
		};
		t.initial_utm_campaign = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Ge.type,
					parentSchema: Ge,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ge = {
			type: "string",
			$id: "initial_utm_campaign"
		};
		t.initial_utm_medium = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Ke.type,
					parentSchema: Ke,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ke = {
			type: "string",
			$id: "initial_utm_medium"
		};
		t.initial_utm_source = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Qe.type,
					parentSchema: Qe,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Qe = {
			type: "string",
			$id: "initial_utm_source"
		};
		t.initial_utm_term = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Ye.type,
					parentSchema: Ye,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ye = {
			type: "string",
			$id: "initial_utm_term"
		};
		t.InitSuccess = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.userId) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "userId"
						},
						message: "must have required property 'userId'",
						schema: Je.required,
						parentSchema: Je,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("userId" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Je,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.userId) {
					var h = t.userId;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/userId",
							schemaPath: "#/properties/userId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Je.properties.userId.type,
							parentSchema: Je.properties.userId,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Je.properties.configString.type
							},
							message: "must be string,null",
							schema: Je.properties.configString.type,
							parentSchema: Je.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Je.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Je.properties.tabId.type,
							parentSchema: Je.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Je.properties.app.type
							},
							message: "must be string,null",
							schema: Je.properties.app.type,
							parentSchema: Je.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Je.properties.host.type
							},
							message: "must be string,null",
							schema: Je.properties.host.type,
							parentSchema: Je.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Je.type,
					parentSchema: Je,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Je = {
			properties: {
				userId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["userId"],
			$id: "InitSuccess",
			additionalProperties: !1
		};
		t.InjectedToTabs = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.count) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "count"
						},
						message: "must have required property 'count'",
						schema: Xe.required,
						parentSchema: Xe,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("count" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Xe,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.count) {
					var h = t.count;
					if ("number" != typeof h || h % 1 || isNaN(h) || !isFinite(h)) {
						var u = {
							instancePath: n + "/count",
							schemaPath: "#/properties/count/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Xe.properties.count.type,
							parentSchema: Xe.properties.count,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Xe.properties.configString.type
							},
							message: "must be string,null",
							schema: Xe.properties.configString.type,
							parentSchema: Xe.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Xe.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Xe.properties.tabId.type,
							parentSchema: Xe.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Xe.properties.app.type
							},
							message: "must be string,null",
							schema: Xe.properties.app.type,
							parentSchema: Xe.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Xe.properties.host.type
							},
							message: "must be string,null",
							schema: Xe.properties.host.type,
							parentSchema: Xe.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Xe.type,
					parentSchema: Xe,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Xe = {
			properties: {
				count: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["count"],
			$id: "InjectedToTabs",
			additionalProperties: !1
		};
		t.InjectionSep = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ze,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ze.properties.configString.type
							},
							message: "must be string,null",
							schema: Ze.properties.configString.type,
							parentSchema: Ze.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ze.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ze.properties.tabId.type,
							parentSchema: Ze.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ze.properties.app.type
							},
							message: "must be string,null",
							schema: Ze.properties.app.type,
							parentSchema: Ze.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ze.properties.host.type
							},
							message: "must be string,null",
							schema: Ze.properties.host.type,
							parentSchema: Ze.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ze.type,
					parentSchema: Ze,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var Ze = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "InjectionSep",
			additionalProperties: !1
		};
		t.installationDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (!t || "object" != typeof t || Array.isArray(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: et.type,
					parentSchema: et,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var et = {
			type: "object",
			$id: "installationDate"
		};
		t.InstallExtensionCTAPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.callToActionText) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "callToActionText"
						},
						message: "must have required property 'callToActionText'",
						schema: tt.required,
						parentSchema: tt,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				for (var c in t)
					if (!i.call(tt.properties, c)) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: tt,
							data: t
						};
						null === s ? s = [h] : s.push(h), p++
					} if (void 0 !== t.utm_source) {
					var u = t.utm_source;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.utm_source.type,
							parentSchema: tt.properties.utm_source,
							data: u
						};
						null === s ? s = [m] : s.push(m), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var d = t.ad_set_name;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.ad_set_name.type,
							parentSchema: tt.properties.ad_set_name,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.style) {
					var y = t.style;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/style",
							schemaPath: "#/properties/style/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.style.type,
							parentSchema: tt.properties.style,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var f = t.utm_medium;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.utm_medium.type,
							parentSchema: tt.properties.utm_medium,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.origin) {
					var b = t.origin;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.origin.type,
							parentSchema: tt.properties.origin,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.callToActionText) {
					var S = t.callToActionText;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/callToActionText",
							schemaPath: "#/properties/callToActionText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.callToActionText.type,
							parentSchema: tt.properties.callToActionText,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var k = t.utm_campaign;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.utm_campaign.type,
							parentSchema: tt.properties.utm_campaign,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.gclid) {
					var I = t.gclid;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.gclid.type,
							parentSchema: tt.properties.gclid,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.referrer) {
					var L = t.referrer;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/referrer",
							schemaPath: "#/properties/referrer/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.referrer.type,
							parentSchema: tt.properties.referrer,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var E = t.utm_term;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.utm_term.type,
							parentSchema: tt.properties.utm_term,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.draftId) {
					var O = t.draftId;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.draftId.type,
							parentSchema: tt.properties.draftId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.numOfRewritesMade) {
					var T = t.numOfRewritesMade;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/numOfRewritesMade",
							schemaPath: "#/properties/numOfRewritesMade/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: tt.properties.numOfRewritesMade.type,
							parentSchema: tt.properties.numOfRewritesMade,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.p) {
					var F = t.p;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.p.type,
							parentSchema: tt.properties.p,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.referer) {
					var A = t.referer;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/referer",
							schemaPath: "#/properties/referer/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.referer.type,
							parentSchema: tt.properties.referer,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.ref) {
					var R = t.ref;
					if ("string" !== typeof R) {
						var M = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.ref.type,
							parentSchema: tt.properties.ref,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var $ = t.ad_name;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.ad_name.type,
							parentSchema: tt.properties.ad_name,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var U = t.fbclid;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.fbclid.type,
							parentSchema: tt.properties.fbclid,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.msclkid) {
					var W = t.msclkid;
					if ("string" !== typeof W) {
						var V = {
							instancePath: n + "/msclkid",
							schemaPath: "#/properties/msclkid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.msclkid.type,
							parentSchema: tt.properties.msclkid,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.fui) {
					var G = t.fui;
					if ("string" !== typeof G) {
						var K = {
							instancePath: n + "/fui",
							schemaPath: "#/properties/fui/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.fui.type,
							parentSchema: tt.properties.fui,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.ad_set_) {
					var Q = t.ad_set_;
					if ("string" !== typeof Q) {
						var Y = {
							instancePath: n + "/ad_set_",
							schemaPath: "#/properties/ad_set_/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.ad_set_.type,
							parentSchema: tt.properties.ad_set_,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.utm_campain) {
					var J = t.utm_campain;
					if ("string" !== typeof J) {
						var X = {
							instancePath: n + "/utm_campain",
							schemaPath: "#/properties/utm_campain/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.utm_campain.type,
							parentSchema: tt.properties.utm_campain,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.path) {
					var Z = t.path;
					if ("string" !== typeof Z) {
						var ee = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tt.properties.path.type,
							parentSchema: tt.properties.path,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.configString) {
					var te = t.configString;
					if ("string" !== typeof te && null !== te) {
						var re = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: tt.properties.configString.type
							},
							message: "must be string,null",
							schema: tt.properties.configString.type,
							parentSchema: tt.properties.configString,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
				if (void 0 !== t.tabId) {
					var ae = t.tabId;
					if (("number" != typeof ae || ae % 1 || isNaN(ae) || !isFinite(ae)) && null !== ae) {
						var ne = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: tt.properties.tabId.type
							},
							message: "must be integer,null",
							schema: tt.properties.tabId.type,
							parentSchema: tt.properties.tabId,
							data: ae
						};
						null === s ? s = [ne] : s.push(ne), p++
					}
				}
				if (void 0 !== t.app) {
					var ie = t.app;
					if ("string" !== typeof ie && null !== ie) {
						var se = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: tt.properties.app.type
							},
							message: "must be string,null",
							schema: tt.properties.app.type,
							parentSchema: tt.properties.app,
							data: ie
						};
						null === s ? s = [se] : s.push(se), p++
					}
				}
				if (void 0 !== t.host) {
					var pe = t.host;
					if ("string" !== typeof pe && null !== pe) {
						var oe = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: tt.properties.host.type
							},
							message: "must be string,null",
							schema: tt.properties.host.type,
							parentSchema: tt.properties.host,
							data: pe
						};
						null === s ? s = [oe] : s.push(oe), p++
					}
				}
			} else {
				var ce = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: tt.type,
					parentSchema: tt,
					data: t
				};
				null === s ? s = [ce] : s.push(ce), p++
			}
			return e.errors = s, 0 === p
		};
		var tt = {
			properties: {
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				style: {
					type: "string"
				},
				utm_medium: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				callToActionText: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				referrer: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				numOfRewritesMade: {
					type: "integer"
				},
				p: {
					type: "string"
				},
				referer: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				fbclid: {
					type: "string"
				},
				msclkid: {
					type: "string"
				},
				fui: {
					type: "string"
				},
				ad_set_: {
					type: "string"
				},
				utm_campain: {
					type: "string"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["callToActionText"],
			$id: "InstallExtensionCTAPressed",
			additionalProperties: !1
		};
		t.isEditorUser = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: rt.type,
					parentSchema: rt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var rt = {
			type: "boolean",
			$id: "isEditorUser"
		};
		t.isExtensionUser = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t && null !== t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: at.type
					},
					message: "must be boolean,null",
					schema: at.type,
					parentSchema: at,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var at = {
			type: ["boolean", "null"],
			$id: "isExtensionUser"
		};
		t.Keepalive = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.fetchSucceeded) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "fetchSucceeded"
						},
						message: "must have required property 'fetchSucceeded'",
						schema: nt.required,
						parentSchema: nt,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("fetchSucceeded" !== o && "error" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: nt,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.fetchSucceeded) {
					var h = t.fetchSucceeded;
					if ("boolean" !== typeof h) {
						var u = {
							instancePath: n + "/fetchSucceeded",
							schemaPath: "#/properties/fetchSucceeded/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: nt.properties.fetchSucceeded.type,
							parentSchema: nt.properties.fetchSucceeded,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.error) {
					var m = t.error;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/error",
							schemaPath: "#/properties/error/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: nt.properties.error.type,
							parentSchema: nt.properties.error,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.configString) {
					var l = t.configString;
					if ("string" !== typeof l && null !== l) {
						var y = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: nt.properties.configString.type
							},
							message: "must be string,null",
							schema: nt.properties.configString.type,
							parentSchema: nt.properties.configString,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.tabId) {
					var g = t.tabId;
					if (("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) && null !== g) {
						var f = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: nt.properties.tabId.type
							},
							message: "must be integer,null",
							schema: nt.properties.tabId.type,
							parentSchema: nt.properties.tabId,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.app) {
					var v = t.app;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: nt.properties.app.type
							},
							message: "must be string,null",
							schema: nt.properties.app.type,
							parentSchema: nt.properties.app,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.host) {
					var P = t.host;
					if ("string" !== typeof P && null !== P) {
						var S = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: nt.properties.host.type
							},
							message: "must be string,null",
							schema: nt.properties.host.type,
							parentSchema: nt.properties.host,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
			} else {
				var w = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: nt.type,
					parentSchema: nt,
					data: t
				};
				null === i ? i = [w] : i.push(w), s++
			}
			return e.errors = i, 0 === s
		};
		var nt = {
			properties: {
				fetchSucceeded: {
					type: "boolean"
				},
				error: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["fetchSucceeded"],
			$id: "Keepalive",
			additionalProperties: !1
		};
		t.KillEditor = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.id) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "id"
						},
						message: "must have required property 'id'",
						schema: it.required,
						parentSchema: it,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("id" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: it,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.id) {
					var h = t.id;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/id",
							schemaPath: "#/properties/id/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: it.properties.id.type,
							parentSchema: it.properties.id,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: it.properties.configString.type
							},
							message: "must be string,null",
							schema: it.properties.configString.type,
							parentSchema: it.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: it.properties.tabId.type
							},
							message: "must be integer,null",
							schema: it.properties.tabId.type,
							parentSchema: it.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: it.properties.app.type
							},
							message: "must be string,null",
							schema: it.properties.app.type,
							parentSchema: it.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: it.properties.host.type
							},
							message: "must be string,null",
							schema: it.properties.host.type,
							parentSchema: it.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: it.type,
					parentSchema: it,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var it = {
			properties: {
				id: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["id"],
			$id: "KillEditor",
			additionalProperties: !1
		};
		t.labels = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (!Array.isArray(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "array"
					},
					message: "must be array",
					schema: st.type,
					parentSchema: st,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var st = {
			type: "array",
			$id: "labels"
		};
		t.LandingPageDemoLocked = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: pt.required,
						parentSchema: pt,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.draftId) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: pt.required,
						parentSchema: pt,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.numOfRewritesMade) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfRewritesMade"
						},
						message: "must have required property 'numOfRewritesMade'",
						schema: pt.required,
						parentSchema: pt,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.lastInteractionId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "lastInteractionId"
						},
						message: "must have required property 'lastInteractionId'",
						schema: pt.required,
						parentSchema: pt,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(pt.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: pt,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.utm_source) {
					var l = t.utm_source;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.utm_source.type,
							parentSchema: pt.properties.utm_source,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var g = t.ad_set_name;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.ad_set_name.type,
							parentSchema: pt.properties.ad_set_name,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var v = t.utm_medium;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.utm_medium.type,
							parentSchema: pt.properties.utm_medium,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.origin) {
					var P = t.origin;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.origin.type,
							parentSchema: pt.properties.origin,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var w = t.utm_campaign;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.utm_campaign.type,
							parentSchema: pt.properties.utm_campaign,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.draftId) {
					var _ = t.draftId;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.draftId.type,
							parentSchema: pt.properties.draftId,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.gclid) {
					var q = t.gclid;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.gclid.type,
							parentSchema: pt.properties.gclid,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var x = t.utm_term;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.utm_term.type,
							parentSchema: pt.properties.utm_term,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.numOfRewritesMade) {
					var N = t.numOfRewritesMade;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/numOfRewritesMade",
							schemaPath: "#/properties/numOfRewritesMade/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pt.properties.numOfRewritesMade.type,
							parentSchema: pt.properties.numOfRewritesMade,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.lastInteractionId) {
					var D = t.lastInteractionId;
					if ("string" !== typeof D && null !== D) {
						var T = {
							instancePath: n + "/lastInteractionId",
							schemaPath: "#/properties/lastInteractionId/type",
							keyword: "type",
							params: {
								type: pt.properties.lastInteractionId.type
							},
							message: "must be string,null",
							schema: pt.properties.lastInteractionId.type,
							parentSchema: pt.properties.lastInteractionId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.p) {
					var j = t.p;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.p.type,
							parentSchema: pt.properties.p,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var C = t.fbclid;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.fbclid.type,
							parentSchema: pt.properties.fbclid,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.msclkid) {
					var H = t.msclkid;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/msclkid",
							schemaPath: "#/properties/msclkid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.msclkid.type,
							parentSchema: pt.properties.msclkid,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.fui) {
					var M = t.fui;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/fui",
							schemaPath: "#/properties/fui/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.fui.type,
							parentSchema: pt.properties.fui,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.ref) {
					var z = t.ref;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.ref.type,
							parentSchema: pt.properties.ref,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var B = t.ad_name;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.ad_name.type,
							parentSchema: pt.properties.ad_name,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.path) {
					var V = t.path;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pt.properties.path.type,
							parentSchema: pt.properties.path,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.configString) {
					var K = t.configString;
					if ("string" !== typeof K && null !== K) {
						var Q = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: pt.properties.configString.type
							},
							message: "must be string,null",
							schema: pt.properties.configString.type,
							parentSchema: pt.properties.configString,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Y = t.tabId;
					if (("number" != typeof Y || Y % 1 || isNaN(Y) || !isFinite(Y)) && null !== Y) {
						var J = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: pt.properties.tabId.type
							},
							message: "must be integer,null",
							schema: pt.properties.tabId.type,
							parentSchema: pt.properties.tabId,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.app) {
					var X = t.app;
					if ("string" !== typeof X && null !== X) {
						var Z = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: pt.properties.app.type
							},
							message: "must be string,null",
							schema: pt.properties.app.type,
							parentSchema: pt.properties.app,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.host) {
					var ee = t.host;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: pt.properties.host.type
							},
							message: "must be string,null",
							schema: pt.properties.host.type,
							parentSchema: pt.properties.host,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
			} else {
				var re = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: pt.type,
					parentSchema: pt,
					data: t
				};
				null === s ? s = [re] : s.push(re), p++
			}
			return e.errors = s, 0 === p
		};
		var pt = {
			properties: {
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				utm_medium: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				numOfRewritesMade: {
					type: "integer"
				},
				lastInteractionId: {
					type: ["string", "null"]
				},
				p: {
					type: "string"
				},
				fbclid: {
					type: "string"
				},
				msclkid: {
					type: "string"
				},
				fui: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin", "draftId", "numOfRewritesMade", "lastInteractionId"],
			$id: "LandingPageDemoLocked",
			additionalProperties: !1
		};
		t.LandingPageDemoShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ot.required,
						parentSchema: ot,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.draftId) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: ot.required,
						parentSchema: ot,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				for (var h in t)
					if (!i.call(ot.properties, h)) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ot,
							data: t
						};
						null === s ? s = [u] : s.push(u), p++
					} if (void 0 !== t.utm_source) {
					var m = t.utm_source;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.utm_source.type,
							parentSchema: ot.properties.utm_source,
							data: m
						};
						null === s ? s = [d] : s.push(d), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var l = t.ad_set_name;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.ad_set_name.type,
							parentSchema: ot.properties.ad_set_name,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var g = t.utm_medium;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.utm_medium.type,
							parentSchema: ot.properties.utm_medium,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.origin) {
					var v = t.origin;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.origin.type,
							parentSchema: ot.properties.origin,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var P = t.utm_campaign;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.utm_campaign.type,
							parentSchema: ot.properties.utm_campaign,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.draftId) {
					var w = t.draftId;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.draftId.type,
							parentSchema: ot.properties.draftId,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.gclid) {
					var _ = t.gclid;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.gclid.type,
							parentSchema: ot.properties.gclid,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var q = t.utm_term;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.utm_term.type,
							parentSchema: ot.properties.utm_term,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.p) {
					var x = t.p;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.p.type,
							parentSchema: ot.properties.p,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var N = t.fbclid;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.fbclid.type,
							parentSchema: ot.properties.fbclid,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var D = t.ad_name;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.ad_name.type,
							parentSchema: ot.properties.ad_name,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.gbraid) {
					var j = t.gbraid;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/gbraid",
							schemaPath: "#/properties/gbraid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.gbraid.type,
							parentSchema: ot.properties.gbraid,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.ref) {
					var C = t.ref;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.ref.type,
							parentSchema: ot.properties.ref,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.ivk_sa) {
					var H = t.ivk_sa;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/ivk_sa",
							schemaPath: "#/properties/ivk_sa/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.ivk_sa.type,
							parentSchema: ot.properties.ivk_sa,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.msclkid) {
					var M = t.msclkid;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/msclkid",
							schemaPath: "#/properties/msclkid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.msclkid.type,
							parentSchema: ot.properties.msclkid,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.fui) {
					var z = t.fui;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/fui",
							schemaPath: "#/properties/fui/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.fui.type,
							parentSchema: ot.properties.fui,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.utm_content) {
					var B = t.utm_content;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/utm_content",
							schemaPath: "#/properties/utm_content/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.utm_content.type,
							parentSchema: ot.properties.utm_content,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.s) {
					var V = t.s;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/s",
							schemaPath: "#/properties/s/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.s.type,
							parentSchema: ot.properties.s,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.zarsrc) {
					var K = t.zarsrc;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/zarsrc",
							schemaPath: "#/properties/zarsrc/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.zarsrc.type,
							parentSchema: ot.properties.zarsrc,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.ad_set_) {
					var Y = t.ad_set_;
					if ("string" !== typeof Y) {
						var J = {
							instancePath: n + "/ad_set_",
							schemaPath: "#/properties/ad_set_/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.ad_set_.type,
							parentSchema: ot.properties.ad_set_,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.utm_campain) {
					var X = t.utm_campain;
					if ("string" !== typeof X) {
						var Z = {
							instancePath: n + "/utm_campain",
							schemaPath: "#/properties/utm_campain/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.utm_campain.type,
							parentSchema: ot.properties.utm_campain,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.path) {
					var ee = t.path;
					if ("string" !== typeof ee) {
						var te = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ot.properties.path.type,
							parentSchema: ot.properties.path,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.configString) {
					var re = t.configString;
					if ("string" !== typeof re && null !== re) {
						var ae = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ot.properties.configString.type
							},
							message: "must be string,null",
							schema: ot.properties.configString.type,
							parentSchema: ot.properties.configString,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.tabId) {
					var ne = t.tabId;
					if (("number" != typeof ne || ne % 1 || isNaN(ne) || !isFinite(ne)) && null !== ne) {
						var ie = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ot.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ot.properties.tabId.type,
							parentSchema: ot.properties.tabId,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.app) {
					var se = t.app;
					if ("string" !== typeof se && null !== se) {
						var pe = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ot.properties.app.type
							},
							message: "must be string,null",
							schema: ot.properties.app.type,
							parentSchema: ot.properties.app,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
				if (void 0 !== t.host) {
					var oe = t.host;
					if ("string" !== typeof oe && null !== oe) {
						var ce = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ot.properties.host.type
							},
							message: "must be string,null",
							schema: ot.properties.host.type,
							parentSchema: ot.properties.host,
							data: oe
						};
						null === s ? s = [ce] : s.push(ce), p++
					}
				}
			} else {
				var he = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ot.type,
					parentSchema: ot,
					data: t
				};
				null === s ? s = [he] : s.push(he), p++
			}
			return e.errors = s, 0 === p
		};
		var ot = {
			properties: {
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				utm_medium: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				p: {
					type: "string"
				},
				fbclid: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				gbraid: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				ivk_sa: {
					type: "string"
				},
				msclkid: {
					type: "string"
				},
				fui: {
					type: "string"
				},
				utm_content: {
					type: "string"
				},
				s: {
					type: "string"
				},
				zarsrc: {
					type: "string"
				},
				ad_set_: {
					type: "string"
				},
				utm_campain: {
					type: "string"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin", "draftId"],
			$id: "LandingPageDemoShown",
			additionalProperties: !1
		};
		t.LandingPageEntered = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ct.required,
						parentSchema: ct,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.draftId) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: ct.required,
						parentSchema: ct,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				for (var h in t)
					if (!i.call(ct.properties, h)) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ct,
							data: t
						};
						null === s ? s = [u] : s.push(u), p++
					} if (void 0 !== t.utm_source) {
					var m = t.utm_source;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.utm_source.type,
							parentSchema: ct.properties.utm_source,
							data: m
						};
						null === s ? s = [d] : s.push(d), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var l = t.ad_set_name;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.ad_set_name.type,
							parentSchema: ct.properties.ad_set_name,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var g = t.utm_medium;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.utm_medium.type,
							parentSchema: ct.properties.utm_medium,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.origin) {
					var v = t.origin;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.origin.type,
							parentSchema: ct.properties.origin,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var P = t.utm_campaign;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.utm_campaign.type,
							parentSchema: ct.properties.utm_campaign,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.draftId) {
					var w = t.draftId;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.draftId.type,
							parentSchema: ct.properties.draftId,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.gclid) {
					var _ = t.gclid;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.gclid.type,
							parentSchema: ct.properties.gclid,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var q = t.utm_term;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.utm_term.type,
							parentSchema: ct.properties.utm_term,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.p) {
					var x = t.p;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.p.type,
							parentSchema: ct.properties.p,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var N = t.ad_name;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.ad_name.type,
							parentSchema: ct.properties.ad_name,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var D = t.fbclid;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.fbclid.type,
							parentSchema: ct.properties.fbclid,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.gbraid) {
					var j = t.gbraid;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/gbraid",
							schemaPath: "#/properties/gbraid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.gbraid.type,
							parentSchema: ct.properties.gbraid,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.ref) {
					var C = t.ref;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.ref.type,
							parentSchema: ct.properties.ref,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.ivk_sa) {
					var H = t.ivk_sa;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/ivk_sa",
							schemaPath: "#/properties/ivk_sa/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.ivk_sa.type,
							parentSchema: ct.properties.ivk_sa,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.msclkid) {
					var M = t.msclkid;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/msclkid",
							schemaPath: "#/properties/msclkid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.msclkid.type,
							parentSchema: ct.properties.msclkid,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.fui) {
					var z = t.fui;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/fui",
							schemaPath: "#/properties/fui/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.fui.type,
							parentSchema: ct.properties.fui,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t._ijt) {
					var B = t._ijt;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/_ijt",
							schemaPath: "#/properties/_ijt/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties._ijt.type,
							parentSchema: ct.properties._ijt,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.utm_content) {
					var V = t.utm_content;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/utm_content",
							schemaPath: "#/properties/utm_content/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.utm_content.type,
							parentSchema: ct.properties.utm_content,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.s) {
					var K = t.s;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/s",
							schemaPath: "#/properties/s/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.s.type,
							parentSchema: ct.properties.s,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.zarsrc) {
					var Y = t.zarsrc;
					if ("string" !== typeof Y) {
						var J = {
							instancePath: n + "/zarsrc",
							schemaPath: "#/properties/zarsrc/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.zarsrc.type,
							parentSchema: ct.properties.zarsrc,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.ad_set_) {
					var X = t.ad_set_;
					if ("string" !== typeof X) {
						var Z = {
							instancePath: n + "/ad_set_",
							schemaPath: "#/properties/ad_set_/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.ad_set_.type,
							parentSchema: ct.properties.ad_set_,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.utm_campain) {
					var ee = t.utm_campain;
					if ("string" !== typeof ee) {
						var te = {
							instancePath: n + "/utm_campain",
							schemaPath: "#/properties/utm_campain/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.utm_campain.type,
							parentSchema: ct.properties.utm_campain,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.path) {
					var re = t.path;
					if ("string" !== typeof re) {
						var ae = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ct.properties.path.type,
							parentSchema: ct.properties.path,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.configString) {
					var ne = t.configString;
					if ("string" !== typeof ne && null !== ne) {
						var ie = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ct.properties.configString.type
							},
							message: "must be string,null",
							schema: ct.properties.configString.type,
							parentSchema: ct.properties.configString,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.tabId) {
					var se = t.tabId;
					if (("number" != typeof se || se % 1 || isNaN(se) || !isFinite(se)) && null !== se) {
						var pe = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ct.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ct.properties.tabId.type,
							parentSchema: ct.properties.tabId,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
				if (void 0 !== t.app) {
					var oe = t.app;
					if ("string" !== typeof oe && null !== oe) {
						var ce = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ct.properties.app.type
							},
							message: "must be string,null",
							schema: ct.properties.app.type,
							parentSchema: ct.properties.app,
							data: oe
						};
						null === s ? s = [ce] : s.push(ce), p++
					}
				}
				if (void 0 !== t.host) {
					var he = t.host;
					if ("string" !== typeof he && null !== he) {
						var ue = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ct.properties.host.type
							},
							message: "must be string,null",
							schema: ct.properties.host.type,
							parentSchema: ct.properties.host,
							data: he
						};
						null === s ? s = [ue] : s.push(ue), p++
					}
				}
			} else {
				var me = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ct.type,
					parentSchema: ct,
					data: t
				};
				null === s ? s = [me] : s.push(me), p++
			}
			return e.errors = s, 0 === p
		};
		var ct = {
			properties: {
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				utm_medium: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				p: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				fbclid: {
					type: "string"
				},
				gbraid: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				ivk_sa: {
					type: "string"
				},
				msclkid: {
					type: "string"
				},
				fui: {
					type: "string"
				},
				_ijt: {
					type: "string"
				},
				utm_content: {
					type: "string"
				},
				s: {
					type: "string"
				},
				zarsrc: {
					type: "string"
				},
				ad_set_: {
					type: "string"
				},
				utm_campain: {
					type: "string"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin", "draftId"],
			$id: "LandingPageEntered",
			additionalProperties: !1
		};
		t.LandingPageRewriteIdeaShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.text) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "text"
						},
						message: "must have required property 'text'",
						schema: ht.required,
						parentSchema: ht,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.index) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "index"
						},
						message: "must have required property 'index'",
						schema: ht.required,
						parentSchema: ht,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ht.required,
						parentSchema: ht,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: ht.required,
						parentSchema: ht,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(ht.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ht,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.text) {
					var l = t.text;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/text",
							schemaPath: "#/properties/text/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.text.type,
							parentSchema: ht.properties.text,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.index) {
					var g = t.index;
					if ("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) {
						var f = {
							instancePath: n + "/index",
							schemaPath: "#/properties/index/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ht.properties.index.type,
							parentSchema: ht.properties.index,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.origin) {
					var v = t.origin;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.origin.type,
							parentSchema: ht.properties.origin,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.draftId) {
					var P = t.draftId;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.draftId.type,
							parentSchema: ht.properties.draftId,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.utm_source) {
					var w = t.utm_source;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.utm_source.type,
							parentSchema: ht.properties.utm_source,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var _ = t.ad_set_name;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.ad_set_name.type,
							parentSchema: ht.properties.ad_set_name,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var q = t.utm_medium;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.utm_medium.type,
							parentSchema: ht.properties.utm_medium,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var x = t.utm_campaign;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.utm_campaign.type,
							parentSchema: ht.properties.utm_campaign,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.gclid) {
					var N = t.gclid;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.gclid.type,
							parentSchema: ht.properties.gclid,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var D = t.utm_term;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.utm_term.type,
							parentSchema: ht.properties.utm_term,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.p) {
					var j = t.p;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.p.type,
							parentSchema: ht.properties.p,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var C = t.fbclid;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.fbclid.type,
							parentSchema: ht.properties.fbclid,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.utm_content) {
					var H = t.utm_content;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/utm_content",
							schemaPath: "#/properties/utm_content/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.utm_content.type,
							parentSchema: ht.properties.utm_content,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var M = t.ad_name;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.ad_name.type,
							parentSchema: ht.properties.ad_name,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.ref) {
					var z = t.ref;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ht.properties.ref.type,
							parentSchema: ht.properties.ref,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.configString) {
					var B = t.configString;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ht.properties.configString.type
							},
							message: "must be string,null",
							schema: ht.properties.configString.type,
							parentSchema: ht.properties.configString,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.tabId) {
					var V = t.tabId;
					if (("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) && null !== V) {
						var G = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ht.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ht.properties.tabId.type,
							parentSchema: ht.properties.tabId,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.app) {
					var K = t.app;
					if ("string" !== typeof K && null !== K) {
						var Q = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ht.properties.app.type
							},
							message: "must be string,null",
							schema: ht.properties.app.type,
							parentSchema: ht.properties.app,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.host) {
					var Y = t.host;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ht.properties.host.type
							},
							message: "must be string,null",
							schema: ht.properties.host.type,
							parentSchema: ht.properties.host,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
			} else {
				var X = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ht.type,
					parentSchema: ht,
					data: t
				};
				null === s ? s = [X] : s.push(X), p++
			}
			return e.errors = s, 0 === p
		};
		var ht = {
			properties: {
				text: {
					type: "string"
				},
				index: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				utm_medium: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				p: {
					type: "string"
				},
				fbclid: {
					type: "string"
				},
				utm_content: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["text", "index", "origin", "draftId"],
			$id: "LandingPageRewriteIdeaShown",
			additionalProperties: !1
		};
		t.lastPaymentPromoCodeId = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: ut.type,
					parentSchema: ut,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ut = {
			type: "string",
			$id: "lastPaymentPromoCodeId"
		};
		t.lastPaymentPromoCodeName = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: mt.type,
					parentSchema: mt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var mt = {
			type: "string",
			$id: "lastPaymentPromoCodeName"
		};
		t.latestGracePeriodDays = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: dt.type,
					parentSchema: dt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var dt = {
			type: "integer",
			$id: "latestGracePeriodDays"
		};
		t.latestGracePeriodEndDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: lt.type,
					parentSchema: lt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var lt = {
			type: "string",
			$id: "latestGracePeriodEndDate"
		};
		t.latestGracePeriodStartDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: yt.type,
					parentSchema: yt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var yt = {
			type: "string",
			$id: "latestGracePeriodStartDate"
		};
		t.latestPaymentDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: gt.type,
					parentSchema: gt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var gt = {
			type: "string",
			$id: "latestPaymentDate"
		};
		t.loginId = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: ft.type,
					parentSchema: ft,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ft = {
			type: "string",
			$id: "loginId"
		};
		t.lpAppRewritesLeft = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: vt.type,
					parentSchema: vt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var vt = {
			type: "integer",
			$id: "lpAppRewritesLeft"
		};
		t.lpAppRewritesMade = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: bt.type,
					parentSchema: bt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var bt = {
			type: "integer",
			$id: "lpAppRewritesMade"
		};
		t.lpCurrentExperimentId = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Pt.type,
					parentSchema: Pt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Pt = {
			type: "string",
			$id: "lpCurrentExperimentId"
		};
		t.lpCurrentExperimentVariantId = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: St.type,
					parentSchema: St,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var St = {
			type: "string",
			$id: "lpCurrentExperimentVariantId"
		};
		t.memberSegmentEndDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: wt.type,
					parentSchema: wt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var wt = {
			type: "number",
			$id: "memberSegmentEndDate"
		};
		t.memberSegmentStartDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: kt.type,
					parentSchema: kt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var kt = {
			type: "number",
			$id: "memberSegmentStartDate"
		};
		t.MenuButtonHidden = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: _t.required,
						parentSchema: _t,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: _t.required,
						parentSchema: _t,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.contextLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: _t.required,
						parentSchema: _t,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: _t.required,
						parentSchema: _t,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(_t.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: _t,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _t.properties.platform.type,
							parentSchema: _t.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _t.properties.spanSelectionHash.type,
							parentSchema: _t.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: _t.properties.spanSelectionLength.type,
							parentSchema: _t.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var P = t.contextLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: _t.properties.contextLength.type,
							parentSchema: _t.properties.contextLength,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var w = t.caretLocation;
					if (!Array.isArray(w)) {
						var k = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: _t.properties.caretLocation.type,
							parentSchema: _t.properties.caretLocation,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var _ = t.isFirstEngagement;
					if ("boolean" !== typeof _) {
						var I = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: _t.properties.isFirstEngagement.type,
							parentSchema: _t.properties.isFirstEngagement,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.draftId) {
					var q = t.draftId;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _t.properties.draftId.type,
							parentSchema: _t.properties.draftId,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.configString) {
					var x = t.configString;
					if ("string" !== typeof x && null !== x) {
						var E = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: _t.properties.configString.type
							},
							message: "must be string,null",
							schema: _t.properties.configString.type,
							parentSchema: _t.properties.configString,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.tabId) {
					var N = t.tabId;
					if (("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) && null !== N) {
						var O = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: _t.properties.tabId.type
							},
							message: "must be integer,null",
							schema: _t.properties.tabId.type,
							parentSchema: _t.properties.tabId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.app) {
					var D = t.app;
					if ("string" !== typeof D && null !== D) {
						var T = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: _t.properties.app.type
							},
							message: "must be string,null",
							schema: _t.properties.app.type,
							parentSchema: _t.properties.app,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.host) {
					var j = t.host;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: _t.properties.host.type
							},
							message: "must be string,null",
							schema: _t.properties.host.type,
							parentSchema: _t.properties.host,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
			} else {
				var C = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: _t.type,
					parentSchema: _t,
					data: t
				};
				null === s ? s = [C] : s.push(C), p++
			}
			return e.errors = s, 0 === p
		};
		var _t = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "contextLength", "draftId"],
			$id: "MenuButtonHidden",
			additionalProperties: !1
		};
		t.MenuButtonShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: It.required,
						parentSchema: It,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: It.required,
						parentSchema: It,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				for (var h in t)
					if (!i.call(It.properties, h)) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: It,
							data: t
						};
						null === s ? s = [u] : s.push(u), p++
					} if (void 0 !== t.platform) {
					var m = t.platform;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: It.properties.platform.type,
							parentSchema: It.properties.platform,
							data: m
						};
						null === s ? s = [d] : s.push(d), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var l = t.spanSelectionHash;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: It.properties.spanSelectionHash.type,
							parentSchema: It.properties.spanSelectionHash,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var g = t.spanSelectionLength;
					if ("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) {
						var f = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: It.properties.spanSelectionLength.type,
							parentSchema: It.properties.spanSelectionLength,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var v = t.contextLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: It.properties.contextLength.type,
							parentSchema: It.properties.contextLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.draftId) {
					var P = t.draftId;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: It.properties.draftId.type,
							parentSchema: It.properties.draftId,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var w = t.caretLocation;
					if (!Array.isArray(w)) {
						var k = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: It.properties.caretLocation.type,
							parentSchema: It.properties.caretLocation,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.configString) {
					var _ = t.configString;
					if ("string" !== typeof _ && null !== _) {
						var I = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: It.properties.configString.type
							},
							message: "must be string,null",
							schema: It.properties.configString.type,
							parentSchema: It.properties.configString,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.tabId) {
					var q = t.tabId;
					if (("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) && null !== q) {
						var L = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: It.properties.tabId.type
							},
							message: "must be integer,null",
							schema: It.properties.tabId.type,
							parentSchema: It.properties.tabId,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.app) {
					var x = t.app;
					if ("string" !== typeof x && null !== x) {
						var E = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: It.properties.app.type
							},
							message: "must be string,null",
							schema: It.properties.app.type,
							parentSchema: It.properties.app,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.host) {
					var N = t.host;
					if ("string" !== typeof N && null !== N) {
						var O = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: It.properties.host.type
							},
							message: "must be string,null",
							schema: It.properties.host.type,
							parentSchema: It.properties.host,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
			} else {
				var D = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: It.type,
					parentSchema: It,
					data: t
				};
				null === s ? s = [D] : s.push(D), p++
			}
			return e.errors = s, 0 === p
		};
		var It = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash"],
			$id: "MenuButtonShown",
			additionalProperties: !1
		};
		t.NewEditor = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.id) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "id"
						},
						message: "must have required property 'id'",
						schema: qt.required,
						parentSchema: qt,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("id" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: qt,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.id) {
					var h = t.id;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/id",
							schemaPath: "#/properties/id/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: qt.properties.id.type,
							parentSchema: qt.properties.id,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: qt.properties.configString.type
							},
							message: "must be string,null",
							schema: qt.properties.configString.type,
							parentSchema: qt.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: qt.properties.tabId.type
							},
							message: "must be integer,null",
							schema: qt.properties.tabId.type,
							parentSchema: qt.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: qt.properties.app.type
							},
							message: "must be string,null",
							schema: qt.properties.app.type,
							parentSchema: qt.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: qt.properties.host.type
							},
							message: "must be string,null",
							schema: qt.properties.host.type,
							parentSchema: qt.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: qt.type,
					parentSchema: qt,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var qt = {
			properties: {
				id: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["id"],
			$id: "NewEditor",
			additionalProperties: !1
		};
		t.NonUseDisappointmentFeedback = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Lt.type,
					parentSchema: Lt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Lt = {
			type: "string",
			$id: "NonUseDisappointmentFeedback"
		};
		t.onboardingAnswers_allowEmails = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: xt.type,
					parentSchema: xt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var xt = {
			type: "boolean",
			$id: "onboardingAnswers_allowEmails"
		};
		t.onboardingAnswers_englishLevel = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: Et.type,
					parentSchema: Et,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Et = {
			type: "integer",
			$id: "onboardingAnswers_englishLevel"
		};
		t.onboardingAnswers_explanation = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Nt.type,
					parentSchema: Nt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Nt = {
			type: "string",
			$id: "onboardingAnswers_explanation"
		};
		t.onboardingAnswers_goals = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (!Array.isArray(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "array"
					},
					message: "must be array",
					schema: Ot.type,
					parentSchema: Ot,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ot = {
			type: "array",
			$id: "onboardingAnswers_goals"
		};
		t.OnboardingCompleteWebsitePressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.url) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "url"
						},
						message: "must have required property 'url'",
						schema: Dt.required,
						parentSchema: Dt,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Dt.required,
						parentSchema: Dt,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("url" !== c && "origin" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Dt,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.url) {
					var u = t.url;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/url",
							schemaPath: "#/properties/url/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Dt.properties.url.type,
							parentSchema: Dt.properties.url,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.origin) {
					var d = t.origin;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Dt.properties.origin.type,
							parentSchema: Dt.properties.origin,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Dt.properties.configString.type
							},
							message: "must be string,null",
							schema: Dt.properties.configString.type,
							parentSchema: Dt.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Dt.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Dt.properties.tabId.type,
							parentSchema: Dt.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Dt.properties.app.type
							},
							message: "must be string,null",
							schema: Dt.properties.app.type,
							parentSchema: Dt.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Dt.properties.host.type
							},
							message: "must be string,null",
							schema: Dt.properties.host.type,
							parentSchema: Dt.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Dt.type,
					parentSchema: Dt,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var Dt = {
			properties: {
				url: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["url", "origin"],
			$id: "OnboardingCompleteWebsitePressed",
			additionalProperties: !1
		};
		t.OnboardingTipShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Tt.required,
						parentSchema: Tt,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Tt.required,
						parentSchema: Tt,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.text) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "text"
						},
						message: "must have required property 'text'",
						schema: Tt.required,
						parentSchema: Tt,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Tt.required,
						parentSchema: Tt,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(Tt.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Tt,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Tt.properties.platform.type,
							parentSchema: Tt.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Tt.properties.spanSelectionHash.type,
							parentSchema: Tt.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Tt.properties.spanSelectionLength.type,
							parentSchema: Tt.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.text) {
					var P = t.text;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/text",
							schemaPath: "#/properties/text/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Tt.properties.text.type,
							parentSchema: Tt.properties.text,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var w = t.contextLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Tt.properties.contextLength.type,
							parentSchema: Tt.properties.contextLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.draftId) {
					var _ = t.draftId;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Tt.properties.draftId.type,
							parentSchema: Tt.properties.draftId,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var q = t.caretLocation;
					if (!Array.isArray(q)) {
						var L = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Tt.properties.caretLocation.type,
							parentSchema: Tt.properties.caretLocation,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var x = t.isFirstEngagement;
					if ("boolean" !== typeof x) {
						var E = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Tt.properties.isFirstEngagement.type,
							parentSchema: Tt.properties.isFirstEngagement,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.configString) {
					var N = t.configString;
					if ("string" !== typeof N && null !== N) {
						var O = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Tt.properties.configString.type
							},
							message: "must be string,null",
							schema: Tt.properties.configString.type,
							parentSchema: Tt.properties.configString,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.tabId) {
					var D = t.tabId;
					if (("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) && null !== D) {
						var T = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Tt.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Tt.properties.tabId.type,
							parentSchema: Tt.properties.tabId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.app) {
					var j = t.app;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Tt.properties.app.type
							},
							message: "must be string,null",
							schema: Tt.properties.app.type,
							parentSchema: Tt.properties.app,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.host) {
					var C = t.host;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Tt.properties.host.type
							},
							message: "must be string,null",
							schema: Tt.properties.host.type,
							parentSchema: Tt.properties.host,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
			} else {
				var H = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Tt.type,
					parentSchema: Tt,
					data: t
				};
				null === s ? s = [H] : s.push(H), p++
			}
			return e.errors = s, 0 === p
		};
		var Tt = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				text: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "text", "contextLength"],
			$id: "OnboardingTipShown",
			additionalProperties: !1
		};
		t.openedDocumentsCount = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: jt.type,
					parentSchema: jt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var jt = {
			type: "integer",
			$id: "openedDocumentsCount"
		};
		t.OpenEditorCTAPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.style) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "style"
						},
						message: "must have required property 'style'",
						schema: Ft.required,
						parentSchema: Ft,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.callToActionText) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "callToActionText"
						},
						message: "must have required property 'callToActionText'",
						schema: Ft.required,
						parentSchema: Ft,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.referrer) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "referrer"
						},
						message: "must have required property 'referrer'",
						schema: Ft.required,
						parentSchema: Ft,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.origin) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Ft.required,
						parentSchema: Ft,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.draftId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Ft.required,
						parentSchema: Ft,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.numOfRewritesMade) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfRewritesMade"
						},
						message: "must have required property 'numOfRewritesMade'",
						schema: Ft.required,
						parentSchema: Ft,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				for (var l in t)
					if (!i.call(Ft.properties, l)) {
						var y = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: l
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ft,
							data: t
						};
						null === s ? s = [y] : s.push(y), p++
					} if (void 0 !== t.utm_source) {
					var g = t.utm_source;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.utm_source.type,
							parentSchema: Ft.properties.utm_source,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var v = t.ad_set_name;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.ad_set_name.type,
							parentSchema: Ft.properties.ad_set_name,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.style) {
					var P = t.style;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/style",
							schemaPath: "#/properties/style/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.style.type,
							parentSchema: Ft.properties.style,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.callToActionText) {
					var w = t.callToActionText;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/callToActionText",
							schemaPath: "#/properties/callToActionText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.callToActionText.type,
							parentSchema: Ft.properties.callToActionText,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.gclid) {
					var _ = t.gclid;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.gclid.type,
							parentSchema: Ft.properties.gclid,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.referrer) {
					var q = t.referrer;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/referrer",
							schemaPath: "#/properties/referrer/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.referrer.type,
							parentSchema: Ft.properties.referrer,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var x = t.utm_term;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.utm_term.type,
							parentSchema: Ft.properties.utm_term,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var N = t.utm_medium;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.utm_medium.type,
							parentSchema: Ft.properties.utm_medium,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.origin) {
					var D = t.origin;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.origin.type,
							parentSchema: Ft.properties.origin,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var j = t.utm_campaign;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.utm_campaign.type,
							parentSchema: Ft.properties.utm_campaign,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.draftId) {
					var C = t.draftId;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.draftId.type,
							parentSchema: Ft.properties.draftId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.numOfRewritesMade) {
					var H = t.numOfRewritesMade;
					if ("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) {
						var R = {
							instancePath: n + "/numOfRewritesMade",
							schemaPath: "#/properties/numOfRewritesMade/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ft.properties.numOfRewritesMade.type,
							parentSchema: Ft.properties.numOfRewritesMade,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.p) {
					var M = t.p;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.p.type,
							parentSchema: Ft.properties.p,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var z = t.fbclid;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.fbclid.type,
							parentSchema: Ft.properties.fbclid,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.fui) {
					var B = t.fui;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/fui",
							schemaPath: "#/properties/fui/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.fui.type,
							parentSchema: Ft.properties.fui,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.ref) {
					var V = t.ref;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.ref.type,
							parentSchema: Ft.properties.ref,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var K = t.ad_name;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.ad_name.type,
							parentSchema: Ft.properties.ad_name,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.msclkid) {
					var Y = t.msclkid;
					if ("string" !== typeof Y) {
						var J = {
							instancePath: n + "/msclkid",
							schemaPath: "#/properties/msclkid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.msclkid.type,
							parentSchema: Ft.properties.msclkid,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.path) {
					var X = t.path;
					if ("string" !== typeof X) {
						var Z = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ft.properties.path.type,
							parentSchema: Ft.properties.path,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.configString) {
					var ee = t.configString;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ft.properties.configString.type
							},
							message: "must be string,null",
							schema: Ft.properties.configString.type,
							parentSchema: Ft.properties.configString,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.tabId) {
					var re = t.tabId;
					if (("number" != typeof re || re % 1 || isNaN(re) || !isFinite(re)) && null !== re) {
						var ae = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ft.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ft.properties.tabId.type,
							parentSchema: Ft.properties.tabId,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.app) {
					var ne = t.app;
					if ("string" !== typeof ne && null !== ne) {
						var ie = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ft.properties.app.type
							},
							message: "must be string,null",
							schema: Ft.properties.app.type,
							parentSchema: Ft.properties.app,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.host) {
					var se = t.host;
					if ("string" !== typeof se && null !== se) {
						var pe = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ft.properties.host.type
							},
							message: "must be string,null",
							schema: Ft.properties.host.type,
							parentSchema: Ft.properties.host,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
			} else {
				var oe = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ft.type,
					parentSchema: Ft,
					data: t
				};
				null === s ? s = [oe] : s.push(oe), p++
			}
			return e.errors = s, 0 === p
		};
		var Ft = {
			properties: {
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				style: {
					type: "string"
				},
				callToActionText: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				referrer: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				utm_medium: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				numOfRewritesMade: {
					type: "integer"
				},
				p: {
					type: "string"
				},
				fbclid: {
					type: "string"
				},
				fui: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				msclkid: {
					type: "string"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["style", "callToActionText", "referrer", "origin", "draftId", "numOfRewritesMade"],
			$id: "OpenEditorCTAPressed",
			additionalProperties: !1
		};
		t.origin_ad_name = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Ct.type,
					parentSchema: Ct,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ct = {
			type: "string",
			$id: "origin_ad_name"
		};
		t.origin_ad_set_name = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: At.type,
					parentSchema: At,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var At = {
			type: "string",
			$id: "origin_ad_set_name"
		};
		t.origin_ad_set_source = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Ht.type,
					parentSchema: Ht,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ht = {
			type: "string",
			$id: "origin_ad_set_source"
		};
		t.origin_ad_source = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Rt.type,
					parentSchema: Rt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Rt = {
			type: "string",
			$id: "origin_ad_source"
		};
		t.origin_cookieCreationTime = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: Mt.type,
					parentSchema: Mt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Mt = {
			type: "number",
			$id: "origin_cookieCreationTime"
		};
		t.origin_cookieLastUpdateTime = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: $t.type,
					parentSchema: $t,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var $t = {
			type: "number",
			$id: "origin_cookieLastUpdateTime"
		};
		t.origin_creationDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: zt.type,
					parentSchema: zt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var zt = {
			type: "number",
			$id: "origin_creationDate"
		};
		t.origin_fbc = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Ut.type,
					parentSchema: Ut,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ut = {
			type: "string",
			$id: "origin_fbc"
		};
		t.origin_fbclid = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Bt.type,
					parentSchema: Bt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Bt = {
			type: "string",
			$id: "origin_fbclid"
		};
		t.origin_fbp = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Wt.type,
					parentSchema: Wt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Wt = {
			type: "string",
			$id: "origin_fbp"
		};
		t.origin_fui = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Vt.type,
					parentSchema: Vt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Vt = {
			type: "string",
			$id: "origin_fui"
		};
		t.origin_gclid = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Gt.type,
					parentSchema: Gt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Gt = {
			type: "string",
			$id: "origin_gclid"
		};
		t.origin_he = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Kt.type,
					parentSchema: Kt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Kt = {
			type: "string",
			$id: "origin_he"
		};
		t.origin_lastDemoInteraction = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: Qt.type,
					parentSchema: Qt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Qt = {
			type: "number",
			$id: "origin_lastDemoInteraction"
		};
		t.origin_lastDemoInteractionTime = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: Yt.type,
					parentSchema: Yt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Yt = {
			type: "number",
			$id: "origin_lastDemoInteractionTime"
		};
		t.origin_lpAppRewritesMade = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: Jt.type,
					parentSchema: Jt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Jt = {
			type: "integer",
			$id: "origin_lpAppRewritesMade"
		};
		t.origin_lpCurrentExperimentId = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Xt.type,
					parentSchema: Xt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Xt = {
			type: "string",
			$id: "origin_lpCurrentExperimentId"
		};
		t.origin_lpCurrentExperimentVariantId = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Zt.type,
					parentSchema: Zt,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Zt = {
			type: "string",
			$id: "origin_lpCurrentExperimentVariantId"
		};
		t.origin_lpDemoCopyCount = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: er.type,
					parentSchema: er,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var er = {
			type: "integer",
			$id: "origin_lpDemoCopyCount"
		};
		t.origin_lpDemoCTAPressCount = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: tr.type,
					parentSchema: tr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var tr = {
			type: "integer",
			$id: "origin_lpDemoCTAPressCount"
		};
		t.origin_lpDemoLockedScreenCount = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: rr.type,
					parentSchema: rr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var rr = {
			type: "integer",
			$id: "origin_lpDemoLockedScreenCount"
		};
		t.origin_lpDemoRewritesLeft = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: ar.type,
					parentSchema: ar,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ar = {
			type: "integer",
			$id: "origin_lpDemoRewritesLeft"
		};
		t.origin_lpDeviceId = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: nr.type,
					parentSchema: nr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var nr = {
			type: "string",
			$id: "origin_lpDeviceId"
		};
		t.origin_mobile = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: ir.type,
					parentSchema: ir,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ir = {
			type: "string",
			$id: "origin_mobile"
		};
		t.origin_p = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: sr.type,
					parentSchema: sr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var sr = {
			type: "string",
			$id: "origin_p"
		};
		t.origin_r = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: pr.type,
					parentSchema: pr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var pr = {
			type: "string",
			$id: "origin_r"
		};
		t.origin_rPath = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: or.type,
					parentSchema: or,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var or = {
			type: "string",
			$id: "origin_rPath"
		};
		t.origin_userCreationDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: cr.type,
					parentSchema: cr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var cr = {
			type: "number",
			$id: "origin_userCreationDate"
		};
		t.origin_userCreationOrigin = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: hr.type,
					parentSchema: hr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var hr = {
			type: "string",
			$id: "origin_userCreationOrigin"
		};
		t.origin_utm_campaign = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: ur.type,
					parentSchema: ur,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ur = {
			type: "string",
			$id: "origin_utm_campaign"
		};
		t.origin_utm_medium = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: mr.type,
					parentSchema: mr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var mr = {
			type: "string",
			$id: "origin_utm_medium"
		};
		t.origin_utm_source = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: dr.type,
					parentSchema: dr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var dr = {
			type: "string",
			$id: "origin_utm_source"
		};
		t.origin_utm_term = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: lr.type,
					parentSchema: lr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var lr = {
			type: "string",
			$id: "origin_utm_term"
		};
		t.origin_utm = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: yr.type,
					parentSchema: yr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var yr = {
			type: "string",
			$id: "origin_utm"
		};
		t.origin = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t && null !== t && (!t || "object" != typeof t || Array.isArray(t))) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: gr.type
					},
					message: "must be string,null,object",
					schema: gr.type,
					parentSchema: gr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var gr = {
			type: ["string", "null", "object"],
			$id: "origin"
		};
		t["origin.p"] = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: fr.type,
					parentSchema: fr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var fr = {
			type: "string",
			$id: "origin.p"
		};
		t.p = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: vr.type,
					parentSchema: vr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var vr = {
			type: "string",
			$id: "p"
		};
		t.paymentAmount = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: br.type,
					parentSchema: br,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var br = {
			type: "number",
			$id: "paymentAmount"
		};
		t.PaymentFailed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.priceCents) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "priceCents"
						},
						message: "must have required property 'priceCents'",
						schema: Pr.required,
						parentSchema: Pr,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.reason) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "reason"
						},
						message: "must have required property 'reason'",
						schema: Pr.required,
						parentSchema: Pr,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("priceCents" !== c && "stripeDeclineCode" !== c && "stripeMessage" !== c && "reason" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Pr,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.priceCents) {
					var u = t.priceCents;
					if ("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) {
						var m = {
							instancePath: n + "/priceCents",
							schemaPath: "#/properties/priceCents/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Pr.properties.priceCents.type,
							parentSchema: Pr.properties.priceCents,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.stripeDeclineCode) {
					var d = t.stripeDeclineCode;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/stripeDeclineCode",
							schemaPath: "#/properties/stripeDeclineCode/type",
							keyword: "type",
							params: {
								type: Pr.properties.stripeDeclineCode.type
							},
							message: "must be string,null",
							schema: Pr.properties.stripeDeclineCode.type,
							parentSchema: Pr.properties.stripeDeclineCode,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.stripeMessage) {
					var y = t.stripeMessage;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/stripeMessage",
							schemaPath: "#/properties/stripeMessage/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pr.properties.stripeMessage.type,
							parentSchema: Pr.properties.stripeMessage,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.reason) {
					var f = t.reason;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/reason",
							schemaPath: "#/properties/reason/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pr.properties.reason.type,
							parentSchema: Pr.properties.reason,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.configString) {
					var b = t.configString;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Pr.properties.configString.type
							},
							message: "must be string,null",
							schema: Pr.properties.configString.type,
							parentSchema: Pr.properties.configString,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.tabId) {
					var S = t.tabId;
					if (("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) && null !== S) {
						var w = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Pr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Pr.properties.tabId.type,
							parentSchema: Pr.properties.tabId,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
				if (void 0 !== t.app) {
					var k = t.app;
					if ("string" !== typeof k && null !== k) {
						var _ = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Pr.properties.app.type
							},
							message: "must be string,null",
							schema: Pr.properties.app.type,
							parentSchema: Pr.properties.app,
							data: k
						};
						null === i ? i = [_] : i.push(_), s++
					}
				}
				if (void 0 !== t.host) {
					var I = t.host;
					if ("string" !== typeof I && null !== I) {
						var q = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Pr.properties.host.type
							},
							message: "must be string,null",
							schema: Pr.properties.host.type,
							parentSchema: Pr.properties.host,
							data: I
						};
						null === i ? i = [q] : i.push(q), s++
					}
				}
			} else {
				var L = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Pr.type,
					parentSchema: Pr,
					data: t
				};
				null === i ? i = [L] : i.push(L), s++
			}
			return e.errors = i, 0 === s
		};
		var Pr = {
			properties: {
				priceCents: {
					type: "integer"
				},
				stripeDeclineCode: {
					type: ["string", "null"]
				},
				stripeMessage: {
					type: "string"
				},
				reason: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["priceCents", "reason"],
			$id: "PaymentFailed",
			additionalProperties: !1
		};
		t.paymentInterval = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Sr.type,
					parentSchema: Sr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Sr = {
			type: "string",
			$id: "paymentInterval"
		};
		t.PaymentSuccess = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.priceCents) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "priceCents"
						},
						message: "must have required property 'priceCents'",
						schema: wr.required,
						parentSchema: wr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.paymentExpirationDate) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "paymentExpirationDate"
						},
						message: "must have required property 'paymentExpirationDate'",
						schema: wr.required,
						parentSchema: wr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.subscriptionPlan) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "subscriptionPlan"
						},
						message: "must have required property 'subscriptionPlan'",
						schema: wr.required,
						parentSchema: wr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				for (var u in t)
					if (!i.call(wr.properties, u)) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: u
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: wr,
							data: t
						};
						null === s ? s = [m] : s.push(m), p++
					} if (void 0 !== t.priceCents) {
					var d = t.priceCents;
					if ("number" != typeof d || d % 1 || isNaN(d) || !isFinite(d)) {
						var l = {
							instancePath: n + "/priceCents",
							schemaPath: "#/properties/priceCents/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: wr.properties.priceCents.type,
							parentSchema: wr.properties.priceCents,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.paymentExpirationDate) {
					var y = t.paymentExpirationDate;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/paymentExpirationDate",
							schemaPath: "#/properties/paymentExpirationDate/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: wr.properties.paymentExpirationDate.type,
							parentSchema: wr.properties.paymentExpirationDate,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.subscriptionPlan) {
					var f = t.subscriptionPlan;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/subscriptionPlan",
							schemaPath: "#/properties/subscriptionPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: wr.properties.subscriptionPlan.type,
							parentSchema: wr.properties.subscriptionPlan,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.promoCodeId) {
					var b = t.promoCodeId;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/promoCodeId",
							schemaPath: "#/properties/promoCodeId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: wr.properties.promoCodeId.type,
							parentSchema: wr.properties.promoCodeId,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.promoCodeName) {
					var S = t.promoCodeName;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/promoCodeName",
							schemaPath: "#/properties/promoCodeName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: wr.properties.promoCodeName.type,
							parentSchema: wr.properties.promoCodeName,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.discountPercent) {
					var k = t.discountPercent;
					if ("number" != typeof k || !isFinite(k)) {
						var _ = {
							instancePath: n + "/discountPercent",
							schemaPath: "#/properties/discountPercent/type",
							keyword: "type",
							params: {
								type: "number"
							},
							message: "must be number",
							schema: wr.properties.discountPercent.type,
							parentSchema: wr.properties.discountPercent,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.configString) {
					var I = t.configString;
					if ("string" !== typeof I && null !== I) {
						var q = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: wr.properties.configString.type
							},
							message: "must be string,null",
							schema: wr.properties.configString.type,
							parentSchema: wr.properties.configString,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.tabId) {
					var L = t.tabId;
					if (("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) && null !== L) {
						var x = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: wr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: wr.properties.tabId.type,
							parentSchema: wr.properties.tabId,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.app) {
					var E = t.app;
					if ("string" !== typeof E && null !== E) {
						var N = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: wr.properties.app.type
							},
							message: "must be string,null",
							schema: wr.properties.app.type,
							parentSchema: wr.properties.app,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.host) {
					var O = t.host;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: wr.properties.host.type
							},
							message: "must be string,null",
							schema: wr.properties.host.type,
							parentSchema: wr.properties.host,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
			} else {
				var T = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: wr.type,
					parentSchema: wr,
					data: t
				};
				null === s ? s = [T] : s.push(T), p++
			}
			return e.errors = s, 0 === p
		};
		var wr = {
			properties: {
				priceCents: {
					type: "integer"
				},
				paymentExpirationDate: {
					type: "string"
				},
				subscriptionPlan: {
					type: "string"
				},
				promoCodeId: {
					type: "string"
				},
				promoCodeName: {
					type: "string"
				},
				discountPercent: {
					type: "number"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["priceCents", "paymentExpirationDate", "subscriptionPlan"],
			$id: "PaymentSuccess",
			additionalProperties: !1
		};
		t.planExpiration = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: kr.type,
					parentSchema: kr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var kr = {
			type: "number",
			$id: "planExpiration"
		};
		t.planStartDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: _r.type,
					parentSchema: _r,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var _r = {
			type: "number",
			$id: "planStartDate"
		};
		t.planVariant = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Ir.type,
					parentSchema: Ir,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ir = {
			type: "string",
			$id: "planVariant"
		};
		t.predefinedTrialDuration = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || t % 1 || isNaN(t) || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "integer"
					},
					message: "must be integer",
					schema: qr.type,
					parentSchema: qr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var qr = {
			type: "integer",
			$id: "predefinedTrialDuration"
		};
		t.predefinedVariant = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Lr.type,
					parentSchema: Lr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Lr = {
			type: "string",
			$id: "predefinedVariant"
		};
		t.PremiumActivated = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.startDate) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "startDate"
						},
						message: "must have required property 'startDate'",
						schema: xr.required,
						parentSchema: xr,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.subscriptionPlan) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "subscriptionPlan"
						},
						message: "must have required property 'subscriptionPlan'",
						schema: xr.required,
						parentSchema: xr,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				if (void 0 === t.previousPlan) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "previousPlan"
						},
						message: "must have required property 'previousPlan'",
						schema: xr.required,
						parentSchema: xr,
						data: t
					};
					null === i ? i = [c] : i.push(c), s++
				}
				for (var h in t)
					if ("startDate" !== h && "subscriptionPlan" !== h && "previousPlan" !== h && "configString" !== h && "tabId" !== h && "app" !== h && "host" !== h) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: xr,
							data: t
						};
						null === i ? i = [u] : i.push(u), s++
					} if (void 0 !== t.startDate) {
					var m = t.startDate;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/startDate",
							schemaPath: "#/properties/startDate/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xr.properties.startDate.type,
							parentSchema: xr.properties.startDate,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.subscriptionPlan) {
					var l = t.subscriptionPlan;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/subscriptionPlan",
							schemaPath: "#/properties/subscriptionPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xr.properties.subscriptionPlan.type,
							parentSchema: xr.properties.subscriptionPlan,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.previousPlan) {
					var g = t.previousPlan;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/previousPlan",
							schemaPath: "#/properties/previousPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xr.properties.previousPlan.type,
							parentSchema: xr.properties.previousPlan,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.configString) {
					var v = t.configString;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: xr.properties.configString.type
							},
							message: "must be string,null",
							schema: xr.properties.configString.type,
							parentSchema: xr.properties.configString,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.tabId) {
					var P = t.tabId;
					if (("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) && null !== P) {
						var S = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: xr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: xr.properties.tabId.type,
							parentSchema: xr.properties.tabId,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
				if (void 0 !== t.app) {
					var w = t.app;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: xr.properties.app.type
							},
							message: "must be string,null",
							schema: xr.properties.app.type,
							parentSchema: xr.properties.app,
							data: w
						};
						null === i ? i = [k] : i.push(k), s++
					}
				}
				if (void 0 !== t.host) {
					var _ = t.host;
					if ("string" !== typeof _ && null !== _) {
						var I = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: xr.properties.host.type
							},
							message: "must be string,null",
							schema: xr.properties.host.type,
							parentSchema: xr.properties.host,
							data: _
						};
						null === i ? i = [I] : i.push(I), s++
					}
				}
			} else {
				var q = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: xr.type,
					parentSchema: xr,
					data: t
				};
				null === i ? i = [q] : i.push(q), s++
			}
			return e.errors = i, 0 === s
		};
		var xr = {
			properties: {
				startDate: {
					type: "string"
				},
				subscriptionPlan: {
					type: "string"
				},
				previousPlan: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["startDate", "subscriptionPlan", "previousPlan"],
			$id: "PremiumActivated",
			additionalProperties: !1
		};
		t.PremiumCTAPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.referer) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "referer"
						},
						message: "must have required property 'referer'",
						schema: Er.required,
						parentSchema: Er,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("inTrial" !== o && "origin" !== o && "callToActionText" !== o && "referer" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Er,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.inTrial) {
					var h = t.inTrial;
					if ("boolean" !== typeof h) {
						var u = {
							instancePath: n + "/inTrial",
							schemaPath: "#/properties/inTrial/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Er.properties.inTrial.type,
							parentSchema: Er.properties.inTrial,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.origin) {
					var m = t.origin;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Er.properties.origin.type,
							parentSchema: Er.properties.origin,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.callToActionText) {
					var l = t.callToActionText;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/callToActionText",
							schemaPath: "#/properties/callToActionText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Er.properties.callToActionText.type,
							parentSchema: Er.properties.callToActionText,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.referer) {
					var g = t.referer;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/referer",
							schemaPath: "#/properties/referer/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Er.properties.referer.type,
							parentSchema: Er.properties.referer,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.configString) {
					var v = t.configString;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Er.properties.configString.type
							},
							message: "must be string,null",
							schema: Er.properties.configString.type,
							parentSchema: Er.properties.configString,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.tabId) {
					var P = t.tabId;
					if (("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) && null !== P) {
						var S = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Er.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Er.properties.tabId.type,
							parentSchema: Er.properties.tabId,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
				if (void 0 !== t.app) {
					var w = t.app;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Er.properties.app.type
							},
							message: "must be string,null",
							schema: Er.properties.app.type,
							parentSchema: Er.properties.app,
							data: w
						};
						null === i ? i = [k] : i.push(k), s++
					}
				}
				if (void 0 !== t.host) {
					var _ = t.host;
					if ("string" !== typeof _ && null !== _) {
						var I = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Er.properties.host.type
							},
							message: "must be string,null",
							schema: Er.properties.host.type,
							parentSchema: Er.properties.host,
							data: _
						};
						null === i ? i = [I] : i.push(I), s++
					}
				}
			} else {
				var q = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Er.type,
					parentSchema: Er,
					data: t
				};
				null === i ? i = [q] : i.push(q), s++
			}
			return e.errors = i, 0 === s
		};
		var Er = {
			properties: {
				inTrial: {
					type: "boolean"
				},
				origin: {
					type: "string"
				},
				callToActionText: {
					type: "string"
				},
				referer: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["referer"],
			$id: "PremiumCTAPressed",
			additionalProperties: !1
		};
		t.PremiumFeatureHovered = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.feature) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "feature"
						},
						message: "must have required property 'feature'",
						schema: Nr.required,
						parentSchema: Nr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: Nr.required,
						parentSchema: Nr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Nr.required,
						parentSchema: Nr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Nr.required,
						parentSchema: Nr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.origin) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Nr.required,
						parentSchema: Nr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Nr.required,
						parentSchema: Nr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.draftId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Nr.required,
						parentSchema: Nr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				for (var y in t)
					if (!i.call(Nr.properties, y)) {
						var g = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: y
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Nr,
							data: t
						};
						null === s ? s = [g] : s.push(g), p++
					} if (void 0 !== t.spanSelectionLength) {
					var f = t.spanSelectionLength;
					if ("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) {
						var v = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Nr.properties.spanSelectionLength.type,
							parentSchema: Nr.properties.spanSelectionLength,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.feature) {
					var b = t.feature;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/feature",
							schemaPath: "#/properties/feature/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Nr.properties.feature.type,
							parentSchema: Nr.properties.feature,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.duration) {
					var S = t.duration;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Nr.properties.duration.type,
							parentSchema: Nr.properties.duration,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.platform) {
					var k = t.platform;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Nr.properties.platform.type,
							parentSchema: Nr.properties.platform,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var I = t.spanSelectionHash;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Nr.properties.spanSelectionHash.type,
							parentSchema: Nr.properties.spanSelectionHash,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.origin) {
					var L = t.origin;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Nr.properties.origin.type,
							parentSchema: Nr.properties.origin,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var E = t.contextLength;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Nr.properties.contextLength.type,
							parentSchema: Nr.properties.contextLength,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.draftId) {
					var O = t.draftId;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Nr.properties.draftId.type,
							parentSchema: Nr.properties.draftId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var T = t.caretLocation;
					if (!Array.isArray(T)) {
						var j = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Nr.properties.caretLocation.type,
							parentSchema: Nr.properties.caretLocation,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var F = t.isFirstEngagement;
					if ("boolean" !== typeof F) {
						var C = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Nr.properties.isFirstEngagement.type,
							parentSchema: Nr.properties.isFirstEngagement,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.configString) {
					var A = t.configString;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Nr.properties.configString.type
							},
							message: "must be string,null",
							schema: Nr.properties.configString.type,
							parentSchema: Nr.properties.configString,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.tabId) {
					var R = t.tabId;
					if (("number" != typeof R || R % 1 || isNaN(R) || !isFinite(R)) && null !== R) {
						var M = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Nr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Nr.properties.tabId.type,
							parentSchema: Nr.properties.tabId,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.app) {
					var $ = t.app;
					if ("string" !== typeof $ && null !== $) {
						var z = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Nr.properties.app.type
							},
							message: "must be string,null",
							schema: Nr.properties.app.type,
							parentSchema: Nr.properties.app,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.host) {
					var U = t.host;
					if ("string" !== typeof U && null !== U) {
						var B = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Nr.properties.host.type
							},
							message: "must be string,null",
							schema: Nr.properties.host.type,
							parentSchema: Nr.properties.host,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
			} else {
				var W = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Nr.type,
					parentSchema: Nr,
					data: t
				};
				null === s ? s = [W] : s.push(W), p++
			}
			return e.errors = s, 0 === p
		};
		var Nr = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				feature: {
					type: "string"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["feature", "duration", "platform", "spanSelectionHash", "origin", "contextLength", "draftId"],
			$id: "PremiumFeatureHovered",
			additionalProperties: !1
		};
		t.PremiumFeaturePressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Or.required,
						parentSchema: Or,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Or.required,
						parentSchema: Or,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Or.required,
						parentSchema: Or,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.feature) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "feature"
						},
						message: "must have required property 'feature'",
						schema: Or.required,
						parentSchema: Or,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.contextLength) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Or.required,
						parentSchema: Or,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.draftId) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Or.required,
						parentSchema: Or,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				for (var l in t)
					if (!i.call(Or.properties, l)) {
						var y = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: l
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Or,
							data: t
						};
						null === s ? s = [y] : s.push(y), p++
					} if (void 0 !== t.platform) {
					var g = t.platform;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Or.properties.platform.type,
							parentSchema: Or.properties.platform,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var v = t.spanSelectionHash;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Or.properties.spanSelectionHash.type,
							parentSchema: Or.properties.spanSelectionHash,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.origin) {
					var P = t.origin;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Or.properties.origin.type,
							parentSchema: Or.properties.origin,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.feature) {
					var w = t.feature;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/feature",
							schemaPath: "#/properties/feature/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Or.properties.feature.type,
							parentSchema: Or.properties.feature,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var _ = t.contextLength;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Or.properties.contextLength.type,
							parentSchema: Or.properties.contextLength,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.draftId) {
					var q = t.draftId;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Or.properties.draftId.type,
							parentSchema: Or.properties.draftId,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var x = t.caretLocation;
					if (!Array.isArray(x)) {
						var E = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Or.properties.caretLocation.type,
							parentSchema: Or.properties.caretLocation,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var N = t.spanSelectionLength;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Or.properties.spanSelectionLength.type,
							parentSchema: Or.properties.spanSelectionLength,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var D = t.isFirstEngagement;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Or.properties.isFirstEngagement.type,
							parentSchema: Or.properties.isFirstEngagement,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.configString) {
					var j = t.configString;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Or.properties.configString.type
							},
							message: "must be string,null",
							schema: Or.properties.configString.type,
							parentSchema: Or.properties.configString,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.tabId) {
					var C = t.tabId;
					if (("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) && null !== C) {
						var A = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Or.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Or.properties.tabId.type,
							parentSchema: Or.properties.tabId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.app) {
					var H = t.app;
					if ("string" !== typeof H && null !== H) {
						var R = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Or.properties.app.type
							},
							message: "must be string,null",
							schema: Or.properties.app.type,
							parentSchema: Or.properties.app,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.host) {
					var M = t.host;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Or.properties.host.type
							},
							message: "must be string,null",
							schema: Or.properties.host.type,
							parentSchema: Or.properties.host,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
			} else {
				var z = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Or.type,
					parentSchema: Or,
					data: t
				};
				null === s ? s = [z] : s.push(z), p++
			}
			return e.errors = s, 0 === p
		};
		var Or = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				feature: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "feature", "contextLength", "draftId"],
			$id: "PremiumFeaturePressed",
			additionalProperties: !1
		};
		t.PremiumModalEntered = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Dr.required,
						parentSchema: Dr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Dr.required,
						parentSchema: Dr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.learnMoreText) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "learnMoreText"
						},
						message: "must have required property 'learnMoreText'",
						schema: Dr.required,
						parentSchema: Dr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.origin) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Dr.required,
						parentSchema: Dr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.upgradeText) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "upgradeText"
						},
						message: "must have required property 'upgradeText'",
						schema: Dr.required,
						parentSchema: Dr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.feature) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "feature"
						},
						message: "must have required property 'feature'",
						schema: Dr.required,
						parentSchema: Dr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.contextLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Dr.required,
						parentSchema: Dr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.draftId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Dr.required,
						parentSchema: Dr,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(Dr.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Dr,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.platform) {
					var v = t.platform;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Dr.properties.platform.type,
							parentSchema: Dr.properties.platform,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var P = t.spanSelectionHash;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Dr.properties.spanSelectionHash.type,
							parentSchema: Dr.properties.spanSelectionHash,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.learnMoreText) {
					var w = t.learnMoreText;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/learnMoreText",
							schemaPath: "#/properties/learnMoreText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Dr.properties.learnMoreText.type,
							parentSchema: Dr.properties.learnMoreText,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.origin) {
					var _ = t.origin;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Dr.properties.origin.type,
							parentSchema: Dr.properties.origin,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.upgradeText) {
					var q = t.upgradeText;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/upgradeText",
							schemaPath: "#/properties/upgradeText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Dr.properties.upgradeText.type,
							parentSchema: Dr.properties.upgradeText,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.feature) {
					var x = t.feature;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/feature",
							schemaPath: "#/properties/feature/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Dr.properties.feature.type,
							parentSchema: Dr.properties.feature,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var N = t.contextLength;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Dr.properties.contextLength.type,
							parentSchema: Dr.properties.contextLength,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.draftId) {
					var D = t.draftId;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Dr.properties.draftId.type,
							parentSchema: Dr.properties.draftId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var j = t.caretLocation;
					if (!Array.isArray(j)) {
						var F = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Dr.properties.caretLocation.type,
							parentSchema: Dr.properties.caretLocation,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var C = t.spanSelectionLength;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Dr.properties.spanSelectionLength.type,
							parentSchema: Dr.properties.spanSelectionLength,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var H = t.isFirstEngagement;
					if ("boolean" !== typeof H) {
						var R = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Dr.properties.isFirstEngagement.type,
							parentSchema: Dr.properties.isFirstEngagement,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.configString) {
					var M = t.configString;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Dr.properties.configString.type
							},
							message: "must be string,null",
							schema: Dr.properties.configString.type,
							parentSchema: Dr.properties.configString,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.tabId) {
					var z = t.tabId;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Dr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Dr.properties.tabId.type,
							parentSchema: Dr.properties.tabId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.app) {
					var B = t.app;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Dr.properties.app.type
							},
							message: "must be string,null",
							schema: Dr.properties.app.type,
							parentSchema: Dr.properties.app,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.host) {
					var V = t.host;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Dr.properties.host.type
							},
							message: "must be string,null",
							schema: Dr.properties.host.type,
							parentSchema: Dr.properties.host,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
			} else {
				var K = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Dr.type,
					parentSchema: Dr,
					data: t
				};
				null === s ? s = [K] : s.push(K), p++
			}
			return e.errors = s, 0 === p
		};
		var Dr = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				learnMoreText: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				upgradeText: {
					type: "string"
				},
				feature: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "learnMoreText", "origin", "upgradeText", "feature", "contextLength", "draftId"],
			$id: "PremiumModalEntered",
			additionalProperties: !1
		};
		t.PremiumModalExited = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Tr.required,
						parentSchema: Tr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Tr.required,
						parentSchema: Tr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.contextLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Tr.required,
						parentSchema: Tr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Tr.required,
						parentSchema: Tr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.reason) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "reason"
						},
						message: "must have required property 'reason'",
						schema: Tr.required,
						parentSchema: Tr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.duration) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: Tr.required,
						parentSchema: Tr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				for (var l in t)
					if (!i.call(Tr.properties, l)) {
						var y = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: l
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Tr,
							data: t
						};
						null === s ? s = [y] : s.push(y), p++
					} if (void 0 !== t.platform) {
					var g = t.platform;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Tr.properties.platform.type,
							parentSchema: Tr.properties.platform,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var v = t.spanSelectionHash;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Tr.properties.spanSelectionHash.type,
							parentSchema: Tr.properties.spanSelectionHash,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var P = t.spanSelectionLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Tr.properties.spanSelectionLength.type,
							parentSchema: Tr.properties.spanSelectionLength,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var w = t.contextLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Tr.properties.contextLength.type,
							parentSchema: Tr.properties.contextLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.draftId) {
					var _ = t.draftId;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Tr.properties.draftId.type,
							parentSchema: Tr.properties.draftId,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.reason) {
					var q = t.reason;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/reason",
							schemaPath: "#/properties/reason/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Tr.properties.reason.type,
							parentSchema: Tr.properties.reason,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.duration) {
					var x = t.duration;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Tr.properties.duration.type,
							parentSchema: Tr.properties.duration,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var N = t.caretLocation;
					if (!Array.isArray(N)) {
						var O = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Tr.properties.caretLocation.type,
							parentSchema: Tr.properties.caretLocation,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var D = t.isFirstEngagement;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Tr.properties.isFirstEngagement.type,
							parentSchema: Tr.properties.isFirstEngagement,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.configString) {
					var j = t.configString;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Tr.properties.configString.type
							},
							message: "must be string,null",
							schema: Tr.properties.configString.type,
							parentSchema: Tr.properties.configString,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.tabId) {
					var C = t.tabId;
					if (("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) && null !== C) {
						var A = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Tr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Tr.properties.tabId.type,
							parentSchema: Tr.properties.tabId,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.app) {
					var H = t.app;
					if ("string" !== typeof H && null !== H) {
						var R = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Tr.properties.app.type
							},
							message: "must be string,null",
							schema: Tr.properties.app.type,
							parentSchema: Tr.properties.app,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.host) {
					var M = t.host;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Tr.properties.host.type
							},
							message: "must be string,null",
							schema: Tr.properties.host.type,
							parentSchema: Tr.properties.host,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
			} else {
				var z = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Tr.type,
					parentSchema: Tr,
					data: t
				};
				null === s ? s = [z] : s.push(z), p++
			}
			return e.errors = s, 0 === p
		};
		var Tr = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				reason: {
					type: "string"
				},
				duration: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "contextLength", "draftId", "reason", "duration"],
			$id: "PremiumModalExited",
			additionalProperties: !1
		};
		t.promo_code_id = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: jr.type,
					parentSchema: jr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var jr = {
			type: "string",
			$id: "promo_code_id"
		};
		t.promoCodeId = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Fr.type,
					parentSchema: Fr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Fr = {
			type: "string",
			$id: "promoCodeId"
		};
		t.RateUsPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Cr.required,
						parentSchema: Cr,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("origin" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Cr,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.origin) {
					var h = t.origin;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Cr.properties.origin.type,
							parentSchema: Cr.properties.origin,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Cr.properties.configString.type
							},
							message: "must be string,null",
							schema: Cr.properties.configString.type,
							parentSchema: Cr.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Cr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Cr.properties.tabId.type,
							parentSchema: Cr.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Cr.properties.app.type
							},
							message: "must be string,null",
							schema: Cr.properties.app.type,
							parentSchema: Cr.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Cr.properties.host.type
							},
							message: "must be string,null",
							schema: Cr.properties.host.type,
							parentSchema: Cr.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Cr.type,
					parentSchema: Cr,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Cr = {
			properties: {
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "RateUsPressed",
			additionalProperties: !1
		};
		t.RecommendationClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.recommendationCTA) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationCTA"
						},
						message: "must have required property 'recommendationCTA'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.recommendationType) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationType"
						},
						message: "must have required property 'recommendationType'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.duration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanLength"
						},
						message: "must have required property 'spanLength'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.platform) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.recommendationId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationId"
						},
						message: "must have required property 'recommendationId'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.interactionId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Ar.required,
						parentSchema: Ar,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				for (var v in t)
					if (!i.call(Ar.properties, v)) {
						var b = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: v
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ar,
							data: t
						};
						null === s ? s = [b] : s.push(b), p++
					} if (void 0 !== t.recommendationCTA) {
					var P = t.recommendationCTA;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/recommendationCTA",
							schemaPath: "#/properties/recommendationCTA/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ar.properties.recommendationCTA.type,
							parentSchema: Ar.properties.recommendationCTA,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.recommendationType) {
					var w = t.recommendationType;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/recommendationType",
							schemaPath: "#/properties/recommendationType/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ar.properties.recommendationType.type,
							parentSchema: Ar.properties.recommendationType,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var _ = t.isFirstEngagement;
					if ("boolean" !== typeof _) {
						var I = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ar.properties.isFirstEngagement.type,
							parentSchema: Ar.properties.isFirstEngagement,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.duration) {
					var q = t.duration;
					if (("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) && null !== q) {
						var L = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: Ar.properties.duration.type
							},
							message: "must be integer,null",
							schema: Ar.properties.duration.type,
							parentSchema: Ar.properties.duration,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.spanLength) {
					var x = t.spanLength;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/spanLength",
							schemaPath: "#/properties/spanLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ar.properties.spanLength.type,
							parentSchema: Ar.properties.spanLength,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.platform) {
					var N = t.platform;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ar.properties.platform.type,
							parentSchema: Ar.properties.platform,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var D = t.spanSelectionHash;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ar.properties.spanSelectionHash.type,
							parentSchema: Ar.properties.spanSelectionHash,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.recommendationId) {
					var j = t.recommendationId;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/recommendationId",
							schemaPath: "#/properties/recommendationId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ar.properties.recommendationId.type,
							parentSchema: Ar.properties.recommendationId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var C = t.numOfSuggestions;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ar.properties.numOfSuggestions.type,
							parentSchema: Ar.properties.numOfSuggestions,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var H = t.contextLength;
					if ("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) {
						var R = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ar.properties.contextLength.type,
							parentSchema: Ar.properties.contextLength,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var M = t.interactionId;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ar.properties.interactionId.type,
							parentSchema: Ar.properties.interactionId,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.draftId) {
					var z = t.draftId;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ar.properties.draftId.type,
							parentSchema: Ar.properties.draftId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var B = t.caretLocation;
					if (!Array.isArray(B)) {
						var W = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Ar.properties.caretLocation.type,
							parentSchema: Ar.properties.caretLocation,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var V = t.spanSelectionLength;
					if ("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) {
						var G = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ar.properties.spanSelectionLength.type,
							parentSchema: Ar.properties.spanSelectionLength,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.configString) {
					var K = t.configString;
					if ("string" !== typeof K && null !== K) {
						var Q = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ar.properties.configString.type
							},
							message: "must be string,null",
							schema: Ar.properties.configString.type,
							parentSchema: Ar.properties.configString,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Y = t.tabId;
					if (("number" != typeof Y || Y % 1 || isNaN(Y) || !isFinite(Y)) && null !== Y) {
						var J = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ar.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ar.properties.tabId.type,
							parentSchema: Ar.properties.tabId,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.app) {
					var X = t.app;
					if ("string" !== typeof X && null !== X) {
						var Z = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ar.properties.app.type
							},
							message: "must be string,null",
							schema: Ar.properties.app.type,
							parentSchema: Ar.properties.app,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.host) {
					var ee = t.host;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ar.properties.host.type
							},
							message: "must be string,null",
							schema: Ar.properties.host.type,
							parentSchema: Ar.properties.host,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
			} else {
				var re = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ar.type,
					parentSchema: Ar,
					data: t
				};
				null === s ? s = [re] : s.push(re), p++
			}
			return e.errors = s, 0 === p
		};
		var Ar = {
			properties: {
				recommendationCTA: {
					type: "string"
				},
				recommendationType: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				duration: {
					type: ["integer", "null"]
				},
				spanLength: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				recommendationId: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["recommendationCTA", "recommendationType", "duration", "spanLength", "platform", "spanSelectionHash", "recommendationId", "numOfSuggestions", "interactionId", "draftId"],
			$id: "RecommendationClosed",
			additionalProperties: !1
		};
		t.RecommendationIgnored = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.recommendationCTA) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationCTA"
						},
						message: "must have required property 'recommendationCTA'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.recommendationType) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationType"
						},
						message: "must have required property 'recommendationType'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.duration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanLength"
						},
						message: "must have required property 'spanLength'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.platform) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.recommendationId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationId"
						},
						message: "must have required property 'recommendationId'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.contextLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.reason) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "reason"
						},
						message: "must have required property 'reason'",
						schema: Hr.required,
						parentSchema: Hr,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(Hr.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Hr,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.recommendationCTA) {
					var S = t.recommendationCTA;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/recommendationCTA",
							schemaPath: "#/properties/recommendationCTA/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Hr.properties.recommendationCTA.type,
							parentSchema: Hr.properties.recommendationCTA,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.recommendationType) {
					var k = t.recommendationType;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/recommendationType",
							schemaPath: "#/properties/recommendationType/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Hr.properties.recommendationType.type,
							parentSchema: Hr.properties.recommendationType,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var I = t.isFirstEngagement;
					if ("boolean" !== typeof I) {
						var q = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Hr.properties.isFirstEngagement.type,
							parentSchema: Hr.properties.isFirstEngagement,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.duration) {
					var L = t.duration;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Hr.properties.duration.type,
							parentSchema: Hr.properties.duration,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanLength) {
					var E = t.spanLength;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/spanLength",
							schemaPath: "#/properties/spanLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Hr.properties.spanLength.type,
							parentSchema: Hr.properties.spanLength,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.platform) {
					var O = t.platform;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Hr.properties.platform.type,
							parentSchema: Hr.properties.platform,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var T = t.spanSelectionHash;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Hr.properties.spanSelectionHash.type,
							parentSchema: Hr.properties.spanSelectionHash,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.recommendationId) {
					var F = t.recommendationId;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/recommendationId",
							schemaPath: "#/properties/recommendationId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Hr.properties.recommendationId.type,
							parentSchema: Hr.properties.recommendationId,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var A = t.numOfSuggestions;
					if ("number" != typeof A || A % 1 || isNaN(A) || !isFinite(A)) {
						var H = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Hr.properties.numOfSuggestions.type,
							parentSchema: Hr.properties.numOfSuggestions,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var R = t.contextLength;
					if ("number" != typeof R || R % 1 || isNaN(R) || !isFinite(R)) {
						var M = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Hr.properties.contextLength.type,
							parentSchema: Hr.properties.contextLength,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.draftId) {
					var $ = t.draftId;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Hr.properties.draftId.type,
							parentSchema: Hr.properties.draftId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.reason) {
					var U = t.reason;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/reason",
							schemaPath: "#/properties/reason/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Hr.properties.reason.type,
							parentSchema: Hr.properties.reason,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var W = t.caretLocation;
					if (!Array.isArray(W)) {
						var V = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Hr.properties.caretLocation.type,
							parentSchema: Hr.properties.caretLocation,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var G = t.interactionId;
					if ("string" !== typeof G) {
						var K = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Hr.properties.interactionId.type,
							parentSchema: Hr.properties.interactionId,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var Q = t.spanSelectionLength;
					if ("number" != typeof Q || Q % 1 || isNaN(Q) || !isFinite(Q)) {
						var Y = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Hr.properties.spanSelectionLength.type,
							parentSchema: Hr.properties.spanSelectionLength,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.configString) {
					var J = t.configString;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Hr.properties.configString.type
							},
							message: "must be string,null",
							schema: Hr.properties.configString.type,
							parentSchema: Hr.properties.configString,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Z = t.tabId;
					if (("number" != typeof Z || Z % 1 || isNaN(Z) || !isFinite(Z)) && null !== Z) {
						var ee = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Hr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Hr.properties.tabId.type,
							parentSchema: Hr.properties.tabId,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.app) {
					var te = t.app;
					if ("string" !== typeof te && null !== te) {
						var re = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Hr.properties.app.type
							},
							message: "must be string,null",
							schema: Hr.properties.app.type,
							parentSchema: Hr.properties.app,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
				if (void 0 !== t.host) {
					var ae = t.host;
					if ("string" !== typeof ae && null !== ae) {
						var ne = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Hr.properties.host.type
							},
							message: "must be string,null",
							schema: Hr.properties.host.type,
							parentSchema: Hr.properties.host,
							data: ae
						};
						null === s ? s = [ne] : s.push(ne), p++
					}
				}
			} else {
				var ie = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Hr.type,
					parentSchema: Hr,
					data: t
				};
				null === s ? s = [ie] : s.push(ie), p++
			}
			return e.errors = s, 0 === p
		};
		var Hr = {
			properties: {
				recommendationCTA: {
					type: "string"
				},
				recommendationType: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				duration: {
					type: "integer"
				},
				spanLength: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				recommendationId: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				reason: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				interactionId: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["recommendationCTA", "recommendationType", "duration", "spanLength", "platform", "spanSelectionHash", "recommendationId", "numOfSuggestions", "contextLength", "draftId", "reason"],
			$id: "RecommendationIgnored",
			additionalProperties: !1
		};
		t.RecommendationOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.recommendationCTA) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationCTA"
						},
						message: "must have required property 'recommendationCTA'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.recommendationType) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationType"
						},
						message: "must have required property 'recommendationType'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanLength"
						},
						message: "must have required property 'spanLength'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.recommendationId) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationId"
						},
						message: "must have required property 'recommendationId'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.origin) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.contextLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.interactionId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.draftId) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Rr.required,
						parentSchema: Rr,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(Rr.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Rr,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.recommendationCTA) {
					var S = t.recommendationCTA;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/recommendationCTA",
							schemaPath: "#/properties/recommendationCTA/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Rr.properties.recommendationCTA.type,
							parentSchema: Rr.properties.recommendationCTA,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.recommendationType) {
					var k = t.recommendationType;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/recommendationType",
							schemaPath: "#/properties/recommendationType/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Rr.properties.recommendationType.type,
							parentSchema: Rr.properties.recommendationType,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var I = t.isFirstEngagement;
					if ("boolean" !== typeof I) {
						var q = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Rr.properties.isFirstEngagement.type,
							parentSchema: Rr.properties.isFirstEngagement,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.spanLength) {
					var L = t.spanLength;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/spanLength",
							schemaPath: "#/properties/spanLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Rr.properties.spanLength.type,
							parentSchema: Rr.properties.spanLength,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.platform) {
					var E = t.platform;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Rr.properties.platform.type,
							parentSchema: Rr.properties.platform,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var O = t.spanSelectionHash;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Rr.properties.spanSelectionHash.type,
							parentSchema: Rr.properties.spanSelectionHash,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.recommendationId) {
					var T = t.recommendationId;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/recommendationId",
							schemaPath: "#/properties/recommendationId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Rr.properties.recommendationId.type,
							parentSchema: Rr.properties.recommendationId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var F = t.numOfSuggestions;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Rr.properties.numOfSuggestions.type,
							parentSchema: Rr.properties.numOfSuggestions,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.origin) {
					var A = t.origin;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Rr.properties.origin.type,
							parentSchema: Rr.properties.origin,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var R = t.contextLength;
					if ("number" != typeof R || R % 1 || isNaN(R) || !isFinite(R)) {
						var M = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Rr.properties.contextLength.type,
							parentSchema: Rr.properties.contextLength,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var $ = t.interactionId;
					if ("string" !== typeof $ && null !== $) {
						var z = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: Rr.properties.interactionId.type
							},
							message: "must be string,null",
							schema: Rr.properties.interactionId.type,
							parentSchema: Rr.properties.interactionId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.draftId) {
					var U = t.draftId;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Rr.properties.draftId.type,
							parentSchema: Rr.properties.draftId,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var W = t.caretLocation;
					if (!Array.isArray(W)) {
						var V = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Rr.properties.caretLocation.type,
							parentSchema: Rr.properties.caretLocation,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var G = t.spanSelectionLength;
					if ("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) {
						var K = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Rr.properties.spanSelectionLength.type,
							parentSchema: Rr.properties.spanSelectionLength,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.configString) {
					var Q = t.configString;
					if ("string" !== typeof Q && null !== Q) {
						var Y = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Rr.properties.configString.type
							},
							message: "must be string,null",
							schema: Rr.properties.configString.type,
							parentSchema: Rr.properties.configString,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.tabId) {
					var J = t.tabId;
					if (("number" != typeof J || J % 1 || isNaN(J) || !isFinite(J)) && null !== J) {
						var X = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Rr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Rr.properties.tabId.type,
							parentSchema: Rr.properties.tabId,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.app) {
					var Z = t.app;
					if ("string" !== typeof Z && null !== Z) {
						var ee = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Rr.properties.app.type
							},
							message: "must be string,null",
							schema: Rr.properties.app.type,
							parentSchema: Rr.properties.app,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.host) {
					var te = t.host;
					if ("string" !== typeof te && null !== te) {
						var re = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Rr.properties.host.type
							},
							message: "must be string,null",
							schema: Rr.properties.host.type,
							parentSchema: Rr.properties.host,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
			} else {
				var ae = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Rr.type,
					parentSchema: Rr,
					data: t
				};
				null === s ? s = [ae] : s.push(ae), p++
			}
			return e.errors = s, 0 === p
		};
		var Rr = {
			properties: {
				recommendationCTA: {
					type: "string"
				},
				recommendationType: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanLength: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				recommendationId: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: ["string", "null"]
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["recommendationCTA", "recommendationType", "spanLength", "platform", "spanSelectionHash", "recommendationId", "numOfSuggestions", "origin", "contextLength", "interactionId", "draftId"],
			$id: "RecommendationOpened",
			additionalProperties: !1
		};
		t.RecommendationPanelClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.totalRecommendations) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "totalRecommendations"
						},
						message: "must have required property 'totalRecommendations'",
						schema: Mr.required,
						parentSchema: Mr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: Mr.required,
						parentSchema: Mr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Mr.required,
						parentSchema: Mr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Mr.required,
						parentSchema: Mr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.contextLength) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Mr.required,
						parentSchema: Mr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.draftId) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Mr.required,
						parentSchema: Mr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.reason) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "reason"
						},
						message: "must have required property 'reason'",
						schema: Mr.required,
						parentSchema: Mr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				for (var y in t)
					if (!i.call(Mr.properties, y)) {
						var g = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: y
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Mr,
							data: t
						};
						null === s ? s = [g] : s.push(g), p++
					} if (void 0 !== t.isFirstEngagement) {
					var f = t.isFirstEngagement;
					if ("boolean" !== typeof f) {
						var v = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Mr.properties.isFirstEngagement.type,
							parentSchema: Mr.properties.isFirstEngagement,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.totalRecommendations) {
					var b = t.totalRecommendations;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/totalRecommendations",
							schemaPath: "#/properties/totalRecommendations/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Mr.properties.totalRecommendations.type,
							parentSchema: Mr.properties.totalRecommendations,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.duration) {
					var S = t.duration;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Mr.properties.duration.type,
							parentSchema: Mr.properties.duration,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.platform) {
					var k = t.platform;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Mr.properties.platform.type,
							parentSchema: Mr.properties.platform,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var I = t.spanSelectionHash;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Mr.properties.spanSelectionHash.type,
							parentSchema: Mr.properties.spanSelectionHash,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var L = t.contextLength;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Mr.properties.contextLength.type,
							parentSchema: Mr.properties.contextLength,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.draftId) {
					var E = t.draftId;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Mr.properties.draftId.type,
							parentSchema: Mr.properties.draftId,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.reason) {
					var O = t.reason;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/reason",
							schemaPath: "#/properties/reason/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Mr.properties.reason.type,
							parentSchema: Mr.properties.reason,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var T = t.caretLocation;
					if (!Array.isArray(T)) {
						var j = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Mr.properties.caretLocation.type,
							parentSchema: Mr.properties.caretLocation,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var F = t.spanSelectionLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Mr.properties.spanSelectionLength.type,
							parentSchema: Mr.properties.spanSelectionLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.configString) {
					var A = t.configString;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Mr.properties.configString.type
							},
							message: "must be string,null",
							schema: Mr.properties.configString.type,
							parentSchema: Mr.properties.configString,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.tabId) {
					var R = t.tabId;
					if (("number" != typeof R || R % 1 || isNaN(R) || !isFinite(R)) && null !== R) {
						var M = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Mr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Mr.properties.tabId.type,
							parentSchema: Mr.properties.tabId,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.app) {
					var $ = t.app;
					if ("string" !== typeof $ && null !== $) {
						var z = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Mr.properties.app.type
							},
							message: "must be string,null",
							schema: Mr.properties.app.type,
							parentSchema: Mr.properties.app,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.host) {
					var U = t.host;
					if ("string" !== typeof U && null !== U) {
						var B = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Mr.properties.host.type
							},
							message: "must be string,null",
							schema: Mr.properties.host.type,
							parentSchema: Mr.properties.host,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
			} else {
				var W = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Mr.type,
					parentSchema: Mr,
					data: t
				};
				null === s ? s = [W] : s.push(W), p++
			}
			return e.errors = s, 0 === p
		};
		var Mr = {
			properties: {
				isFirstEngagement: {
					type: "boolean"
				},
				totalRecommendations: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				reason: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["totalRecommendations", "duration", "platform", "spanSelectionHash", "contextLength", "draftId", "reason"],
			$id: "RecommendationPanelClosed",
			additionalProperties: !1
		};
		t.RecommendationPanelOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: $r.required,
						parentSchema: $r,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: $r.required,
						parentSchema: $r,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: $r.required,
						parentSchema: $r,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.totalRecommendations) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "totalRecommendations"
						},
						message: "must have required property 'totalRecommendations'",
						schema: $r.required,
						parentSchema: $r,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.draftId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: $r.required,
						parentSchema: $r,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call($r.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: $r,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: $r.properties.platform.type,
							parentSchema: $r.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var f = t.spanSelectionHash;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: $r.properties.spanSelectionHash.type,
							parentSchema: $r.properties.spanSelectionHash,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var b = t.isFirstEngagement;
					if ("boolean" !== typeof b) {
						var P = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: $r.properties.isFirstEngagement.type,
							parentSchema: $r.properties.isFirstEngagement,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.origin) {
					var S = t.origin;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: $r.properties.origin.type,
							parentSchema: $r.properties.origin,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.totalRecommendations) {
					var k = t.totalRecommendations;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/totalRecommendations",
							schemaPath: "#/properties/totalRecommendations/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: $r.properties.totalRecommendations.type,
							parentSchema: $r.properties.totalRecommendations,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var I = t.contextLength;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: $r.properties.contextLength.type,
							parentSchema: $r.properties.contextLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.draftId) {
					var L = t.draftId;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: $r.properties.draftId.type,
							parentSchema: $r.properties.draftId,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var E = t.caretLocation;
					if (!Array.isArray(E)) {
						var N = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: $r.properties.caretLocation.type,
							parentSchema: $r.properties.caretLocation,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var O = t.spanSelectionLength;
					if ("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) {
						var D = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: $r.properties.spanSelectionLength.type,
							parentSchema: $r.properties.spanSelectionLength,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.configString) {
					var T = t.configString;
					if ("string" !== typeof T && null !== T) {
						var j = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: $r.properties.configString.type
							},
							message: "must be string,null",
							schema: $r.properties.configString.type,
							parentSchema: $r.properties.configString,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.tabId) {
					var F = t.tabId;
					if (("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) && null !== F) {
						var C = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: $r.properties.tabId.type
							},
							message: "must be integer,null",
							schema: $r.properties.tabId.type,
							parentSchema: $r.properties.tabId,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.app) {
					var A = t.app;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: $r.properties.app.type
							},
							message: "must be string,null",
							schema: $r.properties.app.type,
							parentSchema: $r.properties.app,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.host) {
					var R = t.host;
					if ("string" !== typeof R && null !== R) {
						var M = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: $r.properties.host.type
							},
							message: "must be string,null",
							schema: $r.properties.host.type,
							parentSchema: $r.properties.host,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
			} else {
				var $ = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: $r.type,
					parentSchema: $r,
					data: t
				};
				null === s ? s = [$] : s.push($), p++
			}
			return e.errors = s, 0 === p
		};
		var $r = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				origin: {
					type: "string"
				},
				totalRecommendations: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "totalRecommendations", "draftId"],
			$id: "RecommendationPanelOpened",
			additionalProperties: !1
		};
		t.RecommendationsEnabled = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: zr.required,
						parentSchema: zr,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("origin" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: zr,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.origin) {
					var h = t.origin;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: zr.properties.origin.type,
							parentSchema: zr.properties.origin,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: zr.properties.configString.type
							},
							message: "must be string,null",
							schema: zr.properties.configString.type,
							parentSchema: zr.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: zr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: zr.properties.tabId.type,
							parentSchema: zr.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: zr.properties.app.type
							},
							message: "must be string,null",
							schema: zr.properties.app.type,
							parentSchema: zr.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: zr.properties.host.type
							},
							message: "must be string,null",
							schema: zr.properties.host.type,
							parentSchema: zr.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: zr.type,
					parentSchema: zr,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var zr = {
			properties: {
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "RecommendationsEnabled",
			additionalProperties: !1
		};
		t.RecommendationShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Ur.required,
						parentSchema: Ur,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Ur.required,
						parentSchema: Ur,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.contextLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Ur.required,
						parentSchema: Ur,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Ur.required,
						parentSchema: Ur,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.fetchDuration) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "fetchDuration"
						},
						message: "must have required property 'fetchDuration'",
						schema: Ur.required,
						parentSchema: Ur,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(Ur.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ur,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ur.properties.platform.type,
							parentSchema: Ur.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var f = t.spanSelectionHash;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ur.properties.spanSelectionHash.type,
							parentSchema: Ur.properties.spanSelectionHash,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var b = t.spanSelectionLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ur.properties.spanSelectionLength.type,
							parentSchema: Ur.properties.spanSelectionLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var S = t.isFirstEngagement;
					if ("boolean" !== typeof S) {
						var w = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ur.properties.isFirstEngagement.type,
							parentSchema: Ur.properties.isFirstEngagement,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var k = t.contextLength;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ur.properties.contextLength.type,
							parentSchema: Ur.properties.contextLength,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.draftId) {
					var I = t.draftId;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ur.properties.draftId.type,
							parentSchema: Ur.properties.draftId,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.fetchDuration) {
					var L = t.fetchDuration;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/fetchDuration",
							schemaPath: "#/properties/fetchDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ur.properties.fetchDuration.type,
							parentSchema: Ur.properties.fetchDuration,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var E = t.caretLocation;
					if (!Array.isArray(E)) {
						var N = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Ur.properties.caretLocation.type,
							parentSchema: Ur.properties.caretLocation,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var O = t.interactionId;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: Ur.properties.interactionId.type
							},
							message: "must be string,null",
							schema: Ur.properties.interactionId.type,
							parentSchema: Ur.properties.interactionId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.configString) {
					var T = t.configString;
					if ("string" !== typeof T && null !== T) {
						var j = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ur.properties.configString.type
							},
							message: "must be string,null",
							schema: Ur.properties.configString.type,
							parentSchema: Ur.properties.configString,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.tabId) {
					var F = t.tabId;
					if (("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) && null !== F) {
						var C = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ur.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ur.properties.tabId.type,
							parentSchema: Ur.properties.tabId,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.app) {
					var A = t.app;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ur.properties.app.type
							},
							message: "must be string,null",
							schema: Ur.properties.app.type,
							parentSchema: Ur.properties.app,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.host) {
					var R = t.host;
					if ("string" !== typeof R && null !== R) {
						var M = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ur.properties.host.type
							},
							message: "must be string,null",
							schema: Ur.properties.host.type,
							parentSchema: Ur.properties.host,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
			} else {
				var $ = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ur.type,
					parentSchema: Ur,
					data: t
				};
				null === s ? s = [$] : s.push($), p++
			}
			return e.errors = s, 0 === p
		};
		var Ur = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				fetchDuration: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				interactionId: {
					type: ["string", "null"]
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "contextLength", "draftId", "fetchDuration"],
			$id: "RecommendationShown",
			additionalProperties: !1
		};
		t.RecommendationsSuspended = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Br.required,
						parentSchema: Br,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("origin" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Br,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.origin) {
					var h = t.origin;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Br.properties.origin.type,
							parentSchema: Br.properties.origin,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Br.properties.configString.type
							},
							message: "must be string,null",
							schema: Br.properties.configString.type,
							parentSchema: Br.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Br.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Br.properties.tabId.type,
							parentSchema: Br.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Br.properties.app.type
							},
							message: "must be string,null",
							schema: Br.properties.app.type,
							parentSchema: Br.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Br.properties.host.type
							},
							message: "must be string,null",
							schema: Br.properties.host.type,
							parentSchema: Br.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Br.type,
					parentSchema: Br,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Br = {
			properties: {
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "RecommendationsSuspended",
			additionalProperties: !1
		};
		t.RecommendationSuggestionSelected = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.recommendationCTA) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationCTA"
						},
						message: "must have required property 'recommendationCTA'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.idx) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "idx"
						},
						message: "must have required property 'idx'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.recommendationType) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationType"
						},
						message: "must have required property 'recommendationType'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.suggestionLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "suggestionLength"
						},
						message: "must have required property 'suggestionLength'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.duration) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.spanLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanLength"
						},
						message: "must have required property 'spanLength'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.platform) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.recommendationId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "recommendationId"
						},
						message: "must have required property 'recommendationId'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.interactionId) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				if (void 0 === t.draftId) {
					var b = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Wr.required,
						parentSchema: Wr,
						data: t
					};
					null === s ? s = [b] : s.push(b), p++
				}
				for (var P in t)
					if (!i.call(Wr.properties, P)) {
						var S = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: P
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Wr,
							data: t
						};
						null === s ? s = [S] : s.push(S), p++
					} if (void 0 !== t.recommendationCTA) {
					var w = t.recommendationCTA;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/recommendationCTA",
							schemaPath: "#/properties/recommendationCTA/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wr.properties.recommendationCTA.type,
							parentSchema: Wr.properties.recommendationCTA,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.idx) {
					var _ = t.idx;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/idx",
							schemaPath: "#/properties/idx/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wr.properties.idx.type,
							parentSchema: Wr.properties.idx,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.recommendationType) {
					var q = t.recommendationType;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/recommendationType",
							schemaPath: "#/properties/recommendationType/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wr.properties.recommendationType.type,
							parentSchema: Wr.properties.recommendationType,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var x = t.isFirstEngagement;
					if ("boolean" !== typeof x) {
						var E = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Wr.properties.isFirstEngagement.type,
							parentSchema: Wr.properties.isFirstEngagement,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.suggestionLength) {
					var N = t.suggestionLength;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/suggestionLength",
							schemaPath: "#/properties/suggestionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wr.properties.suggestionLength.type,
							parentSchema: Wr.properties.suggestionLength,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.duration) {
					var D = t.duration;
					if (("number" != typeof D || !isFinite(D)) && null !== D) {
						var T = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: Wr.properties.duration.type
							},
							message: "must be number,null",
							schema: Wr.properties.duration.type,
							parentSchema: Wr.properties.duration,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.spanLength) {
					var j = t.spanLength;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/spanLength",
							schemaPath: "#/properties/spanLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wr.properties.spanLength.type,
							parentSchema: Wr.properties.spanLength,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.platform) {
					var C = t.platform;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wr.properties.platform.type,
							parentSchema: Wr.properties.platform,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var H = t.spanSelectionHash;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wr.properties.spanSelectionHash.type,
							parentSchema: Wr.properties.spanSelectionHash,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.recommendationId) {
					var M = t.recommendationId;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/recommendationId",
							schemaPath: "#/properties/recommendationId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wr.properties.recommendationId.type,
							parentSchema: Wr.properties.recommendationId,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var z = t.numOfSuggestions;
					if ("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) {
						var U = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wr.properties.numOfSuggestions.type,
							parentSchema: Wr.properties.numOfSuggestions,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var B = t.contextLength;
					if ("number" != typeof B || B % 1 || isNaN(B) || !isFinite(B)) {
						var W = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wr.properties.contextLength.type,
							parentSchema: Wr.properties.contextLength,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var V = t.interactionId;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wr.properties.interactionId.type,
							parentSchema: Wr.properties.interactionId,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.draftId) {
					var K = t.draftId;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wr.properties.draftId.type,
							parentSchema: Wr.properties.draftId,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var Y = t.caretLocation;
					if (!Array.isArray(Y)) {
						var J = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Wr.properties.caretLocation.type,
							parentSchema: Wr.properties.caretLocation,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var X = t.spanSelectionLength;
					if ("number" != typeof X || X % 1 || isNaN(X) || !isFinite(X)) {
						var Z = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wr.properties.spanSelectionLength.type,
							parentSchema: Wr.properties.spanSelectionLength,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.configString) {
					var ee = t.configString;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Wr.properties.configString.type
							},
							message: "must be string,null",
							schema: Wr.properties.configString.type,
							parentSchema: Wr.properties.configString,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.tabId) {
					var re = t.tabId;
					if (("number" != typeof re || re % 1 || isNaN(re) || !isFinite(re)) && null !== re) {
						var ae = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Wr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Wr.properties.tabId.type,
							parentSchema: Wr.properties.tabId,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.app) {
					var ne = t.app;
					if ("string" !== typeof ne && null !== ne) {
						var ie = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Wr.properties.app.type
							},
							message: "must be string,null",
							schema: Wr.properties.app.type,
							parentSchema: Wr.properties.app,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.host) {
					var se = t.host;
					if ("string" !== typeof se && null !== se) {
						var pe = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Wr.properties.host.type
							},
							message: "must be string,null",
							schema: Wr.properties.host.type,
							parentSchema: Wr.properties.host,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
			} else {
				var oe = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Wr.type,
					parentSchema: Wr,
					data: t
				};
				null === s ? s = [oe] : s.push(oe), p++
			}
			return e.errors = s, 0 === p
		};
		var Wr = {
			properties: {
				recommendationCTA: {
					type: "string"
				},
				idx: {
					type: "integer"
				},
				recommendationType: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				suggestionLength: {
					type: "integer"
				},
				duration: {
					type: ["number", "null"]
				},
				spanLength: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				recommendationId: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["recommendationCTA", "idx", "recommendationType", "suggestionLength", "duration", "spanLength", "platform", "spanSelectionHash", "recommendationId", "numOfSuggestions", "interactionId", "draftId"],
			$id: "RecommendationSuggestionSelected",
			additionalProperties: !1
		};
		t.RecurrentPaymentSuccess = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.priceCents) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "priceCents"
						},
						message: "must have required property 'priceCents'",
						schema: Vr.required,
						parentSchema: Vr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.paymentExpirationDate) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "paymentExpirationDate"
						},
						message: "must have required property 'paymentExpirationDate'",
						schema: Vr.required,
						parentSchema: Vr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.subscriptionPlan) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "subscriptionPlan"
						},
						message: "must have required property 'subscriptionPlan'",
						schema: Vr.required,
						parentSchema: Vr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				for (var u in t)
					if (!i.call(Vr.properties, u)) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: u
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Vr,
							data: t
						};
						null === s ? s = [m] : s.push(m), p++
					} if (void 0 !== t.priceCents) {
					var d = t.priceCents;
					if ("number" != typeof d || d % 1 || isNaN(d) || !isFinite(d)) {
						var l = {
							instancePath: n + "/priceCents",
							schemaPath: "#/properties/priceCents/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Vr.properties.priceCents.type,
							parentSchema: Vr.properties.priceCents,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.paymentExpirationDate) {
					var y = t.paymentExpirationDate;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/paymentExpirationDate",
							schemaPath: "#/properties/paymentExpirationDate/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Vr.properties.paymentExpirationDate.type,
							parentSchema: Vr.properties.paymentExpirationDate,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.subscriptionPlan) {
					var f = t.subscriptionPlan;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/subscriptionPlan",
							schemaPath: "#/properties/subscriptionPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Vr.properties.subscriptionPlan.type,
							parentSchema: Vr.properties.subscriptionPlan,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.promoCodeId) {
					var b = t.promoCodeId;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/promoCodeId",
							schemaPath: "#/properties/promoCodeId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Vr.properties.promoCodeId.type,
							parentSchema: Vr.properties.promoCodeId,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.promoCodeName) {
					var S = t.promoCodeName;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/promoCodeName",
							schemaPath: "#/properties/promoCodeName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Vr.properties.promoCodeName.type,
							parentSchema: Vr.properties.promoCodeName,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.discountPercent) {
					var k = t.discountPercent;
					if ("number" != typeof k || !isFinite(k)) {
						var _ = {
							instancePath: n + "/discountPercent",
							schemaPath: "#/properties/discountPercent/type",
							keyword: "type",
							params: {
								type: "number"
							},
							message: "must be number",
							schema: Vr.properties.discountPercent.type,
							parentSchema: Vr.properties.discountPercent,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.configString) {
					var I = t.configString;
					if ("string" !== typeof I && null !== I) {
						var q = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Vr.properties.configString.type
							},
							message: "must be string,null",
							schema: Vr.properties.configString.type,
							parentSchema: Vr.properties.configString,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.tabId) {
					var L = t.tabId;
					if (("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) && null !== L) {
						var x = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Vr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Vr.properties.tabId.type,
							parentSchema: Vr.properties.tabId,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.app) {
					var E = t.app;
					if ("string" !== typeof E && null !== E) {
						var N = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Vr.properties.app.type
							},
							message: "must be string,null",
							schema: Vr.properties.app.type,
							parentSchema: Vr.properties.app,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.host) {
					var O = t.host;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Vr.properties.host.type
							},
							message: "must be string,null",
							schema: Vr.properties.host.type,
							parentSchema: Vr.properties.host,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
			} else {
				var T = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Vr.type,
					parentSchema: Vr,
					data: t
				};
				null === s ? s = [T] : s.push(T), p++
			}
			return e.errors = s, 0 === p
		};
		var Vr = {
			properties: {
				priceCents: {
					type: "integer"
				},
				paymentExpirationDate: {
					type: "string"
				},
				subscriptionPlan: {
					type: "string"
				},
				promoCodeId: {
					type: "string"
				},
				promoCodeName: {
					type: "string"
				},
				discountPercent: {
					type: "number"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["priceCents", "paymentExpirationDate", "subscriptionPlan"],
			$id: "RecurrentPaymentSuccess",
			additionalProperties: !1
		};
		t.referrer = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Gr.type,
					parentSchema: Gr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Gr = {
			type: "string",
			$id: "referrer"
		};
		t.referring_domain = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Kr.type,
					parentSchema: Kr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Kr = {
			type: "string",
			$id: "referring_domain"
		};
		t.RefineClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.hoverTime) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "hoverTime"
						},
						message: "must have required property 'hoverTime'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.wordIndex) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "wordIndex"
						},
						message: "must have required property 'wordIndex'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.isPhrase) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isPhrase"
						},
						message: "must have required property 'isPhrase'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.availableExtraSuggestions) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "availableExtraSuggestions"
						},
						message: "must have required property 'availableExtraSuggestions'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.platform) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.textLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "textLength"
						},
						message: "must have required property 'textLength'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.wordLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "wordLength"
						},
						message: "must have required property 'wordLength'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.contextLength) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.interactionId) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				if (void 0 === t.draftId) {
					var b = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Qr.required,
						parentSchema: Qr,
						data: t
					};
					null === s ? s = [b] : s.push(b), p++
				}
				for (var P in t)
					if (!i.call(Qr.properties, P)) {
						var S = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: P
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Qr,
							data: t
						};
						null === s ? s = [S] : s.push(S), p++
					} if (void 0 !== t.hoverTime) {
					var w = t.hoverTime;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/hoverTime",
							schemaPath: "#/properties/hoverTime/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Qr.properties.hoverTime.type,
							parentSchema: Qr.properties.hoverTime,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.wordIndex) {
					var _ = t.wordIndex;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/wordIndex",
							schemaPath: "#/properties/wordIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Qr.properties.wordIndex.type,
							parentSchema: Qr.properties.wordIndex,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.isPhrase) {
					var q = t.isPhrase;
					if ("boolean" !== typeof q) {
						var L = {
							instancePath: n + "/isPhrase",
							schemaPath: "#/properties/isPhrase/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Qr.properties.isPhrase.type,
							parentSchema: Qr.properties.isPhrase,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.availableExtraSuggestions) {
					var x = t.availableExtraSuggestions;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/availableExtraSuggestions",
							schemaPath: "#/properties/availableExtraSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Qr.properties.availableExtraSuggestions.type,
							parentSchema: Qr.properties.availableExtraSuggestions,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.platform) {
					var N = t.platform;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Qr.properties.platform.type,
							parentSchema: Qr.properties.platform,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var D = t.spanSelectionHash;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Qr.properties.spanSelectionHash.type,
							parentSchema: Qr.properties.spanSelectionHash,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var j = t.numOfSuggestions;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Qr.properties.numOfSuggestions.type,
							parentSchema: Qr.properties.numOfSuggestions,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.textLength) {
					var C = t.textLength;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/textLength",
							schemaPath: "#/properties/textLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Qr.properties.textLength.type,
							parentSchema: Qr.properties.textLength,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.wordLength) {
					var H = t.wordLength;
					if ("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) {
						var R = {
							instancePath: n + "/wordLength",
							schemaPath: "#/properties/wordLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Qr.properties.wordLength.type,
							parentSchema: Qr.properties.wordLength,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var M = t.contextLength;
					if ("number" != typeof M || M % 1 || isNaN(M) || !isFinite(M)) {
						var $ = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Qr.properties.contextLength.type,
							parentSchema: Qr.properties.contextLength,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var z = t.interactionId;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Qr.properties.interactionId.type,
							parentSchema: Qr.properties.interactionId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.draftId) {
					var B = t.draftId;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Qr.properties.draftId.type,
							parentSchema: Qr.properties.draftId,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var V = t.caretLocation;
					if (!Array.isArray(V)) {
						var G = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Qr.properties.caretLocation.type,
							parentSchema: Qr.properties.caretLocation,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.configString) {
					var K = t.configString;
					if ("string" !== typeof K && null !== K) {
						var Q = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Qr.properties.configString.type
							},
							message: "must be string,null",
							schema: Qr.properties.configString.type,
							parentSchema: Qr.properties.configString,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Y = t.tabId;
					if (("number" != typeof Y || Y % 1 || isNaN(Y) || !isFinite(Y)) && null !== Y) {
						var J = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Qr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Qr.properties.tabId.type,
							parentSchema: Qr.properties.tabId,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.app) {
					var X = t.app;
					if ("string" !== typeof X && null !== X) {
						var Z = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Qr.properties.app.type
							},
							message: "must be string,null",
							schema: Qr.properties.app.type,
							parentSchema: Qr.properties.app,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.host) {
					var ee = t.host;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Qr.properties.host.type
							},
							message: "must be string,null",
							schema: Qr.properties.host.type,
							parentSchema: Qr.properties.host,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
			} else {
				var re = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Qr.type,
					parentSchema: Qr,
					data: t
				};
				null === s ? s = [re] : s.push(re), p++
			}
			return e.errors = s, 0 === p
		};
		var Qr = {
			properties: {
				hoverTime: {
					type: "integer"
				},
				wordIndex: {
					type: "integer"
				},
				isPhrase: {
					type: "boolean"
				},
				availableExtraSuggestions: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				textLength: {
					type: "integer"
				},
				wordLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["hoverTime", "wordIndex", "isPhrase", "availableExtraSuggestions", "platform", "spanSelectionHash", "numOfSuggestions", "textLength", "wordLength", "contextLength", "interactionId", "draftId"],
			$id: "RefineClosed",
			additionalProperties: !1
		};
		t.RefineHovered = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.wordIndex) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "wordIndex"
						},
						message: "must have required property 'wordIndex'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.isPhrase) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isPhrase"
						},
						message: "must have required property 'isPhrase'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.availableExtraSuggestions) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "availableExtraSuggestions"
						},
						message: "must have required property 'availableExtraSuggestions'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.textLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "textLength"
						},
						message: "must have required property 'textLength'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.wordLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "wordLength"
						},
						message: "must have required property 'wordLength'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.contextLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.interactionId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.draftId) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Yr.required,
						parentSchema: Yr,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(Yr.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Yr,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.wordIndex) {
					var S = t.wordIndex;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/wordIndex",
							schemaPath: "#/properties/wordIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Yr.properties.wordIndex.type,
							parentSchema: Yr.properties.wordIndex,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.isPhrase) {
					var k = t.isPhrase;
					if ("boolean" !== typeof k) {
						var _ = {
							instancePath: n + "/isPhrase",
							schemaPath: "#/properties/isPhrase/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Yr.properties.isPhrase.type,
							parentSchema: Yr.properties.isPhrase,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.availableExtraSuggestions) {
					var I = t.availableExtraSuggestions;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/availableExtraSuggestions",
							schemaPath: "#/properties/availableExtraSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Yr.properties.availableExtraSuggestions.type,
							parentSchema: Yr.properties.availableExtraSuggestions,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.platform) {
					var L = t.platform;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Yr.properties.platform.type,
							parentSchema: Yr.properties.platform,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var E = t.spanSelectionHash;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Yr.properties.spanSelectionHash.type,
							parentSchema: Yr.properties.spanSelectionHash,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var O = t.numOfSuggestions;
					if ("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) {
						var D = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Yr.properties.numOfSuggestions.type,
							parentSchema: Yr.properties.numOfSuggestions,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.textLength) {
					var T = t.textLength;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/textLength",
							schemaPath: "#/properties/textLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Yr.properties.textLength.type,
							parentSchema: Yr.properties.textLength,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.wordLength) {
					var F = t.wordLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/wordLength",
							schemaPath: "#/properties/wordLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Yr.properties.wordLength.type,
							parentSchema: Yr.properties.wordLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var A = t.contextLength;
					if ("number" != typeof A || A % 1 || isNaN(A) || !isFinite(A)) {
						var H = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Yr.properties.contextLength.type,
							parentSchema: Yr.properties.contextLength,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var R = t.interactionId;
					if ("string" !== typeof R) {
						var M = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Yr.properties.interactionId.type,
							parentSchema: Yr.properties.interactionId,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.draftId) {
					var $ = t.draftId;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Yr.properties.draftId.type,
							parentSchema: Yr.properties.draftId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var U = t.caretLocation;
					if (!Array.isArray(U)) {
						var B = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Yr.properties.caretLocation.type,
							parentSchema: Yr.properties.caretLocation,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.configString) {
					var W = t.configString;
					if ("string" !== typeof W && null !== W) {
						var V = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Yr.properties.configString.type
							},
							message: "must be string,null",
							schema: Yr.properties.configString.type,
							parentSchema: Yr.properties.configString,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.tabId) {
					var G = t.tabId;
					if (("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) && null !== G) {
						var K = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Yr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Yr.properties.tabId.type,
							parentSchema: Yr.properties.tabId,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.app) {
					var Q = t.app;
					if ("string" !== typeof Q && null !== Q) {
						var Y = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Yr.properties.app.type
							},
							message: "must be string,null",
							schema: Yr.properties.app.type,
							parentSchema: Yr.properties.app,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.host) {
					var J = t.host;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Yr.properties.host.type
							},
							message: "must be string,null",
							schema: Yr.properties.host.type,
							parentSchema: Yr.properties.host,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
			} else {
				var Z = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Yr.type,
					parentSchema: Yr,
					data: t
				};
				null === s ? s = [Z] : s.push(Z), p++
			}
			return e.errors = s, 0 === p
		};
		var Yr = {
			properties: {
				wordIndex: {
					type: "integer"
				},
				isPhrase: {
					type: "boolean"
				},
				availableExtraSuggestions: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				textLength: {
					type: "integer"
				},
				wordLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["wordIndex", "isPhrase", "availableExtraSuggestions", "platform", "spanSelectionHash", "numOfSuggestions", "textLength", "wordLength", "contextLength", "interactionId", "draftId"],
			$id: "RefineHovered",
			additionalProperties: !1
		};
		t.refineMode = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Jr.type,
					parentSchema: Jr,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Jr = {
			type: "string",
			$id: "refineMode"
		};
		t.RefineOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.wordIndex) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "wordIndex"
						},
						message: "must have required property 'wordIndex'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.isPhrase) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isPhrase"
						},
						message: "must have required property 'isPhrase'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.availableExtraSuggestions) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "availableExtraSuggestions"
						},
						message: "must have required property 'availableExtraSuggestions'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.textLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "textLength"
						},
						message: "must have required property 'textLength'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.wordLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "wordLength"
						},
						message: "must have required property 'wordLength'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.contextLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.interactionId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.draftId) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Xr.required,
						parentSchema: Xr,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(Xr.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Xr,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.wordIndex) {
					var S = t.wordIndex;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/wordIndex",
							schemaPath: "#/properties/wordIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Xr.properties.wordIndex.type,
							parentSchema: Xr.properties.wordIndex,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.isPhrase) {
					var k = t.isPhrase;
					if ("boolean" !== typeof k) {
						var _ = {
							instancePath: n + "/isPhrase",
							schemaPath: "#/properties/isPhrase/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Xr.properties.isPhrase.type,
							parentSchema: Xr.properties.isPhrase,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.availableExtraSuggestions) {
					var I = t.availableExtraSuggestions;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/availableExtraSuggestions",
							schemaPath: "#/properties/availableExtraSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Xr.properties.availableExtraSuggestions.type,
							parentSchema: Xr.properties.availableExtraSuggestions,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.platform) {
					var L = t.platform;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Xr.properties.platform.type,
							parentSchema: Xr.properties.platform,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var E = t.spanSelectionHash;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Xr.properties.spanSelectionHash.type,
							parentSchema: Xr.properties.spanSelectionHash,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var O = t.numOfSuggestions;
					if ("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) {
						var D = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Xr.properties.numOfSuggestions.type,
							parentSchema: Xr.properties.numOfSuggestions,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.textLength) {
					var T = t.textLength;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/textLength",
							schemaPath: "#/properties/textLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Xr.properties.textLength.type,
							parentSchema: Xr.properties.textLength,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.wordLength) {
					var F = t.wordLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/wordLength",
							schemaPath: "#/properties/wordLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Xr.properties.wordLength.type,
							parentSchema: Xr.properties.wordLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var A = t.contextLength;
					if ("number" != typeof A || A % 1 || isNaN(A) || !isFinite(A)) {
						var H = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Xr.properties.contextLength.type,
							parentSchema: Xr.properties.contextLength,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var R = t.interactionId;
					if ("string" !== typeof R) {
						var M = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Xr.properties.interactionId.type,
							parentSchema: Xr.properties.interactionId,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.draftId) {
					var $ = t.draftId;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Xr.properties.draftId.type,
							parentSchema: Xr.properties.draftId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var U = t.caretLocation;
					if (!Array.isArray(U)) {
						var B = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Xr.properties.caretLocation.type,
							parentSchema: Xr.properties.caretLocation,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.configString) {
					var W = t.configString;
					if ("string" !== typeof W && null !== W) {
						var V = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Xr.properties.configString.type
							},
							message: "must be string,null",
							schema: Xr.properties.configString.type,
							parentSchema: Xr.properties.configString,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.tabId) {
					var G = t.tabId;
					if (("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) && null !== G) {
						var K = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Xr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Xr.properties.tabId.type,
							parentSchema: Xr.properties.tabId,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.app) {
					var Q = t.app;
					if ("string" !== typeof Q && null !== Q) {
						var Y = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Xr.properties.app.type
							},
							message: "must be string,null",
							schema: Xr.properties.app.type,
							parentSchema: Xr.properties.app,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.host) {
					var J = t.host;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Xr.properties.host.type
							},
							message: "must be string,null",
							schema: Xr.properties.host.type,
							parentSchema: Xr.properties.host,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
			} else {
				var Z = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Xr.type,
					parentSchema: Xr,
					data: t
				};
				null === s ? s = [Z] : s.push(Z), p++
			}
			return e.errors = s, 0 === p
		};
		var Xr = {
			properties: {
				wordIndex: {
					type: "integer"
				},
				isPhrase: {
					type: "boolean"
				},
				availableExtraSuggestions: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				numOfSuggestions: {
					type: "integer"
				},
				textLength: {
					type: "integer"
				},
				wordLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["wordIndex", "isPhrase", "availableExtraSuggestions", "platform", "spanSelectionHash", "numOfSuggestions", "textLength", "wordLength", "contextLength", "interactionId", "draftId"],
			$id: "RefineOpened",
			additionalProperties: !1
		};
		t.RefineReplaceableShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.fetchDuration) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "fetchDuration"
						},
						message: "must have required property 'fetchDuration'",
						schema: Zr.required,
						parentSchema: Zr,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.platform) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Zr.required,
						parentSchema: Zr,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Zr.required,
						parentSchema: Zr,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.RefineTotalReplaceables) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "RefineTotalReplaceables"
						},
						message: "must have required property 'RefineTotalReplaceables'",
						schema: Zr.required,
						parentSchema: Zr,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.bodyLength) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "bodyLength"
						},
						message: "must have required property 'bodyLength'",
						schema: Zr.required,
						parentSchema: Zr,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Zr.required,
						parentSchema: Zr,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.interactionId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Zr.required,
						parentSchema: Zr,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.draftId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Zr.required,
						parentSchema: Zr,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(Zr.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Zr,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Zr.properties.spanSelectionLength.type,
							parentSchema: Zr.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.fetchDuration) {
					var P = t.fetchDuration;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/fetchDuration",
							schemaPath: "#/properties/fetchDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Zr.properties.fetchDuration.type,
							parentSchema: Zr.properties.fetchDuration,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.platform) {
					var w = t.platform;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Zr.properties.platform.type,
							parentSchema: Zr.properties.platform,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var _ = t.spanSelectionHash;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Zr.properties.spanSelectionHash.type,
							parentSchema: Zr.properties.spanSelectionHash,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.RefineTotalReplaceables) {
					var q = t.RefineTotalReplaceables;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/RefineTotalReplaceables",
							schemaPath: "#/properties/RefineTotalReplaceables/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Zr.properties.RefineTotalReplaceables.type,
							parentSchema: Zr.properties.RefineTotalReplaceables,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.bodyLength) {
					var x = t.bodyLength;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/bodyLength",
							schemaPath: "#/properties/bodyLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Zr.properties.bodyLength.type,
							parentSchema: Zr.properties.bodyLength,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var N = t.contextLength;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Zr.properties.contextLength.type,
							parentSchema: Zr.properties.contextLength,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var D = t.interactionId;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Zr.properties.interactionId.type,
							parentSchema: Zr.properties.interactionId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.draftId) {
					var j = t.draftId;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Zr.properties.draftId.type,
							parentSchema: Zr.properties.draftId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var C = t.caretLocation;
					if (!Array.isArray(C)) {
						var A = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Zr.properties.caretLocation.type,
							parentSchema: Zr.properties.caretLocation,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.configString) {
					var H = t.configString;
					if ("string" !== typeof H && null !== H) {
						var R = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Zr.properties.configString.type
							},
							message: "must be string,null",
							schema: Zr.properties.configString.type,
							parentSchema: Zr.properties.configString,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.tabId) {
					var M = t.tabId;
					if (("number" != typeof M || M % 1 || isNaN(M) || !isFinite(M)) && null !== M) {
						var $ = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Zr.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Zr.properties.tabId.type,
							parentSchema: Zr.properties.tabId,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.app) {
					var z = t.app;
					if ("string" !== typeof z && null !== z) {
						var U = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Zr.properties.app.type
							},
							message: "must be string,null",
							schema: Zr.properties.app.type,
							parentSchema: Zr.properties.app,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.host) {
					var B = t.host;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Zr.properties.host.type
							},
							message: "must be string,null",
							schema: Zr.properties.host.type,
							parentSchema: Zr.properties.host,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
			} else {
				var V = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Zr.type,
					parentSchema: Zr,
					data: t
				};
				null === s ? s = [V] : s.push(V), p++
			}
			return e.errors = s, 0 === p
		};
		var Zr = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				fetchDuration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				RefineTotalReplaceables: {
					type: "integer"
				},
				bodyLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["fetchDuration", "platform", "spanSelectionHash", "RefineTotalReplaceables", "bodyLength", "contextLength", "interactionId", "draftId"],
			$id: "RefineReplaceableShown",
			additionalProperties: !1
		};
		t.RefreshTabs = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.count) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "count"
						},
						message: "must have required property 'count'",
						schema: ea.required,
						parentSchema: ea,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("count" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ea,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.count) {
					var h = t.count;
					if ("number" != typeof h || h % 1 || isNaN(h) || !isFinite(h)) {
						var u = {
							instancePath: n + "/count",
							schemaPath: "#/properties/count/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ea.properties.count.type,
							parentSchema: ea.properties.count,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ea.properties.configString.type
							},
							message: "must be string,null",
							schema: ea.properties.configString.type,
							parentSchema: ea.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ea.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ea.properties.tabId.type,
							parentSchema: ea.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ea.properties.app.type
							},
							message: "must be string,null",
							schema: ea.properties.app.type,
							parentSchema: ea.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ea.properties.host.type
							},
							message: "must be string,null",
							schema: ea.properties.host.type,
							parentSchema: ea.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ea.type,
					parentSchema: ea,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var ea = {
			properties: {
				count: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["count"],
			$id: "RefreshTabs",
			additionalProperties: !1
		};
		t.registrationDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (!t || "object" != typeof t || Array.isArray(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ta.type,
					parentSchema: ta,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ta = {
			type: "object",
			$id: "registrationDate"
		};
		t.RewriteActivated = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ra.required,
						parentSchema: ra,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.contextLength) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ra.required,
						parentSchema: ra,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelected) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelected"
						},
						message: "must have required property 'spanSelected'",
						schema: ra.required,
						parentSchema: ra,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				for (var u in t)
					if (!i.call(ra.properties, u)) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: u
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ra,
							data: t
						};
						null === s ? s = [m] : s.push(m), p++
					} if (void 0 !== t.platform) {
					var d = t.platform;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.platform.type,
							parentSchema: ra.properties.platform,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var y = t.spanSelectionHash;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.spanSelectionHash.type,
							parentSchema: ra.properties.spanSelectionHash,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var f = t.isFirstEngagement;
					if ("boolean" !== typeof f) {
						var v = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ra.properties.isFirstEngagement.type,
							parentSchema: ra.properties.isFirstEngagement,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.origin) {
					var b = t.origin;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.origin.type,
							parentSchema: ra.properties.origin,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var S = t.contextLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ra.properties.contextLength.type,
							parentSchema: ra.properties.contextLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.spanSelected) {
					var k = t.spanSelected;
					if ("boolean" !== typeof k) {
						var _ = {
							instancePath: n + "/spanSelected",
							schemaPath: "#/properties/spanSelected/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ra.properties.spanSelected.type,
							parentSchema: ra.properties.spanSelected,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var I = t.caretLocation;
					if (!Array.isArray(I)) {
						var q = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ra.properties.caretLocation.type,
							parentSchema: ra.properties.caretLocation,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var L = t.spanSelectionLength;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ra.properties.spanSelectionLength.type,
							parentSchema: ra.properties.spanSelectionLength,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.draftId) {
					var E = t.draftId;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.draftId.type,
							parentSchema: ra.properties.draftId,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.utm_source) {
					var O = t.utm_source;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.utm_source.type,
							parentSchema: ra.properties.utm_source,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var T = t.ad_set_name;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.ad_set_name.type,
							parentSchema: ra.properties.ad_set_name,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.gclid) {
					var F = t.gclid;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.gclid.type,
							parentSchema: ra.properties.gclid,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var A = t.utm_term;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.utm_term.type,
							parentSchema: ra.properties.utm_term,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.isExampleText) {
					var R = t.isExampleText;
					if ("boolean" !== typeof R) {
						var M = {
							instancePath: n + "/isExampleText",
							schemaPath: "#/properties/isExampleText/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ra.properties.isExampleText.type,
							parentSchema: ra.properties.isExampleText,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var $ = t.utm_medium;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.utm_medium.type,
							parentSchema: ra.properties.utm_medium,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var U = t.utm_campaign;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.utm_campaign.type,
							parentSchema: ra.properties.utm_campaign,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.p) {
					var W = t.p;
					if ("string" !== typeof W) {
						var V = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.p.type,
							parentSchema: ra.properties.p,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.gbraid) {
					var G = t.gbraid;
					if ("string" !== typeof G) {
						var K = {
							instancePath: n + "/gbraid",
							schemaPath: "#/properties/gbraid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.gbraid.type,
							parentSchema: ra.properties.gbraid,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var Q = t.ad_name;
					if ("string" !== typeof Q) {
						var Y = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.ad_name.type,
							parentSchema: ra.properties.ad_name,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var J = t.fbclid;
					if ("string" !== typeof J) {
						var X = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.fbclid.type,
							parentSchema: ra.properties.fbclid,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.ref) {
					var Z = t.ref;
					if ("string" !== typeof Z) {
						var ee = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.ref.type,
							parentSchema: ra.properties.ref,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.ivk_sa) {
					var te = t.ivk_sa;
					if ("string" !== typeof te) {
						var re = {
							instancePath: n + "/ivk_sa",
							schemaPath: "#/properties/ivk_sa/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.ivk_sa.type,
							parentSchema: ra.properties.ivk_sa,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
				if (void 0 !== t.msclkid) {
					var ae = t.msclkid;
					if ("string" !== typeof ae) {
						var ne = {
							instancePath: n + "/msclkid",
							schemaPath: "#/properties/msclkid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.msclkid.type,
							parentSchema: ra.properties.msclkid,
							data: ae
						};
						null === s ? s = [ne] : s.push(ne), p++
					}
				}
				if (void 0 !== t.s) {
					var ie = t.s;
					if ("string" !== typeof ie) {
						var se = {
							instancePath: n + "/s",
							schemaPath: "#/properties/s/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.s.type,
							parentSchema: ra.properties.s,
							data: ie
						};
						null === s ? s = [se] : s.push(se), p++
					}
				}
				if (void 0 !== t.fui) {
					var pe = t.fui;
					if ("string" !== typeof pe) {
						var oe = {
							instancePath: n + "/fui",
							schemaPath: "#/properties/fui/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.fui.type,
							parentSchema: ra.properties.fui,
							data: pe
						};
						null === s ? s = [oe] : s.push(oe), p++
					}
				}
				if (void 0 !== t.utm_campain) {
					var ce = t.utm_campain;
					if ("string" !== typeof ce) {
						var he = {
							instancePath: n + "/utm_campain",
							schemaPath: "#/properties/utm_campain/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.utm_campain.type,
							parentSchema: ra.properties.utm_campain,
							data: ce
						};
						null === s ? s = [he] : s.push(he), p++
					}
				}
				if (void 0 !== t.ad_set_) {
					var ue = t.ad_set_;
					if ("string" !== typeof ue) {
						var me = {
							instancePath: n + "/ad_set_",
							schemaPath: "#/properties/ad_set_/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.ad_set_.type,
							parentSchema: ra.properties.ad_set_,
							data: ue
						};
						null === s ? s = [me] : s.push(me), p++
					}
				}
				if (void 0 !== t.utm_content) {
					var de = t.utm_content;
					if ("string" !== typeof de) {
						var le = {
							instancePath: n + "/utm_content",
							schemaPath: "#/properties/utm_content/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.utm_content.type,
							parentSchema: ra.properties.utm_content,
							data: de
						};
						null === s ? s = [le] : s.push(le), p++
					}
				}
				if (void 0 !== t.path) {
					var ye = t.path;
					if ("string" !== typeof ye) {
						var ge = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ra.properties.path.type,
							parentSchema: ra.properties.path,
							data: ye
						};
						null === s ? s = [ge] : s.push(ge), p++
					}
				}
				if (void 0 !== t.configString) {
					var fe = t.configString;
					if ("string" !== typeof fe && null !== fe) {
						var ve = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ra.properties.configString.type
							},
							message: "must be string,null",
							schema: ra.properties.configString.type,
							parentSchema: ra.properties.configString,
							data: fe
						};
						null === s ? s = [ve] : s.push(ve), p++
					}
				}
				if (void 0 !== t.tabId) {
					var be = t.tabId;
					if (("number" != typeof be || be % 1 || isNaN(be) || !isFinite(be)) && null !== be) {
						var Pe = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ra.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ra.properties.tabId.type,
							parentSchema: ra.properties.tabId,
							data: be
						};
						null === s ? s = [Pe] : s.push(Pe), p++
					}
				}
				if (void 0 !== t.app) {
					var Se = t.app;
					if ("string" !== typeof Se && null !== Se) {
						var we = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ra.properties.app.type
							},
							message: "must be string,null",
							schema: ra.properties.app.type,
							parentSchema: ra.properties.app,
							data: Se
						};
						null === s ? s = [we] : s.push(we), p++
					}
				}
				if (void 0 !== t.host) {
					var ke = t.host;
					if ("string" !== typeof ke && null !== ke) {
						var _e = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ra.properties.host.type
							},
							message: "must be string,null",
							schema: ra.properties.host.type,
							parentSchema: ra.properties.host,
							data: ke
						};
						null === s ? s = [_e] : s.push(_e), p++
					}
				}
			} else {
				var Ie = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ra.type,
					parentSchema: ra,
					data: t
				};
				null === s ? s = [Ie] : s.push(Ie), p++
			}
			return e.errors = s, 0 === p
		};
		var ra = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				spanSelected: {
					type: "boolean"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				isExampleText: {
					type: "boolean"
				},
				utm_medium: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				p: {
					type: "string"
				},
				gbraid: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				fbclid: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				ivk_sa: {
					type: "string"
				},
				msclkid: {
					type: "string"
				},
				s: {
					type: "string"
				},
				fui: {
					type: "string"
				},
				utm_campain: {
					type: "string"
				},
				ad_set_: {
					type: "string"
				},
				utm_content: {
					type: "string"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin", "contextLength", "spanSelected"],
			$id: "RewriteActivated",
			additionalProperties: !1
		};
		t.RewriteClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: aa.required,
						parentSchema: aa,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: aa.required,
						parentSchema: aa,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: aa.required,
						parentSchema: aa,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.randomizedSuggestions) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: aa.required,
						parentSchema: aa,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.contextLength) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: aa.required,
						parentSchema: aa,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.interactionId) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: aa.required,
						parentSchema: aa,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.duration) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: aa.required,
						parentSchema: aa,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				for (var y in t)
					if (!i.call(aa.properties, y)) {
						var g = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: y
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: aa,
							data: t
						};
						null === s ? s = [g] : s.push(g), p++
					} if (void 0 !== t.platform) {
					var f = t.platform;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: aa.properties.platform.type,
							parentSchema: aa.properties.platform,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var b = t.spanSelectionHash;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: aa.properties.spanSelectionHash.type,
							parentSchema: aa.properties.spanSelectionHash,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.origin) {
					var S = t.origin;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: aa.properties.origin.type,
							parentSchema: aa.properties.origin,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var k = t.randomizedSuggestions;
					if ("boolean" !== typeof k) {
						var _ = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: aa.properties.randomizedSuggestions.type,
							parentSchema: aa.properties.randomizedSuggestions,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var I = t.contextLength;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: aa.properties.contextLength.type,
							parentSchema: aa.properties.contextLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var L = t.interactionId;
					if ("string" !== typeof L && null !== L) {
						var x = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: aa.properties.interactionId.type
							},
							message: "must be string,null",
							schema: aa.properties.interactionId.type,
							parentSchema: aa.properties.interactionId,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.draftId) {
					var E = t.draftId;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: aa.properties.draftId.type,
							parentSchema: aa.properties.draftId,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.duration) {
					var O = t.duration;
					if ("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) {
						var D = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: aa.properties.duration.type,
							parentSchema: aa.properties.duration,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var T = t.caretLocation;
					if (!Array.isArray(T)) {
						var j = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: aa.properties.caretLocation.type,
							parentSchema: aa.properties.caretLocation,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var F = t.isFirstEngagement;
					if ("boolean" !== typeof F) {
						var C = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: aa.properties.isFirstEngagement.type,
							parentSchema: aa.properties.isFirstEngagement,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var A = t.spanSelectionLength;
					if ("number" != typeof A || A % 1 || isNaN(A) || !isFinite(A)) {
						var H = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: aa.properties.spanSelectionLength.type,
							parentSchema: aa.properties.spanSelectionLength,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.configString) {
					var R = t.configString;
					if ("string" !== typeof R && null !== R) {
						var M = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: aa.properties.configString.type
							},
							message: "must be string,null",
							schema: aa.properties.configString.type,
							parentSchema: aa.properties.configString,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.tabId) {
					var $ = t.tabId;
					if (("number" != typeof $ || $ % 1 || isNaN($) || !isFinite($)) && null !== $) {
						var z = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: aa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: aa.properties.tabId.type,
							parentSchema: aa.properties.tabId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.app) {
					var U = t.app;
					if ("string" !== typeof U && null !== U) {
						var B = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: aa.properties.app.type
							},
							message: "must be string,null",
							schema: aa.properties.app.type,
							parentSchema: aa.properties.app,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.host) {
					var W = t.host;
					if ("string" !== typeof W && null !== W) {
						var V = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: aa.properties.host.type
							},
							message: "must be string,null",
							schema: aa.properties.host.type,
							parentSchema: aa.properties.host,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
			} else {
				var G = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: aa.type,
					parentSchema: aa,
					data: t
				};
				null === s ? s = [G] : s.push(G), p++
			}
			return e.errors = s, 0 === p
		};
		var aa = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: ["string", "null"]
				},
				draftId: {
					type: "string"
				},
				duration: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "randomizedSuggestions", "contextLength", "interactionId", "duration"],
			$id: "RewriteClosed",
			additionalProperties: !1
		};
		t.RewriteError = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.draftId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: na.required,
						parentSchema: na,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				for (var c in t)
					if (!i.call(na.properties, c)) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: na,
							data: t
						};
						null === s ? s = [h] : s.push(h), p++
					} if (void 0 !== t.platform) {
					var u = t.platform;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.platform.type,
							parentSchema: na.properties.platform,
							data: u
						};
						null === s ? s = [m] : s.push(m), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var d = t.spanSelectionHash;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.spanSelectionHash.type,
							parentSchema: na.properties.spanSelectionHash,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var y = t.spanSelectionLength;
					if ("number" != typeof y || y % 1 || isNaN(y) || !isFinite(y)) {
						var g = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: na.properties.spanSelectionLength.type,
							parentSchema: na.properties.spanSelectionLength,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.loadingDuration) {
					var f = t.loadingDuration;
					if ("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) {
						var v = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: na.properties.loadingDuration.type,
							parentSchema: na.properties.loadingDuration,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var b = t.contextLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: na.properties.contextLength.type,
							parentSchema: na.properties.contextLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.draftId) {
					var S = t.draftId;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.draftId.type,
							parentSchema: na.properties.draftId,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var k = t.caretLocation;
					if (!Array.isArray(k)) {
						var _ = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: na.properties.caretLocation.type,
							parentSchema: na.properties.caretLocation,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var I = t.isFirstEngagement;
					if ("boolean" !== typeof I) {
						var q = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: na.properties.isFirstEngagement.type,
							parentSchema: na.properties.isFirstEngagement,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.errorMsg) {
					var L = t.errorMsg;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/errorMsg",
							schemaPath: "#/properties/errorMsg/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.errorMsg.type,
							parentSchema: na.properties.errorMsg,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.errorCode) {
					var E = t.errorCode;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/errorCode",
							schemaPath: "#/properties/errorCode/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: na.properties.errorCode.type,
							parentSchema: na.properties.errorCode,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var O = t.interactionId;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.interactionId.type,
							parentSchema: na.properties.interactionId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.utm_source) {
					var T = t.utm_source;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.utm_source.type,
							parentSchema: na.properties.utm_source,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var F = t.ad_set_name;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.ad_set_name.type,
							parentSchema: na.properties.ad_set_name,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.isExampleText) {
					var A = t.isExampleText;
					if ("boolean" !== typeof A) {
						var H = {
							instancePath: n + "/isExampleText",
							schemaPath: "#/properties/isExampleText/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: na.properties.isExampleText.type,
							parentSchema: na.properties.isExampleText,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var R = t.utm_medium;
					if ("string" !== typeof R) {
						var M = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.utm_medium.type,
							parentSchema: na.properties.utm_medium,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.origin) {
					var $ = t.origin;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.origin.type,
							parentSchema: na.properties.origin,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var U = t.utm_campaign;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.utm_campaign.type,
							parentSchema: na.properties.utm_campaign,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.gclid) {
					var W = t.gclid;
					if ("string" !== typeof W) {
						var V = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.gclid.type,
							parentSchema: na.properties.gclid,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var G = t.utm_term;
					if ("string" !== typeof G) {
						var K = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.utm_term.type,
							parentSchema: na.properties.utm_term,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.p) {
					var Q = t.p;
					if ("string" !== typeof Q) {
						var Y = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.p.type,
							parentSchema: na.properties.p,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.error) {
					var J = t.error;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/error",
							schemaPath: "#/properties/error/type",
							keyword: "type",
							params: {
								type: na.properties.error.type
							},
							message: "must be string,null",
							schema: na.properties.error.type,
							parentSchema: na.properties.error,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.ref) {
					var Z = t.ref;
					if ("string" !== typeof Z) {
						var ee = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.ref.type,
							parentSchema: na.properties.ref,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.fui) {
					var te = t.fui;
					if ("string" !== typeof te) {
						var re = {
							instancePath: n + "/fui",
							schemaPath: "#/properties/fui/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: na.properties.fui.type,
							parentSchema: na.properties.fui,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
				if (void 0 !== t.configString) {
					var ae = t.configString;
					if ("string" !== typeof ae && null !== ae) {
						var ne = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: na.properties.configString.type
							},
							message: "must be string,null",
							schema: na.properties.configString.type,
							parentSchema: na.properties.configString,
							data: ae
						};
						null === s ? s = [ne] : s.push(ne), p++
					}
				}
				if (void 0 !== t.tabId) {
					var ie = t.tabId;
					if (("number" != typeof ie || ie % 1 || isNaN(ie) || !isFinite(ie)) && null !== ie) {
						var se = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: na.properties.tabId.type
							},
							message: "must be integer,null",
							schema: na.properties.tabId.type,
							parentSchema: na.properties.tabId,
							data: ie
						};
						null === s ? s = [se] : s.push(se), p++
					}
				}
				if (void 0 !== t.app) {
					var pe = t.app;
					if ("string" !== typeof pe && null !== pe) {
						var oe = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: na.properties.app.type
							},
							message: "must be string,null",
							schema: na.properties.app.type,
							parentSchema: na.properties.app,
							data: pe
						};
						null === s ? s = [oe] : s.push(oe), p++
					}
				}
				if (void 0 !== t.host) {
					var ce = t.host;
					if ("string" !== typeof ce && null !== ce) {
						var he = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: na.properties.host.type
							},
							message: "must be string,null",
							schema: na.properties.host.type,
							parentSchema: na.properties.host,
							data: ce
						};
						null === s ? s = [he] : s.push(he), p++
					}
				}
			} else {
				var ue = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: na.type,
					parentSchema: na,
					data: t
				};
				null === s ? s = [ue] : s.push(ue), p++
			}
			return e.errors = s, 0 === p
		};
		var na = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				loadingDuration: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				errorMsg: {
					type: "string"
				},
				errorCode: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				isExampleText: {
					type: "boolean"
				},
				utm_medium: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				p: {
					type: "string"
				},
				error: {
					type: ["string", "null"]
				},
				ref: {
					type: "string"
				},
				fui: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["draftId"],
			$id: "RewriteError",
			additionalProperties: !1
		};
		t.RewriteFetchStarted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ia.required,
						parentSchema: ia,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				for (var c in t)
					if (!i.call(ia.properties, c)) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ia,
							data: t
						};
						null === s ? s = [h] : s.push(h), p++
					} if (void 0 !== t.platform) {
					var u = t.platform;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.platform.type,
							parentSchema: ia.properties.platform,
							data: u
						};
						null === s ? s = [m] : s.push(m), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var d = t.spanSelectionHash;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.spanSelectionHash.type,
							parentSchema: ia.properties.spanSelectionHash,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var y = t.spanSelectionLength;
					if ("number" != typeof y || y % 1 || isNaN(y) || !isFinite(y)) {
						var g = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ia.properties.spanSelectionLength.type,
							parentSchema: ia.properties.spanSelectionLength,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.origin) {
					var f = t.origin;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.origin.type,
							parentSchema: ia.properties.origin,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var b = t.contextLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ia.properties.contextLength.type,
							parentSchema: ia.properties.contextLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var S = t.caretLocation;
					if (!Array.isArray(S)) {
						var w = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ia.properties.caretLocation.type,
							parentSchema: ia.properties.caretLocation,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.draftId) {
					var k = t.draftId;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.draftId.type,
							parentSchema: ia.properties.draftId,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var I = t.isFirstEngagement;
					if ("boolean" !== typeof I) {
						var q = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ia.properties.isFirstEngagement.type,
							parentSchema: ia.properties.isFirstEngagement,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.utm_source) {
					var L = t.utm_source;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.utm_source.type,
							parentSchema: ia.properties.utm_source,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var E = t.ad_set_name;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.ad_set_name.type,
							parentSchema: ia.properties.ad_set_name,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var O = t.utm_medium;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.utm_medium.type,
							parentSchema: ia.properties.utm_medium,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var T = t.utm_campaign;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.utm_campaign.type,
							parentSchema: ia.properties.utm_campaign,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.gclid) {
					var F = t.gclid;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.gclid.type,
							parentSchema: ia.properties.gclid,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var A = t.utm_term;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.utm_term.type,
							parentSchema: ia.properties.utm_term,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.isExampleText) {
					var R = t.isExampleText;
					if ("boolean" !== typeof R) {
						var M = {
							instancePath: n + "/isExampleText",
							schemaPath: "#/properties/isExampleText/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ia.properties.isExampleText.type,
							parentSchema: ia.properties.isExampleText,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.path) {
					var $ = t.path;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ia.properties.path.type,
							parentSchema: ia.properties.path,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.configString) {
					var U = t.configString;
					if ("string" !== typeof U && null !== U) {
						var B = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ia.properties.configString.type
							},
							message: "must be string,null",
							schema: ia.properties.configString.type,
							parentSchema: ia.properties.configString,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.tabId) {
					var W = t.tabId;
					if (("number" != typeof W || W % 1 || isNaN(W) || !isFinite(W)) && null !== W) {
						var V = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ia.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ia.properties.tabId.type,
							parentSchema: ia.properties.tabId,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.app) {
					var G = t.app;
					if ("string" !== typeof G && null !== G) {
						var K = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ia.properties.app.type
							},
							message: "must be string,null",
							schema: ia.properties.app.type,
							parentSchema: ia.properties.app,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.host) {
					var Q = t.host;
					if ("string" !== typeof Q && null !== Q) {
						var Y = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ia.properties.host.type
							},
							message: "must be string,null",
							schema: ia.properties.host.type,
							parentSchema: ia.properties.host,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
			} else {
				var J = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ia.type,
					parentSchema: ia,
					data: t
				};
				null === s ? s = [J] : s.push(J), p++
			}
			return e.errors = s, 0 === p
		};
		var ia = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				utm_medium: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				isExampleText: {
					type: "boolean"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "RewriteFetchStarted",
			additionalProperties: !1
		};
		t.RewriteOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.loadingDuration) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: sa.required,
						parentSchema: sa,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: sa.required,
						parentSchema: sa,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: sa.required,
						parentSchema: sa,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.interactionId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: sa.required,
						parentSchema: sa,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(sa.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: sa,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.spanSelectionLength) {
					var l = t.spanSelectionLength;
					if ("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) {
						var y = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: sa.properties.spanSelectionLength.type,
							parentSchema: sa.properties.spanSelectionLength,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var g = t.isFirstEngagement;
					if ("boolean" !== typeof g) {
						var f = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: sa.properties.isFirstEngagement.type,
							parentSchema: sa.properties.isFirstEngagement,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.loadingDuration) {
					var v = t.loadingDuration;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: sa.properties.loadingDuration.type,
							parentSchema: sa.properties.loadingDuration,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var P = t.randomizedSuggestions;
					if ("boolean" !== typeof P) {
						var S = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: sa.properties.randomizedSuggestions.type,
							parentSchema: sa.properties.randomizedSuggestions,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanSelectionModificationShown) {
					var w = t.spanSelectionModificationShown;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/spanSelectionModificationShown",
							schemaPath: "#/properties/spanSelectionModificationShown/type",
							keyword: "type",
							params: {
								type: sa.properties.spanSelectionModificationShown.type
							},
							message: "must be string,null",
							schema: sa.properties.spanSelectionModificationShown.type,
							parentSchema: sa.properties.spanSelectionModificationShown,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.isNudged) {
					var _ = t.isNudged;
					if ("boolean" !== typeof _) {
						var I = {
							instancePath: n + "/isNudged",
							schemaPath: "#/properties/isNudged/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: sa.properties.isNudged.type,
							parentSchema: sa.properties.isNudged,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.platform) {
					var q = t.platform;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.platform.type,
							parentSchema: sa.properties.platform,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var x = t.spanSelectionHash;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.spanSelectionHash.type,
							parentSchema: sa.properties.spanSelectionHash,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var N = t.isBatch;
					if ("boolean" !== typeof N) {
						var O = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: sa.properties.isBatch.type,
							parentSchema: sa.properties.isBatch,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isLimitedSuggestions) {
					var D = t.isLimitedSuggestions;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isLimitedSuggestions",
							schemaPath: "#/properties/isLimitedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: sa.properties.isLimitedSuggestions.type,
							parentSchema: sa.properties.isLimitedSuggestions,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var j = t.numOfSuggestions;
					if ("number" != typeof j || j % 1 || isNaN(j) || !isFinite(j)) {
						var F = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: sa.properties.numOfSuggestions.type,
							parentSchema: sa.properties.numOfSuggestions,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.origin) {
					var C = t.origin;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.origin.type,
							parentSchema: sa.properties.origin,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var H = t.contextLength;
					if ("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) {
						var R = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: sa.properties.contextLength.type,
							parentSchema: sa.properties.contextLength,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceHash) {
					var M = t.spanEncompassingSentenceHash;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/spanEncompassingSentenceHash",
							schemaPath: "#/properties/spanEncompassingSentenceHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.spanEncompassingSentenceHash.type,
							parentSchema: sa.properties.spanEncompassingSentenceHash,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceLength) {
					var z = t.spanEncompassingSentenceLength;
					if ("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) {
						var U = {
							instancePath: n + "/spanEncompassingSentenceLength",
							schemaPath: "#/properties/spanEncompassingSentenceLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: sa.properties.spanEncompassingSentenceLength.type,
							parentSchema: sa.properties.spanEncompassingSentenceLength,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var B = t.interactionId;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.interactionId.type,
							parentSchema: sa.properties.interactionId,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.numOfLockedSuggestions) {
					var V = t.numOfLockedSuggestions;
					if ("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) {
						var G = {
							instancePath: n + "/numOfLockedSuggestions",
							schemaPath: "#/properties/numOfLockedSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: sa.properties.numOfLockedSuggestions.type,
							parentSchema: sa.properties.numOfLockedSuggestions,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.draftId) {
					var K = t.draftId;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.draftId.type,
							parentSchema: sa.properties.draftId,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var Y = t.caretLocation;
					if (!Array.isArray(Y)) {
						var J = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: sa.properties.caretLocation.type,
							parentSchema: sa.properties.caretLocation,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var X = t.batchIndex;
					if (("number" != typeof X || X % 1 || isNaN(X) || !isFinite(X)) && null !== X) {
						var Z = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: sa.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: sa.properties.batchIndex.type,
							parentSchema: sa.properties.batchIndex,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var ee = t.batchInteractionId;
					if ("string" !== typeof ee) {
						var te = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.batchInteractionId.type,
							parentSchema: sa.properties.batchInteractionId,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var re = t.batchTotalSentences;
					if (("number" != typeof re || re % 1 || isNaN(re) || !isFinite(re)) && null !== re) {
						var ae = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: sa.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: sa.properties.batchTotalSentences.type,
							parentSchema: sa.properties.batchTotalSentences,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.cacheInteractionId) {
					var ne = t.cacheInteractionId;
					if ("string" !== typeof ne && null !== ne) {
						var ie = {
							instancePath: n + "/cacheInteractionId",
							schemaPath: "#/properties/cacheInteractionId/type",
							keyword: "type",
							params: {
								type: sa.properties.cacheInteractionId.type
							},
							message: "must be string,null",
							schema: sa.properties.cacheInteractionId.type,
							parentSchema: sa.properties.cacheInteractionId,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.utm_source) {
					var se = t.utm_source;
					if ("string" !== typeof se) {
						var pe = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.utm_source.type,
							parentSchema: sa.properties.utm_source,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var oe = t.ad_set_name;
					if ("string" !== typeof oe) {
						var ce = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.ad_set_name.type,
							parentSchema: sa.properties.ad_set_name,
							data: oe
						};
						null === s ? s = [ce] : s.push(ce), p++
					}
				}
				if (void 0 !== t.gclid) {
					var he = t.gclid;
					if ("string" !== typeof he) {
						var ue = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.gclid.type,
							parentSchema: sa.properties.gclid,
							data: he
						};
						null === s ? s = [ue] : s.push(ue), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var me = t.utm_term;
					if ("string" !== typeof me) {
						var de = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.utm_term.type,
							parentSchema: sa.properties.utm_term,
							data: me
						};
						null === s ? s = [de] : s.push(de), p++
					}
				}
				if (void 0 !== t.isExampleText) {
					var le = t.isExampleText;
					if ("boolean" !== typeof le) {
						var ye = {
							instancePath: n + "/isExampleText",
							schemaPath: "#/properties/isExampleText/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: sa.properties.isExampleText.type,
							parentSchema: sa.properties.isExampleText,
							data: le
						};
						null === s ? s = [ye] : s.push(ye), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var ge = t.utm_medium;
					if ("string" !== typeof ge) {
						var fe = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.utm_medium.type,
							parentSchema: sa.properties.utm_medium,
							data: ge
						};
						null === s ? s = [fe] : s.push(fe), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var ve = t.utm_campaign;
					if ("string" !== typeof ve) {
						var be = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.utm_campaign.type,
							parentSchema: sa.properties.utm_campaign,
							data: ve
						};
						null === s ? s = [be] : s.push(be), p++
					}
				}
				if (void 0 !== t.p) {
					var Pe = t.p;
					if ("string" !== typeof Pe) {
						var Se = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.p.type,
							parentSchema: sa.properties.p,
							data: Pe
						};
						null === s ? s = [Se] : s.push(Se), p++
					}
				}
				if (void 0 !== t.gbraid) {
					var we = t.gbraid;
					if ("string" !== typeof we) {
						var ke = {
							instancePath: n + "/gbraid",
							schemaPath: "#/properties/gbraid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.gbraid.type,
							parentSchema: sa.properties.gbraid,
							data: we
						};
						null === s ? s = [ke] : s.push(ke), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var _e = t.ad_name;
					if ("string" !== typeof _e) {
						var Ie = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.ad_name.type,
							parentSchema: sa.properties.ad_name,
							data: _e
						};
						null === s ? s = [Ie] : s.push(Ie), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var qe = t.fbclid;
					if ("string" !== typeof qe) {
						var Le = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.fbclid.type,
							parentSchema: sa.properties.fbclid,
							data: qe
						};
						null === s ? s = [Le] : s.push(Le), p++
					}
				}
				if (void 0 !== t.ref) {
					var xe = t.ref;
					if ("string" !== typeof xe) {
						var Ee = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.ref.type,
							parentSchema: sa.properties.ref,
							data: xe
						};
						null === s ? s = [Ee] : s.push(Ee), p++
					}
				}
				if (void 0 !== t.ivk_sa) {
					var Ne = t.ivk_sa;
					if ("string" !== typeof Ne) {
						var Oe = {
							instancePath: n + "/ivk_sa",
							schemaPath: "#/properties/ivk_sa/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.ivk_sa.type,
							parentSchema: sa.properties.ivk_sa,
							data: Ne
						};
						null === s ? s = [Oe] : s.push(Oe), p++
					}
				}
				if (void 0 !== t.msclkid) {
					var De = t.msclkid;
					if ("string" !== typeof De) {
						var Te = {
							instancePath: n + "/msclkid",
							schemaPath: "#/properties/msclkid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.msclkid.type,
							parentSchema: sa.properties.msclkid,
							data: De
						};
						null === s ? s = [Te] : s.push(Te), p++
					}
				}
				if (void 0 !== t.s) {
					var je = t.s;
					if ("string" !== typeof je) {
						var Fe = {
							instancePath: n + "/s",
							schemaPath: "#/properties/s/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.s.type,
							parentSchema: sa.properties.s,
							data: je
						};
						null === s ? s = [Fe] : s.push(Fe), p++
					}
				}
				if (void 0 !== t.fui) {
					var Ce = t.fui;
					if ("string" !== typeof Ce) {
						var Ae = {
							instancePath: n + "/fui",
							schemaPath: "#/properties/fui/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.fui.type,
							parentSchema: sa.properties.fui,
							data: Ce
						};
						null === s ? s = [Ae] : s.push(Ae), p++
					}
				}
				if (void 0 !== t.utm_campain) {
					var He = t.utm_campain;
					if ("string" !== typeof He) {
						var Re = {
							instancePath: n + "/utm_campain",
							schemaPath: "#/properties/utm_campain/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.utm_campain.type,
							parentSchema: sa.properties.utm_campain,
							data: He
						};
						null === s ? s = [Re] : s.push(Re), p++
					}
				}
				if (void 0 !== t.ad_set_) {
					var Me = t.ad_set_;
					if ("string" !== typeof Me) {
						var $e = {
							instancePath: n + "/ad_set_",
							schemaPath: "#/properties/ad_set_/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.ad_set_.type,
							parentSchema: sa.properties.ad_set_,
							data: Me
						};
						null === s ? s = [$e] : s.push($e), p++
					}
				}
				if (void 0 !== t.utm_content) {
					var ze = t.utm_content;
					if ("string" !== typeof ze) {
						var Ue = {
							instancePath: n + "/utm_content",
							schemaPath: "#/properties/utm_content/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.utm_content.type,
							parentSchema: sa.properties.utm_content,
							data: ze
						};
						null === s ? s = [Ue] : s.push(Ue), p++
					}
				}
				if (void 0 !== t.path) {
					var Be = t.path;
					if ("string" !== typeof Be) {
						var We = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: sa.properties.path.type,
							parentSchema: sa.properties.path,
							data: Be
						};
						null === s ? s = [We] : s.push(We), p++
					}
				}
				if (void 0 !== t.configString) {
					var Ve = t.configString;
					if ("string" !== typeof Ve && null !== Ve) {
						var Ge = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: sa.properties.configString.type
							},
							message: "must be string,null",
							schema: sa.properties.configString.type,
							parentSchema: sa.properties.configString,
							data: Ve
						};
						null === s ? s = [Ge] : s.push(Ge), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Ke = t.tabId;
					if (("number" != typeof Ke || Ke % 1 || isNaN(Ke) || !isFinite(Ke)) && null !== Ke) {
						var Qe = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: sa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: sa.properties.tabId.type,
							parentSchema: sa.properties.tabId,
							data: Ke
						};
						null === s ? s = [Qe] : s.push(Qe), p++
					}
				}
				if (void 0 !== t.app) {
					var Ye = t.app;
					if ("string" !== typeof Ye && null !== Ye) {
						var Je = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: sa.properties.app.type
							},
							message: "must be string,null",
							schema: sa.properties.app.type,
							parentSchema: sa.properties.app,
							data: Ye
						};
						null === s ? s = [Je] : s.push(Je), p++
					}
				}
				if (void 0 !== t.host) {
					var Xe = t.host;
					if ("string" !== typeof Xe && null !== Xe) {
						var Ze = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: sa.properties.host.type
							},
							message: "must be string,null",
							schema: sa.properties.host.type,
							parentSchema: sa.properties.host,
							data: Xe
						};
						null === s ? s = [Ze] : s.push(Ze), p++
					}
				}
			} else {
				var et = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: sa.type,
					parentSchema: sa,
					data: t
				};
				null === s ? s = [et] : s.push(et), p++
			}
			return e.errors = s, 0 === p
		};
		var sa = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				loadingDuration: {
					type: "integer"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				spanSelectionModificationShown: {
					type: ["string", "null"]
				},
				isNudged: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				isLimitedSuggestions: {
					type: "boolean"
				},
				numOfSuggestions: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				spanEncompassingSentenceHash: {
					type: "string"
				},
				spanEncompassingSentenceLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				numOfLockedSuggestions: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				batchInteractionId: {
					type: "string"
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				cacheInteractionId: {
					type: ["string", "null"]
				},
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				isExampleText: {
					type: "boolean"
				},
				utm_medium: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				p: {
					type: "string"
				},
				gbraid: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				fbclid: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				ivk_sa: {
					type: "string"
				},
				msclkid: {
					type: "string"
				},
				s: {
					type: "string"
				},
				fui: {
					type: "string"
				},
				utm_campain: {
					type: "string"
				},
				ad_set_: {
					type: "string"
				},
				utm_content: {
					type: "string"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["loadingDuration", "numOfSuggestions", "origin", "interactionId"],
			$id: "RewriteOpened",
			additionalProperties: !1
		};
		t.RewriteSuggestionCopied = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.suggestionIndex) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "suggestionIndex"
						},
						message: "must have required property 'suggestionIndex'",
						schema: pa.required,
						parentSchema: pa,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: pa.required,
						parentSchema: pa,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: pa.required,
						parentSchema: pa,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: pa.required,
						parentSchema: pa,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.interactionId) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: pa.required,
						parentSchema: pa,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(pa.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: pa,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.suggestionIndex) {
					var y = t.suggestionIndex;
					if ("number" != typeof y || y % 1 || isNaN(y) || !isFinite(y)) {
						var g = {
							instancePath: n + "/suggestionIndex",
							schemaPath: "#/properties/suggestionIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pa.properties.suggestionIndex.type,
							parentSchema: pa.properties.suggestionIndex,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.duration) {
					var f = t.duration;
					if ("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) {
						var v = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pa.properties.duration.type,
							parentSchema: pa.properties.duration,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.mode) {
					var b = t.mode;
					if ("string" !== typeof b) {
						var P = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.mode.type,
							parentSchema: pa.properties.mode,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.platform) {
					var S = t.platform;
					if ("string" !== typeof S) {
						var w = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.platform.type,
							parentSchema: pa.properties.platform,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var k = t.spanSelectionHash;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.spanSelectionHash.type,
							parentSchema: pa.properties.spanSelectionHash,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.counter) {
					var I = t.counter;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/counter",
							schemaPath: "#/properties/counter/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pa.properties.counter.type,
							parentSchema: pa.properties.counter,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var L = t.numOfSuggestions;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pa.properties.numOfSuggestions.type,
							parentSchema: pa.properties.numOfSuggestions,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var E = t.contextLength;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pa.properties.contextLength.type,
							parentSchema: pa.properties.contextLength,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var O = t.interactionId;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.interactionId.type,
							parentSchema: pa.properties.interactionId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.draftId) {
					var T = t.draftId;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.draftId.type,
							parentSchema: pa.properties.draftId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var F = t.caretLocation;
					if (!Array.isArray(F)) {
						var C = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: pa.properties.caretLocation.type,
							parentSchema: pa.properties.caretLocation,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.utm_source) {
					var A = t.utm_source;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/utm_source",
							schemaPath: "#/properties/utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.utm_source.type,
							parentSchema: pa.properties.utm_source,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.ad_set_name) {
					var R = t.ad_set_name;
					if ("string" !== typeof R) {
						var M = {
							instancePath: n + "/ad_set_name",
							schemaPath: "#/properties/ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.ad_set_name.type,
							parentSchema: pa.properties.ad_set_name,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.gclid) {
					var $ = t.gclid;
					if ("string" !== typeof $) {
						var z = {
							instancePath: n + "/gclid",
							schemaPath: "#/properties/gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.gclid.type,
							parentSchema: pa.properties.gclid,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.utm_term) {
					var U = t.utm_term;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/utm_term",
							schemaPath: "#/properties/utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.utm_term.type,
							parentSchema: pa.properties.utm_term,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.p) {
					var W = t.p;
					if ("string" !== typeof W) {
						var V = {
							instancePath: n + "/p",
							schemaPath: "#/properties/p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.p.type,
							parentSchema: pa.properties.p,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.utm_medium) {
					var G = t.utm_medium;
					if ("string" !== typeof G) {
						var K = {
							instancePath: n + "/utm_medium",
							schemaPath: "#/properties/utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.utm_medium.type,
							parentSchema: pa.properties.utm_medium,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.origin) {
					var Q = t.origin;
					if ("string" !== typeof Q) {
						var Y = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.origin.type,
							parentSchema: pa.properties.origin,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.utm_campaign) {
					var J = t.utm_campaign;
					if ("string" !== typeof J) {
						var X = {
							instancePath: n + "/utm_campaign",
							schemaPath: "#/properties/utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.utm_campaign.type,
							parentSchema: pa.properties.utm_campaign,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.copyMethod) {
					var Z = t.copyMethod;
					if ("string" !== typeof Z) {
						var ee = {
							instancePath: n + "/copyMethod",
							schemaPath: "#/properties/copyMethod/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.copyMethod.type,
							parentSchema: pa.properties.copyMethod,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var te = t.spanSelectionLength;
					if ("number" != typeof te || te % 1 || isNaN(te) || !isFinite(te)) {
						var re = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: pa.properties.spanSelectionLength.type,
							parentSchema: pa.properties.spanSelectionLength,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var ae = t.isFirstEngagement;
					if ("boolean" !== typeof ae) {
						var ne = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: pa.properties.isFirstEngagement.type,
							parentSchema: pa.properties.isFirstEngagement,
							data: ae
						};
						null === s ? s = [ne] : s.push(ne), p++
					}
				}
				if (void 0 !== t.fbclid) {
					var ie = t.fbclid;
					if ("string" !== typeof ie) {
						var se = {
							instancePath: n + "/fbclid",
							schemaPath: "#/properties/fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.fbclid.type,
							parentSchema: pa.properties.fbclid,
							data: ie
						};
						null === s ? s = [se] : s.push(se), p++
					}
				}
				if (void 0 !== t.ref) {
					var pe = t.ref;
					if ("string" !== typeof pe) {
						var oe = {
							instancePath: n + "/ref",
							schemaPath: "#/properties/ref/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.ref.type,
							parentSchema: pa.properties.ref,
							data: pe
						};
						null === s ? s = [oe] : s.push(oe), p++
					}
				}
				if (void 0 !== t.ivk_sa) {
					var ce = t.ivk_sa;
					if ("string" !== typeof ce) {
						var he = {
							instancePath: n + "/ivk_sa",
							schemaPath: "#/properties/ivk_sa/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.ivk_sa.type,
							parentSchema: pa.properties.ivk_sa,
							data: ce
						};
						null === s ? s = [he] : s.push(he), p++
					}
				}
				if (void 0 !== t.msclkid) {
					var ue = t.msclkid;
					if ("string" !== typeof ue) {
						var me = {
							instancePath: n + "/msclkid",
							schemaPath: "#/properties/msclkid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.msclkid.type,
							parentSchema: pa.properties.msclkid,
							data: ue
						};
						null === s ? s = [me] : s.push(me), p++
					}
				}
				if (void 0 !== t.ad_name) {
					var de = t.ad_name;
					if ("string" !== typeof de) {
						var le = {
							instancePath: n + "/ad_name",
							schemaPath: "#/properties/ad_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.ad_name.type,
							parentSchema: pa.properties.ad_name,
							data: de
						};
						null === s ? s = [le] : s.push(le), p++
					}
				}
				if (void 0 !== t.gbraid) {
					var ye = t.gbraid;
					if ("string" !== typeof ye) {
						var ge = {
							instancePath: n + "/gbraid",
							schemaPath: "#/properties/gbraid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.gbraid.type,
							parentSchema: pa.properties.gbraid,
							data: ye
						};
						null === s ? s = [ge] : s.push(ge), p++
					}
				}
				if (void 0 !== t.s) {
					var fe = t.s;
					if ("string" !== typeof fe) {
						var ve = {
							instancePath: n + "/s",
							schemaPath: "#/properties/s/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.s.type,
							parentSchema: pa.properties.s,
							data: fe
						};
						null === s ? s = [ve] : s.push(ve), p++
					}
				}
				if (void 0 !== t.utm_content) {
					var be = t.utm_content;
					if ("string" !== typeof be) {
						var Pe = {
							instancePath: n + "/utm_content",
							schemaPath: "#/properties/utm_content/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.utm_content.type,
							parentSchema: pa.properties.utm_content,
							data: be
						};
						null === s ? s = [Pe] : s.push(Pe), p++
					}
				}
				if (void 0 !== t.path) {
					var Se = t.path;
					if ("string" !== typeof Se) {
						var we = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: pa.properties.path.type,
							parentSchema: pa.properties.path,
							data: Se
						};
						null === s ? s = [we] : s.push(we), p++
					}
				}
				if (void 0 !== t.configString) {
					var ke = t.configString;
					if ("string" !== typeof ke && null !== ke) {
						var _e = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: pa.properties.configString.type
							},
							message: "must be string,null",
							schema: pa.properties.configString.type,
							parentSchema: pa.properties.configString,
							data: ke
						};
						null === s ? s = [_e] : s.push(_e), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Ie = t.tabId;
					if (("number" != typeof Ie || Ie % 1 || isNaN(Ie) || !isFinite(Ie)) && null !== Ie) {
						var qe = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: pa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: pa.properties.tabId.type,
							parentSchema: pa.properties.tabId,
							data: Ie
						};
						null === s ? s = [qe] : s.push(qe), p++
					}
				}
				if (void 0 !== t.app) {
					var Le = t.app;
					if ("string" !== typeof Le && null !== Le) {
						var xe = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: pa.properties.app.type
							},
							message: "must be string,null",
							schema: pa.properties.app.type,
							parentSchema: pa.properties.app,
							data: Le
						};
						null === s ? s = [xe] : s.push(xe), p++
					}
				}
				if (void 0 !== t.host) {
					var Ee = t.host;
					if ("string" !== typeof Ee && null !== Ee) {
						var Ne = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: pa.properties.host.type
							},
							message: "must be string,null",
							schema: pa.properties.host.type,
							parentSchema: pa.properties.host,
							data: Ee
						};
						null === s ? s = [Ne] : s.push(Ne), p++
					}
				}
			} else {
				var Oe = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: pa.type,
					parentSchema: pa,
					data: t
				};
				null === s ? s = [Oe] : s.push(Oe), p++
			}
			return e.errors = s, 0 === p
		};
		var pa = {
			properties: {
				suggestionIndex: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				counter: {
					type: "integer"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				utm_source: {
					type: "string"
				},
				ad_set_name: {
					type: "string"
				},
				gclid: {
					type: "string"
				},
				utm_term: {
					type: "string"
				},
				p: {
					type: "string"
				},
				utm_medium: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				utm_campaign: {
					type: "string"
				},
				copyMethod: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				fbclid: {
					type: "string"
				},
				ref: {
					type: "string"
				},
				ivk_sa: {
					type: "string"
				},
				msclkid: {
					type: "string"
				},
				ad_name: {
					type: "string"
				},
				gbraid: {
					type: "string"
				},
				s: {
					type: "string"
				},
				utm_content: {
					type: "string"
				},
				path: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["suggestionIndex", "duration", "numOfSuggestions", "contextLength", "interactionId"],
			$id: "RewriteSuggestionCopied",
			additionalProperties: !1
		};
		t.RewriteSuggestionSelected = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.idx) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "idx"
						},
						message: "must have required property 'idx'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.batchIndex) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchIndex"
						},
						message: "must have required property 'batchIndex'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.total) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "total"
						},
						message: "must have required property 'total'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.mode) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "mode"
						},
						message: "must have required property 'mode'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.platform) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.isBatch) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isBatch"
						},
						message: "must have required property 'isBatch'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.interactionId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: oa.required,
						parentSchema: oa,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				for (var v in t)
					if (!i.call(oa.properties, v)) {
						var b = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: v
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: oa,
							data: t
						};
						null === s ? s = [b] : s.push(b), p++
					} if (void 0 !== t.spanSelectionLength) {
					var P = t.spanSelectionLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: oa.properties.spanSelectionLength.type,
							parentSchema: oa.properties.spanSelectionLength,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.idx) {
					var w = t.idx;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/idx",
							schemaPath: "#/properties/idx/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: oa.properties.idx.type,
							parentSchema: oa.properties.idx,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var _ = t.batchIndex;
					if (("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) && null !== _) {
						var I = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: oa.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: oa.properties.batchIndex.type,
							parentSchema: oa.properties.batchIndex,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.total) {
					var q = t.total;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/total",
							schemaPath: "#/properties/total/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: oa.properties.total.type,
							parentSchema: oa.properties.total,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.mode) {
					var x = t.mode;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oa.properties.mode.type,
							parentSchema: oa.properties.mode,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.platform) {
					var N = t.platform;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oa.properties.platform.type,
							parentSchema: oa.properties.platform,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var D = t.spanSelectionHash;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oa.properties.spanSelectionHash.type,
							parentSchema: oa.properties.spanSelectionHash,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var j = t.isBatch;
					if ("boolean" !== typeof j) {
						var F = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: oa.properties.isBatch.type,
							parentSchema: oa.properties.isBatch,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var C = t.contextLength;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: oa.properties.contextLength.type,
							parentSchema: oa.properties.contextLength,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var H = t.batchInteractionId;
					if ("string" !== typeof H && null !== H) {
						var R = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: oa.properties.batchInteractionId.type
							},
							message: "must be string,null",
							schema: oa.properties.batchInteractionId.type,
							parentSchema: oa.properties.batchInteractionId,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var M = t.interactionId;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oa.properties.interactionId.type,
							parentSchema: oa.properties.interactionId,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var z = t.batchTotalSentences;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: oa.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: oa.properties.batchTotalSentences.type,
							parentSchema: oa.properties.batchTotalSentences,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var B = t.caretLocation;
					if (!Array.isArray(B)) {
						var W = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: oa.properties.caretLocation.type,
							parentSchema: oa.properties.caretLocation,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var V = t.isFirstEngagement;
					if ("boolean" !== typeof V) {
						var G = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: oa.properties.isFirstEngagement.type,
							parentSchema: oa.properties.isFirstEngagement,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.draftId) {
					var K = t.draftId;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: oa.properties.draftId.type,
							parentSchema: oa.properties.draftId,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.configString) {
					var Y = t.configString;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: oa.properties.configString.type
							},
							message: "must be string,null",
							schema: oa.properties.configString.type,
							parentSchema: oa.properties.configString,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.tabId) {
					var X = t.tabId;
					if (("number" != typeof X || X % 1 || isNaN(X) || !isFinite(X)) && null !== X) {
						var Z = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: oa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: oa.properties.tabId.type,
							parentSchema: oa.properties.tabId,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.app) {
					var ee = t.app;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: oa.properties.app.type
							},
							message: "must be string,null",
							schema: oa.properties.app.type,
							parentSchema: oa.properties.app,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.host) {
					var re = t.host;
					if ("string" !== typeof re && null !== re) {
						var ae = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: oa.properties.host.type
							},
							message: "must be string,null",
							schema: oa.properties.host.type,
							parentSchema: oa.properties.host,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
			} else {
				var ne = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: oa.type,
					parentSchema: oa,
					data: t
				};
				null === s ? s = [ne] : s.push(ne), p++
			}
			return e.errors = s, 0 === p
		};
		var oa = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				idx: {
					type: "integer"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				total: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				batchInteractionId: {
					type: ["string", "null"]
				},
				interactionId: {
					type: "string"
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["idx", "batchIndex", "total", "mode", "platform", "spanSelectionHash", "isBatch", "contextLength", "interactionId", "batchTotalSentences"],
			$id: "RewriteSuggestionSelected",
			additionalProperties: !1
		};
		t.RewriteUnknownClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.randomizedSuggestions) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: ca.required,
						parentSchema: ca,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: ca.required,
						parentSchema: ca,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: ca.required,
						parentSchema: ca,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: ca.required,
						parentSchema: ca,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.origin) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ca.required,
						parentSchema: ca,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ca.required,
						parentSchema: ca,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.draftId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: ca.required,
						parentSchema: ca,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.interactionId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: ca.required,
						parentSchema: ca,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(ca.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ca,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ca.properties.spanSelectionLength.type,
							parentSchema: ca.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var P = t.isFirstEngagement;
					if ("boolean" !== typeof P) {
						var S = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ca.properties.isFirstEngagement.type,
							parentSchema: ca.properties.isFirstEngagement,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var w = t.randomizedSuggestions;
					if ("boolean" !== typeof w) {
						var k = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ca.properties.randomizedSuggestions.type,
							parentSchema: ca.properties.randomizedSuggestions,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.duration) {
					var _ = t.duration;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ca.properties.duration.type,
							parentSchema: ca.properties.duration,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.platform) {
					var q = t.platform;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ca.properties.platform.type,
							parentSchema: ca.properties.platform,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var x = t.spanSelectionHash;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ca.properties.spanSelectionHash.type,
							parentSchema: ca.properties.spanSelectionHash,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.origin) {
					var N = t.origin;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ca.properties.origin.type,
							parentSchema: ca.properties.origin,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var D = t.contextLength;
					if ("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) {
						var T = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ca.properties.contextLength.type,
							parentSchema: ca.properties.contextLength,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.draftId) {
					var j = t.draftId;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ca.properties.draftId.type,
							parentSchema: ca.properties.draftId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var C = t.caretLocation;
					if (!Array.isArray(C)) {
						var A = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ca.properties.caretLocation.type,
							parentSchema: ca.properties.caretLocation,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var H = t.interactionId;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ca.properties.interactionId.type,
							parentSchema: ca.properties.interactionId,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.configString) {
					var M = t.configString;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ca.properties.configString.type
							},
							message: "must be string,null",
							schema: ca.properties.configString.type,
							parentSchema: ca.properties.configString,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.tabId) {
					var z = t.tabId;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ca.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ca.properties.tabId.type,
							parentSchema: ca.properties.tabId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.app) {
					var B = t.app;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ca.properties.app.type
							},
							message: "must be string,null",
							schema: ca.properties.app.type,
							parentSchema: ca.properties.app,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.host) {
					var V = t.host;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ca.properties.host.type
							},
							message: "must be string,null",
							schema: ca.properties.host.type,
							parentSchema: ca.properties.host,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
			} else {
				var K = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ca.type,
					parentSchema: ca,
					data: t
				};
				null === s ? s = [K] : s.push(K), p++
			}
			return e.errors = s, 0 === p
		};
		var ca = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				interactionId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["randomizedSuggestions", "duration", "platform", "spanSelectionHash", "origin", "contextLength", "draftId", "interactionId"],
			$id: "RewriteUnknownClosed",
			additionalProperties: !1
		};
		t.ScriptInjectedSuccessfully = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.url) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "url"
						},
						message: "must have required property 'url'",
						schema: ha.required,
						parentSchema: ha,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("url" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ha,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.url) {
					var h = t.url;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/url",
							schemaPath: "#/properties/url/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ha.properties.url.type,
							parentSchema: ha.properties.url,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ha.properties.configString.type
							},
							message: "must be string,null",
							schema: ha.properties.configString.type,
							parentSchema: ha.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ha.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ha.properties.tabId.type,
							parentSchema: ha.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ha.properties.app.type
							},
							message: "must be string,null",
							schema: ha.properties.app.type,
							parentSchema: ha.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ha.properties.host.type
							},
							message: "must be string,null",
							schema: ha.properties.host.type,
							parentSchema: ha.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ha.type,
					parentSchema: ha,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var ha = {
			properties: {
				url: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["url"],
			$id: "ScriptInjectedSuccessfully",
			additionalProperties: !1
		};
		t.SDKLoaded = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ua,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ua.properties.configString.type
							},
							message: "must be string,null",
							schema: ua.properties.configString.type,
							parentSchema: ua.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ua.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ua.properties.tabId.type,
							parentSchema: ua.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ua.properties.app.type
							},
							message: "must be string,null",
							schema: ua.properties.app.type,
							parentSchema: ua.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ua.properties.host.type
							},
							message: "must be string,null",
							schema: ua.properties.host.type,
							parentSchema: ua.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ua.type,
					parentSchema: ua,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var ua = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "SDKLoaded",
			additionalProperties: !1
		};
		t.SelectionToolbarRewriteIconHovered = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.promptText) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "promptText"
						},
						message: "must have required property 'promptText'",
						schema: ma.required,
						parentSchema: ma,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.featureDisabled) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "featureDisabled"
						},
						message: "must have required property 'featureDisabled'",
						schema: ma.required,
						parentSchema: ma,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.promptIcon) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "promptIcon"
						},
						message: "must have required property 'promptIcon'",
						schema: ma.required,
						parentSchema: ma,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: ma.required,
						parentSchema: ma,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: ma.required,
						parentSchema: ma,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ma.required,
						parentSchema: ma,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				for (var l in t)
					if (!i.call(ma.properties, l)) {
						var y = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: l
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ma,
							data: t
						};
						null === s ? s = [y] : s.push(y), p++
					} if (void 0 !== t.spanSelectionLength) {
					var g = t.spanSelectionLength;
					if ("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) {
						var f = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ma.properties.spanSelectionLength.type,
							parentSchema: ma.properties.spanSelectionLength,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.promptText) {
					var v = t.promptText;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/promptText",
							schemaPath: "#/properties/promptText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ma.properties.promptText.type,
							parentSchema: ma.properties.promptText,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.featureDisabled) {
					var P = t.featureDisabled;
					if ("boolean" !== typeof P) {
						var S = {
							instancePath: n + "/featureDisabled",
							schemaPath: "#/properties/featureDisabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ma.properties.featureDisabled.type,
							parentSchema: ma.properties.featureDisabled,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.promptIcon) {
					var w = t.promptIcon;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/promptIcon",
							schemaPath: "#/properties/promptIcon/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ma.properties.promptIcon.type,
							parentSchema: ma.properties.promptIcon,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.platform) {
					var _ = t.platform;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ma.properties.platform.type,
							parentSchema: ma.properties.platform,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var q = t.spanSelectionHash;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ma.properties.spanSelectionHash.type,
							parentSchema: ma.properties.spanSelectionHash,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var x = t.contextLength;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ma.properties.contextLength.type,
							parentSchema: ma.properties.contextLength,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.draftId) {
					var N = t.draftId;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ma.properties.draftId.type,
							parentSchema: ma.properties.draftId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var D = t.caretLocation;
					if (!Array.isArray(D)) {
						var T = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ma.properties.caretLocation.type,
							parentSchema: ma.properties.caretLocation,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var j = t.isFirstEngagement;
					if ("boolean" !== typeof j) {
						var F = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ma.properties.isFirstEngagement.type,
							parentSchema: ma.properties.isFirstEngagement,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.configString) {
					var C = t.configString;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ma.properties.configString.type
							},
							message: "must be string,null",
							schema: ma.properties.configString.type,
							parentSchema: ma.properties.configString,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.tabId) {
					var H = t.tabId;
					if (("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) && null !== H) {
						var R = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ma.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ma.properties.tabId.type,
							parentSchema: ma.properties.tabId,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.app) {
					var M = t.app;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ma.properties.app.type
							},
							message: "must be string,null",
							schema: ma.properties.app.type,
							parentSchema: ma.properties.app,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.host) {
					var z = t.host;
					if ("string" !== typeof z && null !== z) {
						var U = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ma.properties.host.type
							},
							message: "must be string,null",
							schema: ma.properties.host.type,
							parentSchema: ma.properties.host,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
			} else {
				var B = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ma.type,
					parentSchema: ma,
					data: t
				};
				null === s ? s = [B] : s.push(B), p++
			}
			return e.errors = s, 0 === p
		};
		var ma = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				promptText: {
					type: "string"
				},
				featureDisabled: {
					type: "boolean"
				},
				promptIcon: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["promptText", "featureDisabled", "promptIcon", "platform", "spanSelectionHash", "contextLength"],
			$id: "SelectionToolbarRewriteIconHovered",
			additionalProperties: !1
		};
		t.SelectionToolbarShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: da.required,
						parentSchema: da,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: da.required,
						parentSchema: da,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.contextLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: da.required,
						parentSchema: da,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.isNudged) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isNudged"
						},
						message: "must have required property 'isNudged'",
						schema: da.required,
						parentSchema: da,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(da.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: da,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: da.properties.platform.type,
							parentSchema: da.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: da.properties.spanSelectionHash.type,
							parentSchema: da.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: da.properties.spanSelectionLength.type,
							parentSchema: da.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var P = t.contextLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: da.properties.contextLength.type,
							parentSchema: da.properties.contextLength,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.isNudged) {
					var w = t.isNudged;
					if ("boolean" !== typeof w) {
						var k = {
							instancePath: n + "/isNudged",
							schemaPath: "#/properties/isNudged/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: da.properties.isNudged.type,
							parentSchema: da.properties.isNudged,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.draftId) {
					var _ = t.draftId;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: da.properties.draftId.type,
							parentSchema: da.properties.draftId,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var q = t.caretLocation;
					if (!Array.isArray(q)) {
						var L = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: da.properties.caretLocation.type,
							parentSchema: da.properties.caretLocation,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var x = t.isFirstEngagement;
					if ("boolean" !== typeof x) {
						var E = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: da.properties.isFirstEngagement.type,
							parentSchema: da.properties.isFirstEngagement,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.configString) {
					var N = t.configString;
					if ("string" !== typeof N && null !== N) {
						var O = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: da.properties.configString.type
							},
							message: "must be string,null",
							schema: da.properties.configString.type,
							parentSchema: da.properties.configString,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.tabId) {
					var D = t.tabId;
					if (("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) && null !== D) {
						var T = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: da.properties.tabId.type
							},
							message: "must be integer,null",
							schema: da.properties.tabId.type,
							parentSchema: da.properties.tabId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.app) {
					var j = t.app;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: da.properties.app.type
							},
							message: "must be string,null",
							schema: da.properties.app.type,
							parentSchema: da.properties.app,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.host) {
					var C = t.host;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: da.properties.host.type
							},
							message: "must be string,null",
							schema: da.properties.host.type,
							parentSchema: da.properties.host,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
			} else {
				var H = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: da.type,
					parentSchema: da,
					data: t
				};
				null === s ? s = [H] : s.push(H), p++
			}
			return e.errors = s, 0 === p
		};
		var da = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				isNudged: {
					type: "boolean"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "contextLength", "isNudged"],
			$id: "SelectionToolbarShown",
			additionalProperties: !1
		};
		t.SendPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: la.required,
						parentSchema: la,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: la.required,
						parentSchema: la,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.subjectLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "subjectLength"
						},
						message: "must have required property 'subjectLength'",
						schema: la.required,
						parentSchema: la,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: la.required,
						parentSchema: la,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.contextLength) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: la.required,
						parentSchema: la,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(la.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: la,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: la.properties.platform.type,
							parentSchema: la.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var f = t.spanSelectionHash;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: la.properties.spanSelectionHash.type,
							parentSchema: la.properties.spanSelectionHash,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.subjectLength) {
					var b = t.subjectLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/subjectLength",
							schemaPath: "#/properties/subjectLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: la.properties.subjectLength.type,
							parentSchema: la.properties.subjectLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var S = t.isFirstEngagement;
					if ("boolean" !== typeof S) {
						var w = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: la.properties.isFirstEngagement.type,
							parentSchema: la.properties.isFirstEngagement,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.draftId) {
					var k = t.draftId;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: la.properties.draftId.type,
							parentSchema: la.properties.draftId,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var I = t.contextLength;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: la.properties.contextLength.type,
							parentSchema: la.properties.contextLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var L = t.caretLocation;
					if (!Array.isArray(L)) {
						var x = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: la.properties.caretLocation.type,
							parentSchema: la.properties.caretLocation,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.configString) {
					var E = t.configString;
					if ("string" !== typeof E && null !== E) {
						var N = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: la.properties.configString.type
							},
							message: "must be string,null",
							schema: la.properties.configString.type,
							parentSchema: la.properties.configString,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.tabId) {
					var O = t.tabId;
					if (("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) && null !== O) {
						var D = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: la.properties.tabId.type
							},
							message: "must be integer,null",
							schema: la.properties.tabId.type,
							parentSchema: la.properties.tabId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.app) {
					var T = t.app;
					if ("string" !== typeof T && null !== T) {
						var j = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: la.properties.app.type
							},
							message: "must be string,null",
							schema: la.properties.app.type,
							parentSchema: la.properties.app,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.host) {
					var F = t.host;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: la.properties.host.type
							},
							message: "must be string,null",
							schema: la.properties.host.type,
							parentSchema: la.properties.host,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
			} else {
				var A = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: la.type,
					parentSchema: la,
					data: t
				};
				null === s ? s = [A] : s.push(A), p++
			}
			return e.errors = s, 0 === p
		};
		var la = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				subjectLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				draftId: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "subjectLength", "draftId", "contextLength"],
			$id: "SendPressed",
			additionalProperties: !1
		};
		t.ShortedFetchStarted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: ya.required,
						parentSchema: ya,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: ya.required,
						parentSchema: ya,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ya.required,
						parentSchema: ya,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ya.required,
						parentSchema: ya,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(ya.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ya,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ya.properties.platform.type,
							parentSchema: ya.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ya.properties.spanSelectionHash.type,
							parentSchema: ya.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.origin) {
					var v = t.origin;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ya.properties.origin.type,
							parentSchema: ya.properties.origin,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var P = t.contextLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ya.properties.contextLength.type,
							parentSchema: ya.properties.contextLength,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.draftId) {
					var w = t.draftId;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ya.properties.draftId.type,
							parentSchema: ya.properties.draftId,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var _ = t.caretLocation;
					if (!Array.isArray(_)) {
						var I = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ya.properties.caretLocation.type,
							parentSchema: ya.properties.caretLocation,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var q = t.spanSelectionLength;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ya.properties.spanSelectionLength.type,
							parentSchema: ya.properties.spanSelectionLength,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var x = t.isFirstEngagement;
					if ("boolean" !== typeof x) {
						var E = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ya.properties.isFirstEngagement.type,
							parentSchema: ya.properties.isFirstEngagement,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.configString) {
					var N = t.configString;
					if ("string" !== typeof N && null !== N) {
						var O = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ya.properties.configString.type
							},
							message: "must be string,null",
							schema: ya.properties.configString.type,
							parentSchema: ya.properties.configString,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.tabId) {
					var D = t.tabId;
					if (("number" != typeof D || D % 1 || isNaN(D) || !isFinite(D)) && null !== D) {
						var T = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ya.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ya.properties.tabId.type,
							parentSchema: ya.properties.tabId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.app) {
					var j = t.app;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ya.properties.app.type
							},
							message: "must be string,null",
							schema: ya.properties.app.type,
							parentSchema: ya.properties.app,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.host) {
					var C = t.host;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ya.properties.host.type
							},
							message: "must be string,null",
							schema: ya.properties.host.type,
							parentSchema: ya.properties.host,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
			} else {
				var H = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ya.type,
					parentSchema: ya,
					data: t
				};
				null === s ? s = [H] : s.push(H), p++
			}
			return e.errors = s, 0 === p
		};
		var ya = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "contextLength"],
			$id: "ShortedFetchStarted",
			additionalProperties: !1
		};
		t.ShortenClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.randomizedSuggestions) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: ga.required,
						parentSchema: ga,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: ga.required,
						parentSchema: ga,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: ga.required,
						parentSchema: ga,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: ga.required,
						parentSchema: ga,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.origin) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ga.required,
						parentSchema: ga,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ga.required,
						parentSchema: ga,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.interactionId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: ga.required,
						parentSchema: ga,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				for (var y in t)
					if (!i.call(ga.properties, y)) {
						var g = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: y
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ga,
							data: t
						};
						null === s ? s = [g] : s.push(g), p++
					} if (void 0 !== t.spanSelectionLength) {
					var f = t.spanSelectionLength;
					if ("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) {
						var v = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ga.properties.spanSelectionLength.type,
							parentSchema: ga.properties.spanSelectionLength,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var b = t.randomizedSuggestions;
					if ("boolean" !== typeof b) {
						var P = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ga.properties.randomizedSuggestions.type,
							parentSchema: ga.properties.randomizedSuggestions,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.duration) {
					var S = t.duration;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ga.properties.duration.type,
							parentSchema: ga.properties.duration,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.platform) {
					var k = t.platform;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ga.properties.platform.type,
							parentSchema: ga.properties.platform,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var I = t.spanSelectionHash;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ga.properties.spanSelectionHash.type,
							parentSchema: ga.properties.spanSelectionHash,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.origin) {
					var L = t.origin;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ga.properties.origin.type,
							parentSchema: ga.properties.origin,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var E = t.contextLength;
					if ("number" != typeof E || E % 1 || isNaN(E) || !isFinite(E)) {
						var N = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ga.properties.contextLength.type,
							parentSchema: ga.properties.contextLength,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var O = t.interactionId;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ga.properties.interactionId.type,
							parentSchema: ga.properties.interactionId,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.draftId) {
					var T = t.draftId;
					if ("string" !== typeof T) {
						var j = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ga.properties.draftId.type,
							parentSchema: ga.properties.draftId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var F = t.caretLocation;
					if (!Array.isArray(F)) {
						var C = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ga.properties.caretLocation.type,
							parentSchema: ga.properties.caretLocation,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var A = t.isFirstEngagement;
					if ("boolean" !== typeof A) {
						var H = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ga.properties.isFirstEngagement.type,
							parentSchema: ga.properties.isFirstEngagement,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.configString) {
					var R = t.configString;
					if ("string" !== typeof R && null !== R) {
						var M = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ga.properties.configString.type
							},
							message: "must be string,null",
							schema: ga.properties.configString.type,
							parentSchema: ga.properties.configString,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.tabId) {
					var $ = t.tabId;
					if (("number" != typeof $ || $ % 1 || isNaN($) || !isFinite($)) && null !== $) {
						var z = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ga.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ga.properties.tabId.type,
							parentSchema: ga.properties.tabId,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.app) {
					var U = t.app;
					if ("string" !== typeof U && null !== U) {
						var B = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ga.properties.app.type
							},
							message: "must be string,null",
							schema: ga.properties.app.type,
							parentSchema: ga.properties.app,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.host) {
					var W = t.host;
					if ("string" !== typeof W && null !== W) {
						var V = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ga.properties.host.type
							},
							message: "must be string,null",
							schema: ga.properties.host.type,
							parentSchema: ga.properties.host,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
			} else {
				var G = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ga.type,
					parentSchema: ga,
					data: t
				};
				null === s ? s = [G] : s.push(G), p++
			}
			return e.errors = s, 0 === p
		};
		var ga = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				duration: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["randomizedSuggestions", "duration", "platform", "spanSelectionHash", "origin", "contextLength", "interactionId"],
			$id: "ShortenClosed",
			additionalProperties: !1
		};
		t.ShortenError = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.errorMsg) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "errorMsg"
						},
						message: "must have required property 'errorMsg'",
						schema: fa.required,
						parentSchema: fa,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.platform) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: fa.required,
						parentSchema: fa,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: fa.required,
						parentSchema: fa,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.errorCode) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "errorCode"
						},
						message: "must have required property 'errorCode'",
						schema: fa.required,
						parentSchema: fa,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.loadingDuration) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: fa.required,
						parentSchema: fa,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: fa.required,
						parentSchema: fa,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.interactionId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: fa.required,
						parentSchema: fa,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.draftId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: fa.required,
						parentSchema: fa,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(fa.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: fa,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.errorMsg) {
					var v = t.errorMsg;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/errorMsg",
							schemaPath: "#/properties/errorMsg/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: fa.properties.errorMsg.type,
							parentSchema: fa.properties.errorMsg,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.platform) {
					var P = t.platform;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: fa.properties.platform.type,
							parentSchema: fa.properties.platform,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var w = t.spanSelectionHash;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: fa.properties.spanSelectionHash.type,
							parentSchema: fa.properties.spanSelectionHash,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.errorCode) {
					var _ = t.errorCode;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/errorCode",
							schemaPath: "#/properties/errorCode/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: fa.properties.errorCode.type,
							parentSchema: fa.properties.errorCode,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.loadingDuration) {
					var q = t.loadingDuration;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: fa.properties.loadingDuration.type,
							parentSchema: fa.properties.loadingDuration,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var x = t.contextLength;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: fa.properties.contextLength.type,
							parentSchema: fa.properties.contextLength,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var N = t.interactionId;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: fa.properties.interactionId.type,
							parentSchema: fa.properties.interactionId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.draftId) {
					var D = t.draftId;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: fa.properties.draftId.type,
							parentSchema: fa.properties.draftId,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var j = t.caretLocation;
					if (!Array.isArray(j)) {
						var F = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: fa.properties.caretLocation.type,
							parentSchema: fa.properties.caretLocation,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var C = t.spanSelectionLength;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: fa.properties.spanSelectionLength.type,
							parentSchema: fa.properties.spanSelectionLength,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var H = t.isFirstEngagement;
					if ("boolean" !== typeof H) {
						var R = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: fa.properties.isFirstEngagement.type,
							parentSchema: fa.properties.isFirstEngagement,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.configString) {
					var M = t.configString;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: fa.properties.configString.type
							},
							message: "must be string,null",
							schema: fa.properties.configString.type,
							parentSchema: fa.properties.configString,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.tabId) {
					var z = t.tabId;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: fa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: fa.properties.tabId.type,
							parentSchema: fa.properties.tabId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.app) {
					var B = t.app;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: fa.properties.app.type
							},
							message: "must be string,null",
							schema: fa.properties.app.type,
							parentSchema: fa.properties.app,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.host) {
					var V = t.host;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: fa.properties.host.type
							},
							message: "must be string,null",
							schema: fa.properties.host.type,
							parentSchema: fa.properties.host,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
			} else {
				var K = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: fa.type,
					parentSchema: fa,
					data: t
				};
				null === s ? s = [K] : s.push(K), p++
			}
			return e.errors = s, 0 === p
		};
		var fa = {
			properties: {
				errorMsg: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				errorCode: {
					type: "integer"
				},
				loadingDuration: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["errorMsg", "platform", "spanSelectionHash", "errorCode", "loadingDuration", "contextLength", "interactionId", "draftId"],
			$id: "ShortenError",
			additionalProperties: !1
		};
		t.ShortenOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.loadingDuration) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "loadingDuration"
						},
						message: "must have required property 'loadingDuration'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.randomizedSuggestions) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.isNudged) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isNudged"
						},
						message: "must have required property 'isNudged'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isBatch) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isBatch"
						},
						message: "must have required property 'isBatch'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.isLimitedSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isLimitedSuggestions"
						},
						message: "must have required property 'isLimitedSuggestions'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.origin) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.contextLength) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.spanEncompassingSentenceHash) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceHash"
						},
						message: "must have required property 'spanEncompassingSentenceHash'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				if (void 0 === t.spanEncompassingSentenceLength) {
					var b = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceLength"
						},
						message: "must have required property 'spanEncompassingSentenceLength'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [b] : s.push(b), p++
				}
				if (void 0 === t.interactionId) {
					var P = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [P] : s.push(P), p++
				}
				if (void 0 === t.numOfLockedSuggestions) {
					var S = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfLockedSuggestions"
						},
						message: "must have required property 'numOfLockedSuggestions'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [S] : s.push(S), p++
				}
				if (void 0 === t.batchIndex) {
					var w = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchIndex"
						},
						message: "must have required property 'batchIndex'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [w] : s.push(w), p++
				}
				if (void 0 === t.spanSelectionModificationShown) {
					var k = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionModificationShown"
						},
						message: "must have required property 'spanSelectionModificationShown'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [k] : s.push(k), p++
				}
				if (void 0 === t.cacheInteractionId) {
					var _ = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "cacheInteractionId"
						},
						message: "must have required property 'cacheInteractionId'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [_] : s.push(_), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var I = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: va.required,
						parentSchema: va,
						data: t
					};
					null === s ? s = [I] : s.push(I), p++
				}
				for (var q in t)
					if (!i.call(va.properties, q)) {
						var L = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: q
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: va,
							data: t
						};
						null === s ? s = [L] : s.push(L), p++
					} if (void 0 !== t.loadingDuration) {
					var x = t.loadingDuration;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/loadingDuration",
							schemaPath: "#/properties/loadingDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: va.properties.loadingDuration.type,
							parentSchema: va.properties.loadingDuration,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var N = t.randomizedSuggestions;
					if ("boolean" !== typeof N) {
						var O = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: va.properties.randomizedSuggestions.type,
							parentSchema: va.properties.randomizedSuggestions,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isNudged) {
					var D = t.isNudged;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isNudged",
							schemaPath: "#/properties/isNudged/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: va.properties.isNudged.type,
							parentSchema: va.properties.isNudged,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.platform) {
					var j = t.platform;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: va.properties.platform.type,
							parentSchema: va.properties.platform,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var C = t.spanSelectionHash;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: va.properties.spanSelectionHash.type,
							parentSchema: va.properties.spanSelectionHash,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var H = t.isBatch;
					if ("boolean" !== typeof H) {
						var R = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: va.properties.isBatch.type,
							parentSchema: va.properties.isBatch,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.isLimitedSuggestions) {
					var M = t.isLimitedSuggestions;
					if ("boolean" !== typeof M) {
						var $ = {
							instancePath: n + "/isLimitedSuggestions",
							schemaPath: "#/properties/isLimitedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: va.properties.isLimitedSuggestions.type,
							parentSchema: va.properties.isLimitedSuggestions,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var z = t.numOfSuggestions;
					if ("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) {
						var U = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: va.properties.numOfSuggestions.type,
							parentSchema: va.properties.numOfSuggestions,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.origin) {
					var B = t.origin;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: va.properties.origin.type,
							parentSchema: va.properties.origin,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var V = t.contextLength;
					if ("number" != typeof V || V % 1 || isNaN(V) || !isFinite(V)) {
						var G = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: va.properties.contextLength.type,
							parentSchema: va.properties.contextLength,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceHash) {
					var K = t.spanEncompassingSentenceHash;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/spanEncompassingSentenceHash",
							schemaPath: "#/properties/spanEncompassingSentenceHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: va.properties.spanEncompassingSentenceHash.type,
							parentSchema: va.properties.spanEncompassingSentenceHash,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceLength) {
					var Y = t.spanEncompassingSentenceLength;
					if ("number" != typeof Y || Y % 1 || isNaN(Y) || !isFinite(Y)) {
						var J = {
							instancePath: n + "/spanEncompassingSentenceLength",
							schemaPath: "#/properties/spanEncompassingSentenceLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: va.properties.spanEncompassingSentenceLength.type,
							parentSchema: va.properties.spanEncompassingSentenceLength,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var X = t.interactionId;
					if ("string" !== typeof X) {
						var Z = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: va.properties.interactionId.type,
							parentSchema: va.properties.interactionId,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.numOfLockedSuggestions) {
					var ee = t.numOfLockedSuggestions;
					if ("number" != typeof ee || ee % 1 || isNaN(ee) || !isFinite(ee)) {
						var te = {
							instancePath: n + "/numOfLockedSuggestions",
							schemaPath: "#/properties/numOfLockedSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: va.properties.numOfLockedSuggestions.type,
							parentSchema: va.properties.numOfLockedSuggestions,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.draftId) {
					var re = t.draftId;
					if ("string" !== typeof re) {
						var ae = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: va.properties.draftId.type,
							parentSchema: va.properties.draftId,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var ne = t.caretLocation;
					if (!Array.isArray(ne)) {
						var ie = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: va.properties.caretLocation.type,
							parentSchema: va.properties.caretLocation,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var se = t.spanSelectionLength;
					if ("number" != typeof se || se % 1 || isNaN(se) || !isFinite(se)) {
						var pe = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: va.properties.spanSelectionLength.type,
							parentSchema: va.properties.spanSelectionLength,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var oe = t.batchIndex;
					if (("number" != typeof oe || oe % 1 || isNaN(oe) || !isFinite(oe)) && null !== oe) {
						var ce = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: va.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: va.properties.batchIndex.type,
							parentSchema: va.properties.batchIndex,
							data: oe
						};
						null === s ? s = [ce] : s.push(ce), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var he = t.batchInteractionId;
					if ("string" !== typeof he) {
						var ue = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: va.properties.batchInteractionId.type,
							parentSchema: va.properties.batchInteractionId,
							data: he
						};
						null === s ? s = [ue] : s.push(ue), p++
					}
				}
				if (void 0 !== t.spanSelectionModificationShown) {
					var me = t.spanSelectionModificationShown;
					if ("string" !== typeof me && null !== me) {
						var de = {
							instancePath: n + "/spanSelectionModificationShown",
							schemaPath: "#/properties/spanSelectionModificationShown/type",
							keyword: "type",
							params: {
								type: va.properties.spanSelectionModificationShown.type
							},
							message: "must be string,null",
							schema: va.properties.spanSelectionModificationShown.type,
							parentSchema: va.properties.spanSelectionModificationShown,
							data: me
						};
						null === s ? s = [de] : s.push(de), p++
					}
				}
				if (void 0 !== t.cacheInteractionId) {
					var le = t.cacheInteractionId;
					if ("string" !== typeof le && null !== le) {
						var ye = {
							instancePath: n + "/cacheInteractionId",
							schemaPath: "#/properties/cacheInteractionId/type",
							keyword: "type",
							params: {
								type: va.properties.cacheInteractionId.type
							},
							message: "must be string,null",
							schema: va.properties.cacheInteractionId.type,
							parentSchema: va.properties.cacheInteractionId,
							data: le
						};
						null === s ? s = [ye] : s.push(ye), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var ge = t.batchTotalSentences;
					if (("number" != typeof ge || ge % 1 || isNaN(ge) || !isFinite(ge)) && null !== ge) {
						var fe = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: va.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: va.properties.batchTotalSentences.type,
							parentSchema: va.properties.batchTotalSentences,
							data: ge
						};
						null === s ? s = [fe] : s.push(fe), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var ve = t.isFirstEngagement;
					if ("boolean" !== typeof ve) {
						var be = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: va.properties.isFirstEngagement.type,
							parentSchema: va.properties.isFirstEngagement,
							data: ve
						};
						null === s ? s = [be] : s.push(be), p++
					}
				}
				if (void 0 !== t.configString) {
					var Pe = t.configString;
					if ("string" !== typeof Pe && null !== Pe) {
						var Se = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: va.properties.configString.type
							},
							message: "must be string,null",
							schema: va.properties.configString.type,
							parentSchema: va.properties.configString,
							data: Pe
						};
						null === s ? s = [Se] : s.push(Se), p++
					}
				}
				if (void 0 !== t.tabId) {
					var we = t.tabId;
					if (("number" != typeof we || we % 1 || isNaN(we) || !isFinite(we)) && null !== we) {
						var ke = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: va.properties.tabId.type
							},
							message: "must be integer,null",
							schema: va.properties.tabId.type,
							parentSchema: va.properties.tabId,
							data: we
						};
						null === s ? s = [ke] : s.push(ke), p++
					}
				}
				if (void 0 !== t.app) {
					var _e = t.app;
					if ("string" !== typeof _e && null !== _e) {
						var Ie = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: va.properties.app.type
							},
							message: "must be string,null",
							schema: va.properties.app.type,
							parentSchema: va.properties.app,
							data: _e
						};
						null === s ? s = [Ie] : s.push(Ie), p++
					}
				}
				if (void 0 !== t.host) {
					var qe = t.host;
					if ("string" !== typeof qe && null !== qe) {
						var Le = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: va.properties.host.type
							},
							message: "must be string,null",
							schema: va.properties.host.type,
							parentSchema: va.properties.host,
							data: qe
						};
						null === s ? s = [Le] : s.push(Le), p++
					}
				}
			} else {
				var xe = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: va.type,
					parentSchema: va,
					data: t
				};
				null === s ? s = [xe] : s.push(xe), p++
			}
			return e.errors = s, 0 === p
		};
		var va = {
			properties: {
				loadingDuration: {
					type: "integer"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				isNudged: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				isLimitedSuggestions: {
					type: "boolean"
				},
				numOfSuggestions: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				spanEncompassingSentenceHash: {
					type: "string"
				},
				spanEncompassingSentenceLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				numOfLockedSuggestions: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				spanSelectionLength: {
					type: "integer"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				batchInteractionId: {
					type: "string"
				},
				spanSelectionModificationShown: {
					type: ["string", "null"]
				},
				cacheInteractionId: {
					type: ["string", "null"]
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["loadingDuration", "randomizedSuggestions", "isNudged", "platform", "spanSelectionHash", "isBatch", "isLimitedSuggestions", "numOfSuggestions", "origin", "contextLength", "spanEncompassingSentenceHash", "spanEncompassingSentenceLength", "interactionId", "numOfLockedSuggestions", "batchIndex", "spanSelectionModificationShown", "cacheInteractionId", "batchTotalSentences"],
			$id: "ShortenOpened",
			additionalProperties: !1
		};
		t.ShortenSuggestionCopied = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.suggestionIndex) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "suggestionIndex"
						},
						message: "must have required property 'suggestionIndex'",
						schema: ba.required,
						parentSchema: ba,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.duration) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: ba.required,
						parentSchema: ba,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.mode) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "mode"
						},
						message: "must have required property 'mode'",
						schema: ba.required,
						parentSchema: ba,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: ba.required,
						parentSchema: ba,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: ba.required,
						parentSchema: ba,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.counter) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "counter"
						},
						message: "must have required property 'counter'",
						schema: ba.required,
						parentSchema: ba,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: ba.required,
						parentSchema: ba,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: ba.required,
						parentSchema: ba,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.interactionId) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: ba.required,
						parentSchema: ba,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				for (var f in t)
					if (!i.call(ba.properties, f)) {
						var v = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: f
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ba,
							data: t
						};
						null === s ? s = [v] : s.push(v), p++
					} if (void 0 !== t.spanSelectionLength) {
					var b = t.spanSelectionLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ba.properties.spanSelectionLength.type,
							parentSchema: ba.properties.spanSelectionLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.suggestionIndex) {
					var S = t.suggestionIndex;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/suggestionIndex",
							schemaPath: "#/properties/suggestionIndex/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ba.properties.suggestionIndex.type,
							parentSchema: ba.properties.suggestionIndex,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.duration) {
					var k = t.duration;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ba.properties.duration.type,
							parentSchema: ba.properties.duration,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.mode) {
					var I = t.mode;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ba.properties.mode.type,
							parentSchema: ba.properties.mode,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.platform) {
					var L = t.platform;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ba.properties.platform.type,
							parentSchema: ba.properties.platform,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var E = t.spanSelectionHash;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ba.properties.spanSelectionHash.type,
							parentSchema: ba.properties.spanSelectionHash,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.counter) {
					var O = t.counter;
					if ("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) {
						var D = {
							instancePath: n + "/counter",
							schemaPath: "#/properties/counter/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ba.properties.counter.type,
							parentSchema: ba.properties.counter,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var T = t.numOfSuggestions;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ba.properties.numOfSuggestions.type,
							parentSchema: ba.properties.numOfSuggestions,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var F = t.contextLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ba.properties.contextLength.type,
							parentSchema: ba.properties.contextLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var A = t.interactionId;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ba.properties.interactionId.type,
							parentSchema: ba.properties.interactionId,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.draftId) {
					var R = t.draftId;
					if ("string" !== typeof R) {
						var M = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ba.properties.draftId.type,
							parentSchema: ba.properties.draftId,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var $ = t.caretLocation;
					if (!Array.isArray($)) {
						var z = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: ba.properties.caretLocation.type,
							parentSchema: ba.properties.caretLocation,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var U = t.isFirstEngagement;
					if ("boolean" !== typeof U) {
						var B = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: ba.properties.isFirstEngagement.type,
							parentSchema: ba.properties.isFirstEngagement,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.configString) {
					var W = t.configString;
					if ("string" !== typeof W && null !== W) {
						var V = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ba.properties.configString.type
							},
							message: "must be string,null",
							schema: ba.properties.configString.type,
							parentSchema: ba.properties.configString,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.tabId) {
					var G = t.tabId;
					if (("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) && null !== G) {
						var K = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ba.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ba.properties.tabId.type,
							parentSchema: ba.properties.tabId,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.app) {
					var Q = t.app;
					if ("string" !== typeof Q && null !== Q) {
						var Y = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ba.properties.app.type
							},
							message: "must be string,null",
							schema: ba.properties.app.type,
							parentSchema: ba.properties.app,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.host) {
					var J = t.host;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ba.properties.host.type
							},
							message: "must be string,null",
							schema: ba.properties.host.type,
							parentSchema: ba.properties.host,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
			} else {
				var Z = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ba.type,
					parentSchema: ba,
					data: t
				};
				null === s ? s = [Z] : s.push(Z), p++
			}
			return e.errors = s, 0 === p
		};
		var ba = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				suggestionIndex: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				counter: {
					type: "integer"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["suggestionIndex", "duration", "mode", "platform", "spanSelectionHash", "counter", "numOfSuggestions", "contextLength", "interactionId"],
			$id: "ShortenSuggestionCopied",
			additionalProperties: !1
		};
		t.ShortenSuggestionSelected = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.idx) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "idx"
						},
						message: "must have required property 'idx'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.total) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "total"
						},
						message: "must have required property 'total'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.mode) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "mode"
						},
						message: "must have required property 'mode'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.platform) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isBatch) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isBatch"
						},
						message: "must have required property 'isBatch'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.contextLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.interactionId) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.batchIndex) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchIndex"
						},
						message: "must have required property 'batchIndex'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.draftId) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.batchTotalSentences) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "batchTotalSentences"
						},
						message: "must have required property 'batchTotalSentences'",
						schema: Pa.required,
						parentSchema: Pa,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(Pa.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Pa,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.spanSelectionLength) {
					var S = t.spanSelectionLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Pa.properties.spanSelectionLength.type,
							parentSchema: Pa.properties.spanSelectionLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.idx) {
					var k = t.idx;
					if ("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) {
						var _ = {
							instancePath: n + "/idx",
							schemaPath: "#/properties/idx/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Pa.properties.idx.type,
							parentSchema: Pa.properties.idx,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.total) {
					var I = t.total;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/total",
							schemaPath: "#/properties/total/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Pa.properties.total.type,
							parentSchema: Pa.properties.total,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.mode) {
					var L = t.mode;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/mode",
							schemaPath: "#/properties/mode/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pa.properties.mode.type,
							parentSchema: Pa.properties.mode,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.platform) {
					var E = t.platform;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pa.properties.platform.type,
							parentSchema: Pa.properties.platform,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var O = t.spanSelectionHash;
					if ("string" !== typeof O) {
						var D = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pa.properties.spanSelectionHash.type,
							parentSchema: Pa.properties.spanSelectionHash,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.isBatch) {
					var T = t.isBatch;
					if ("boolean" !== typeof T) {
						var j = {
							instancePath: n + "/isBatch",
							schemaPath: "#/properties/isBatch/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Pa.properties.isBatch.type,
							parentSchema: Pa.properties.isBatch,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var F = t.contextLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Pa.properties.contextLength.type,
							parentSchema: Pa.properties.contextLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var A = t.interactionId;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pa.properties.interactionId.type,
							parentSchema: Pa.properties.interactionId,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var R = t.caretLocation;
					if (!Array.isArray(R)) {
						var M = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Pa.properties.caretLocation.type,
							parentSchema: Pa.properties.caretLocation,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.batchIndex) {
					var $ = t.batchIndex;
					if (("number" != typeof $ || $ % 1 || isNaN($) || !isFinite($)) && null !== $) {
						var z = {
							instancePath: n + "/batchIndex",
							schemaPath: "#/properties/batchIndex/type",
							keyword: "type",
							params: {
								type: Pa.properties.batchIndex.type
							},
							message: "must be integer,null",
							schema: Pa.properties.batchIndex.type,
							parentSchema: Pa.properties.batchIndex,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.batchInteractionId) {
					var U = t.batchInteractionId;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/batchInteractionId",
							schemaPath: "#/properties/batchInteractionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pa.properties.batchInteractionId.type,
							parentSchema: Pa.properties.batchInteractionId,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.draftId) {
					var W = t.draftId;
					if ("string" !== typeof W) {
						var V = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pa.properties.draftId.type,
							parentSchema: Pa.properties.draftId,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.batchTotalSentences) {
					var G = t.batchTotalSentences;
					if (("number" != typeof G || G % 1 || isNaN(G) || !isFinite(G)) && null !== G) {
						var K = {
							instancePath: n + "/batchTotalSentences",
							schemaPath: "#/properties/batchTotalSentences/type",
							keyword: "type",
							params: {
								type: Pa.properties.batchTotalSentences.type
							},
							message: "must be integer,null",
							schema: Pa.properties.batchTotalSentences.type,
							parentSchema: Pa.properties.batchTotalSentences,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var Q = t.isFirstEngagement;
					if ("boolean" !== typeof Q) {
						var Y = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Pa.properties.isFirstEngagement.type,
							parentSchema: Pa.properties.isFirstEngagement,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.configString) {
					var J = t.configString;
					if ("string" !== typeof J && null !== J) {
						var X = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Pa.properties.configString.type
							},
							message: "must be string,null",
							schema: Pa.properties.configString.type,
							parentSchema: Pa.properties.configString,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Z = t.tabId;
					if (("number" != typeof Z || Z % 1 || isNaN(Z) || !isFinite(Z)) && null !== Z) {
						var ee = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Pa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Pa.properties.tabId.type,
							parentSchema: Pa.properties.tabId,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.app) {
					var te = t.app;
					if ("string" !== typeof te && null !== te) {
						var re = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Pa.properties.app.type
							},
							message: "must be string,null",
							schema: Pa.properties.app.type,
							parentSchema: Pa.properties.app,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
				if (void 0 !== t.host) {
					var ae = t.host;
					if ("string" !== typeof ae && null !== ae) {
						var ne = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Pa.properties.host.type
							},
							message: "must be string,null",
							schema: Pa.properties.host.type,
							parentSchema: Pa.properties.host,
							data: ae
						};
						null === s ? s = [ne] : s.push(ne), p++
					}
				}
			} else {
				var ie = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Pa.type,
					parentSchema: Pa,
					data: t
				};
				null === s ? s = [ie] : s.push(ie), p++
			}
			return e.errors = s, 0 === p
		};
		var Pa = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				idx: {
					type: "integer"
				},
				total: {
					type: "integer"
				},
				mode: {
					type: "string"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isBatch: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				batchIndex: {
					type: ["integer", "null"]
				},
				batchInteractionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				batchTotalSentences: {
					type: ["integer", "null"]
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["idx", "total", "mode", "platform", "spanSelectionHash", "isBatch", "contextLength", "interactionId", "batchIndex", "draftId", "batchTotalSentences"],
			$id: "ShortenSuggestionSelected",
			additionalProperties: !1
		};
		t.ShrinkSelectionPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.spanSelectionLength) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionLength"
						},
						message: "must have required property 'spanSelectionLength'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.randomizedSuggestions) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "randomizedSuggestions"
						},
						message: "must have required property 'randomizedSuggestions'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.platform) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.isLimitedSuggestions) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isLimitedSuggestions"
						},
						message: "must have required property 'isLimitedSuggestions'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.numOfSuggestions) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfSuggestions"
						},
						message: "must have required property 'numOfSuggestions'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.contextLength) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.spanEncompassingSentenceHash) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceHash"
						},
						message: "must have required property 'spanEncompassingSentenceHash'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.spanEncompassingSentenceLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanEncompassingSentenceLength"
						},
						message: "must have required property 'spanEncompassingSentenceLength'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.numOfLockedSuggestions) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numOfLockedSuggestions"
						},
						message: "must have required property 'numOfLockedSuggestions'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.draftId) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Sa.required,
						parentSchema: Sa,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				for (var b in t)
					if (!i.call(Sa.properties, b)) {
						var P = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: b
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Sa,
							data: t
						};
						null === s ? s = [P] : s.push(P), p++
					} if (void 0 !== t.spanSelectionLength) {
					var S = t.spanSelectionLength;
					if ("number" != typeof S || S % 1 || isNaN(S) || !isFinite(S)) {
						var w = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Sa.properties.spanSelectionLength.type,
							parentSchema: Sa.properties.spanSelectionLength,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var k = t.isFirstEngagement;
					if ("boolean" !== typeof k) {
						var _ = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Sa.properties.isFirstEngagement.type,
							parentSchema: Sa.properties.isFirstEngagement,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.randomizedSuggestions) {
					var I = t.randomizedSuggestions;
					if ("boolean" !== typeof I) {
						var q = {
							instancePath: n + "/randomizedSuggestions",
							schemaPath: "#/properties/randomizedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Sa.properties.randomizedSuggestions.type,
							parentSchema: Sa.properties.randomizedSuggestions,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.platform) {
					var L = t.platform;
					if ("string" !== typeof L) {
						var x = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Sa.properties.platform.type,
							parentSchema: Sa.properties.platform,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var E = t.spanSelectionHash;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Sa.properties.spanSelectionHash.type,
							parentSchema: Sa.properties.spanSelectionHash,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.isLimitedSuggestions) {
					var O = t.isLimitedSuggestions;
					if ("boolean" !== typeof O) {
						var D = {
							instancePath: n + "/isLimitedSuggestions",
							schemaPath: "#/properties/isLimitedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Sa.properties.isLimitedSuggestions.type,
							parentSchema: Sa.properties.isLimitedSuggestions,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.numOfSuggestions) {
					var T = t.numOfSuggestions;
					if ("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) {
						var j = {
							instancePath: n + "/numOfSuggestions",
							schemaPath: "#/properties/numOfSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Sa.properties.numOfSuggestions.type,
							parentSchema: Sa.properties.numOfSuggestions,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var F = t.contextLength;
					if ("number" != typeof F || F % 1 || isNaN(F) || !isFinite(F)) {
						var C = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Sa.properties.contextLength.type,
							parentSchema: Sa.properties.contextLength,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceHash) {
					var A = t.spanEncompassingSentenceHash;
					if ("string" !== typeof A) {
						var H = {
							instancePath: n + "/spanEncompassingSentenceHash",
							schemaPath: "#/properties/spanEncompassingSentenceHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Sa.properties.spanEncompassingSentenceHash.type,
							parentSchema: Sa.properties.spanEncompassingSentenceHash,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.spanEncompassingSentenceLength) {
					var R = t.spanEncompassingSentenceLength;
					if ("number" != typeof R || R % 1 || isNaN(R) || !isFinite(R)) {
						var M = {
							instancePath: n + "/spanEncompassingSentenceLength",
							schemaPath: "#/properties/spanEncompassingSentenceLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Sa.properties.spanEncompassingSentenceLength.type,
							parentSchema: Sa.properties.spanEncompassingSentenceLength,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.numOfLockedSuggestions) {
					var $ = t.numOfLockedSuggestions;
					if ("number" != typeof $ || $ % 1 || isNaN($) || !isFinite($)) {
						var z = {
							instancePath: n + "/numOfLockedSuggestions",
							schemaPath: "#/properties/numOfLockedSuggestions/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Sa.properties.numOfLockedSuggestions.type,
							parentSchema: Sa.properties.numOfLockedSuggestions,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.draftId) {
					var U = t.draftId;
					if ("string" !== typeof U) {
						var B = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Sa.properties.draftId.type,
							parentSchema: Sa.properties.draftId,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var W = t.caretLocation;
					if (!Array.isArray(W)) {
						var V = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Sa.properties.caretLocation.type,
							parentSchema: Sa.properties.caretLocation,
							data: W
						};
						null === s ? s = [V] : s.push(V), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var G = t.interactionId;
					if ("string" !== typeof G && null !== G) {
						var K = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: Sa.properties.interactionId.type
							},
							message: "must be string,null",
							schema: Sa.properties.interactionId.type,
							parentSchema: Sa.properties.interactionId,
							data: G
						};
						null === s ? s = [K] : s.push(K), p++
					}
				}
				if (void 0 !== t.configString) {
					var Q = t.configString;
					if ("string" !== typeof Q && null !== Q) {
						var Y = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Sa.properties.configString.type
							},
							message: "must be string,null",
							schema: Sa.properties.configString.type,
							parentSchema: Sa.properties.configString,
							data: Q
						};
						null === s ? s = [Y] : s.push(Y), p++
					}
				}
				if (void 0 !== t.tabId) {
					var J = t.tabId;
					if (("number" != typeof J || J % 1 || isNaN(J) || !isFinite(J)) && null !== J) {
						var X = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Sa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Sa.properties.tabId.type,
							parentSchema: Sa.properties.tabId,
							data: J
						};
						null === s ? s = [X] : s.push(X), p++
					}
				}
				if (void 0 !== t.app) {
					var Z = t.app;
					if ("string" !== typeof Z && null !== Z) {
						var ee = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Sa.properties.app.type
							},
							message: "must be string,null",
							schema: Sa.properties.app.type,
							parentSchema: Sa.properties.app,
							data: Z
						};
						null === s ? s = [ee] : s.push(ee), p++
					}
				}
				if (void 0 !== t.host) {
					var te = t.host;
					if ("string" !== typeof te && null !== te) {
						var re = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Sa.properties.host.type
							},
							message: "must be string,null",
							schema: Sa.properties.host.type,
							parentSchema: Sa.properties.host,
							data: te
						};
						null === s ? s = [re] : s.push(re), p++
					}
				}
			} else {
				var ae = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Sa.type,
					parentSchema: Sa,
					data: t
				};
				null === s ? s = [ae] : s.push(ae), p++
			}
			return e.errors = s, 0 === p
		};
		var Sa = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				randomizedSuggestions: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isLimitedSuggestions: {
					type: "boolean"
				},
				numOfSuggestions: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				spanEncompassingSentenceHash: {
					type: "string"
				},
				spanEncompassingSentenceLength: {
					type: "integer"
				},
				numOfLockedSuggestions: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				interactionId: {
					type: ["string", "null"]
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["spanSelectionLength", "randomizedSuggestions", "platform", "spanSelectionHash", "isLimitedSuggestions", "numOfSuggestions", "contextLength", "spanEncompassingSentenceHash", "spanEncompassingSentenceLength", "numOfLockedSuggestions", "draftId"],
			$id: "ShrinkSelectionPressed",
			additionalProperties: !1
		};
		t.speardedTheLove = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: wa.type,
					parentSchema: wa,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var wa = {
			type: "boolean",
			$id: "speardedTheLove"
		};
		t.SpreadTheLovePressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: ka.required,
						parentSchema: ka,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("store" !== o && "origin" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ka,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.store) {
					var h = t.store;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/store",
							schemaPath: "#/properties/store/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ka.properties.store.type,
							parentSchema: ka.properties.store,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.origin) {
					var m = t.origin;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: ka.properties.origin.type,
							parentSchema: ka.properties.origin,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.configString) {
					var l = t.configString;
					if ("string" !== typeof l && null !== l) {
						var y = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ka.properties.configString.type
							},
							message: "must be string,null",
							schema: ka.properties.configString.type,
							parentSchema: ka.properties.configString,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.tabId) {
					var g = t.tabId;
					if (("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) && null !== g) {
						var f = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ka.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ka.properties.tabId.type,
							parentSchema: ka.properties.tabId,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.app) {
					var v = t.app;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ka.properties.app.type
							},
							message: "must be string,null",
							schema: ka.properties.app.type,
							parentSchema: ka.properties.app,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.host) {
					var P = t.host;
					if ("string" !== typeof P && null !== P) {
						var S = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ka.properties.host.type
							},
							message: "must be string,null",
							schema: ka.properties.host.type,
							parentSchema: ka.properties.host,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
			} else {
				var w = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ka.type,
					parentSchema: ka,
					data: t
				};
				null === i ? i = [w] : i.push(w), s++
			}
			return e.errors = i, 0 === s
		};
		var ka = {
			properties: {
				store: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "SpreadTheLovePressed",
			additionalProperties: !1
		};
		t.SpreadTheLoveSocialShared = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.socialNetwork) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "socialNetwork"
						},
						message: "must have required property 'socialNetwork'",
						schema: _a.required,
						parentSchema: _a,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.origin) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: _a.required,
						parentSchema: _a,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("socialNetwork" !== c && "origin" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: _a,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.socialNetwork) {
					var u = t.socialNetwork;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/socialNetwork",
							schemaPath: "#/properties/socialNetwork/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _a.properties.socialNetwork.type,
							parentSchema: _a.properties.socialNetwork,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.origin) {
					var d = t.origin;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _a.properties.origin.type,
							parentSchema: _a.properties.origin,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: _a.properties.configString.type
							},
							message: "must be string,null",
							schema: _a.properties.configString.type,
							parentSchema: _a.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: _a.properties.tabId.type
							},
							message: "must be integer,null",
							schema: _a.properties.tabId.type,
							parentSchema: _a.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: _a.properties.app.type
							},
							message: "must be string,null",
							schema: _a.properties.app.type,
							parentSchema: _a.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: _a.properties.host.type
							},
							message: "must be string,null",
							schema: _a.properties.host.type,
							parentSchema: _a.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: _a.type,
					parentSchema: _a,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var _a = {
			properties: {
				socialNetwork: {
					type: "string"
				},
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["socialNetwork", "origin"],
			$id: "SpreadTheLoveSocialShared",
			additionalProperties: !1
		};
		t.SpreadTheLoveURLCopied = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.origin) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: Ia.required,
						parentSchema: Ia,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("origin" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ia,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.origin) {
					var h = t.origin;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ia.properties.origin.type,
							parentSchema: Ia.properties.origin,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ia.properties.configString.type
							},
							message: "must be string,null",
							schema: Ia.properties.configString.type,
							parentSchema: Ia.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ia.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ia.properties.tabId.type,
							parentSchema: Ia.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ia.properties.app.type
							},
							message: "must be string,null",
							schema: Ia.properties.app.type,
							parentSchema: Ia.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ia.properties.host.type
							},
							message: "must be string,null",
							schema: Ia.properties.host.type,
							parentSchema: Ia.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ia.type,
					parentSchema: Ia,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Ia = {
			properties: {
				origin: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["origin"],
			$id: "SpreadTheLoveURLCopied",
			additionalProperties: !1
		};
		t.SubscriptionCancelled = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.expirationDate) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "expirationDate"
						},
						message: "must have required property 'expirationDate'",
						schema: qa.required,
						parentSchema: qa,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("expirationDate" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: qa,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.expirationDate) {
					var h = t.expirationDate;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/expirationDate",
							schemaPath: "#/properties/expirationDate/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: qa.properties.expirationDate.type,
							parentSchema: qa.properties.expirationDate,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: qa.properties.configString.type
							},
							message: "must be string,null",
							schema: qa.properties.configString.type,
							parentSchema: qa.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: qa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: qa.properties.tabId.type,
							parentSchema: qa.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: qa.properties.app.type
							},
							message: "must be string,null",
							schema: qa.properties.app.type,
							parentSchema: qa.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: qa.properties.host.type
							},
							message: "must be string,null",
							schema: qa.properties.host.type,
							parentSchema: qa.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: qa.type,
					parentSchema: qa,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var qa = {
			properties: {
				expirationDate: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["expirationDate"],
			$id: "SubscriptionCancelled",
			additionalProperties: !1
		};
		t.SubscriptionCreated = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.subscriptionPlan) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "subscriptionPlan"
						},
						message: "must have required property 'subscriptionPlan'",
						schema: La.required,
						parentSchema: La,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("subscriptionPlan" !== o && "promoCodeName" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: La,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.subscriptionPlan) {
					var h = t.subscriptionPlan;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/subscriptionPlan",
							schemaPath: "#/properties/subscriptionPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: La.properties.subscriptionPlan.type,
							parentSchema: La.properties.subscriptionPlan,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.promoCodeName) {
					var m = t.promoCodeName;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/promoCodeName",
							schemaPath: "#/properties/promoCodeName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: La.properties.promoCodeName.type,
							parentSchema: La.properties.promoCodeName,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.configString) {
					var l = t.configString;
					if ("string" !== typeof l && null !== l) {
						var y = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: La.properties.configString.type
							},
							message: "must be string,null",
							schema: La.properties.configString.type,
							parentSchema: La.properties.configString,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.tabId) {
					var g = t.tabId;
					if (("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) && null !== g) {
						var f = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: La.properties.tabId.type
							},
							message: "must be integer,null",
							schema: La.properties.tabId.type,
							parentSchema: La.properties.tabId,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.app) {
					var v = t.app;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: La.properties.app.type
							},
							message: "must be string,null",
							schema: La.properties.app.type,
							parentSchema: La.properties.app,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.host) {
					var P = t.host;
					if ("string" !== typeof P && null !== P) {
						var S = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: La.properties.host.type
							},
							message: "must be string,null",
							schema: La.properties.host.type,
							parentSchema: La.properties.host,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
			} else {
				var w = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: La.type,
					parentSchema: La,
					data: t
				};
				null === i ? i = [w] : i.push(w), s++
			}
			return e.errors = i, 0 === s
		};
		var La = {
			properties: {
				subscriptionPlan: {
					type: "string"
				},
				promoCodeName: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["subscriptionPlan"],
			$id: "SubscriptionCreated",
			additionalProperties: !1
		};
		t.suspendedCorrection = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: xa.type,
					parentSchema: xa,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var xa = {
			type: "boolean",
			$id: "suspendedCorrection"
		};
		t.suspendedGlobal = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: Ea.type,
					parentSchema: Ea,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ea = {
			type: "boolean",
			$id: "suspendedGlobal"
		};
		t.suspendedRecommendations = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: Na.type,
					parentSchema: Na,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Na = {
			type: "boolean",
			$id: "suspendedRecommendations"
		};
		t.TabOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.url) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "url"
						},
						message: "must have required property 'url'",
						schema: Oa.required,
						parentSchema: Oa,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("url" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Oa,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.url) {
					var h = t.url;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/url",
							schemaPath: "#/properties/url/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Oa.properties.url.type,
							parentSchema: Oa.properties.url,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Oa.properties.configString.type
							},
							message: "must be string,null",
							schema: Oa.properties.configString.type,
							parentSchema: Oa.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Oa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Oa.properties.tabId.type,
							parentSchema: Oa.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Oa.properties.app.type
							},
							message: "must be string,null",
							schema: Oa.properties.app.type,
							parentSchema: Oa.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Oa.properties.host.type
							},
							message: "must be string,null",
							schema: Oa.properties.host.type,
							parentSchema: Oa.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Oa.type,
					parentSchema: Oa,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Oa = {
			properties: {
				url: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["url"],
			$id: "TabOpened",
			additionalProperties: !1
		};
		t.textHighlightsEnabled = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: Da.type,
					parentSchema: Da,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Da = {
			type: "boolean",
			$id: "textHighlightsEnabled"
		};
		t.TextPasted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Ta.required,
						parentSchema: Ta,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Ta.required,
						parentSchema: Ta,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.isValidPaste) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isValidPaste"
						},
						message: "must have required property 'isValidPaste'",
						schema: Ta.required,
						parentSchema: Ta,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.pasteLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "pasteLength"
						},
						message: "must have required property 'pasteLength'",
						schema: Ta.required,
						parentSchema: Ta,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.pastedWordCount) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "pastedWordCount"
						},
						message: "must have required property 'pastedWordCount'",
						schema: Ta.required,
						parentSchema: Ta,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isWebsiteEnabled) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isWebsiteEnabled"
						},
						message: "must have required property 'isWebsiteEnabled'",
						schema: Ta.required,
						parentSchema: Ta,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.draftId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Ta.required,
						parentSchema: Ta,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.contextLength) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Ta.required,
						parentSchema: Ta,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(Ta.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ta,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.platform) {
					var v = t.platform;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ta.properties.platform.type,
							parentSchema: Ta.properties.platform,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var P = t.spanSelectionHash;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ta.properties.spanSelectionHash.type,
							parentSchema: Ta.properties.spanSelectionHash,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.isValidPaste) {
					var w = t.isValidPaste;
					if ("boolean" !== typeof w) {
						var k = {
							instancePath: n + "/isValidPaste",
							schemaPath: "#/properties/isValidPaste/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ta.properties.isValidPaste.type,
							parentSchema: Ta.properties.isValidPaste,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.pasteLength) {
					var _ = t.pasteLength;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/pasteLength",
							schemaPath: "#/properties/pasteLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ta.properties.pasteLength.type,
							parentSchema: Ta.properties.pasteLength,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.pastedWordCount) {
					var q = t.pastedWordCount;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/pastedWordCount",
							schemaPath: "#/properties/pastedWordCount/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ta.properties.pastedWordCount.type,
							parentSchema: Ta.properties.pastedWordCount,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.isWebsiteEnabled) {
					var x = t.isWebsiteEnabled;
					if ("boolean" !== typeof x) {
						var E = {
							instancePath: n + "/isWebsiteEnabled",
							schemaPath: "#/properties/isWebsiteEnabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ta.properties.isWebsiteEnabled.type,
							parentSchema: Ta.properties.isWebsiteEnabled,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var N = t.caretLocation;
					if (!Array.isArray(N)) {
						var O = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Ta.properties.caretLocation.type,
							parentSchema: Ta.properties.caretLocation,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var D = t.isFirstEngagement;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ta.properties.isFirstEngagement.type,
							parentSchema: Ta.properties.isFirstEngagement,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.draftId) {
					var j = t.draftId;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ta.properties.draftId.type,
							parentSchema: Ta.properties.draftId,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var C = t.contextLength;
					if ("number" != typeof C || C % 1 || isNaN(C) || !isFinite(C)) {
						var A = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ta.properties.contextLength.type,
							parentSchema: Ta.properties.contextLength,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var H = t.spanSelectionLength;
					if ("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) {
						var R = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ta.properties.spanSelectionLength.type,
							parentSchema: Ta.properties.spanSelectionLength,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.configString) {
					var M = t.configString;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ta.properties.configString.type
							},
							message: "must be string,null",
							schema: Ta.properties.configString.type,
							parentSchema: Ta.properties.configString,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.tabId) {
					var z = t.tabId;
					if (("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) && null !== z) {
						var U = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ta.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ta.properties.tabId.type,
							parentSchema: Ta.properties.tabId,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.app) {
					var B = t.app;
					if ("string" !== typeof B && null !== B) {
						var W = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ta.properties.app.type
							},
							message: "must be string,null",
							schema: Ta.properties.app.type,
							parentSchema: Ta.properties.app,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.host) {
					var V = t.host;
					if ("string" !== typeof V && null !== V) {
						var G = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ta.properties.host.type
							},
							message: "must be string,null",
							schema: Ta.properties.host.type,
							parentSchema: Ta.properties.host,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
			} else {
				var K = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ta.type,
					parentSchema: Ta,
					data: t
				};
				null === s ? s = [K] : s.push(K), p++
			}
			return e.errors = s, 0 === p
		};
		var Ta = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isValidPaste: {
					type: "boolean"
				},
				pasteLength: {
					type: "integer"
				},
				pastedWordCount: {
					type: "integer"
				},
				isWebsiteEnabled: {
					type: "boolean"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				draftId: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				spanSelectionLength: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "isValidPaste", "pasteLength", "pastedWordCount", "isWebsiteEnabled", "draftId", "contextLength"],
			$id: "TextPasted",
			additionalProperties: !1
		};
		t.traceless = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: ja.type,
					parentSchema: ja,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var ja = {
			type: "boolean",
			$id: "traceless"
		};
		t.TrialActivated = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.startDate) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "startDate"
						},
						message: "must have required property 'startDate'",
						schema: Fa.required,
						parentSchema: Fa,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.previousPlan) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "previousPlan"
						},
						message: "must have required property 'previousPlan'",
						schema: Fa.required,
						parentSchema: Fa,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				if (void 0 === t.endDate) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "endDate"
						},
						message: "must have required property 'endDate'",
						schema: Fa.required,
						parentSchema: Fa,
						data: t
					};
					null === i ? i = [c] : i.push(c), s++
				}
				if (void 0 === t.trialDuration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "trialDuration"
						},
						message: "must have required property 'trialDuration'",
						schema: Fa.required,
						parentSchema: Fa,
						data: t
					};
					null === i ? i = [h] : i.push(h), s++
				}
				for (var u in t)
					if ("startDate" !== u && "previousPlan" !== u && "endDate" !== u && "trialDuration" !== u && "configString" !== u && "tabId" !== u && "app" !== u && "host" !== u) {
						var m = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: u
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Fa,
							data: t
						};
						null === i ? i = [m] : i.push(m), s++
					} if (void 0 !== t.startDate) {
					var d = t.startDate;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/startDate",
							schemaPath: "#/properties/startDate/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Fa.properties.startDate.type,
							parentSchema: Fa.properties.startDate,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.previousPlan) {
					var y = t.previousPlan;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/previousPlan",
							schemaPath: "#/properties/previousPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Fa.properties.previousPlan.type,
							parentSchema: Fa.properties.previousPlan,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.endDate) {
					var f = t.endDate;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/endDate",
							schemaPath: "#/properties/endDate/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Fa.properties.endDate.type,
							parentSchema: Fa.properties.endDate,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.trialDuration) {
					var b = t.trialDuration;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/trialDuration",
							schemaPath: "#/properties/trialDuration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Fa.properties.trialDuration.type,
							parentSchema: Fa.properties.trialDuration,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.configString) {
					var S = t.configString;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Fa.properties.configString.type
							},
							message: "must be string,null",
							schema: Fa.properties.configString.type,
							parentSchema: Fa.properties.configString,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
				if (void 0 !== t.tabId) {
					var k = t.tabId;
					if (("number" != typeof k || k % 1 || isNaN(k) || !isFinite(k)) && null !== k) {
						var _ = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Fa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Fa.properties.tabId.type,
							parentSchema: Fa.properties.tabId,
							data: k
						};
						null === i ? i = [_] : i.push(_), s++
					}
				}
				if (void 0 !== t.app) {
					var I = t.app;
					if ("string" !== typeof I && null !== I) {
						var q = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Fa.properties.app.type
							},
							message: "must be string,null",
							schema: Fa.properties.app.type,
							parentSchema: Fa.properties.app,
							data: I
						};
						null === i ? i = [q] : i.push(q), s++
					}
				}
				if (void 0 !== t.host) {
					var L = t.host;
					if ("string" !== typeof L && null !== L) {
						var x = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Fa.properties.host.type
							},
							message: "must be string,null",
							schema: Fa.properties.host.type,
							parentSchema: Fa.properties.host,
							data: L
						};
						null === i ? i = [x] : i.push(x), s++
					}
				}
			} else {
				var E = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Fa.type,
					parentSchema: Fa,
					data: t
				};
				null === i ? i = [E] : i.push(E), s++
			}
			return e.errors = i, 0 === s
		};
		var Fa = {
			properties: {
				startDate: {
					type: "string"
				},
				previousPlan: {
					type: "string"
				},
				endDate: {
					type: "string"
				},
				trialDuration: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["startDate", "previousPlan", "endDate", "trialDuration"],
			$id: "TrialActivated",
			additionalProperties: !1
		};
		t.trialEndDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: Ca.type,
					parentSchema: Ca,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ca = {
			type: "number",
			$id: "trialEndDate"
		};
		t.trialEnded = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("boolean" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "boolean"
					},
					message: "must be boolean",
					schema: Aa.type,
					parentSchema: Aa,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Aa = {
			type: "boolean",
			$id: "trialEnded"
		};
		t.trialStartDate = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("number" != typeof t || !isFinite(t)) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "number"
					},
					message: "must be number",
					schema: Ha.type,
					parentSchema: Ha,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Ha = {
			type: "number",
			$id: "trialStartDate"
		};
		t.Uninstall = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ra,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ra.properties.configString.type
							},
							message: "must be string,null",
							schema: Ra.properties.configString.type,
							parentSchema: Ra.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ra.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ra.properties.tabId.type,
							parentSchema: Ra.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ra.properties.app.type
							},
							message: "must be string,null",
							schema: Ra.properties.app.type,
							parentSchema: Ra.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ra.properties.host.type
							},
							message: "must be string,null",
							schema: Ra.properties.host.type,
							parentSchema: Ra.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ra.type,
					parentSchema: Ra,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var Ra = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "Uninstall",
			additionalProperties: !1
		};
		t.UnloadTab = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ma,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ma.properties.configString.type
							},
							message: "must be string,null",
							schema: Ma.properties.configString.type,
							parentSchema: Ma.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ma.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ma.properties.tabId.type,
							parentSchema: Ma.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ma.properties.app.type
							},
							message: "must be string,null",
							schema: Ma.properties.app.type,
							parentSchema: Ma.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ma.properties.host.type
							},
							message: "must be string,null",
							schema: Ma.properties.host.type,
							parentSchema: Ma.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ma.type,
					parentSchema: Ma,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var Ma = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "UnloadTab",
			additionalProperties: !1
		};
		t.UsageExamplesActivated = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.spanSelected) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelected"
						},
						message: "must have required property 'spanSelected'",
						schema: $a.required,
						parentSchema: $a,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.platform) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: $a.required,
						parentSchema: $a,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: $a.required,
						parentSchema: $a,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.selectionLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "selectionLength"
						},
						message: "must have required property 'selectionLength'",
						schema: $a.required,
						parentSchema: $a,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.origin) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: $a.required,
						parentSchema: $a,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.contextLength) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: $a.required,
						parentSchema: $a,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.draftId) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: $a.required,
						parentSchema: $a,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				for (var y in t)
					if (!i.call($a.properties, y)) {
						var g = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: y
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: $a,
							data: t
						};
						null === s ? s = [g] : s.push(g), p++
					} if (void 0 !== t.spanSelectionLength) {
					var f = t.spanSelectionLength;
					if ("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) {
						var v = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: $a.properties.spanSelectionLength.type,
							parentSchema: $a.properties.spanSelectionLength,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var b = t.isFirstEngagement;
					if ("boolean" !== typeof b) {
						var P = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: $a.properties.isFirstEngagement.type,
							parentSchema: $a.properties.isFirstEngagement,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.spanSelected) {
					var S = t.spanSelected;
					if ("boolean" !== typeof S) {
						var w = {
							instancePath: n + "/spanSelected",
							schemaPath: "#/properties/spanSelected/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: $a.properties.spanSelected.type,
							parentSchema: $a.properties.spanSelected,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.platform) {
					var k = t.platform;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: $a.properties.platform.type,
							parentSchema: $a.properties.platform,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var I = t.spanSelectionHash;
					if ("string" !== typeof I) {
						var q = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: $a.properties.spanSelectionHash.type,
							parentSchema: $a.properties.spanSelectionHash,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.selectionLength) {
					var L = t.selectionLength;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/selectionLength",
							schemaPath: "#/properties/selectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: $a.properties.selectionLength.type,
							parentSchema: $a.properties.selectionLength,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.origin) {
					var E = t.origin;
					if ("string" !== typeof E) {
						var N = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: $a.properties.origin.type,
							parentSchema: $a.properties.origin,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var O = t.contextLength;
					if ("number" != typeof O || O % 1 || isNaN(O) || !isFinite(O)) {
						var D = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: $a.properties.contextLength.type,
							parentSchema: $a.properties.contextLength,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var T = t.caretLocation;
					if (!Array.isArray(T)) {
						var j = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: $a.properties.caretLocation.type,
							parentSchema: $a.properties.caretLocation,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.draftId) {
					var F = t.draftId;
					if ("string" !== typeof F) {
						var C = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: $a.properties.draftId.type,
							parentSchema: $a.properties.draftId,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.configString) {
					var A = t.configString;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: $a.properties.configString.type
							},
							message: "must be string,null",
							schema: $a.properties.configString.type,
							parentSchema: $a.properties.configString,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
				if (void 0 !== t.tabId) {
					var R = t.tabId;
					if (("number" != typeof R || R % 1 || isNaN(R) || !isFinite(R)) && null !== R) {
						var M = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: $a.properties.tabId.type
							},
							message: "must be integer,null",
							schema: $a.properties.tabId.type,
							parentSchema: $a.properties.tabId,
							data: R
						};
						null === s ? s = [M] : s.push(M), p++
					}
				}
				if (void 0 !== t.app) {
					var $ = t.app;
					if ("string" !== typeof $ && null !== $) {
						var z = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: $a.properties.app.type
							},
							message: "must be string,null",
							schema: $a.properties.app.type,
							parentSchema: $a.properties.app,
							data: $
						};
						null === s ? s = [z] : s.push(z), p++
					}
				}
				if (void 0 !== t.host) {
					var U = t.host;
					if ("string" !== typeof U && null !== U) {
						var B = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: $a.properties.host.type
							},
							message: "must be string,null",
							schema: $a.properties.host.type,
							parentSchema: $a.properties.host,
							data: U
						};
						null === s ? s = [B] : s.push(B), p++
					}
				}
			} else {
				var W = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: $a.type,
					parentSchema: $a,
					data: t
				};
				null === s ? s = [W] : s.push(W), p++
			}
			return e.errors = s, 0 === p
		};
		var $a = {
			properties: {
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				spanSelected: {
					type: "boolean"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				selectionLength: {
					type: "integer"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["spanSelected", "platform", "spanSelectionHash", "selectionLength", "origin", "contextLength", "draftId"],
			$id: "UsageExamplesActivated",
			additionalProperties: !1
		};
		t.UsageExamplesClosed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: za.required,
						parentSchema: za,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: za.required,
						parentSchema: za,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.origin) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "origin"
						},
						message: "must have required property 'origin'",
						schema: za.required,
						parentSchema: za,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.contextLength) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: za.required,
						parentSchema: za,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.duration) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: za.required,
						parentSchema: za,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				for (var d in t)
					if (!i.call(za.properties, d)) {
						var l = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: d
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: za,
							data: t
						};
						null === s ? s = [l] : s.push(l), p++
					} if (void 0 !== t.platform) {
					var y = t.platform;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: za.properties.platform.type,
							parentSchema: za.properties.platform,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var f = t.spanSelectionHash;
					if ("string" !== typeof f) {
						var v = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: za.properties.spanSelectionHash.type,
							parentSchema: za.properties.spanSelectionHash,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var b = t.spanSelectionLength;
					if ("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) {
						var P = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: za.properties.spanSelectionLength.type,
							parentSchema: za.properties.spanSelectionLength,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var S = t.isFirstEngagement;
					if ("boolean" !== typeof S) {
						var w = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: za.properties.isFirstEngagement.type,
							parentSchema: za.properties.isFirstEngagement,
							data: S
						};
						null === s ? s = [w] : s.push(w), p++
					}
				}
				if (void 0 !== t.origin) {
					var k = t.origin;
					if ("string" !== typeof k) {
						var _ = {
							instancePath: n + "/origin",
							schemaPath: "#/properties/origin/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: za.properties.origin.type,
							parentSchema: za.properties.origin,
							data: k
						};
						null === s ? s = [_] : s.push(_), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var I = t.contextLength;
					if ("number" != typeof I || I % 1 || isNaN(I) || !isFinite(I)) {
						var q = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: za.properties.contextLength.type,
							parentSchema: za.properties.contextLength,
							data: I
						};
						null === s ? s = [q] : s.push(q), p++
					}
				}
				if (void 0 !== t.duration) {
					var L = t.duration;
					if ("number" != typeof L || L % 1 || isNaN(L) || !isFinite(L)) {
						var x = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: za.properties.duration.type,
							parentSchema: za.properties.duration,
							data: L
						};
						null === s ? s = [x] : s.push(x), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var E = t.caretLocation;
					if (!Array.isArray(E)) {
						var N = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: za.properties.caretLocation.type,
							parentSchema: za.properties.caretLocation,
							data: E
						};
						null === s ? s = [N] : s.push(N), p++
					}
				}
				if (void 0 !== t.configString) {
					var O = t.configString;
					if ("string" !== typeof O && null !== O) {
						var D = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: za.properties.configString.type
							},
							message: "must be string,null",
							schema: za.properties.configString.type,
							parentSchema: za.properties.configString,
							data: O
						};
						null === s ? s = [D] : s.push(D), p++
					}
				}
				if (void 0 !== t.tabId) {
					var T = t.tabId;
					if (("number" != typeof T || T % 1 || isNaN(T) || !isFinite(T)) && null !== T) {
						var j = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: za.properties.tabId.type
							},
							message: "must be integer,null",
							schema: za.properties.tabId.type,
							parentSchema: za.properties.tabId,
							data: T
						};
						null === s ? s = [j] : s.push(j), p++
					}
				}
				if (void 0 !== t.app) {
					var F = t.app;
					if ("string" !== typeof F && null !== F) {
						var C = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: za.properties.app.type
							},
							message: "must be string,null",
							schema: za.properties.app.type,
							parentSchema: za.properties.app,
							data: F
						};
						null === s ? s = [C] : s.push(C), p++
					}
				}
				if (void 0 !== t.host) {
					var A = t.host;
					if ("string" !== typeof A && null !== A) {
						var H = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: za.properties.host.type
							},
							message: "must be string,null",
							schema: za.properties.host.type,
							parentSchema: za.properties.host,
							data: A
						};
						null === s ? s = [H] : s.push(H), p++
					}
				}
			} else {
				var R = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: za.type,
					parentSchema: za,
					data: t
				};
				null === s ? s = [R] : s.push(R), p++
			}
			return e.errors = s, 0 === p
		};
		var za = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				origin: {
					type: "string"
				},
				contextLength: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "origin", "contextLength", "duration"],
			$id: "UsageExamplesClosed",
			additionalProperties: !1
		};
		t.UsageExamplesError = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Ua.required,
						parentSchema: Ua,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Ua.required,
						parentSchema: Ua,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.contextLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Ua.required,
						parentSchema: Ua,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Ua.required,
						parentSchema: Ua,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(Ua.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ua,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ua.properties.platform.type,
							parentSchema: Ua.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ua.properties.spanSelectionHash.type,
							parentSchema: Ua.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ua.properties.spanSelectionLength.type,
							parentSchema: Ua.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var P = t.contextLength;
					if ("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) {
						var S = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ua.properties.contextLength.type,
							parentSchema: Ua.properties.contextLength,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.draftId) {
					var w = t.draftId;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ua.properties.draftId.type,
							parentSchema: Ua.properties.draftId,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var _ = t.caretLocation;
					if (!Array.isArray(_)) {
						var I = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Ua.properties.caretLocation.type,
							parentSchema: Ua.properties.caretLocation,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var q = t.isFirstEngagement;
					if ("boolean" !== typeof q) {
						var L = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ua.properties.isFirstEngagement.type,
							parentSchema: Ua.properties.isFirstEngagement,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.configString) {
					var x = t.configString;
					if ("string" !== typeof x && null !== x) {
						var E = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ua.properties.configString.type
							},
							message: "must be string,null",
							schema: Ua.properties.configString.type,
							parentSchema: Ua.properties.configString,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.tabId) {
					var N = t.tabId;
					if (("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) && null !== N) {
						var O = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ua.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ua.properties.tabId.type,
							parentSchema: Ua.properties.tabId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.app) {
					var D = t.app;
					if ("string" !== typeof D && null !== D) {
						var T = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ua.properties.app.type
							},
							message: "must be string,null",
							schema: Ua.properties.app.type,
							parentSchema: Ua.properties.app,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.host) {
					var j = t.host;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ua.properties.host.type
							},
							message: "must be string,null",
							schema: Ua.properties.host.type,
							parentSchema: Ua.properties.host,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
			} else {
				var C = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ua.type,
					parentSchema: Ua,
					data: t
				};
				null === s ? s = [C] : s.push(C), p++
			}
			return e.errors = s, 0 === p
		};
		var Ua = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "contextLength", "draftId"],
			$id: "UsageExamplesError",
			additionalProperties: !1
		};
		t.UsageExamplesFetchStarted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.platform) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Ba.required,
						parentSchema: Ba,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Ba.required,
						parentSchema: Ba,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.contextLength) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Ba.required,
						parentSchema: Ba,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.draftId) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Ba.required,
						parentSchema: Ba,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(Ba.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ba,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.platform) {
					var l = t.platform;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ba.properties.platform.type,
							parentSchema: Ba.properties.platform,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var g = t.spanSelectionHash;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ba.properties.spanSelectionHash.type,
							parentSchema: Ba.properties.spanSelectionHash,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var v = t.spanSelectionLength;
					if ("number" != typeof v || v % 1 || isNaN(v) || !isFinite(v)) {
						var b = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ba.properties.spanSelectionLength.type,
							parentSchema: Ba.properties.spanSelectionLength,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.isFirstEngagement) {
					var P = t.isFirstEngagement;
					if ("boolean" !== typeof P) {
						var S = {
							instancePath: n + "/isFirstEngagement",
							schemaPath: "#/properties/isFirstEngagement/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Ba.properties.isFirstEngagement.type,
							parentSchema: Ba.properties.isFirstEngagement,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var w = t.contextLength;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ba.properties.contextLength.type,
							parentSchema: Ba.properties.contextLength,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var _ = t.caretLocation;
					if (!Array.isArray(_)) {
						var I = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Ba.properties.caretLocation.type,
							parentSchema: Ba.properties.caretLocation,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.draftId) {
					var q = t.draftId;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ba.properties.draftId.type,
							parentSchema: Ba.properties.draftId,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.configString) {
					var x = t.configString;
					if ("string" !== typeof x && null !== x) {
						var E = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ba.properties.configString.type
							},
							message: "must be string,null",
							schema: Ba.properties.configString.type,
							parentSchema: Ba.properties.configString,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.tabId) {
					var N = t.tabId;
					if (("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) && null !== N) {
						var O = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ba.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ba.properties.tabId.type,
							parentSchema: Ba.properties.tabId,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.app) {
					var D = t.app;
					if ("string" !== typeof D && null !== D) {
						var T = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ba.properties.app.type
							},
							message: "must be string,null",
							schema: Ba.properties.app.type,
							parentSchema: Ba.properties.app,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.host) {
					var j = t.host;
					if ("string" !== typeof j && null !== j) {
						var F = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ba.properties.host.type
							},
							message: "must be string,null",
							schema: Ba.properties.host.type,
							parentSchema: Ba.properties.host,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
			} else {
				var C = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ba.type,
					parentSchema: Ba,
					data: t
				};
				null === s ? s = [C] : s.push(C), p++
			}
			return e.errors = s, 0 === p
		};
		var Ba = {
			properties: {
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				spanSelectionLength: {
					type: "integer"
				},
				isFirstEngagement: {
					type: "boolean"
				},
				contextLength: {
					type: "integer"
				},
				caretLocation: {
					type: "array"
				},
				draftId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["platform", "spanSelectionHash", "contextLength", "draftId"],
			$id: "UsageExamplesFetchStarted",
			additionalProperties: !1
		};
		t.UsageExamplesOpened = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.numSimilarShown) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numSimilarShown"
						},
						message: "must have required property 'numSimilarShown'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.numMatchingShown) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numMatchingShown"
						},
						message: "must have required property 'numMatchingShown'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.duration) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "duration"
						},
						message: "must have required property 'duration'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.numMatchingHidden) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numMatchingHidden"
						},
						message: "must have required property 'numMatchingHidden'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.platform) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "platform"
						},
						message: "must have required property 'platform'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.spanSelectionHash) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "spanSelectionHash"
						},
						message: "must have required property 'spanSelectionHash'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.isLimitedSuggestions) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isLimitedSuggestions"
						},
						message: "must have required property 'isLimitedSuggestions'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.numSimilarHidden) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "numSimilarHidden"
						},
						message: "must have required property 'numSimilarHidden'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				if (void 0 === t.selectionLength) {
					var g = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "selectionLength"
						},
						message: "must have required property 'selectionLength'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [g] : s.push(g), p++
				}
				if (void 0 === t.contextLength) {
					var f = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "contextLength"
						},
						message: "must have required property 'contextLength'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [f] : s.push(f), p++
				}
				if (void 0 === t.interactionId) {
					var v = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [v] : s.push(v), p++
				}
				if (void 0 === t.draftId) {
					var b = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "draftId"
						},
						message: "must have required property 'draftId'",
						schema: Wa.required,
						parentSchema: Wa,
						data: t
					};
					null === s ? s = [b] : s.push(b), p++
				}
				for (var P in t)
					if (!i.call(Wa.properties, P)) {
						var S = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: P
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Wa,
							data: t
						};
						null === s ? s = [S] : s.push(S), p++
					} if (void 0 !== t.numSimilarShown) {
					var w = t.numSimilarShown;
					if ("number" != typeof w || w % 1 || isNaN(w) || !isFinite(w)) {
						var k = {
							instancePath: n + "/numSimilarShown",
							schemaPath: "#/properties/numSimilarShown/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wa.properties.numSimilarShown.type,
							parentSchema: Wa.properties.numSimilarShown,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.spanSelectionLength) {
					var _ = t.spanSelectionLength;
					if ("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) {
						var I = {
							instancePath: n + "/spanSelectionLength",
							schemaPath: "#/properties/spanSelectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wa.properties.spanSelectionLength.type,
							parentSchema: Wa.properties.spanSelectionLength,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.numMatchingShown) {
					var q = t.numMatchingShown;
					if ("number" != typeof q || q % 1 || isNaN(q) || !isFinite(q)) {
						var L = {
							instancePath: n + "/numMatchingShown",
							schemaPath: "#/properties/numMatchingShown/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wa.properties.numMatchingShown.type,
							parentSchema: Wa.properties.numMatchingShown,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.duration) {
					var x = t.duration;
					if ("number" != typeof x || x % 1 || isNaN(x) || !isFinite(x)) {
						var E = {
							instancePath: n + "/duration",
							schemaPath: "#/properties/duration/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wa.properties.duration.type,
							parentSchema: Wa.properties.duration,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.numMatchingHidden) {
					var N = t.numMatchingHidden;
					if ("number" != typeof N || N % 1 || isNaN(N) || !isFinite(N)) {
						var O = {
							instancePath: n + "/numMatchingHidden",
							schemaPath: "#/properties/numMatchingHidden/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wa.properties.numMatchingHidden.type,
							parentSchema: Wa.properties.numMatchingHidden,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.platform) {
					var D = t.platform;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/platform",
							schemaPath: "#/properties/platform/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wa.properties.platform.type,
							parentSchema: Wa.properties.platform,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.spanSelectionHash) {
					var j = t.spanSelectionHash;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/spanSelectionHash",
							schemaPath: "#/properties/spanSelectionHash/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wa.properties.spanSelectionHash.type,
							parentSchema: Wa.properties.spanSelectionHash,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.isLimitedSuggestions) {
					var C = t.isLimitedSuggestions;
					if ("boolean" !== typeof C) {
						var A = {
							instancePath: n + "/isLimitedSuggestions",
							schemaPath: "#/properties/isLimitedSuggestions/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: Wa.properties.isLimitedSuggestions.type,
							parentSchema: Wa.properties.isLimitedSuggestions,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.numSimilarHidden) {
					var H = t.numSimilarHidden;
					if ("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) {
						var R = {
							instancePath: n + "/numSimilarHidden",
							schemaPath: "#/properties/numSimilarHidden/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wa.properties.numSimilarHidden.type,
							parentSchema: Wa.properties.numSimilarHidden,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.selectionLength) {
					var M = t.selectionLength;
					if ("number" != typeof M || M % 1 || isNaN(M) || !isFinite(M)) {
						var $ = {
							instancePath: n + "/selectionLength",
							schemaPath: "#/properties/selectionLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wa.properties.selectionLength.type,
							parentSchema: Wa.properties.selectionLength,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.contextLength) {
					var z = t.contextLength;
					if ("number" != typeof z || z % 1 || isNaN(z) || !isFinite(z)) {
						var U = {
							instancePath: n + "/contextLength",
							schemaPath: "#/properties/contextLength/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Wa.properties.contextLength.type,
							parentSchema: Wa.properties.contextLength,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.interactionId) {
					var B = t.interactionId;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wa.properties.interactionId.type,
							parentSchema: Wa.properties.interactionId,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.draftId) {
					var V = t.draftId;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/draftId",
							schemaPath: "#/properties/draftId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Wa.properties.draftId.type,
							parentSchema: Wa.properties.draftId,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.caretLocation) {
					var K = t.caretLocation;
					if (!Array.isArray(K)) {
						var Q = {
							instancePath: n + "/caretLocation",
							schemaPath: "#/properties/caretLocation/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Wa.properties.caretLocation.type,
							parentSchema: Wa.properties.caretLocation,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.configString) {
					var Y = t.configString;
					if ("string" !== typeof Y && null !== Y) {
						var J = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Wa.properties.configString.type
							},
							message: "must be string,null",
							schema: Wa.properties.configString.type,
							parentSchema: Wa.properties.configString,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.tabId) {
					var X = t.tabId;
					if (("number" != typeof X || X % 1 || isNaN(X) || !isFinite(X)) && null !== X) {
						var Z = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Wa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Wa.properties.tabId.type,
							parentSchema: Wa.properties.tabId,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.app) {
					var ee = t.app;
					if ("string" !== typeof ee && null !== ee) {
						var te = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Wa.properties.app.type
							},
							message: "must be string,null",
							schema: Wa.properties.app.type,
							parentSchema: Wa.properties.app,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.host) {
					var re = t.host;
					if ("string" !== typeof re && null !== re) {
						var ae = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Wa.properties.host.type
							},
							message: "must be string,null",
							schema: Wa.properties.host.type,
							parentSchema: Wa.properties.host,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
			} else {
				var ne = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Wa.type,
					parentSchema: Wa,
					data: t
				};
				null === s ? s = [ne] : s.push(ne), p++
			}
			return e.errors = s, 0 === p
		};
		var Wa = {
			properties: {
				numSimilarShown: {
					type: "integer"
				},
				spanSelectionLength: {
					type: "integer"
				},
				numMatchingShown: {
					type: "integer"
				},
				duration: {
					type: "integer"
				},
				numMatchingHidden: {
					type: "integer"
				},
				platform: {
					type: "string"
				},
				spanSelectionHash: {
					type: "string"
				},
				isLimitedSuggestions: {
					type: "boolean"
				},
				numSimilarHidden: {
					type: "integer"
				},
				selectionLength: {
					type: "integer"
				},
				contextLength: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				draftId: {
					type: "string"
				},
				caretLocation: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["numSimilarShown", "numMatchingShown", "duration", "numMatchingHidden", "platform", "spanSelectionHash", "isLimitedSuggestions", "numSimilarHidden", "selectionLength", "contextLength", "interactionId", "draftId"],
			$id: "UsageExamplesOpened",
			additionalProperties: !1
		};
		t.userAgent = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Va.type,
					parentSchema: Va,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Va = {
			type: "string",
			$id: "userAgent"
		};
		t.UserCreated = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ga,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ga.properties.configString.type
							},
							message: "must be string,null",
							schema: Ga.properties.configString.type,
							parentSchema: Ga.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ga.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ga.properties.tabId.type,
							parentSchema: Ga.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ga.properties.app.type
							},
							message: "must be string,null",
							schema: Ga.properties.app.type,
							parentSchema: Ga.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ga.properties.host.type
							},
							message: "must be string,null",
							schema: Ga.properties.host.type,
							parentSchema: Ga.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ga.type,
					parentSchema: Ga,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var Ga = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "UserCreated",
			additionalProperties: !1
		};
		t.UserFeedbackBackPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.fromQuestionId) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "fromQuestionId"
						},
						message: "must have required property 'fromQuestionId'",
						schema: Ka.required,
						parentSchema: Ka,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.interactionId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Ka.required,
						parentSchema: Ka,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("fromQuestionId" !== c && "interactionId" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ka,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.fromQuestionId) {
					var u = t.fromQuestionId;
					if ("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) {
						var m = {
							instancePath: n + "/fromQuestionId",
							schemaPath: "#/properties/fromQuestionId/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ka.properties.fromQuestionId.type,
							parentSchema: Ka.properties.fromQuestionId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.interactionId) {
					var d = t.interactionId;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ka.properties.interactionId.type,
							parentSchema: Ka.properties.interactionId,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ka.properties.configString.type
							},
							message: "must be string,null",
							schema: Ka.properties.configString.type,
							parentSchema: Ka.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ka.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ka.properties.tabId.type,
							parentSchema: Ka.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ka.properties.app.type
							},
							message: "must be string,null",
							schema: Ka.properties.app.type,
							parentSchema: Ka.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ka.properties.host.type
							},
							message: "must be string,null",
							schema: Ka.properties.host.type,
							parentSchema: Ka.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ka.type,
					parentSchema: Ka,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var Ka = {
			properties: {
				fromQuestionId: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["fromQuestionId", "interactionId"],
			$id: "UserFeedbackBackPressed",
			additionalProperties: !1
		};
		t.UserFeedbackDateShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: Qa.type,
					parentSchema: Qa,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var Qa = {
			type: "string",
			$id: "UserFeedbackDateShown"
		};
		t.UserFeedbackExited = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.fromQuestionId) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "fromQuestionId"
						},
						message: "must have required property 'fromQuestionId'",
						schema: Ya.required,
						parentSchema: Ya,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.interactionId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Ya.required,
						parentSchema: Ya,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("questionsResponded" !== c && "fromQuestionId" !== c && "interactionId" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ya,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.questionsResponded) {
					var u = t.questionsResponded;
					if (!Array.isArray(u)) {
						var m = {
							instancePath: n + "/questionsResponded",
							schemaPath: "#/properties/questionsResponded/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: Ya.properties.questionsResponded.type,
							parentSchema: Ya.properties.questionsResponded,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.fromQuestionId) {
					var d = t.fromQuestionId;
					if ("number" != typeof d || d % 1 || isNaN(d) || !isFinite(d)) {
						var l = {
							instancePath: n + "/fromQuestionId",
							schemaPath: "#/properties/fromQuestionId/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ya.properties.fromQuestionId.type,
							parentSchema: Ya.properties.fromQuestionId,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.interactionId) {
					var y = t.interactionId;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ya.properties.interactionId.type,
							parentSchema: Ya.properties.interactionId,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.configString) {
					var f = t.configString;
					if ("string" !== typeof f && null !== f) {
						var v = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ya.properties.configString.type
							},
							message: "must be string,null",
							schema: Ya.properties.configString.type,
							parentSchema: Ya.properties.configString,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.tabId) {
					var b = t.tabId;
					if (("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) && null !== b) {
						var P = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ya.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ya.properties.tabId.type,
							parentSchema: Ya.properties.tabId,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.app) {
					var S = t.app;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ya.properties.app.type
							},
							message: "must be string,null",
							schema: Ya.properties.app.type,
							parentSchema: Ya.properties.app,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
				if (void 0 !== t.host) {
					var k = t.host;
					if ("string" !== typeof k && null !== k) {
						var _ = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ya.properties.host.type
							},
							message: "must be string,null",
							schema: Ya.properties.host.type,
							parentSchema: Ya.properties.host,
							data: k
						};
						null === i ? i = [_] : i.push(_), s++
					}
				}
			} else {
				var I = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ya.type,
					parentSchema: Ya,
					data: t
				};
				null === i ? i = [I] : i.push(I), s++
			}
			return e.errors = i, 0 === s
		};
		var Ya = {
			properties: {
				questionsResponded: {
					type: "array"
				},
				fromQuestionId: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["fromQuestionId", "interactionId"],
			$id: "UserFeedbackExited",
			additionalProperties: !1
		};
		t.UserFeedbackNextPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.fromQuestionId) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "fromQuestionId"
						},
						message: "must have required property 'fromQuestionId'",
						schema: Ja.required,
						parentSchema: Ja,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.interactionId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Ja.required,
						parentSchema: Ja,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("fromQuestionId" !== c && "interactionId" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ja,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.fromQuestionId) {
					var u = t.fromQuestionId;
					if ("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) {
						var m = {
							instancePath: n + "/fromQuestionId",
							schemaPath: "#/properties/fromQuestionId/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Ja.properties.fromQuestionId.type,
							parentSchema: Ja.properties.fromQuestionId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.interactionId) {
					var d = t.interactionId;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ja.properties.interactionId.type,
							parentSchema: Ja.properties.interactionId,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ja.properties.configString.type
							},
							message: "must be string,null",
							schema: Ja.properties.configString.type,
							parentSchema: Ja.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ja.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ja.properties.tabId.type,
							parentSchema: Ja.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ja.properties.app.type
							},
							message: "must be string,null",
							schema: Ja.properties.app.type,
							parentSchema: Ja.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ja.properties.host.type
							},
							message: "must be string,null",
							schema: Ja.properties.host.type,
							parentSchema: Ja.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ja.type,
					parentSchema: Ja,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var Ja = {
			properties: {
				fromQuestionId: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["fromQuestionId", "interactionId"],
			$id: "UserFeedbackNextPressed",
			additionalProperties: !1
		};
		t.UserFeedbackQuestionShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.questionId) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "questionId"
						},
						message: "must have required property 'questionId'",
						schema: Xa.required,
						parentSchema: Xa,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.interactionId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Xa.required,
						parentSchema: Xa,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("questionId" !== c && "interactionId" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Xa,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.questionId) {
					var u = t.questionId;
					if ("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) {
						var m = {
							instancePath: n + "/questionId",
							schemaPath: "#/properties/questionId/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: Xa.properties.questionId.type,
							parentSchema: Xa.properties.questionId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.interactionId) {
					var d = t.interactionId;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Xa.properties.interactionId.type,
							parentSchema: Xa.properties.interactionId,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Xa.properties.configString.type
							},
							message: "must be string,null",
							schema: Xa.properties.configString.type,
							parentSchema: Xa.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Xa.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Xa.properties.tabId.type,
							parentSchema: Xa.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Xa.properties.app.type
							},
							message: "must be string,null",
							schema: Xa.properties.app.type,
							parentSchema: Xa.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Xa.properties.host.type
							},
							message: "must be string,null",
							schema: Xa.properties.host.type,
							parentSchema: Xa.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Xa.type,
					parentSchema: Xa,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var Xa = {
			properties: {
				questionId: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["questionId", "interactionId"],
			$id: "UserFeedbackQuestionShown",
			additionalProperties: !1
		};
		t.userFeedbackShown = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.interactionId) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: Za.required,
						parentSchema: Za,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("interactionId" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Za,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.interactionId) {
					var h = t.interactionId;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Za.properties.interactionId.type,
							parentSchema: Za.properties.interactionId,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Za.properties.configString.type
							},
							message: "must be string,null",
							schema: Za.properties.configString.type,
							parentSchema: Za.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Za.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Za.properties.tabId.type,
							parentSchema: Za.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Za.properties.app.type
							},
							message: "must be string,null",
							schema: Za.properties.app.type,
							parentSchema: Za.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Za.properties.host.type
							},
							message: "must be string,null",
							schema: Za.properties.host.type,
							parentSchema: Za.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Za.type,
					parentSchema: Za,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Za = {
			properties: {
				interactionId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["interactionId"],
			$id: "userFeedbackShown",
			additionalProperties: !1
		};
		t.UserFeedbackSubmitted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.fromQuestionId) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "fromQuestionId"
						},
						message: "must have required property 'fromQuestionId'",
						schema: en.required,
						parentSchema: en,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.interactionId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "interactionId"
						},
						message: "must have required property 'interactionId'",
						schema: en.required,
						parentSchema: en,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("questionsResponded" !== c && "fromQuestionId" !== c && "interactionId" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: en,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.questionsResponded) {
					var u = t.questionsResponded;
					if (!Array.isArray(u)) {
						var m = {
							instancePath: n + "/questionsResponded",
							schemaPath: "#/properties/questionsResponded/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: en.properties.questionsResponded.type,
							parentSchema: en.properties.questionsResponded,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.fromQuestionId) {
					var d = t.fromQuestionId;
					if ("number" != typeof d || d % 1 || isNaN(d) || !isFinite(d)) {
						var l = {
							instancePath: n + "/fromQuestionId",
							schemaPath: "#/properties/fromQuestionId/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: en.properties.fromQuestionId.type,
							parentSchema: en.properties.fromQuestionId,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.interactionId) {
					var y = t.interactionId;
					if ("string" !== typeof y) {
						var g = {
							instancePath: n + "/interactionId",
							schemaPath: "#/properties/interactionId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: en.properties.interactionId.type,
							parentSchema: en.properties.interactionId,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.configString) {
					var f = t.configString;
					if ("string" !== typeof f && null !== f) {
						var v = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: en.properties.configString.type
							},
							message: "must be string,null",
							schema: en.properties.configString.type,
							parentSchema: en.properties.configString,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.tabId) {
					var b = t.tabId;
					if (("number" != typeof b || b % 1 || isNaN(b) || !isFinite(b)) && null !== b) {
						var P = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: en.properties.tabId.type
							},
							message: "must be integer,null",
							schema: en.properties.tabId.type,
							parentSchema: en.properties.tabId,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.app) {
					var S = t.app;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: en.properties.app.type
							},
							message: "must be string,null",
							schema: en.properties.app.type,
							parentSchema: en.properties.app,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
				if (void 0 !== t.host) {
					var k = t.host;
					if ("string" !== typeof k && null !== k) {
						var _ = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: en.properties.host.type
							},
							message: "must be string,null",
							schema: en.properties.host.type,
							parentSchema: en.properties.host,
							data: k
						};
						null === i ? i = [_] : i.push(_), s++
					}
				}
			} else {
				var I = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: en.type,
					parentSchema: en,
					data: t
				};
				null === i ? i = [I] : i.push(I), s++
			}
			return e.errors = i, 0 === s
		};
		var en = {
			properties: {
				questionsResponded: {
					type: "array"
				},
				fromQuestionId: {
					type: "integer"
				},
				interactionId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["fromQuestionId", "interactionId"],
			$id: "UserFeedbackSubmitted",
			additionalProperties: !1
		};
		t.UserSwitch = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.isUserPremium) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isUserPremium"
						},
						message: "must have required property 'isUserPremium'",
						schema: tn.required,
						parentSchema: tn,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.oldUserId) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "oldUserId"
						},
						message: "must have required property 'oldUserId'",
						schema: tn.required,
						parentSchema: tn,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				if (void 0 === t.newUserId) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "newUserId"
						},
						message: "must have required property 'newUserId'",
						schema: tn.required,
						parentSchema: tn,
						data: t
					};
					null === i ? i = [c] : i.push(c), s++
				}
				for (var h in t)
					if ("isUserPremium" !== h && "oldUserId" !== h && "newUserId" !== h && "configString" !== h && "tabId" !== h && "app" !== h && "host" !== h) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: tn,
							data: t
						};
						null === i ? i = [u] : i.push(u), s++
					} if (void 0 !== t.isUserPremium) {
					var m = t.isUserPremium;
					if ("boolean" !== typeof m) {
						var d = {
							instancePath: n + "/isUserPremium",
							schemaPath: "#/properties/isUserPremium/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: tn.properties.isUserPremium.type,
							parentSchema: tn.properties.isUserPremium,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.oldUserId) {
					var l = t.oldUserId;
					if ("string" !== typeof l && null !== l) {
						var y = {
							instancePath: n + "/oldUserId",
							schemaPath: "#/properties/oldUserId/type",
							keyword: "type",
							params: {
								type: tn.properties.oldUserId.type
							},
							message: "must be string,null",
							schema: tn.properties.oldUserId.type,
							parentSchema: tn.properties.oldUserId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.newUserId) {
					var g = t.newUserId;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/newUserId",
							schemaPath: "#/properties/newUserId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: tn.properties.newUserId.type,
							parentSchema: tn.properties.newUserId,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.configString) {
					var v = t.configString;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: tn.properties.configString.type
							},
							message: "must be string,null",
							schema: tn.properties.configString.type,
							parentSchema: tn.properties.configString,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.tabId) {
					var P = t.tabId;
					if (("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) && null !== P) {
						var S = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: tn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: tn.properties.tabId.type,
							parentSchema: tn.properties.tabId,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
				if (void 0 !== t.app) {
					var w = t.app;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: tn.properties.app.type
							},
							message: "must be string,null",
							schema: tn.properties.app.type,
							parentSchema: tn.properties.app,
							data: w
						};
						null === i ? i = [k] : i.push(k), s++
					}
				}
				if (void 0 !== t.host) {
					var _ = t.host;
					if ("string" !== typeof _ && null !== _) {
						var I = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: tn.properties.host.type
							},
							message: "must be string,null",
							schema: tn.properties.host.type,
							parentSchema: tn.properties.host,
							data: _
						};
						null === i ? i = [I] : i.push(I), s++
					}
				}
			} else {
				var q = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: tn.type,
					parentSchema: tn,
					data: t
				};
				null === i ? i = [q] : i.push(q), s++
			}
			return e.errors = i, 0 === s
		};
		var tn = {
			properties: {
				isUserPremium: {
					type: "boolean"
				},
				oldUserId: {
					type: ["string", "null"]
				},
				newUserId: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["isUserPremium", "oldUserId", "newUserId"],
			$id: "UserSwitch",
			additionalProperties: !1
		};
		t.utm_campaign = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: rn.type,
					parentSchema: rn,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var rn = {
			type: "string",
			$id: "utm_campaign"
		};
		t.utm_medium = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: an.type,
					parentSchema: an,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var an = {
			type: "string",
			$id: "utm_medium"
		};
		t.utm_source = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: nn.type,
					parentSchema: nn,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var nn = {
			type: "string",
			$id: "utm_source"
		};
		t.utm_term = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if ("string" !== typeof t) {
				var p = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "string"
					},
					message: "must be string",
					schema: sn.type,
					parentSchema: sn,
					data: t
				};
				null === i ? i = [p] : i.push(p), s++
			}
			return e.errors = i, 0 === s
		};
		var sn = {
			type: "string",
			$id: "utm_term"
		};
		t.WebappCancelSubscription = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: pn,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: pn.properties.configString.type
							},
							message: "must be string,null",
							schema: pn.properties.configString.type,
							parentSchema: pn.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: pn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: pn.properties.tabId.type,
							parentSchema: pn.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: pn.properties.app.type
							},
							message: "must be string,null",
							schema: pn.properties.app.type,
							parentSchema: pn.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: pn.properties.host.type
							},
							message: "must be string,null",
							schema: pn.properties.host.type,
							parentSchema: pn.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: pn.type,
					parentSchema: pn,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var pn = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "WebappCancelSubscription",
			additionalProperties: !1
		};
		t.WebappChangePaymentMethodFailed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.reason) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "reason"
						},
						message: "must have required property 'reason'",
						schema: on.required,
						parentSchema: on,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("reason" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: on,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.reason) {
					var h = t.reason;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/reason",
							schemaPath: "#/properties/reason/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: on.properties.reason.type,
							parentSchema: on.properties.reason,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: on.properties.configString.type
							},
							message: "must be string,null",
							schema: on.properties.configString.type,
							parentSchema: on.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: on.properties.tabId.type
							},
							message: "must be integer,null",
							schema: on.properties.tabId.type,
							parentSchema: on.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: on.properties.app.type
							},
							message: "must be string,null",
							schema: on.properties.app.type,
							parentSchema: on.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: on.properties.host.type
							},
							message: "must be string,null",
							schema: on.properties.host.type,
							parentSchema: on.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: on.type,
					parentSchema: on,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var on = {
			properties: {
				reason: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["reason"],
			$id: "WebappChangePaymentMethodFailed",
			additionalProperties: !1
		};
		t.WebappChangePaymentMethodPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: cn,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: cn.properties.configString.type
							},
							message: "must be string,null",
							schema: cn.properties.configString.type,
							parentSchema: cn.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: cn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: cn.properties.tabId.type,
							parentSchema: cn.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: cn.properties.app.type
							},
							message: "must be string,null",
							schema: cn.properties.app.type,
							parentSchema: cn.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: cn.properties.host.type
							},
							message: "must be string,null",
							schema: cn.properties.host.type,
							parentSchema: cn.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: cn.type,
					parentSchema: cn,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var cn = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "WebappChangePaymentMethodPressed",
			additionalProperties: !1
		};
		t.WebappChangePaymentMethodSubmitPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: hn,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: hn.properties.configString.type
							},
							message: "must be string,null",
							schema: hn.properties.configString.type,
							parentSchema: hn.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: hn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: hn.properties.tabId.type,
							parentSchema: hn.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: hn.properties.app.type
							},
							message: "must be string,null",
							schema: hn.properties.app.type,
							parentSchema: hn.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: hn.properties.host.type
							},
							message: "must be string,null",
							schema: hn.properties.host.type,
							parentSchema: hn.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: hn.type,
					parentSchema: hn,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var hn = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "WebappChangePaymentMethodSubmitPressed",
			additionalProperties: !1
		};
		t.WebappChangePaymentMethodSuccess = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: un,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: un.properties.configString.type
							},
							message: "must be string,null",
							schema: un.properties.configString.type,
							parentSchema: un.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: un.properties.tabId.type
							},
							message: "must be integer,null",
							schema: un.properties.tabId.type,
							parentSchema: un.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: un.properties.app.type
							},
							message: "must be string,null",
							schema: un.properties.app.type,
							parentSchema: un.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: un.properties.host.type
							},
							message: "must be string,null",
							schema: un.properties.host.type,
							parentSchema: un.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: un.type,
					parentSchema: un,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var un = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "WebappChangePaymentMethodSuccess",
			additionalProperties: !1
		};
		t.WebappFetchPricesFail = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.error) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "error"
						},
						message: "must have required property 'error'",
						schema: mn.required,
						parentSchema: mn,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("error" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: mn,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.error) {
					var h = t.error;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/error",
							schemaPath: "#/properties/error/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: mn.properties.error.type,
							parentSchema: mn.properties.error,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: mn.properties.configString.type
							},
							message: "must be string,null",
							schema: mn.properties.configString.type,
							parentSchema: mn.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: mn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: mn.properties.tabId.type,
							parentSchema: mn.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: mn.properties.app.type
							},
							message: "must be string,null",
							schema: mn.properties.app.type,
							parentSchema: mn.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: mn.properties.host.type
							},
							message: "must be string,null",
							schema: mn.properties.host.type,
							parentSchema: mn.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: mn.type,
					parentSchema: mn,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var mn = {
			properties: {
				error: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["error"],
			$id: "WebappFetchPricesFail",
			additionalProperties: !1
		};
		t.WebappFetchPricesSuccess = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("prices" !== p && "configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: dn,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.prices) {
					var c = t.prices;
					if (!Array.isArray(c)) {
						var h = {
							instancePath: n + "/prices",
							schemaPath: "#/properties/prices/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: dn.properties.prices.type,
							parentSchema: dn.properties.prices,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.configString) {
					var u = t.configString;
					if ("string" !== typeof u && null !== u) {
						var m = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: dn.properties.configString.type
							},
							message: "must be string,null",
							schema: dn.properties.configString.type,
							parentSchema: dn.properties.configString,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.tabId) {
					var d = t.tabId;
					if (("number" != typeof d || d % 1 || isNaN(d) || !isFinite(d)) && null !== d) {
						var l = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: dn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: dn.properties.tabId.type,
							parentSchema: dn.properties.tabId,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.app) {
					var y = t.app;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: dn.properties.app.type
							},
							message: "must be string,null",
							schema: dn.properties.app.type,
							parentSchema: dn.properties.app,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.host) {
					var f = t.host;
					if ("string" !== typeof f && null !== f) {
						var v = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: dn.properties.host.type
							},
							message: "must be string,null",
							schema: dn.properties.host.type,
							parentSchema: dn.properties.host,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
			} else {
				var b = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: dn.type,
					parentSchema: dn,
					data: t
				};
				null === i ? i = [b] : i.push(b), s++
			}
			return e.errors = i, 0 === s
		};
		var dn = {
			properties: {
				prices: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "WebappFetchPricesSuccess",
			additionalProperties: !1
		};
		t.WebappFreePressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.durationUntilPressedMillis) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "durationUntilPressedMillis"
						},
						message: "must have required property 'durationUntilPressedMillis'",
						schema: ln.required,
						parentSchema: ln,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("durationUntilPressedMillis" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: ln,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.durationUntilPressedMillis) {
					var h = t.durationUntilPressedMillis;
					if ("number" != typeof h || h % 1 || isNaN(h) || !isFinite(h)) {
						var u = {
							instancePath: n + "/durationUntilPressedMillis",
							schemaPath: "#/properties/durationUntilPressedMillis/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: ln.properties.durationUntilPressedMillis.type,
							parentSchema: ln.properties.durationUntilPressedMillis,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: ln.properties.configString.type
							},
							message: "must be string,null",
							schema: ln.properties.configString.type,
							parentSchema: ln.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: ln.properties.tabId.type
							},
							message: "must be integer,null",
							schema: ln.properties.tabId.type,
							parentSchema: ln.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: ln.properties.app.type
							},
							message: "must be string,null",
							schema: ln.properties.app.type,
							parentSchema: ln.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: ln.properties.host.type
							},
							message: "must be string,null",
							schema: ln.properties.host.type,
							parentSchema: ln.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: ln.type,
					parentSchema: ln,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var ln = {
			properties: {
				durationUntilPressedMillis: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["durationUntilPressedMillis"],
			$id: "WebappFreePressed",
			additionalProperties: !1
		};
		t.WebappPageEntered = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.curr_path) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "curr_path"
						},
						message: "must have required property 'curr_path'",
						schema: yn.required,
						parentSchema: yn,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.navAction) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "navAction"
						},
						message: "must have required property 'navAction'",
						schema: yn.required,
						parentSchema: yn,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				for (var h in t)
					if (!i.call(yn.properties, h)) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: yn,
							data: t
						};
						null === s ? s = [u] : s.push(u), p++
					} if (void 0 !== t.curr_path) {
					var m = t.curr_path;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/curr_path",
							schemaPath: "#/properties/curr_path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_path.type,
							parentSchema: yn.properties.curr_path,
							data: m
						};
						null === s ? s = [d] : s.push(d), p++
					}
				}
				if (void 0 !== t.prev_durationMillis) {
					var l = t.prev_durationMillis;
					if ("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) {
						var y = {
							instancePath: n + "/prev_durationMillis",
							schemaPath: "#/properties/prev_durationMillis/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: yn.properties.prev_durationMillis.type,
							parentSchema: yn.properties.prev_durationMillis,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.prev_path) {
					var g = t.prev_path;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/prev_path",
							schemaPath: "#/properties/prev_path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_path.type,
							parentSchema: yn.properties.prev_path,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.navAction) {
					var v = t.navAction;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/navAction",
							schemaPath: "#/properties/navAction/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.navAction.type,
							parentSchema: yn.properties.navAction,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.curr_search) {
					var P = t.curr_search;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/curr_search",
							schemaPath: "#/properties/curr_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search.type,
							parentSchema: yn.properties.curr_search,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.curr_search_src) {
					var w = t.curr_search_src;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/curr_search_src",
							schemaPath: "#/properties/curr_search_src/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_src.type,
							parentSchema: yn.properties.curr_search_src,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.prev_search_src) {
					var _ = t.prev_search_src;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/prev_search_src",
							schemaPath: "#/properties/prev_search_src/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_src.type,
							parentSchema: yn.properties.prev_search_src,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.prev_search_o) {
					var q = t.prev_search_o;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/prev_search_o",
							schemaPath: "#/properties/prev_search_o/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_o.type,
							parentSchema: yn.properties.prev_search_o,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.prev_search) {
					var x = t.prev_search;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/prev_search",
							schemaPath: "#/properties/prev_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search.type,
							parentSchema: yn.properties.prev_search,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.curr_search_pageName) {
					var N = t.curr_search_pageName;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/curr_search_pageName",
							schemaPath: "#/properties/curr_search_pageName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_pageName.type,
							parentSchema: yn.properties.curr_search_pageName,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.curr_search_o) {
					var D = t.curr_search_o;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/curr_search_o",
							schemaPath: "#/properties/curr_search_o/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_o.type,
							parentSchema: yn.properties.curr_search_o,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.curr_search_adSetName) {
					var j = t.curr_search_adSetName;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/curr_search_adSetName",
							schemaPath: "#/properties/curr_search_adSetName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_adSetName.type,
							parentSchema: yn.properties.curr_search_adSetName,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.prev_search_adSetName) {
					var C = t.prev_search_adSetName;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/prev_search_adSetName",
							schemaPath: "#/properties/prev_search_adSetName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_adSetName.type,
							parentSchema: yn.properties.prev_search_adSetName,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.prev_search_uuid) {
					var H = t.prev_search_uuid;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/prev_search_uuid",
							schemaPath: "#/properties/prev_search_uuid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_uuid.type,
							parentSchema: yn.properties.prev_search_uuid,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.curr_search_uuid) {
					var M = t.curr_search_uuid;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/curr_search_uuid",
							schemaPath: "#/properties/curr_search_uuid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_uuid.type,
							parentSchema: yn.properties.curr_search_uuid,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.prev_search_os) {
					var z = t.prev_search_os;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/prev_search_os",
							schemaPath: "#/properties/prev_search_os/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_os.type,
							parentSchema: yn.properties.prev_search_os,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.curr_search_os) {
					var B = t.curr_search_os;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/curr_search_os",
							schemaPath: "#/properties/curr_search_os/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_os.type,
							parentSchema: yn.properties.curr_search_os,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.prev_search_pageName) {
					var V = t.prev_search_pageName;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/prev_search_pageName",
							schemaPath: "#/properties/prev_search_pageName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_pageName.type,
							parentSchema: yn.properties.prev_search_pageName,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.curr_state_from_pathname) {
					var K = t.curr_state_from_pathname;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/curr_state_from_pathname",
							schemaPath: "#/properties/curr_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_pathname.type,
							parentSchema: yn.properties.curr_state_from_pathname,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.curr_state_from_key) {
					var Y = t.curr_state_from_key;
					if ("string" !== typeof Y) {
						var J = {
							instancePath: n + "/curr_state_from_key",
							schemaPath: "#/properties/curr_state_from_key/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_key.type,
							parentSchema: yn.properties.curr_state_from_key,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.curr_state_from_search) {
					var X = t.curr_state_from_search;
					if ("string" !== typeof X) {
						var Z = {
							instancePath: n + "/curr_state_from_search",
							schemaPath: "#/properties/curr_state_from_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_search.type,
							parentSchema: yn.properties.curr_state_from_search,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.prev_state_from_pathname) {
					var ee = t.prev_state_from_pathname;
					if ("string" !== typeof ee) {
						var te = {
							instancePath: n + "/prev_state_from_pathname",
							schemaPath: "#/properties/prev_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_pathname.type,
							parentSchema: yn.properties.prev_state_from_pathname,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.prev_state_from_search) {
					var re = t.prev_state_from_search;
					if ("string" !== typeof re) {
						var ae = {
							instancePath: n + "/prev_state_from_search",
							schemaPath: "#/properties/prev_state_from_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_search.type,
							parentSchema: yn.properties.prev_state_from_search,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.curr_search_action) {
					var ne = t.curr_search_action;
					if ("string" !== typeof ne) {
						var ie = {
							instancePath: n + "/curr_search_action",
							schemaPath: "#/properties/curr_search_action/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_action.type,
							parentSchema: yn.properties.curr_search_action,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.prev_search_action) {
					var se = t.prev_search_action;
					if ("string" !== typeof se) {
						var pe = {
							instancePath: n + "/prev_search_action",
							schemaPath: "#/properties/prev_search_action/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_action.type,
							parentSchema: yn.properties.prev_search_action,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
				if (void 0 !== t.curr_state_from_state_from_pathname) {
					var oe = t.curr_state_from_state_from_pathname;
					if ("string" !== typeof oe) {
						var ce = {
							instancePath: n + "/curr_state_from_state_from_pathname",
							schemaPath: "#/properties/curr_state_from_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_state_from_pathname.type,
							parentSchema: yn.properties.curr_state_from_state_from_pathname,
							data: oe
						};
						null === s ? s = [ce] : s.push(ce), p++
					}
				}
				if (void 0 !== t.curr_state_from_state_from_search) {
					var he = t.curr_state_from_state_from_search;
					if ("string" !== typeof he) {
						var ue = {
							instancePath: n + "/curr_state_from_state_from_search",
							schemaPath: "#/properties/curr_state_from_state_from_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_state_from_search.type,
							parentSchema: yn.properties.curr_state_from_state_from_search,
							data: he
						};
						null === s ? s = [ue] : s.push(ue), p++
					}
				}
				if (void 0 !== t.prev_state_from_key) {
					var me = t.prev_state_from_key;
					if ("string" !== typeof me) {
						var de = {
							instancePath: n + "/prev_state_from_key",
							schemaPath: "#/properties/prev_state_from_key/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_key.type,
							parentSchema: yn.properties.prev_state_from_key,
							data: me
						};
						null === s ? s = [de] : s.push(de), p++
					}
				}
				if (void 0 !== t.prev_state_from_state_from_pathname) {
					var le = t.prev_state_from_state_from_pathname;
					if ("string" !== typeof le) {
						var ye = {
							instancePath: n + "/prev_state_from_state_from_pathname",
							schemaPath: "#/properties/prev_state_from_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_state_from_pathname.type,
							parentSchema: yn.properties.prev_state_from_state_from_pathname,
							data: le
						};
						null === s ? s = [ye] : s.push(ye), p++
					}
				}
				if (void 0 !== t.prev_state_from_state_from_search) {
					var ge = t.prev_state_from_state_from_search;
					if ("string" !== typeof ge) {
						var fe = {
							instancePath: n + "/prev_state_from_state_from_search",
							schemaPath: "#/properties/prev_state_from_state_from_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_state_from_search.type,
							parentSchema: yn.properties.prev_state_from_state_from_search,
							data: ge
						};
						null === s ? s = [fe] : s.push(fe), p++
					}
				}
				if (void 0 !== t.curr_search_paymentPlan) {
					var ve = t.curr_search_paymentPlan;
					if ("string" !== typeof ve) {
						var be = {
							instancePath: n + "/curr_search_paymentPlan",
							schemaPath: "#/properties/curr_search_paymentPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_paymentPlan.type,
							parentSchema: yn.properties.curr_search_paymentPlan,
							data: ve
						};
						null === s ? s = [be] : s.push(be), p++
					}
				}
				if (void 0 !== t.promoId) {
					var Pe = t.promoId;
					if ("string" !== typeof Pe) {
						var Se = {
							instancePath: n + "/promoId",
							schemaPath: "#/properties/promoId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.promoId.type,
							parentSchema: yn.properties.promoId,
							data: Pe
						};
						null === s ? s = [Se] : s.push(Se), p++
					}
				}
				if (void 0 !== t.promoName) {
					var we = t.promoName;
					if ("string" !== typeof we) {
						var ke = {
							instancePath: n + "/promoName",
							schemaPath: "#/properties/promoName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.promoName.type,
							parentSchema: yn.properties.promoName,
							data: we
						};
						null === s ? s = [ke] : s.push(ke), p++
					}
				}
				if (void 0 !== t.curr_search_p) {
					var _e = t.curr_search_p;
					if ("string" !== typeof _e) {
						var Ie = {
							instancePath: n + "/curr_search_p",
							schemaPath: "#/properties/curr_search_p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_p.type,
							parentSchema: yn.properties.curr_search_p,
							data: _e
						};
						null === s ? s = [Ie] : s.push(Ie), p++
					}
				}
				if (void 0 !== t.prev_search_p) {
					var qe = t.prev_search_p;
					if ("string" !== typeof qe) {
						var Le = {
							instancePath: n + "/prev_search_p",
							schemaPath: "#/properties/prev_search_p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_p.type,
							parentSchema: yn.properties.prev_search_p,
							data: qe
						};
						null === s ? s = [Le] : s.push(Le), p++
					}
				}
				if (void 0 !== t.prev_search_utm_term) {
					var xe = t.prev_search_utm_term;
					if ("string" !== typeof xe) {
						var Ee = {
							instancePath: n + "/prev_search_utm_term",
							schemaPath: "#/properties/prev_search_utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_utm_term.type,
							parentSchema: yn.properties.prev_search_utm_term,
							data: xe
						};
						null === s ? s = [Ee] : s.push(Ee), p++
					}
				}
				if (void 0 !== t.curr_search_utm_medium) {
					var Ne = t.curr_search_utm_medium;
					if ("string" !== typeof Ne) {
						var Oe = {
							instancePath: n + "/curr_search_utm_medium",
							schemaPath: "#/properties/curr_search_utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_utm_medium.type,
							parentSchema: yn.properties.curr_search_utm_medium,
							data: Ne
						};
						null === s ? s = [Oe] : s.push(Oe), p++
					}
				}
				if (void 0 !== t.curr_search_gclid) {
					var De = t.curr_search_gclid;
					if ("string" !== typeof De) {
						var Te = {
							instancePath: n + "/curr_search_gclid",
							schemaPath: "#/properties/curr_search_gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_gclid.type,
							parentSchema: yn.properties.curr_search_gclid,
							data: De
						};
						null === s ? s = [Te] : s.push(Te), p++
					}
				}
				if (void 0 !== t.curr_search_utm_term) {
					var je = t.curr_search_utm_term;
					if ("string" !== typeof je) {
						var Fe = {
							instancePath: n + "/curr_search_utm_term",
							schemaPath: "#/properties/curr_search_utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_utm_term.type,
							parentSchema: yn.properties.curr_search_utm_term,
							data: je
						};
						null === s ? s = [Fe] : s.push(Fe), p++
					}
				}
				if (void 0 !== t.prev_search_gclid) {
					var Ce = t.prev_search_gclid;
					if ("string" !== typeof Ce) {
						var Ae = {
							instancePath: n + "/prev_search_gclid",
							schemaPath: "#/properties/prev_search_gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_gclid.type,
							parentSchema: yn.properties.prev_search_gclid,
							data: Ce
						};
						null === s ? s = [Ae] : s.push(Ae), p++
					}
				}
				if (void 0 !== t.curr_search_ad_set_name) {
					var He = t.curr_search_ad_set_name;
					if ("string" !== typeof He) {
						var Re = {
							instancePath: n + "/curr_search_ad_set_name",
							schemaPath: "#/properties/curr_search_ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_ad_set_name.type,
							parentSchema: yn.properties.curr_search_ad_set_name,
							data: He
						};
						null === s ? s = [Re] : s.push(Re), p++
					}
				}
				if (void 0 !== t.prev_search_utm_source) {
					var Me = t.prev_search_utm_source;
					if ("string" !== typeof Me) {
						var $e = {
							instancePath: n + "/prev_search_utm_source",
							schemaPath: "#/properties/prev_search_utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_utm_source.type,
							parentSchema: yn.properties.prev_search_utm_source,
							data: Me
						};
						null === s ? s = [$e] : s.push($e), p++
					}
				}
				if (void 0 !== t.prev_search_utm_campaign) {
					var ze = t.prev_search_utm_campaign;
					if ("string" !== typeof ze) {
						var Ue = {
							instancePath: n + "/prev_search_utm_campaign",
							schemaPath: "#/properties/prev_search_utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_utm_campaign.type,
							parentSchema: yn.properties.prev_search_utm_campaign,
							data: ze
						};
						null === s ? s = [Ue] : s.push(Ue), p++
					}
				}
				if (void 0 !== t.prev_search_utm_medium) {
					var Be = t.prev_search_utm_medium;
					if ("string" !== typeof Be) {
						var We = {
							instancePath: n + "/prev_search_utm_medium",
							schemaPath: "#/properties/prev_search_utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_utm_medium.type,
							parentSchema: yn.properties.prev_search_utm_medium,
							data: Be
						};
						null === s ? s = [We] : s.push(We), p++
					}
				}
				if (void 0 !== t.curr_search_utm_campaign) {
					var Ve = t.curr_search_utm_campaign;
					if ("string" !== typeof Ve) {
						var Ge = {
							instancePath: n + "/curr_search_utm_campaign",
							schemaPath: "#/properties/curr_search_utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_utm_campaign.type,
							parentSchema: yn.properties.curr_search_utm_campaign,
							data: Ve
						};
						null === s ? s = [Ge] : s.push(Ge), p++
					}
				}
				if (void 0 !== t.curr_search_utm_source) {
					var Ke = t.curr_search_utm_source;
					if ("string" !== typeof Ke) {
						var Qe = {
							instancePath: n + "/curr_search_utm_source",
							schemaPath: "#/properties/curr_search_utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_utm_source.type,
							parentSchema: yn.properties.curr_search_utm_source,
							data: Ke
						};
						null === s ? s = [Qe] : s.push(Qe), p++
					}
				}
				if (void 0 !== t.prev_search_ad_set_name) {
					var Ye = t.prev_search_ad_set_name;
					if ("string" !== typeof Ye) {
						var Je = {
							instancePath: n + "/prev_search_ad_set_name",
							schemaPath: "#/properties/prev_search_ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_ad_set_name.type,
							parentSchema: yn.properties.prev_search_ad_set_name,
							data: Ye
						};
						null === s ? s = [Je] : s.push(Je), p++
					}
				}
				if (void 0 !== t.prev_search_paymentPlan) {
					var Xe = t.prev_search_paymentPlan;
					if ("string" !== typeof Xe) {
						var Ze = {
							instancePath: n + "/prev_search_paymentPlan",
							schemaPath: "#/properties/prev_search_paymentPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_paymentPlan.type,
							parentSchema: yn.properties.prev_search_paymentPlan,
							data: Xe
						};
						null === s ? s = [Ze] : s.push(Ze), p++
					}
				}
				if (void 0 !== t.curr_state_from_state_from_key) {
					var et = t.curr_state_from_state_from_key;
					if ("string" !== typeof et) {
						var tt = {
							instancePath: n + "/curr_state_from_state_from_key",
							schemaPath: "#/properties/curr_state_from_state_from_key/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_state_from_key.type,
							parentSchema: yn.properties.curr_state_from_state_from_key,
							data: et
						};
						null === s ? s = [tt] : s.push(tt), p++
					}
				}
				if (void 0 !== t.prev_state_from_state_from_key) {
					var rt = t.prev_state_from_state_from_key;
					if ("string" !== typeof rt) {
						var at = {
							instancePath: n + "/prev_state_from_state_from_key",
							schemaPath: "#/properties/prev_state_from_state_from_key/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_state_from_key.type,
							parentSchema: yn.properties.prev_state_from_state_from_key,
							data: rt
						};
						null === s ? s = [at] : s.push(at), p++
					}
				}
				if (void 0 !== t.curr_state_userSelected) {
					var nt = t.curr_state_userSelected;
					if ("boolean" !== typeof nt) {
						var it = {
							instancePath: n + "/curr_state_userSelected",
							schemaPath: "#/properties/curr_state_userSelected/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: yn.properties.curr_state_userSelected.type,
							parentSchema: yn.properties.curr_state_userSelected,
							data: nt
						};
						null === s ? s = [it] : s.push(it), p++
					}
				}
				if (void 0 !== t.prev_state_userSelected) {
					var st = t.prev_state_userSelected;
					if ("boolean" !== typeof st) {
						var pt = {
							instancePath: n + "/prev_state_userSelected",
							schemaPath: "#/properties/prev_state_userSelected/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: yn.properties.prev_state_userSelected.type,
							parentSchema: yn.properties.prev_state_userSelected,
							data: st
						};
						null === s ? s = [pt] : s.push(pt), p++
					}
				}
				if (void 0 !== t.curr_search___cf_chl_captcha_tk__) {
					var ot = t.curr_search___cf_chl_captcha_tk__;
					if ("string" !== typeof ot) {
						var ct = {
							instancePath: n + "/curr_search___cf_chl_captcha_tk__",
							schemaPath: "#/properties/curr_search___cf_chl_captcha_tk__/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search___cf_chl_captcha_tk__.type,
							parentSchema: yn.properties.curr_search___cf_chl_captcha_tk__,
							data: ot
						};
						null === s ? s = [ct] : s.push(ct), p++
					}
				}
				if (void 0 !== t.prev_search___cf_chl_captcha_tk__) {
					var ht = t.prev_search___cf_chl_captcha_tk__;
					if ("string" !== typeof ht) {
						var ut = {
							instancePath: n + "/prev_search___cf_chl_captcha_tk__",
							schemaPath: "#/properties/prev_search___cf_chl_captcha_tk__/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search___cf_chl_captcha_tk__.type,
							parentSchema: yn.properties.prev_search___cf_chl_captcha_tk__,
							data: ht
						};
						null === s ? s = [ut] : s.push(ut), p++
					}
				}
				if (void 0 !== t.prev_search_next) {
					var mt = t.prev_search_next;
					if ("string" !== typeof mt) {
						var dt = {
							instancePath: n + "/prev_search_next",
							schemaPath: "#/properties/prev_search_next/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_next.type,
							parentSchema: yn.properties.prev_search_next,
							data: mt
						};
						null === s ? s = [dt] : s.push(dt), p++
					}
				}
				if (void 0 !== t.curr_search_next) {
					var lt = t.curr_search_next;
					if ("string" !== typeof lt) {
						var yt = {
							instancePath: n + "/curr_search_next",
							schemaPath: "#/properties/curr_search_next/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_next.type,
							parentSchema: yn.properties.curr_search_next,
							data: lt
						};
						null === s ? s = [yt] : s.push(yt), p++
					}
				}
				if (void 0 !== t.prev_state_from_state_from_state_from_pathname) {
					var gt = t.prev_state_from_state_from_state_from_pathname;
					if ("string" !== typeof gt) {
						var ft = {
							instancePath: n + "/prev_state_from_state_from_state_from_pathname",
							schemaPath: "#/properties/prev_state_from_state_from_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_state_from_state_from_pathname.type,
							parentSchema: yn.properties.prev_state_from_state_from_state_from_pathname,
							data: gt
						};
						null === s ? s = [ft] : s.push(ft), p++
					}
				}
				if (void 0 !== t.curr_state_from_state_from_state_from_pathname) {
					var vt = t.curr_state_from_state_from_state_from_pathname;
					if ("string" !== typeof vt) {
						var bt = {
							instancePath: n + "/curr_state_from_state_from_state_from_pathname",
							schemaPath: "#/properties/curr_state_from_state_from_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_state_from_state_from_pathname.type,
							parentSchema: yn.properties.curr_state_from_state_from_state_from_pathname,
							data: vt
						};
						null === s ? s = [bt] : s.push(bt), p++
					}
				}
				if (void 0 !== t.curr_state_from_state_from_state_from_key) {
					var Pt = t.curr_state_from_state_from_state_from_key;
					if ("string" !== typeof Pt) {
						var St = {
							instancePath: n + "/curr_state_from_state_from_state_from_key",
							schemaPath: "#/properties/curr_state_from_state_from_state_from_key/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_state_from_state_from_key.type,
							parentSchema: yn.properties.curr_state_from_state_from_state_from_key,
							data: Pt
						};
						null === s ? s = [St] : s.push(St), p++
					}
				}
				if (void 0 !== t.curr_state_from_state_from_state_from_state_from_pathname) {
					var wt = t.curr_state_from_state_from_state_from_state_from_pathname;
					if ("string" !== typeof wt) {
						var kt = {
							instancePath: n + "/curr_state_from_state_from_state_from_state_from_pathname",
							schemaPath: "#/properties/curr_state_from_state_from_state_from_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_state_from_state_from_state_from_pathname.type,
							parentSchema: yn.properties.curr_state_from_state_from_state_from_state_from_pathname,
							data: wt
						};
						null === s ? s = [kt] : s.push(kt), p++
					}
				}
				if (void 0 !== t.prev_state_from_state_from_state_from_key) {
					var _t = t.prev_state_from_state_from_state_from_key;
					if ("string" !== typeof _t) {
						var It = {
							instancePath: n + "/prev_state_from_state_from_state_from_key",
							schemaPath: "#/properties/prev_state_from_state_from_state_from_key/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_state_from_state_from_key.type,
							parentSchema: yn.properties.prev_state_from_state_from_state_from_key,
							data: _t
						};
						null === s ? s = [It] : s.push(It), p++
					}
				}
				if (void 0 !== t.prev_state_from_state_from_state_from_state_from_pathname) {
					var qt = t.prev_state_from_state_from_state_from_state_from_pathname;
					if ("string" !== typeof qt) {
						var Lt = {
							instancePath: n + "/prev_state_from_state_from_state_from_state_from_pathname",
							schemaPath: "#/properties/prev_state_from_state_from_state_from_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_state_from_state_from_state_from_pathname.type,
							parentSchema: yn.properties.prev_state_from_state_from_state_from_state_from_pathname,
							data: qt
						};
						null === s ? s = [Lt] : s.push(Lt), p++
					}
				}
				if (void 0 !== t.prev_search_fbclid) {
					var xt = t.prev_search_fbclid;
					if ("string" !== typeof xt) {
						var Et = {
							instancePath: n + "/prev_search_fbclid",
							schemaPath: "#/properties/prev_search_fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_search_fbclid.type,
							parentSchema: yn.properties.prev_search_fbclid,
							data: xt
						};
						null === s ? s = [Et] : s.push(Et), p++
					}
				}
				if (void 0 !== t.curr_search_fbclid) {
					var Nt = t.curr_search_fbclid;
					if ("string" !== typeof Nt) {
						var Ot = {
							instancePath: n + "/curr_search_fbclid",
							schemaPath: "#/properties/curr_search_fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_search_fbclid.type,
							parentSchema: yn.properties.curr_search_fbclid,
							data: Nt
						};
						null === s ? s = [Ot] : s.push(Ot), p++
					}
				}
				if (void 0 !== t.curr_state_from_state_userSelected) {
					var Dt = t.curr_state_from_state_userSelected;
					if ("boolean" !== typeof Dt) {
						var Tt = {
							instancePath: n + "/curr_state_from_state_userSelected",
							schemaPath: "#/properties/curr_state_from_state_userSelected/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: yn.properties.curr_state_from_state_userSelected.type,
							parentSchema: yn.properties.curr_state_from_state_userSelected,
							data: Dt
						};
						null === s ? s = [Tt] : s.push(Tt), p++
					}
				}
				if (void 0 !== t.curr_state_from_state_from_state_from_search) {
					var jt = t.curr_state_from_state_from_state_from_search;
					if ("string" !== typeof jt) {
						var Ft = {
							instancePath: n + "/curr_state_from_state_from_state_from_search",
							schemaPath: "#/properties/curr_state_from_state_from_state_from_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.curr_state_from_state_from_state_from_search.type,
							parentSchema: yn.properties.curr_state_from_state_from_state_from_search,
							data: jt
						};
						null === s ? s = [Ft] : s.push(Ft), p++
					}
				}
				if (void 0 !== t.prev_state_from_state_from_state_from_search) {
					var Ct = t.prev_state_from_state_from_state_from_search;
					if ("string" !== typeof Ct) {
						var At = {
							instancePath: n + "/prev_state_from_state_from_state_from_search",
							schemaPath: "#/properties/prev_state_from_state_from_state_from_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: yn.properties.prev_state_from_state_from_state_from_search.type,
							parentSchema: yn.properties.prev_state_from_state_from_state_from_search,
							data: Ct
						};
						null === s ? s = [At] : s.push(At), p++
					}
				}
				if (void 0 !== t.curr_state_from) {
					var Ht = t.curr_state_from;
					if (!Ht || "object" != typeof Ht || Array.isArray(Ht)) {
						var Rt = {
							instancePath: n + "/curr_state_from",
							schemaPath: "#/properties/curr_state_from/type",
							keyword: "type",
							params: {
								type: "object"
							},
							message: "must be object",
							schema: yn.properties.curr_state_from.type,
							parentSchema: yn.properties.curr_state_from,
							data: Ht
						};
						null === s ? s = [Rt] : s.push(Rt), p++
					}
				}
				if (void 0 !== t.prev_state_from) {
					var Mt = t.prev_state_from;
					if (!Mt || "object" != typeof Mt || Array.isArray(Mt)) {
						var $t = {
							instancePath: n + "/prev_state_from",
							schemaPath: "#/properties/prev_state_from/type",
							keyword: "type",
							params: {
								type: "object"
							},
							message: "must be object",
							schema: yn.properties.prev_state_from.type,
							parentSchema: yn.properties.prev_state_from,
							data: Mt
						};
						null === s ? s = [$t] : s.push($t), p++
					}
				}
				if (void 0 !== t.curr_search_afterAuthRedirect) {
					var zt = t.curr_search_afterAuthRedirect;
					if (!zt || "object" != typeof zt || Array.isArray(zt)) {
						var Ut = {
							instancePath: n + "/curr_search_afterAuthRedirect",
							schemaPath: "#/properties/curr_search_afterAuthRedirect/type",
							keyword: "type",
							params: {
								type: "object"
							},
							message: "must be object",
							schema: yn.properties.curr_search_afterAuthRedirect.type,
							parentSchema: yn.properties.curr_search_afterAuthRedirect,
							data: zt
						};
						null === s ? s = [Ut] : s.push(Ut), p++
					}
				}
				if (void 0 !== t.prev_search_afterAuthRedirect) {
					var Bt = t.prev_search_afterAuthRedirect;
					if (!Bt || "object" != typeof Bt || Array.isArray(Bt)) {
						var Wt = {
							instancePath: n + "/prev_search_afterAuthRedirect",
							schemaPath: "#/properties/prev_search_afterAuthRedirect/type",
							keyword: "type",
							params: {
								type: "object"
							},
							message: "must be object",
							schema: yn.properties.prev_search_afterAuthRedirect.type,
							parentSchema: yn.properties.prev_search_afterAuthRedirect,
							data: Bt
						};
						null === s ? s = [Wt] : s.push(Wt), p++
					}
				}
				if (void 0 !== t.configString) {
					var Vt = t.configString;
					if ("string" !== typeof Vt && null !== Vt) {
						var Gt = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: yn.properties.configString.type
							},
							message: "must be string,null",
							schema: yn.properties.configString.type,
							parentSchema: yn.properties.configString,
							data: Vt
						};
						null === s ? s = [Gt] : s.push(Gt), p++
					}
				}
				if (void 0 !== t.tabId) {
					var Kt = t.tabId;
					if (("number" != typeof Kt || Kt % 1 || isNaN(Kt) || !isFinite(Kt)) && null !== Kt) {
						var Qt = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: yn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: yn.properties.tabId.type,
							parentSchema: yn.properties.tabId,
							data: Kt
						};
						null === s ? s = [Qt] : s.push(Qt), p++
					}
				}
				if (void 0 !== t.app) {
					var Yt = t.app;
					if ("string" !== typeof Yt && null !== Yt) {
						var Jt = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: yn.properties.app.type
							},
							message: "must be string,null",
							schema: yn.properties.app.type,
							parentSchema: yn.properties.app,
							data: Yt
						};
						null === s ? s = [Jt] : s.push(Jt), p++
					}
				}
				if (void 0 !== t.host) {
					var Xt = t.host;
					if ("string" !== typeof Xt && null !== Xt) {
						var Zt = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: yn.properties.host.type
							},
							message: "must be string,null",
							schema: yn.properties.host.type,
							parentSchema: yn.properties.host,
							data: Xt
						};
						null === s ? s = [Zt] : s.push(Zt), p++
					}
				}
			} else {
				var er = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: yn.type,
					parentSchema: yn,
					data: t
				};
				null === s ? s = [er] : s.push(er), p++
			}
			return e.errors = s, 0 === p
		};
		var yn = {
			properties: {
				curr_path: {
					type: "string"
				},
				prev_durationMillis: {
					type: "integer"
				},
				prev_path: {
					type: "string"
				},
				navAction: {
					type: "string"
				},
				curr_search: {
					type: "string"
				},
				curr_search_src: {
					type: "string"
				},
				prev_search_src: {
					type: "string"
				},
				prev_search_o: {
					type: "string"
				},
				prev_search: {
					type: "string"
				},
				curr_search_pageName: {
					type: "string"
				},
				curr_search_o: {
					type: "string"
				},
				curr_search_adSetName: {
					type: "string"
				},
				prev_search_adSetName: {
					type: "string"
				},
				prev_search_uuid: {
					type: "string"
				},
				curr_search_uuid: {
					type: "string"
				},
				prev_search_os: {
					type: "string"
				},
				curr_search_os: {
					type: "string"
				},
				prev_search_pageName: {
					type: "string"
				},
				curr_state_from_pathname: {
					type: "string"
				},
				curr_state_from_key: {
					type: "string"
				},
				curr_state_from_search: {
					type: "string"
				},
				prev_state_from_pathname: {
					type: "string"
				},
				prev_state_from_search: {
					type: "string"
				},
				curr_search_action: {
					type: "string"
				},
				prev_search_action: {
					type: "string"
				},
				curr_state_from_state_from_pathname: {
					type: "string"
				},
				curr_state_from_state_from_search: {
					type: "string"
				},
				prev_state_from_key: {
					type: "string"
				},
				prev_state_from_state_from_pathname: {
					type: "string"
				},
				prev_state_from_state_from_search: {
					type: "string"
				},
				curr_search_paymentPlan: {
					type: "string"
				},
				promoId: {
					type: "string"
				},
				promoName: {
					type: "string"
				},
				curr_search_p: {
					type: "string"
				},
				prev_search_p: {
					type: "string"
				},
				prev_search_utm_term: {
					type: "string"
				},
				curr_search_utm_medium: {
					type: "string"
				},
				curr_search_gclid: {
					type: "string"
				},
				curr_search_utm_term: {
					type: "string"
				},
				prev_search_gclid: {
					type: "string"
				},
				curr_search_ad_set_name: {
					type: "string"
				},
				prev_search_utm_source: {
					type: "string"
				},
				prev_search_utm_campaign: {
					type: "string"
				},
				prev_search_utm_medium: {
					type: "string"
				},
				curr_search_utm_campaign: {
					type: "string"
				},
				curr_search_utm_source: {
					type: "string"
				},
				prev_search_ad_set_name: {
					type: "string"
				},
				prev_search_paymentPlan: {
					type: "string"
				},
				curr_state_from_state_from_key: {
					type: "string"
				},
				prev_state_from_state_from_key: {
					type: "string"
				},
				curr_state_userSelected: {
					type: "boolean"
				},
				prev_state_userSelected: {
					type: "boolean"
				},
				curr_search___cf_chl_captcha_tk__: {
					type: "string"
				},
				prev_search___cf_chl_captcha_tk__: {
					type: "string"
				},
				prev_search_next: {
					type: "string"
				},
				curr_search_next: {
					type: "string"
				},
				prev_state_from_state_from_state_from_pathname: {
					type: "string"
				},
				curr_state_from_state_from_state_from_pathname: {
					type: "string"
				},
				curr_state_from_state_from_state_from_key: {
					type: "string"
				},
				curr_state_from_state_from_state_from_state_from_pathname: {
					type: "string"
				},
				prev_state_from_state_from_state_from_key: {
					type: "string"
				},
				prev_state_from_state_from_state_from_state_from_pathname: {
					type: "string"
				},
				prev_search_fbclid: {
					type: "string"
				},
				curr_search_fbclid: {
					type: "string"
				},
				curr_state_from_state_userSelected: {
					type: "boolean"
				},
				curr_state_from_state_from_state_from_search: {
					type: "string"
				},
				prev_state_from_state_from_state_from_search: {
					type: "string"
				},
				curr_state_from: {
					type: "object"
				},
				prev_state_from: {
					type: "object"
				},
				curr_search_afterAuthRedirect: {
					type: "object"
				},
				prev_search_afterAuthRedirect: {
					type: "object"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["curr_path", "navAction"],
			$id: "WebappPageEntered",
			additionalProperties: !1
		};
		t.WebappPageExited = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.durationMillis) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "durationMillis"
						},
						message: "must have required property 'durationMillis'",
						schema: gn.required,
						parentSchema: gn,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.navAction) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "navAction"
						},
						message: "must have required property 'navAction'",
						schema: gn.required,
						parentSchema: gn,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.search) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "search"
						},
						message: "must have required property 'search'",
						schema: gn.required,
						parentSchema: gn,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.path) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "path"
						},
						message: "must have required property 'path'",
						schema: gn.required,
						parentSchema: gn,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				for (var m in t)
					if (!i.call(gn.properties, m)) {
						var d = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: m
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: gn,
							data: t
						};
						null === s ? s = [d] : s.push(d), p++
					} if (void 0 !== t.search_o) {
					var l = t.search_o;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/search_o",
							schemaPath: "#/properties/search_o/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_o.type,
							parentSchema: gn.properties.search_o,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.durationMillis) {
					var g = t.durationMillis;
					if ("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) {
						var f = {
							instancePath: n + "/durationMillis",
							schemaPath: "#/properties/durationMillis/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: gn.properties.durationMillis.type,
							parentSchema: gn.properties.durationMillis,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.navAction) {
					var v = t.navAction;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/navAction",
							schemaPath: "#/properties/navAction/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.navAction.type,
							parentSchema: gn.properties.navAction,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.search) {
					var P = t.search;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/search",
							schemaPath: "#/properties/search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search.type,
							parentSchema: gn.properties.search,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.search_src) {
					var w = t.search_src;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/search_src",
							schemaPath: "#/properties/search_src/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_src.type,
							parentSchema: gn.properties.search_src,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.path) {
					var _ = t.path;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/path",
							schemaPath: "#/properties/path/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.path.type,
							parentSchema: gn.properties.path,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.search_uuid) {
					var q = t.search_uuid;
					if ("string" !== typeof q) {
						var L = {
							instancePath: n + "/search_uuid",
							schemaPath: "#/properties/search_uuid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_uuid.type,
							parentSchema: gn.properties.search_uuid,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.search_adSetName) {
					var x = t.search_adSetName;
					if ("string" !== typeof x) {
						var E = {
							instancePath: n + "/search_adSetName",
							schemaPath: "#/properties/search_adSetName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_adSetName.type,
							parentSchema: gn.properties.search_adSetName,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.search_pageName) {
					var N = t.search_pageName;
					if ("string" !== typeof N) {
						var O = {
							instancePath: n + "/search_pageName",
							schemaPath: "#/properties/search_pageName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_pageName.type,
							parentSchema: gn.properties.search_pageName,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.search_os) {
					var D = t.search_os;
					if ("string" !== typeof D) {
						var T = {
							instancePath: n + "/search_os",
							schemaPath: "#/properties/search_os/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_os.type,
							parentSchema: gn.properties.search_os,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.state_from_pathname) {
					var j = t.state_from_pathname;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/state_from_pathname",
							schemaPath: "#/properties/state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_pathname.type,
							parentSchema: gn.properties.state_from_pathname,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.state_from_search) {
					var C = t.state_from_search;
					if ("string" !== typeof C) {
						var A = {
							instancePath: n + "/state_from_search",
							schemaPath: "#/properties/state_from_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_search.type,
							parentSchema: gn.properties.state_from_search,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.search_action) {
					var H = t.search_action;
					if ("string" !== typeof H) {
						var R = {
							instancePath: n + "/search_action",
							schemaPath: "#/properties/search_action/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_action.type,
							parentSchema: gn.properties.search_action,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.state_from_key) {
					var M = t.state_from_key;
					if ("string" !== typeof M) {
						var $ = {
							instancePath: n + "/state_from_key",
							schemaPath: "#/properties/state_from_key/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_key.type,
							parentSchema: gn.properties.state_from_key,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.state_from_state_from_pathname) {
					var z = t.state_from_state_from_pathname;
					if ("string" !== typeof z) {
						var U = {
							instancePath: n + "/state_from_state_from_pathname",
							schemaPath: "#/properties/state_from_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_state_from_pathname.type,
							parentSchema: gn.properties.state_from_state_from_pathname,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
				if (void 0 !== t.state_from_state_from_search) {
					var B = t.state_from_state_from_search;
					if ("string" !== typeof B) {
						var W = {
							instancePath: n + "/state_from_state_from_search",
							schemaPath: "#/properties/state_from_state_from_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_state_from_search.type,
							parentSchema: gn.properties.state_from_state_from_search,
							data: B
						};
						null === s ? s = [W] : s.push(W), p++
					}
				}
				if (void 0 !== t.search_paymentPlan) {
					var V = t.search_paymentPlan;
					if ("string" !== typeof V) {
						var G = {
							instancePath: n + "/search_paymentPlan",
							schemaPath: "#/properties/search_paymentPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_paymentPlan.type,
							parentSchema: gn.properties.search_paymentPlan,
							data: V
						};
						null === s ? s = [G] : s.push(G), p++
					}
				}
				if (void 0 !== t.search_p) {
					var K = t.search_p;
					if ("string" !== typeof K) {
						var Q = {
							instancePath: n + "/search_p",
							schemaPath: "#/properties/search_p/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_p.type,
							parentSchema: gn.properties.search_p,
							data: K
						};
						null === s ? s = [Q] : s.push(Q), p++
					}
				}
				if (void 0 !== t.search_gclid) {
					var Y = t.search_gclid;
					if ("string" !== typeof Y) {
						var J = {
							instancePath: n + "/search_gclid",
							schemaPath: "#/properties/search_gclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_gclid.type,
							parentSchema: gn.properties.search_gclid,
							data: Y
						};
						null === s ? s = [J] : s.push(J), p++
					}
				}
				if (void 0 !== t.search_utm_campaign) {
					var X = t.search_utm_campaign;
					if ("string" !== typeof X) {
						var Z = {
							instancePath: n + "/search_utm_campaign",
							schemaPath: "#/properties/search_utm_campaign/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_utm_campaign.type,
							parentSchema: gn.properties.search_utm_campaign,
							data: X
						};
						null === s ? s = [Z] : s.push(Z), p++
					}
				}
				if (void 0 !== t.search_utm_source) {
					var ee = t.search_utm_source;
					if ("string" !== typeof ee) {
						var te = {
							instancePath: n + "/search_utm_source",
							schemaPath: "#/properties/search_utm_source/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_utm_source.type,
							parentSchema: gn.properties.search_utm_source,
							data: ee
						};
						null === s ? s = [te] : s.push(te), p++
					}
				}
				if (void 0 !== t.search_utm_term) {
					var re = t.search_utm_term;
					if ("string" !== typeof re) {
						var ae = {
							instancePath: n + "/search_utm_term",
							schemaPath: "#/properties/search_utm_term/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_utm_term.type,
							parentSchema: gn.properties.search_utm_term,
							data: re
						};
						null === s ? s = [ae] : s.push(ae), p++
					}
				}
				if (void 0 !== t.search_utm_medium) {
					var ne = t.search_utm_medium;
					if ("string" !== typeof ne) {
						var ie = {
							instancePath: n + "/search_utm_medium",
							schemaPath: "#/properties/search_utm_medium/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_utm_medium.type,
							parentSchema: gn.properties.search_utm_medium,
							data: ne
						};
						null === s ? s = [ie] : s.push(ie), p++
					}
				}
				if (void 0 !== t.search_ad_set_name) {
					var se = t.search_ad_set_name;
					if ("string" !== typeof se) {
						var pe = {
							instancePath: n + "/search_ad_set_name",
							schemaPath: "#/properties/search_ad_set_name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_ad_set_name.type,
							parentSchema: gn.properties.search_ad_set_name,
							data: se
						};
						null === s ? s = [pe] : s.push(pe), p++
					}
				}
				if (void 0 !== t.state_from_state_from_key) {
					var oe = t.state_from_state_from_key;
					if ("string" !== typeof oe) {
						var ce = {
							instancePath: n + "/state_from_state_from_key",
							schemaPath: "#/properties/state_from_state_from_key/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_state_from_key.type,
							parentSchema: gn.properties.state_from_state_from_key,
							data: oe
						};
						null === s ? s = [ce] : s.push(ce), p++
					}
				}
				if (void 0 !== t.state_userSelected) {
					var he = t.state_userSelected;
					if ("boolean" !== typeof he) {
						var ue = {
							instancePath: n + "/state_userSelected",
							schemaPath: "#/properties/state_userSelected/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: gn.properties.state_userSelected.type,
							parentSchema: gn.properties.state_userSelected,
							data: he
						};
						null === s ? s = [ue] : s.push(ue), p++
					}
				}
				if (void 0 !== t.search___cf_chl_captcha_tk__) {
					var me = t.search___cf_chl_captcha_tk__;
					if ("string" !== typeof me) {
						var de = {
							instancePath: n + "/search___cf_chl_captcha_tk__",
							schemaPath: "#/properties/search___cf_chl_captcha_tk__/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search___cf_chl_captcha_tk__.type,
							parentSchema: gn.properties.search___cf_chl_captcha_tk__,
							data: me
						};
						null === s ? s = [de] : s.push(de), p++
					}
				}
				if (void 0 !== t.search_next) {
					var le = t.search_next;
					if ("string" !== typeof le) {
						var ye = {
							instancePath: n + "/search_next",
							schemaPath: "#/properties/search_next/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_next.type,
							parentSchema: gn.properties.search_next,
							data: le
						};
						null === s ? s = [ye] : s.push(ye), p++
					}
				}
				if (void 0 !== t.state_from_state_from_state_from_pathname) {
					var ge = t.state_from_state_from_state_from_pathname;
					if ("string" !== typeof ge) {
						var fe = {
							instancePath: n + "/state_from_state_from_state_from_pathname",
							schemaPath: "#/properties/state_from_state_from_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_state_from_state_from_pathname.type,
							parentSchema: gn.properties.state_from_state_from_state_from_pathname,
							data: ge
						};
						null === s ? s = [fe] : s.push(fe), p++
					}
				}
				if (void 0 !== t.state_from_state_userSelected) {
					var ve = t.state_from_state_userSelected;
					if ("boolean" !== typeof ve) {
						var be = {
							instancePath: n + "/state_from_state_userSelected",
							schemaPath: "#/properties/state_from_state_userSelected/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: gn.properties.state_from_state_userSelected.type,
							parentSchema: gn.properties.state_from_state_userSelected,
							data: ve
						};
						null === s ? s = [be] : s.push(be), p++
					}
				}
				if (void 0 !== t.state_from_state_from_state_from_key) {
					var Pe = t.state_from_state_from_state_from_key;
					if ("string" !== typeof Pe) {
						var Se = {
							instancePath: n + "/state_from_state_from_state_from_key",
							schemaPath: "#/properties/state_from_state_from_state_from_key/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_state_from_state_from_key.type,
							parentSchema: gn.properties.state_from_state_from_state_from_key,
							data: Pe
						};
						null === s ? s = [Se] : s.push(Se), p++
					}
				}
				if (void 0 !== t.search_fbclid) {
					var we = t.search_fbclid;
					if ("string" !== typeof we) {
						var ke = {
							instancePath: n + "/search_fbclid",
							schemaPath: "#/properties/search_fbclid/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.search_fbclid.type,
							parentSchema: gn.properties.search_fbclid,
							data: we
						};
						null === s ? s = [ke] : s.push(ke), p++
					}
				}
				if (void 0 !== t.state_from_state_from_state_from_search) {
					var _e = t.state_from_state_from_state_from_search;
					if ("string" !== typeof _e) {
						var Ie = {
							instancePath: n + "/state_from_state_from_state_from_search",
							schemaPath: "#/properties/state_from_state_from_state_from_search/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_state_from_state_from_search.type,
							parentSchema: gn.properties.state_from_state_from_state_from_search,
							data: _e
						};
						null === s ? s = [Ie] : s.push(Ie), p++
					}
				}
				if (void 0 !== t.state_from_state_from_state_from_state_from_pathname) {
					var qe = t.state_from_state_from_state_from_state_from_pathname;
					if ("string" !== typeof qe) {
						var Le = {
							instancePath: n + "/state_from_state_from_state_from_state_from_pathname",
							schemaPath: "#/properties/state_from_state_from_state_from_state_from_pathname/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: gn.properties.state_from_state_from_state_from_state_from_pathname.type,
							parentSchema: gn.properties.state_from_state_from_state_from_state_from_pathname,
							data: qe
						};
						null === s ? s = [Le] : s.push(Le), p++
					}
				}
				if (void 0 !== t.state_from) {
					var xe = t.state_from;
					if (!xe || "object" != typeof xe || Array.isArray(xe)) {
						var Ee = {
							instancePath: n + "/state_from",
							schemaPath: "#/properties/state_from/type",
							keyword: "type",
							params: {
								type: "object"
							},
							message: "must be object",
							schema: gn.properties.state_from.type,
							parentSchema: gn.properties.state_from,
							data: xe
						};
						null === s ? s = [Ee] : s.push(Ee), p++
					}
				}
				if (void 0 !== t.configString) {
					var Ne = t.configString;
					if ("string" !== typeof Ne && null !== Ne) {
						var Oe = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: gn.properties.configString.type
							},
							message: "must be string,null",
							schema: gn.properties.configString.type,
							parentSchema: gn.properties.configString,
							data: Ne
						};
						null === s ? s = [Oe] : s.push(Oe), p++
					}
				}
				if (void 0 !== t.tabId) {
					var De = t.tabId;
					if (("number" != typeof De || De % 1 || isNaN(De) || !isFinite(De)) && null !== De) {
						var Te = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: gn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: gn.properties.tabId.type,
							parentSchema: gn.properties.tabId,
							data: De
						};
						null === s ? s = [Te] : s.push(Te), p++
					}
				}
				if (void 0 !== t.app) {
					var je = t.app;
					if ("string" !== typeof je && null !== je) {
						var Fe = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: gn.properties.app.type
							},
							message: "must be string,null",
							schema: gn.properties.app.type,
							parentSchema: gn.properties.app,
							data: je
						};
						null === s ? s = [Fe] : s.push(Fe), p++
					}
				}
				if (void 0 !== t.host) {
					var Ce = t.host;
					if ("string" !== typeof Ce && null !== Ce) {
						var Ae = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: gn.properties.host.type
							},
							message: "must be string,null",
							schema: gn.properties.host.type,
							parentSchema: gn.properties.host,
							data: Ce
						};
						null === s ? s = [Ae] : s.push(Ae), p++
					}
				}
			} else {
				var He = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: gn.type,
					parentSchema: gn,
					data: t
				};
				null === s ? s = [He] : s.push(He), p++
			}
			return e.errors = s, 0 === p
		};
		var gn = {
			properties: {
				search_o: {
					type: "string"
				},
				durationMillis: {
					type: "integer"
				},
				navAction: {
					type: "string"
				},
				search: {
					type: "string"
				},
				search_src: {
					type: "string"
				},
				path: {
					type: "string"
				},
				search_uuid: {
					type: "string"
				},
				search_adSetName: {
					type: "string"
				},
				search_pageName: {
					type: "string"
				},
				search_os: {
					type: "string"
				},
				state_from_pathname: {
					type: "string"
				},
				state_from_search: {
					type: "string"
				},
				search_action: {
					type: "string"
				},
				state_from_key: {
					type: "string"
				},
				state_from_state_from_pathname: {
					type: "string"
				},
				state_from_state_from_search: {
					type: "string"
				},
				search_paymentPlan: {
					type: "string"
				},
				search_p: {
					type: "string"
				},
				search_gclid: {
					type: "string"
				},
				search_utm_campaign: {
					type: "string"
				},
				search_utm_source: {
					type: "string"
				},
				search_utm_term: {
					type: "string"
				},
				search_utm_medium: {
					type: "string"
				},
				search_ad_set_name: {
					type: "string"
				},
				state_from_state_from_key: {
					type: "string"
				},
				state_userSelected: {
					type: "boolean"
				},
				search___cf_chl_captcha_tk__: {
					type: "string"
				},
				search_next: {
					type: "string"
				},
				state_from_state_from_state_from_pathname: {
					type: "string"
				},
				state_from_state_userSelected: {
					type: "boolean"
				},
				state_from_state_from_state_from_key: {
					type: "string"
				},
				search_fbclid: {
					type: "string"
				},
				state_from_state_from_state_from_search: {
					type: "string"
				},
				state_from_state_from_state_from_state_from_pathname: {
					type: "string"
				},
				state_from: {
					type: "object"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["durationMillis", "navAction", "search", "path"],
			$id: "WebappPageExited",
			additionalProperties: !1
		};
		t.WebappPaymentFail = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: fn,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: fn.properties.configString.type
							},
							message: "must be string,null",
							schema: fn.properties.configString.type,
							parentSchema: fn.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: fn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: fn.properties.tabId.type,
							parentSchema: fn.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: fn.properties.app.type
							},
							message: "must be string,null",
							schema: fn.properties.app.type,
							parentSchema: fn.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: fn.properties.host.type
							},
							message: "must be string,null",
							schema: fn.properties.host.type,
							parentSchema: fn.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: fn.type,
					parentSchema: fn,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var fn = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "WebappPaymentFail",
			additionalProperties: !1
		};
		t.WebappPaymentMethodSubmitPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.fetchStartTime) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "fetchStartTime"
						},
						message: "must have required property 'fetchStartTime'",
						schema: vn.required,
						parentSchema: vn,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("fetchStartTime" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: vn,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.fetchStartTime) {
					var h = t.fetchStartTime;
					if ("number" != typeof h || h % 1 || isNaN(h) || !isFinite(h)) {
						var u = {
							instancePath: n + "/fetchStartTime",
							schemaPath: "#/properties/fetchStartTime/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: vn.properties.fetchStartTime.type,
							parentSchema: vn.properties.fetchStartTime,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: vn.properties.configString.type
							},
							message: "must be string,null",
							schema: vn.properties.configString.type,
							parentSchema: vn.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: vn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: vn.properties.tabId.type,
							parentSchema: vn.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: vn.properties.app.type
							},
							message: "must be string,null",
							schema: vn.properties.app.type,
							parentSchema: vn.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: vn.properties.host.type
							},
							message: "must be string,null",
							schema: vn.properties.host.type,
							parentSchema: vn.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: vn.type,
					parentSchema: vn,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var vn = {
			properties: {
				fetchStartTime: {
					type: "integer"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["fetchStartTime"],
			$id: "WebappPaymentMethodSubmitPressed",
			additionalProperties: !1
		};
		t.WebappPaymentMethodSuccess = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("price" !== p && "configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: bn,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.price) {
					var c = t.price;
					if (!Array.isArray(c)) {
						var h = {
							instancePath: n + "/price",
							schemaPath: "#/properties/price/type",
							keyword: "type",
							params: {
								type: "array"
							},
							message: "must be array",
							schema: bn.properties.price.type,
							parentSchema: bn.properties.price,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.configString) {
					var u = t.configString;
					if ("string" !== typeof u && null !== u) {
						var m = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: bn.properties.configString.type
							},
							message: "must be string,null",
							schema: bn.properties.configString.type,
							parentSchema: bn.properties.configString,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.tabId) {
					var d = t.tabId;
					if (("number" != typeof d || d % 1 || isNaN(d) || !isFinite(d)) && null !== d) {
						var l = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: bn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: bn.properties.tabId.type,
							parentSchema: bn.properties.tabId,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.app) {
					var y = t.app;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: bn.properties.app.type
							},
							message: "must be string,null",
							schema: bn.properties.app.type,
							parentSchema: bn.properties.app,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.host) {
					var f = t.host;
					if ("string" !== typeof f && null !== f) {
						var v = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: bn.properties.host.type
							},
							message: "must be string,null",
							schema: bn.properties.host.type,
							parentSchema: bn.properties.host,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
			} else {
				var b = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: bn.type,
					parentSchema: bn,
					data: t
				};
				null === i ? i = [b] : i.push(b), s++
			}
			return e.errors = i, 0 === s
		};
		var bn = {
			properties: {
				price: {
					type: "array"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "WebappPaymentMethodSuccess",
			additionalProperties: !1
		};
		t.WebappPremiumComparison = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.planType) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "planType"
						},
						message: "must have required property 'planType'",
						schema: Pn.required,
						parentSchema: Pn,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("planType" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Pn,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.planType) {
					var h = t.planType;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/planType",
							schemaPath: "#/properties/planType/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Pn.properties.planType.type,
							parentSchema: Pn.properties.planType,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Pn.properties.configString.type
							},
							message: "must be string,null",
							schema: Pn.properties.configString.type,
							parentSchema: Pn.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Pn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Pn.properties.tabId.type,
							parentSchema: Pn.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Pn.properties.app.type
							},
							message: "must be string,null",
							schema: Pn.properties.app.type,
							parentSchema: Pn.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Pn.properties.host.type
							},
							message: "must be string,null",
							schema: Pn.properties.host.type,
							parentSchema: Pn.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Pn.type,
					parentSchema: Pn,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Pn = {
			properties: {
				planType: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["planType"],
			$id: "WebappPremiumComparison",
			additionalProperties: !1
		};
		t.WebappPremiumForTeamsPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.buttonText) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "buttonText"
						},
						message: "must have required property 'buttonText'",
						schema: Sn.required,
						parentSchema: Sn,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("buttonText" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Sn,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.buttonText) {
					var h = t.buttonText;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/buttonText",
							schemaPath: "#/properties/buttonText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Sn.properties.buttonText.type,
							parentSchema: Sn.properties.buttonText,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Sn.properties.configString.type
							},
							message: "must be string,null",
							schema: Sn.properties.configString.type,
							parentSchema: Sn.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Sn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Sn.properties.tabId.type,
							parentSchema: Sn.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Sn.properties.app.type
							},
							message: "must be string,null",
							schema: Sn.properties.app.type,
							parentSchema: Sn.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Sn.properties.host.type
							},
							message: "must be string,null",
							schema: Sn.properties.host.type,
							parentSchema: Sn.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Sn.type,
					parentSchema: Sn,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Sn = {
			properties: {
				buttonText: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["buttonText"],
			$id: "WebappPremiumForTeamsPressed",
			additionalProperties: !1
		};
		t.WebappPremiumForTeamsSubmitted = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				for (var p in t)
					if ("configString" !== p && "tabId" !== p && "app" !== p && "host" !== p) {
						var o = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: p
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: wn,
							data: t
						};
						null === i ? i = [o] : i.push(o), s++
					} if (void 0 !== t.configString) {
					var c = t.configString;
					if ("string" !== typeof c && null !== c) {
						var h = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: wn.properties.configString.type
							},
							message: "must be string,null",
							schema: wn.properties.configString.type,
							parentSchema: wn.properties.configString,
							data: c
						};
						null === i ? i = [h] : i.push(h), s++
					}
				}
				if (void 0 !== t.tabId) {
					var u = t.tabId;
					if (("number" != typeof u || u % 1 || isNaN(u) || !isFinite(u)) && null !== u) {
						var m = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: wn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: wn.properties.tabId.type,
							parentSchema: wn.properties.tabId,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.app) {
					var d = t.app;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: wn.properties.app.type
							},
							message: "must be string,null",
							schema: wn.properties.app.type,
							parentSchema: wn.properties.app,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.host) {
					var y = t.host;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: wn.properties.host.type
							},
							message: "must be string,null",
							schema: wn.properties.host.type,
							parentSchema: wn.properties.host,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
			} else {
				var f = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: wn.type,
					parentSchema: wn,
					data: t
				};
				null === i ? i = [f] : i.push(f), s++
			}
			return e.errors = i, 0 === s
		};
		var wn = {
			properties: {
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: [],
			$id: "WebappPremiumForTeamsSubmitted",
			additionalProperties: !1
		};
		t.WebappPremiumPlanPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.priceInCents) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "priceInCents"
						},
						message: "must have required property 'priceInCents'",
						schema: kn.required,
						parentSchema: kn,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.paymentPlan) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "paymentPlan"
						},
						message: "must have required property 'paymentPlan'",
						schema: kn.required,
						parentSchema: kn,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				for (var h in t)
					if (!i.call(kn.properties, h)) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: kn,
							data: t
						};
						null === s ? s = [u] : s.push(u), p++
					} if (void 0 !== t.priceInCents) {
					var m = t.priceInCents;
					if ("number" != typeof m || m % 1 || isNaN(m) || !isFinite(m)) {
						var d = {
							instancePath: n + "/priceInCents",
							schemaPath: "#/properties/priceInCents/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: kn.properties.priceInCents.type,
							parentSchema: kn.properties.priceInCents,
							data: m
						};
						null === s ? s = [d] : s.push(d), p++
					}
				}
				if (void 0 !== t.paymentPlan) {
					var l = t.paymentPlan;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/paymentPlan",
							schemaPath: "#/properties/paymentPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: kn.properties.paymentPlan.type,
							parentSchema: kn.properties.paymentPlan,
							data: l
						};
						null === s ? s = [y] : s.push(y), p++
					}
				}
				if (void 0 !== t.discount) {
					var g = t.discount;
					if ("number" != typeof g || g % 1 || isNaN(g) || !isFinite(g)) {
						var f = {
							instancePath: n + "/discount",
							schemaPath: "#/properties/discount/type",
							keyword: "type",
							params: {
								type: "integer"
							},
							message: "must be integer",
							schema: kn.properties.discount.type,
							parentSchema: kn.properties.discount,
							data: g
						};
						null === s ? s = [f] : s.push(f), p++
					}
				}
				if (void 0 !== t.promoCodeId) {
					var v = t.promoCodeId;
					if ("string" !== typeof v) {
						var b = {
							instancePath: n + "/promoCodeId",
							schemaPath: "#/properties/promoCodeId/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: kn.properties.promoCodeId.type,
							parentSchema: kn.properties.promoCodeId,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.promoCodeName) {
					var P = t.promoCodeName;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/promoCodeName",
							schemaPath: "#/properties/promoCodeName/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: kn.properties.promoCodeName.type,
							parentSchema: kn.properties.promoCodeName,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.configString) {
					var w = t.configString;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: kn.properties.configString.type
							},
							message: "must be string,null",
							schema: kn.properties.configString.type,
							parentSchema: kn.properties.configString,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.tabId) {
					var _ = t.tabId;
					if (("number" != typeof _ || _ % 1 || isNaN(_) || !isFinite(_)) && null !== _) {
						var I = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: kn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: kn.properties.tabId.type,
							parentSchema: kn.properties.tabId,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.app) {
					var q = t.app;
					if ("string" !== typeof q && null !== q) {
						var L = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: kn.properties.app.type
							},
							message: "must be string,null",
							schema: kn.properties.app.type,
							parentSchema: kn.properties.app,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.host) {
					var x = t.host;
					if ("string" !== typeof x && null !== x) {
						var E = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: kn.properties.host.type
							},
							message: "must be string,null",
							schema: kn.properties.host.type,
							parentSchema: kn.properties.host,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
			} else {
				var N = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: kn.type,
					parentSchema: kn,
					data: t
				};
				null === s ? s = [N] : s.push(N), p++
			}
			return e.errors = s, 0 === p
		};
		var kn = {
			properties: {
				priceInCents: {
					type: "integer"
				},
				paymentPlan: {
					type: "string"
				},
				discount: {
					type: "integer"
				},
				promoCodeId: {
					type: "string"
				},
				promoCodeName: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["priceInCents", "paymentPlan"],
			$id: "WebappPremiumPlanPressed",
			additionalProperties: !1
		};
		t.WebappPricingPageTrialPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.subscriptionPlan) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "subscriptionPlan"
						},
						message: "must have required property 'subscriptionPlan'",
						schema: _n.required,
						parentSchema: _n,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.isCreditCardRequired) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isCreditCardRequired"
						},
						message: "must have required property 'isCreditCardRequired'",
						schema: _n.required,
						parentSchema: _n,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				if (void 0 === t.buttonText) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "buttonText"
						},
						message: "must have required property 'buttonText'",
						schema: _n.required,
						parentSchema: _n,
						data: t
					};
					null === i ? i = [c] : i.push(c), s++
				}
				for (var h in t)
					if ("subscriptionPlan" !== h && "isCreditCardRequired" !== h && "buttonText" !== h && "configString" !== h && "tabId" !== h && "app" !== h && "host" !== h) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: _n,
							data: t
						};
						null === i ? i = [u] : i.push(u), s++
					} if (void 0 !== t.subscriptionPlan) {
					var m = t.subscriptionPlan;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/subscriptionPlan",
							schemaPath: "#/properties/subscriptionPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _n.properties.subscriptionPlan.type,
							parentSchema: _n.properties.subscriptionPlan,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.isCreditCardRequired) {
					var l = t.isCreditCardRequired;
					if ("boolean" !== typeof l) {
						var y = {
							instancePath: n + "/isCreditCardRequired",
							schemaPath: "#/properties/isCreditCardRequired/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: _n.properties.isCreditCardRequired.type,
							parentSchema: _n.properties.isCreditCardRequired,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.buttonText) {
					var g = t.buttonText;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/buttonText",
							schemaPath: "#/properties/buttonText/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: _n.properties.buttonText.type,
							parentSchema: _n.properties.buttonText,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.configString) {
					var v = t.configString;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: _n.properties.configString.type
							},
							message: "must be string,null",
							schema: _n.properties.configString.type,
							parentSchema: _n.properties.configString,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.tabId) {
					var P = t.tabId;
					if (("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) && null !== P) {
						var S = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: _n.properties.tabId.type
							},
							message: "must be integer,null",
							schema: _n.properties.tabId.type,
							parentSchema: _n.properties.tabId,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
				if (void 0 !== t.app) {
					var w = t.app;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: _n.properties.app.type
							},
							message: "must be string,null",
							schema: _n.properties.app.type,
							parentSchema: _n.properties.app,
							data: w
						};
						null === i ? i = [k] : i.push(k), s++
					}
				}
				if (void 0 !== t.host) {
					var _ = t.host;
					if ("string" !== typeof _ && null !== _) {
						var I = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: _n.properties.host.type
							},
							message: "must be string,null",
							schema: _n.properties.host.type,
							parentSchema: _n.properties.host,
							data: _
						};
						null === i ? i = [I] : i.push(I), s++
					}
				}
			} else {
				var q = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: _n.type,
					parentSchema: _n,
					data: t
				};
				null === i ? i = [q] : i.push(q), s++
			}
			return e.errors = i, 0 === s
		};
		var _n = {
			properties: {
				subscriptionPlan: {
					type: "string"
				},
				isCreditCardRequired: {
					type: "boolean"
				},
				buttonText: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["subscriptionPlan", "isCreditCardRequired", "buttonText"],
			$id: "WebappPricingPageTrialPressed",
			additionalProperties: !1
		};
		t.WebappSigninFailed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.authMethod) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "authMethod"
						},
						message: "must have required property 'authMethod'",
						schema: In.required,
						parentSchema: In,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.signInType) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "signInType"
						},
						message: "must have required property 'signInType'",
						schema: In.required,
						parentSchema: In,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				if (void 0 === t.reason) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "reason"
						},
						message: "must have required property 'reason'",
						schema: In.required,
						parentSchema: In,
						data: t
					};
					null === i ? i = [c] : i.push(c), s++
				}
				for (var h in t)
					if ("authMethod" !== h && "signInType" !== h && "reason" !== h && "configString" !== h && "tabId" !== h && "app" !== h && "host" !== h) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: In,
							data: t
						};
						null === i ? i = [u] : i.push(u), s++
					} if (void 0 !== t.authMethod) {
					var m = t.authMethod;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/authMethod",
							schemaPath: "#/properties/authMethod/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: In.properties.authMethod.type,
							parentSchema: In.properties.authMethod,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.signInType) {
					var l = t.signInType;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/signInType",
							schemaPath: "#/properties/signInType/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: In.properties.signInType.type,
							parentSchema: In.properties.signInType,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.reason) {
					var g = t.reason;
					if ("string" !== typeof g) {
						var f = {
							instancePath: n + "/reason",
							schemaPath: "#/properties/reason/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: In.properties.reason.type,
							parentSchema: In.properties.reason,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.configString) {
					var v = t.configString;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: In.properties.configString.type
							},
							message: "must be string,null",
							schema: In.properties.configString.type,
							parentSchema: In.properties.configString,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.tabId) {
					var P = t.tabId;
					if (("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) && null !== P) {
						var S = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: In.properties.tabId.type
							},
							message: "must be integer,null",
							schema: In.properties.tabId.type,
							parentSchema: In.properties.tabId,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
				if (void 0 !== t.app) {
					var w = t.app;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: In.properties.app.type
							},
							message: "must be string,null",
							schema: In.properties.app.type,
							parentSchema: In.properties.app,
							data: w
						};
						null === i ? i = [k] : i.push(k), s++
					}
				}
				if (void 0 !== t.host) {
					var _ = t.host;
					if ("string" !== typeof _ && null !== _) {
						var I = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: In.properties.host.type
							},
							message: "must be string,null",
							schema: In.properties.host.type,
							parentSchema: In.properties.host,
							data: _
						};
						null === i ? i = [I] : i.push(I), s++
					}
				}
			} else {
				var q = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: In.type,
					parentSchema: In,
					data: t
				};
				null === i ? i = [q] : i.push(q), s++
			}
			return e.errors = i, 0 === s
		};
		var In = {
			properties: {
				authMethod: {
					type: "string"
				},
				signInType: {
					type: "string"
				},
				reason: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["authMethod", "signInType", "reason"],
			$id: "WebappSigninFailed",
			additionalProperties: !1
		};
		t.WebappSigninSuccess = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.authMethod) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "authMethod"
						},
						message: "must have required property 'authMethod'",
						schema: qn.required,
						parentSchema: qn,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.signInType) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "signInType"
						},
						message: "must have required property 'signInType'",
						schema: qn.required,
						parentSchema: qn,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				for (var c in t)
					if ("authMethod" !== c && "signInType" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: qn,
							data: t
						};
						null === i ? i = [h] : i.push(h), s++
					} if (void 0 !== t.authMethod) {
					var u = t.authMethod;
					if ("string" !== typeof u) {
						var m = {
							instancePath: n + "/authMethod",
							schemaPath: "#/properties/authMethod/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: qn.properties.authMethod.type,
							parentSchema: qn.properties.authMethod,
							data: u
						};
						null === i ? i = [m] : i.push(m), s++
					}
				}
				if (void 0 !== t.signInType) {
					var d = t.signInType;
					if ("string" !== typeof d) {
						var l = {
							instancePath: n + "/signInType",
							schemaPath: "#/properties/signInType/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: qn.properties.signInType.type,
							parentSchema: qn.properties.signInType,
							data: d
						};
						null === i ? i = [l] : i.push(l), s++
					}
				}
				if (void 0 !== t.configString) {
					var y = t.configString;
					if ("string" !== typeof y && null !== y) {
						var g = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: qn.properties.configString.type
							},
							message: "must be string,null",
							schema: qn.properties.configString.type,
							parentSchema: qn.properties.configString,
							data: y
						};
						null === i ? i = [g] : i.push(g), s++
					}
				}
				if (void 0 !== t.tabId) {
					var f = t.tabId;
					if (("number" != typeof f || f % 1 || isNaN(f) || !isFinite(f)) && null !== f) {
						var v = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: qn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: qn.properties.tabId.type,
							parentSchema: qn.properties.tabId,
							data: f
						};
						null === i ? i = [v] : i.push(v), s++
					}
				}
				if (void 0 !== t.app) {
					var b = t.app;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: qn.properties.app.type
							},
							message: "must be string,null",
							schema: qn.properties.app.type,
							parentSchema: qn.properties.app,
							data: b
						};
						null === i ? i = [P] : i.push(P), s++
					}
				}
				if (void 0 !== t.host) {
					var S = t.host;
					if ("string" !== typeof S && null !== S) {
						var w = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: qn.properties.host.type
							},
							message: "must be string,null",
							schema: qn.properties.host.type,
							parentSchema: qn.properties.host,
							data: S
						};
						null === i ? i = [w] : i.push(w), s++
					}
				}
			} else {
				var k = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: qn.type,
					parentSchema: qn,
					data: t
				};
				null === i ? i = [k] : i.push(k), s++
			}
			return e.errors = i, 0 === s
		};
		var qn = {
			properties: {
				authMethod: {
					type: "string"
				},
				signInType: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["authMethod", "signInType"],
			$id: "WebappSigninSuccess",
			additionalProperties: !1
		};
		t.WebappSubscriptionPlanPressed = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.subscriptionPlan) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "subscriptionPlan"
						},
						message: "must have required property 'subscriptionPlan'",
						schema: Ln.required,
						parentSchema: Ln,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				for (var o in t)
					if ("subscriptionPlan" !== o && "configString" !== o && "tabId" !== o && "app" !== o && "host" !== o) {
						var c = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: o
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: Ln,
							data: t
						};
						null === i ? i = [c] : i.push(c), s++
					} if (void 0 !== t.subscriptionPlan) {
					var h = t.subscriptionPlan;
					if ("string" !== typeof h) {
						var u = {
							instancePath: n + "/subscriptionPlan",
							schemaPath: "#/properties/subscriptionPlan/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: Ln.properties.subscriptionPlan.type,
							parentSchema: Ln.properties.subscriptionPlan,
							data: h
						};
						null === i ? i = [u] : i.push(u), s++
					}
				}
				if (void 0 !== t.configString) {
					var m = t.configString;
					if ("string" !== typeof m && null !== m) {
						var d = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: Ln.properties.configString.type
							},
							message: "must be string,null",
							schema: Ln.properties.configString.type,
							parentSchema: Ln.properties.configString,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.tabId) {
					var l = t.tabId;
					if (("number" != typeof l || l % 1 || isNaN(l) || !isFinite(l)) && null !== l) {
						var y = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: Ln.properties.tabId.type
							},
							message: "must be integer,null",
							schema: Ln.properties.tabId.type,
							parentSchema: Ln.properties.tabId,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.app) {
					var g = t.app;
					if ("string" !== typeof g && null !== g) {
						var f = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: Ln.properties.app.type
							},
							message: "must be string,null",
							schema: Ln.properties.app.type,
							parentSchema: Ln.properties.app,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.host) {
					var v = t.host;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: Ln.properties.host.type
							},
							message: "must be string,null",
							schema: Ln.properties.host.type,
							parentSchema: Ln.properties.host,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
			} else {
				var P = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: Ln.type,
					parentSchema: Ln,
					data: t
				};
				null === i ? i = [P] : i.push(P), s++
			}
			return e.errors = i, 0 === s
		};
		var Ln = {
			properties: {
				subscriptionPlan: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["subscriptionPlan"],
			$id: "WebappSubscriptionPlanPressed",
			additionalProperties: !1
		};
		t.WelcomePageEntered = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				i = (r.parentData, r.parentDataProperty, r.rootData, null),
				s = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.url) {
					var p = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "url"
						},
						message: "must have required property 'url'",
						schema: xn.required,
						parentSchema: xn,
						data: t
					};
					null === i ? i = [p] : i.push(p), s++
				}
				if (void 0 === t.userConfig) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "userConfig"
						},
						message: "must have required property 'userConfig'",
						schema: xn.required,
						parentSchema: xn,
						data: t
					};
					null === i ? i = [o] : i.push(o), s++
				}
				if (void 0 === t.openedTab) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "openedTab"
						},
						message: "must have required property 'openedTab'",
						schema: xn.required,
						parentSchema: xn,
						data: t
					};
					null === i ? i = [c] : i.push(c), s++
				}
				for (var h in t)
					if ("url" !== h && "userConfig" !== h && "openedTab" !== h && "configString" !== h && "tabId" !== h && "app" !== h && "host" !== h) {
						var u = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: h
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: xn,
							data: t
						};
						null === i ? i = [u] : i.push(u), s++
					} if (void 0 !== t.url) {
					var m = t.url;
					if ("string" !== typeof m) {
						var d = {
							instancePath: n + "/url",
							schemaPath: "#/properties/url/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xn.properties.url.type,
							parentSchema: xn.properties.url,
							data: m
						};
						null === i ? i = [d] : i.push(d), s++
					}
				}
				if (void 0 !== t.userConfig) {
					var l = t.userConfig;
					if ("string" !== typeof l) {
						var y = {
							instancePath: n + "/userConfig",
							schemaPath: "#/properties/userConfig/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: xn.properties.userConfig.type,
							parentSchema: xn.properties.userConfig,
							data: l
						};
						null === i ? i = [y] : i.push(y), s++
					}
				}
				if (void 0 !== t.openedTab) {
					var g = t.openedTab;
					if ("boolean" !== typeof g) {
						var f = {
							instancePath: n + "/openedTab",
							schemaPath: "#/properties/openedTab/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: xn.properties.openedTab.type,
							parentSchema: xn.properties.openedTab,
							data: g
						};
						null === i ? i = [f] : i.push(f), s++
					}
				}
				if (void 0 !== t.configString) {
					var v = t.configString;
					if ("string" !== typeof v && null !== v) {
						var b = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: xn.properties.configString.type
							},
							message: "must be string,null",
							schema: xn.properties.configString.type,
							parentSchema: xn.properties.configString,
							data: v
						};
						null === i ? i = [b] : i.push(b), s++
					}
				}
				if (void 0 !== t.tabId) {
					var P = t.tabId;
					if (("number" != typeof P || P % 1 || isNaN(P) || !isFinite(P)) && null !== P) {
						var S = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: xn.properties.tabId.type
							},
							message: "must be integer,null",
							schema: xn.properties.tabId.type,
							parentSchema: xn.properties.tabId,
							data: P
						};
						null === i ? i = [S] : i.push(S), s++
					}
				}
				if (void 0 !== t.app) {
					var w = t.app;
					if ("string" !== typeof w && null !== w) {
						var k = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: xn.properties.app.type
							},
							message: "must be string,null",
							schema: xn.properties.app.type,
							parentSchema: xn.properties.app,
							data: w
						};
						null === i ? i = [k] : i.push(k), s++
					}
				}
				if (void 0 !== t.host) {
					var _ = t.host;
					if ("string" !== typeof _ && null !== _) {
						var I = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: xn.properties.host.type
							},
							message: "must be string,null",
							schema: xn.properties.host.type,
							parentSchema: xn.properties.host,
							data: _
						};
						null === i ? i = [I] : i.push(I), s++
					}
				}
			} else {
				var q = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: xn.type,
					parentSchema: xn,
					data: t
				};
				null === i ? i = [q] : i.push(q), s++
			}
			return e.errors = i, 0 === s
		};
		var xn = {
			properties: {
				url: {
					type: "string"
				},
				userConfig: {
					type: "string"
				},
				openedTab: {
					type: "boolean"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["url", "userConfig", "openedTab"],
			$id: "WelcomePageEntered",
			additionalProperties: !1
		};
		t.writingMonitor = function e(t) {
			var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				a = r.instancePath,
				n = void 0 === a ? "" : a,
				s = (r.parentData, r.parentDataProperty, r.rootData, null),
				p = 0;
			if (t && "object" == typeof t && !Array.isArray(t)) {
				if (void 0 === t.timeSamplingDelta) {
					var o = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "timeSamplingDelta"
						},
						message: "must have required property 'timeSamplingDelta'",
						schema: En.required,
						parentSchema: En,
						data: t
					};
					null === s ? s = [o] : s.push(o), p++
				}
				if (void 0 === t.className) {
					var c = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "className"
						},
						message: "must have required property 'className'",
						schema: En.required,
						parentSchema: En,
						data: t
					};
					null === s ? s = [c] : s.push(c), p++
				}
				if (void 0 === t.inputType) {
					var h = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "inputType"
						},
						message: "must have required property 'inputType'",
						schema: En.required,
						parentSchema: En,
						data: t
					};
					null === s ? s = [h] : s.push(h), p++
				}
				if (void 0 === t.samplingProportion) {
					var u = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "samplingProportion"
						},
						message: "must have required property 'samplingProportion'",
						schema: En.required,
						parentSchema: En,
						data: t
					};
					null === s ? s = [u] : s.push(u), p++
				}
				if (void 0 === t.appToolbarShown) {
					var m = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "appToolbarShown"
						},
						message: "must have required property 'appToolbarShown'",
						schema: En.required,
						parentSchema: En,
						data: t
					};
					null === s ? s = [m] : s.push(m), p++
				}
				if (void 0 === t.isWebsiteBlacklisted) {
					var d = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isWebsiteBlacklisted"
						},
						message: "must have required property 'isWebsiteBlacklisted'",
						schema: En.required,
						parentSchema: En,
						data: t
					};
					null === s ? s = [d] : s.push(d), p++
				}
				if (void 0 === t.isWebsiteDisabled) {
					var l = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "isWebsiteDisabled"
						},
						message: "must have required property 'isWebsiteDisabled'",
						schema: En.required,
						parentSchema: En,
						data: t
					};
					null === s ? s = [l] : s.push(l), p++
				}
				if (void 0 === t.id) {
					var y = {
						instancePath: n,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "id"
						},
						message: "must have required property 'id'",
						schema: En.required,
						parentSchema: En,
						data: t
					};
					null === s ? s = [y] : s.push(y), p++
				}
				for (var g in t)
					if (!i.call(En.properties, g)) {
						var f = {
							instancePath: n,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: g
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: En,
							data: t
						};
						null === s ? s = [f] : s.push(f), p++
					} if (void 0 !== t.timeSamplingDelta) {
					var v = t.timeSamplingDelta;
					if ("number" != typeof v || !isFinite(v)) {
						var b = {
							instancePath: n + "/timeSamplingDelta",
							schemaPath: "#/properties/timeSamplingDelta/type",
							keyword: "type",
							params: {
								type: "number"
							},
							message: "must be number",
							schema: En.properties.timeSamplingDelta.type,
							parentSchema: En.properties.timeSamplingDelta,
							data: v
						};
						null === s ? s = [b] : s.push(b), p++
					}
				}
				if (void 0 !== t.className) {
					var P = t.className;
					if ("string" !== typeof P) {
						var S = {
							instancePath: n + "/className",
							schemaPath: "#/properties/className/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: En.properties.className.type,
							parentSchema: En.properties.className,
							data: P
						};
						null === s ? s = [S] : s.push(S), p++
					}
				}
				if (void 0 !== t.inputType) {
					var w = t.inputType;
					if ("string" !== typeof w) {
						var k = {
							instancePath: n + "/inputType",
							schemaPath: "#/properties/inputType/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: En.properties.inputType.type,
							parentSchema: En.properties.inputType,
							data: w
						};
						null === s ? s = [k] : s.push(k), p++
					}
				}
				if (void 0 !== t.name) {
					var _ = t.name;
					if ("string" !== typeof _) {
						var I = {
							instancePath: n + "/name",
							schemaPath: "#/properties/name/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: En.properties.name.type,
							parentSchema: En.properties.name,
							data: _
						};
						null === s ? s = [I] : s.push(I), p++
					}
				}
				if (void 0 !== t.samplingProportion) {
					var q = t.samplingProportion;
					if ("number" != typeof q || !isFinite(q)) {
						var L = {
							instancePath: n + "/samplingProportion",
							schemaPath: "#/properties/samplingProportion/type",
							keyword: "type",
							params: {
								type: "number"
							},
							message: "must be number",
							schema: En.properties.samplingProportion.type,
							parentSchema: En.properties.samplingProportion,
							data: q
						};
						null === s ? s = [L] : s.push(L), p++
					}
				}
				if (void 0 !== t.appToolbarShown) {
					var x = t.appToolbarShown;
					if ("boolean" !== typeof x) {
						var E = {
							instancePath: n + "/appToolbarShown",
							schemaPath: "#/properties/appToolbarShown/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: En.properties.appToolbarShown.type,
							parentSchema: En.properties.appToolbarShown,
							data: x
						};
						null === s ? s = [E] : s.push(E), p++
					}
				}
				if (void 0 !== t.isWebsiteBlacklisted) {
					var N = t.isWebsiteBlacklisted;
					if ("boolean" !== typeof N) {
						var O = {
							instancePath: n + "/isWebsiteBlacklisted",
							schemaPath: "#/properties/isWebsiteBlacklisted/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: En.properties.isWebsiteBlacklisted.type,
							parentSchema: En.properties.isWebsiteBlacklisted,
							data: N
						};
						null === s ? s = [O] : s.push(O), p++
					}
				}
				if (void 0 !== t.isWebsiteDisabled) {
					var D = t.isWebsiteDisabled;
					if ("boolean" !== typeof D) {
						var T = {
							instancePath: n + "/isWebsiteDisabled",
							schemaPath: "#/properties/isWebsiteDisabled/type",
							keyword: "type",
							params: {
								type: "boolean"
							},
							message: "must be boolean",
							schema: En.properties.isWebsiteDisabled.type,
							parentSchema: En.properties.isWebsiteDisabled,
							data: D
						};
						null === s ? s = [T] : s.push(T), p++
					}
				}
				if (void 0 !== t.id) {
					var j = t.id;
					if ("string" !== typeof j) {
						var F = {
							instancePath: n + "/id",
							schemaPath: "#/properties/id/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: En.properties.id.type,
							parentSchema: En.properties.id,
							data: j
						};
						null === s ? s = [F] : s.push(F), p++
					}
				}
				if (void 0 !== t.configString) {
					var C = t.configString;
					if ("string" !== typeof C && null !== C) {
						var A = {
							instancePath: n + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: En.properties.configString.type
							},
							message: "must be string,null",
							schema: En.properties.configString.type,
							parentSchema: En.properties.configString,
							data: C
						};
						null === s ? s = [A] : s.push(A), p++
					}
				}
				if (void 0 !== t.tabId) {
					var H = t.tabId;
					if (("number" != typeof H || H % 1 || isNaN(H) || !isFinite(H)) && null !== H) {
						var R = {
							instancePath: n + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: En.properties.tabId.type
							},
							message: "must be integer,null",
							schema: En.properties.tabId.type,
							parentSchema: En.properties.tabId,
							data: H
						};
						null === s ? s = [R] : s.push(R), p++
					}
				}
				if (void 0 !== t.app) {
					var M = t.app;
					if ("string" !== typeof M && null !== M) {
						var $ = {
							instancePath: n + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: En.properties.app.type
							},
							message: "must be string,null",
							schema: En.properties.app.type,
							parentSchema: En.properties.app,
							data: M
						};
						null === s ? s = [$] : s.push($), p++
					}
				}
				if (void 0 !== t.host) {
					var z = t.host;
					if ("string" !== typeof z && null !== z) {
						var U = {
							instancePath: n + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: En.properties.host.type
							},
							message: "must be string,null",
							schema: En.properties.host.type,
							parentSchema: En.properties.host,
							data: z
						};
						null === s ? s = [U] : s.push(U), p++
					}
				}
			} else {
				var B = {
					instancePath: n,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: En.type,
					parentSchema: En,
					data: t
				};
				null === s ? s = [B] : s.push(B), p++
			}
			return e.errors = s, 0 === p
		};
		var En = {
			properties: {
				timeSamplingDelta: {
					type: "number"
				},
				className: {
					type: "string"
				},
				inputType: {
					type: "string"
				},
				name: {
					type: "string"
				},
				samplingProportion: {
					type: "number"
				},
				appToolbarShown: {
					type: "boolean"
				},
				isWebsiteBlacklisted: {
					type: "boolean"
				},
				isWebsiteDisabled: {
					type: "boolean"
				},
				id: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["timeSamplingDelta", "className", "inputType", "samplingProportion", "appToolbarShown", "isWebsiteBlacklisted", "isWebsiteDisabled", "id"],
			$id: "writingMonitor",
			additionalProperties: !1
		}
	}, function(e, t, r) {
		"use strict";
		e.exports = n, e.exports.default = n;
		var a = {
			properties: {
				test: {
					type: "string"
				},
				configString: {
					type: ["string", "null"]
				},
				tabId: {
					type: ["integer", "null"]
				},
				app: {
					type: ["string", "null"]
				},
				host: {
					type: ["string", "null"]
				}
			},
			type: "object",
			required: ["test"],
			$id: "Test",
			additionalProperties: !1
		};

		function n(e) {
			var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				r = t.instancePath,
				i = void 0 === r ? "" : r,
				s = (t.parentData, t.parentDataProperty, t.rootData, null),
				p = 0;
			if (e && "object" == typeof e && !Array.isArray(e)) {
				if (void 0 === e.test) {
					var o = {
						instancePath: i,
						schemaPath: "#/required",
						keyword: "required",
						params: {
							missingProperty: "test"
						},
						message: "must have required property 'test'",
						schema: a.required,
						parentSchema: a,
						data: e
					};
					null === s ? s = [o] : s.push(o), p++
				}
				for (var c in e)
					if ("test" !== c && "configString" !== c && "tabId" !== c && "app" !== c && "host" !== c) {
						var h = {
							instancePath: i,
							schemaPath: "#/additionalProperties",
							keyword: "additionalProperties",
							params: {
								additionalProperty: c
							},
							message: "must NOT have additional properties",
							schema: !1,
							parentSchema: a,
							data: e
						};
						null === s ? s = [h] : s.push(h), p++
					} if (void 0 !== e.test) {
					var u = e.test;
					if ("string" !== typeof u) {
						var m = {
							instancePath: i + "/test",
							schemaPath: "#/properties/test/type",
							keyword: "type",
							params: {
								type: "string"
							},
							message: "must be string",
							schema: a.properties.test.type,
							parentSchema: a.properties.test,
							data: u
						};
						null === s ? s = [m] : s.push(m), p++
					}
				}
				if (void 0 !== e.configString) {
					var d = e.configString;
					if ("string" !== typeof d && null !== d) {
						var l = {
							instancePath: i + "/configString",
							schemaPath: "#/properties/configString/type",
							keyword: "type",
							params: {
								type: a.properties.configString.type
							},
							message: "must be string,null",
							schema: a.properties.configString.type,
							parentSchema: a.properties.configString,
							data: d
						};
						null === s ? s = [l] : s.push(l), p++
					}
				}
				if (void 0 !== e.tabId) {
					var y = e.tabId;
					if (("number" != typeof y || y % 1 || isNaN(y) || !isFinite(y)) && null !== y) {
						var g = {
							instancePath: i + "/tabId",
							schemaPath: "#/properties/tabId/type",
							keyword: "type",
							params: {
								type: a.properties.tabId.type
							},
							message: "must be integer,null",
							schema: a.properties.tabId.type,
							parentSchema: a.properties.tabId,
							data: y
						};
						null === s ? s = [g] : s.push(g), p++
					}
				}
				if (void 0 !== e.app) {
					var f = e.app;
					if ("string" !== typeof f && null !== f) {
						var v = {
							instancePath: i + "/app",
							schemaPath: "#/properties/app/type",
							keyword: "type",
							params: {
								type: a.properties.app.type
							},
							message: "must be string,null",
							schema: a.properties.app.type,
							parentSchema: a.properties.app,
							data: f
						};
						null === s ? s = [v] : s.push(v), p++
					}
				}
				if (void 0 !== e.host) {
					var b = e.host;
					if ("string" !== typeof b && null !== b) {
						var P = {
							instancePath: i + "/host",
							schemaPath: "#/properties/host/type",
							keyword: "type",
							params: {
								type: a.properties.host.type
							},
							message: "must be string,null",
							schema: a.properties.host.type,
							parentSchema: a.properties.host,
							data: b
						};
						null === s ? s = [P] : s.push(P), p++
					}
				}
			} else {
				var S = {
					instancePath: i,
					schemaPath: "#/type",
					keyword: "type",
					params: {
						type: "object"
					},
					message: "must be object",
					schema: a.type,
					parentSchema: a,
					data: e
				};
				null === s ? s = [S] : s.push(S), p++
			}
			return n.errors = s, 0 === p
		}
	}, function(e, t, r) {
		"use strict";

		function a(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
		}

		function n(e, t) {
			for (var r = 0; r < t.length; r++) {
				var a = t[r];
				a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
			}
		}

		function i(e, t, r) {
			return t && n(e.prototype, t), r && n(e, r), e
		}
		var s = r(54),
			p = r.n(s),
			o = r(97),
			c = function() {
				function e() {
					a(this, e), this.schemas = o, this.validator = new p.a
				}
				return i(e, [{
					key: "validate",
					value: function(e, t) {
						var r = this.schemas[e];
						return "function" !== typeof r ? ["No schema for event ".concat(e)] : (r(t), r.errors)
					}
				}]), e
			}();
		r(98), t.a = c
	}, , function(e, t, r) {
		"use strict";
		var a = r(60),
			n = 60103,
			i = 60106;
		t.Fragment = 60107, t.StrictMode = 60108, t.Profiler = 60114;
		var s = 60109,
			p = 60110,
			o = 60112;
		t.Suspense = 60113;
		var c = 60115,
			h = 60116;
		if ("function" === typeof Symbol && Symbol.for) {
			var u = Symbol.for;
			n = u("react.element"), i = u("react.portal"), t.Fragment = u("react.fragment"), t.StrictMode = u("react.strict_mode"), t.Profiler = u("react.profiler"), s = u("react.provider"), p = u("react.context"), o = u("react.forward_ref"), t.Suspense = u("react.suspense"), c = u("react.memo"), h = u("react.lazy")
		}
		var m = "function" === typeof Symbol && Symbol.iterator;

		function d(e) {
			for (var t = "https://reactjs.org/docs/error-decoder.html?invariant=" + e, r = 1; r < arguments.length; r++) t += "&args[]=" + encodeURIComponent(arguments[r]);
			return "Minified React error #" + e + "; visit " + t + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
		}
		var l = {
				isMounted: function() {
					return !1
				},
				enqueueForceUpdate: function() {},
				enqueueReplaceState: function() {},
				enqueueSetState: function() {}
			},
			y = {};

		function g(e, t, r) {
			this.props = e, this.context = t, this.refs = y, this.updater = r || l
		}

		function f() {}

		function v(e, t, r) {
			this.props = e, this.context = t, this.refs = y, this.updater = r || l
		}
		g.prototype.isReactComponent = {}, g.prototype.setState = function(e, t) {
			if ("object" !== typeof e && "function" !== typeof e && null != e) throw Error(d(85));
			this.updater.enqueueSetState(this, e, t, "setState")
		}, g.prototype.forceUpdate = function(e) {
			this.updater.enqueueForceUpdate(this, e, "forceUpdate")
		}, f.prototype = g.prototype;
		var b = v.prototype = new f;
		b.constructor = v, a(b, g.prototype), b.isPureReactComponent = !0;
		var P = {
				current: null
			},
			S = Object.prototype.hasOwnProperty,
			w = {
				key: !0,
				ref: !0,
				__self: !0,
				__source: !0
			};

		function k(e, t, r) {
			var a, i = {},
				s = null,
				p = null;
			if (null != t)
				for (a in void 0 !== t.ref && (p = t.ref), void 0 !== t.key && (s = "" + t.key), t) S.call(t, a) && !w.hasOwnProperty(a) && (i[a] = t[a]);
			var o = arguments.length - 2;
			if (1 === o) i.children = r;
			else if (1 < o) {
				for (var c = Array(o), h = 0; h < o; h++) c[h] = arguments[h + 2];
				i.children = c
			}
			if (e && e.defaultProps)
				for (a in o = e.defaultProps) void 0 === i[a] && (i[a] = o[a]);
			return {
				$$typeof: n,
				type: e,
				key: s,
				ref: p,
				props: i,
				_owner: P.current
			}
		}

		function _(e) {
			return "object" === typeof e && null !== e && e.$$typeof === n
		}
		var I = /\/+/g;

		function q(e, t) {
			return "object" === typeof e && null !== e && null != e.key ? function(e) {
				var t = {
					"=": "=0",
					":": "=2"
				};
				return "$" + e.replace(/[=:]/g, (function(e) {
					return t[e]
				}))
			}("" + e.key) : t.toString(36)
		}

		function L(e, t, r, a, s) {
			var p = typeof e;
			"undefined" !== p && "boolean" !== p || (e = null);
			var o = !1;
			if (null === e) o = !0;
			else switch (p) {
				case "string":
				case "number":
					o = !0;
					break;
				case "object":
					switch (e.$$typeof) {
						case n:
						case i:
							o = !0
					}
			}
			if (o) return s = s(o = e), e = "" === a ? "." + q(o, 0) : a, Array.isArray(s) ? (r = "", null != e && (r = e.replace(I, "$&/") + "/"), L(s, t, r, "", (function(e) {
				return e
			}))) : null != s && (_(s) && (s = function(e, t) {
				return {
					$$typeof: n,
					type: e.type,
					key: t,
					ref: e.ref,
					props: e.props,
					_owner: e._owner
				}
			}(s, r + (!s.key || o && o.key === s.key ? "" : ("" + s.key).replace(I, "$&/") + "/") + e)), t.push(s)), 1;
			if (o = 0, a = "" === a ? "." : a + ":", Array.isArray(e))
				for (var c = 0; c < e.length; c++) {
					var h = a + q(p = e[c], c);
					o += L(p, t, r, h, s)
				} else if ("function" === typeof(h = function(e) {
						return null === e || "object" !== typeof e ? null : "function" === typeof(e = m && e[m] || e["@@iterator"]) ? e : null
					}(e)))
					for (e = h.call(e), c = 0; !(p = e.next()).done;) o += L(p = p.value, t, r, h = a + q(p, c++), s);
				else if ("object" === p) throw t = "" + e, Error(d(31, "[object Object]" === t ? "object with keys {" + Object.keys(e).join(", ") + "}" : t));
			return o
		}

		function x(e, t, r) {
			if (null == e) return e;
			var a = [],
				n = 0;
			return L(e, a, "", "", (function(e) {
				return t.call(r, e, n++)
			})), a
		}

		function E(e) {
			if (-1 === e._status) {
				var t = e._result;
				t = t(), e._status = 0, e._result = t, t.then((function(t) {
					0 === e._status && (t = t.default, e._status = 1, e._result = t)
				}), (function(t) {
					0 === e._status && (e._status = 2, e._result = t)
				}))
			}
			if (1 === e._status) return e._result;
			throw e._result
		}
		var N = {
			current: null
		};

		function O() {
			var e = N.current;
			if (null === e) throw Error(d(321));
			return e
		}
		var D = {
			ReactCurrentDispatcher: N,
			ReactCurrentBatchConfig: {
				transition: 0
			},
			ReactCurrentOwner: P,
			IsSomeRendererActing: {
				current: !1
			},
			assign: a
		};
		t.Children = {
			map: x,
			forEach: function(e, t, r) {
				x(e, (function() {
					t.apply(this, arguments)
				}), r)
			},
			count: function(e) {
				var t = 0;
				return x(e, (function() {
					t++
				})), t
			},
			toArray: function(e) {
				return x(e, (function(e) {
					return e
				})) || []
			},
			only: function(e) {
				if (!_(e)) throw Error(d(143));
				return e
			}
		}, t.Component = g, t.PureComponent = v, t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = D, t.cloneElement = function(e, t, r) {
			if (null === e || void 0 === e) throw Error(d(267, e));
			var i = a({}, e.props),
				s = e.key,
				p = e.ref,
				o = e._owner;
			if (null != t) {
				if (void 0 !== t.ref && (p = t.ref, o = P.current), void 0 !== t.key && (s = "" + t.key), e.type && e.type.defaultProps) var c = e.type.defaultProps;
				for (h in t) S.call(t, h) && !w.hasOwnProperty(h) && (i[h] = void 0 === t[h] && void 0 !== c ? c[h] : t[h])
			}
			var h = arguments.length - 2;
			if (1 === h) i.children = r;
			else if (1 < h) {
				c = Array(h);
				for (var u = 0; u < h; u++) c[u] = arguments[u + 2];
				i.children = c
			}
			return {
				$$typeof: n,
				type: e.type,
				key: s,
				ref: p,
				props: i,
				_owner: o
			}
		}, t.createContext = function(e, t) {
			return void 0 === t && (t = null), (e = {
				$$typeof: p,
				_calculateChangedBits: t,
				_currentValue: e,
				_currentValue2: e,
				_threadCount: 0,
				Provider: null,
				Consumer: null
			}).Provider = {
				$$typeof: s,
				_context: e
			}, e.Consumer = e
		}, t.createElement = k, t.createFactory = function(e) {
			var t = k.bind(null, e);
			return t.type = e, t
		}, t.createRef = function() {
			return {
				current: null
			}
		}, t.forwardRef = function(e) {
			return {
				$$typeof: o,
				render: e
			}
		}, t.isValidElement = _, t.lazy = function(e) {
			return {
				$$typeof: h,
				_payload: {
					_status: -1,
					_result: e
				},
				_init: E
			}
		}, t.memo = function(e, t) {
			return {
				$$typeof: c,
				type: e,
				compare: void 0 === t ? null : t
			}
		}, t.useCallback = function(e, t) {
			return O().useCallback(e, t)
		}, t.useContext = function(e, t) {
			return O().useContext(e, t)
		}, t.useDebugValue = function() {}, t.useEffect = function(e, t) {
			return O().useEffect(e, t)
		}, t.useImperativeHandle = function(e, t, r) {
			return O().useImperativeHandle(e, t, r)
		}, t.useLayoutEffect = function(e, t) {
			return O().useLayoutEffect(e, t)
		}, t.useMemo = function(e, t) {
			return O().useMemo(e, t)
		}, t.useReducer = function(e, t, r) {
			return O().useReducer(e, t, r)
		}, t.useRef = function(e) {
			return O().useRef(e)
		}, t.useState = function(e) {
			return O().useState(e)
		}, t.version = "17.0.1"
	}, function(e, t, r) {
		"use strict";
		var a = r(0),
			n = r(60),
			i = r(103);

		function s(e) {
			for (var t = "https://reactjs.org/docs/error-decoder.html?invariant=" + e, r = 1; r < arguments.length; r++) t += "&args[]=" + encodeURIComponent(arguments[r]);
			return "Minified React error #" + e + "; visit " + t + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
		}
		if (!a) throw Error(s(227));
		var p = new Set,
			o = {};

		function c(e, t) {
			h(e, t), h(e + "Capture", t)
		}

		function h(e, t) {
			for (o[e] = t, e = 0; e < t.length; e++) p.add(t[e])
		}
		var u = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
			m = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
			d = Object.prototype.hasOwnProperty,
			l = {},
			y = {};

		function g(e, t, r, a, n, i, s) {
			this.acceptsBooleans = 2 === t || 3 === t || 4 === t, this.attributeName = a, this.attributeNamespace = n, this.mustUseProperty = r, this.propertyName = e, this.type = t, this.sanitizeURL = i, this.removeEmptyString = s
		}
		var f = {};
		"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e) {
			f[e] = new g(e, 0, !1, e, null, !1, !1)
		})), [
			["acceptCharset", "accept-charset"],
			["className", "class"],
			["htmlFor", "for"],
			["httpEquiv", "http-equiv"]
		].forEach((function(e) {
			var t = e[0];
			f[t] = new g(t, 1, !1, e[1], null, !1, !1)
		})), ["contentEditable", "draggable", "spellCheck", "value"].forEach((function(e) {
			f[e] = new g(e, 2, !1, e.toLowerCase(), null, !1, !1)
		})), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach((function(e) {
			f[e] = new g(e, 2, !1, e, null, !1, !1)
		})), "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e) {
			f[e] = new g(e, 3, !1, e.toLowerCase(), null, !1, !1)
		})), ["checked", "multiple", "muted", "selected"].forEach((function(e) {
			f[e] = new g(e, 3, !0, e, null, !1, !1)
		})), ["capture", "download"].forEach((function(e) {
			f[e] = new g(e, 4, !1, e, null, !1, !1)
		})), ["cols", "rows", "size", "span"].forEach((function(e) {
			f[e] = new g(e, 6, !1, e, null, !1, !1)
		})), ["rowSpan", "start"].forEach((function(e) {
			f[e] = new g(e, 5, !1, e.toLowerCase(), null, !1, !1)
		}));
		var v = /[\-:]([a-z])/g;

		function b(e) {
			return e[1].toUpperCase()
		}

		function P(e, t, r, a) {
			var n = f.hasOwnProperty(t) ? f[t] : null;
			(null !== n ? 0 === n.type : !a && (2 < t.length && ("o" === t[0] || "O" === t[0]) && ("n" === t[1] || "N" === t[1]))) || (function(e, t, r, a) {
				if (null === t || "undefined" === typeof t || function(e, t, r, a) {
						if (null !== r && 0 === r.type) return !1;
						switch (typeof t) {
							case "function":
							case "symbol":
								return !0;
							case "boolean":
								return !a && (null !== r ? !r.acceptsBooleans : "data-" !== (e = e.toLowerCase().slice(0, 5)) && "aria-" !== e);
							default:
								return !1
						}
					}(e, t, r, a)) return !0;
				if (a) return !1;
				if (null !== r) switch (r.type) {
					case 3:
						return !t;
					case 4:
						return !1 === t;
					case 5:
						return isNaN(t);
					case 6:
						return isNaN(t) || 1 > t
				}
				return !1
			}(t, r, n, a) && (r = null), a || null === n ? function(e) {
				return !!d.call(y, e) || !d.call(l, e) && (m.test(e) ? y[e] = !0 : (l[e] = !0, !1))
			}(t) && (null === r ? e.removeAttribute(t) : e.setAttribute(t, "" + r)) : n.mustUseProperty ? e[n.propertyName] = null === r ? 3 !== n.type && "" : r : (t = n.attributeName, a = n.attributeNamespace, null === r ? e.removeAttribute(t) : (r = 3 === (n = n.type) || 4 === n && !0 === r ? "" : "" + r, a ? e.setAttributeNS(a, t, r) : e.setAttribute(t, r))))
		}
		"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e) {
			var t = e.replace(v, b);
			f[t] = new g(t, 1, !1, e, null, !1, !1)
		})), "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e) {
			var t = e.replace(v, b);
			f[t] = new g(t, 1, !1, e, "http://www.w3.org/1999/xlink", !1, !1)
		})), ["xml:base", "xml:lang", "xml:space"].forEach((function(e) {
			var t = e.replace(v, b);
			f[t] = new g(t, 1, !1, e, "http://www.w3.org/XML/1998/namespace", !1, !1)
		})), ["tabIndex", "crossOrigin"].forEach((function(e) {
			f[e] = new g(e, 1, !1, e.toLowerCase(), null, !1, !1)
		})), f.xlinkHref = new g("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1), ["src", "href", "action", "formAction"].forEach((function(e) {
			f[e] = new g(e, 1, !1, e.toLowerCase(), null, !0, !0)
		}));
		var S = a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
			w = 60103,
			k = 60106,
			_ = 60107,
			I = 60108,
			q = 60114,
			L = 60109,
			x = 60110,
			E = 60112,
			N = 60113,
			O = 60120,
			D = 60115,
			T = 60116,
			j = 60121,
			F = 60128,
			C = 60129,
			A = 60130,
			H = 60131;
		if ("function" === typeof Symbol && Symbol.for) {
			var R = Symbol.for;
			w = R("react.element"), k = R("react.portal"), _ = R("react.fragment"), I = R("react.strict_mode"), q = R("react.profiler"), L = R("react.provider"), x = R("react.context"), E = R("react.forward_ref"), N = R("react.suspense"), O = R("react.suspense_list"), D = R("react.memo"), T = R("react.lazy"), j = R("react.block"), R("react.scope"), F = R("react.opaque.id"), C = R("react.debug_trace_mode"), A = R("react.offscreen"), H = R("react.legacy_hidden")
		}
		var M, $ = "function" === typeof Symbol && Symbol.iterator;

		function z(e) {
			return null === e || "object" !== typeof e ? null : "function" === typeof(e = $ && e[$] || e["@@iterator"]) ? e : null
		}

		function U(e) {
			if (void 0 === M) try {
				throw Error()
			} catch (r) {
				var t = r.stack.trim().match(/\n( *(at )?)/);
				M = t && t[1] || ""
			}
			return "\n" + M + e
		}
		var B = !1;

		function W(e, t) {
			if (!e || B) return "";
			B = !0;
			var r = Error.prepareStackTrace;
			Error.prepareStackTrace = void 0;
			try {
				if (t)
					if (t = function() {
							throw Error()
						}, Object.defineProperty(t.prototype, "props", {
							set: function() {
								throw Error()
							}
						}), "object" === typeof Reflect && Reflect.construct) {
						try {
							Reflect.construct(t, [])
						} catch (o) {
							var a = o
						}
						Reflect.construct(e, [], t)
					} else {
						try {
							t.call()
						} catch (o) {
							a = o
						}
						e.call(t.prototype)
					}
				else {
					try {
						throw Error()
					} catch (o) {
						a = o
					}
					e()
				}
			} catch (o) {
				if (o && a && "string" === typeof o.stack) {
					for (var n = o.stack.split("\n"), i = a.stack.split("\n"), s = n.length - 1, p = i.length - 1; 1 <= s && 0 <= p && n[s] !== i[p];) p--;
					for (; 1 <= s && 0 <= p; s--, p--)
						if (n[s] !== i[p]) {
							if (1 !== s || 1 !== p)
								do {
									if (s--, 0 > --p || n[s] !== i[p]) return "\n" + n[s].replace(" at new ", " at ")
								} while (1 <= s && 0 <= p);
							break
						}
				}
			} finally {
				B = !1, Error.prepareStackTrace = r
			}
			return (e = e ? e.displayName || e.name : "") ? U(e) : ""
		}

		function V(e) {
			switch (e.tag) {
				case 5:
					return U(e.type);
				case 16:
					return U("Lazy");
				case 13:
					return U("Suspense");
				case 19:
					return U("SuspenseList");
				case 0:
				case 2:
				case 15:
					return e = W(e.type, !1);
				case 11:
					return e = W(e.type.render, !1);
				case 22:
					return e = W(e.type._render, !1);
				case 1:
					return e = W(e.type, !0);
				default:
					return ""
			}
		}

		function G(e) {
			if (null == e) return null;
			if ("function" === typeof e) return e.displayName || e.name || null;
			if ("string" === typeof e) return e;
			switch (e) {
				case _:
					return "Fragment";
				case k:
					return "Portal";
				case q:
					return "Profiler";
				case I:
					return "StrictMode";
				case N:
					return "Suspense";
				case O:
					return "SuspenseList"
			}
			if ("object" === typeof e) switch (e.$$typeof) {
				case x:
					return (e.displayName || "Context") + ".Consumer";
				case L:
					return (e._context.displayName || "Context") + ".Provider";
				case E:
					var t = e.render;
					return t = t.displayName || t.name || "", e.displayName || ("" !== t ? "ForwardRef(" + t + ")" : "ForwardRef");
				case D:
					return G(e.type);
				case j:
					return G(e._render);
				case T:
					t = e._payload, e = e._init;
					try {
						return G(e(t))
					} catch (r) {}
			}
			return null
		}

		function K(e) {
			switch (typeof e) {
				case "boolean":
				case "number":
				case "object":
				case "string":
				case "undefined":
					return e;
				default:
					return ""
			}
		}

		function Q(e) {
			var t = e.type;
			return (e = e.nodeName) && "input" === e.toLowerCase() && ("checkbox" === t || "radio" === t)
		}

		function Y(e) {
			e._valueTracker || (e._valueTracker = function(e) {
				var t = Q(e) ? "checked" : "value",
					r = Object.getOwnPropertyDescriptor(e.constructor.prototype, t),
					a = "" + e[t];
				if (!e.hasOwnProperty(t) && "undefined" !== typeof r && "function" === typeof r.get && "function" === typeof r.set) {
					var n = r.get,
						i = r.set;
					return Object.defineProperty(e, t, {
						configurable: !0,
						get: function() {
							return n.call(this)
						},
						set: function(e) {
							a = "" + e, i.call(this, e)
						}
					}), Object.defineProperty(e, t, {
						enumerable: r.enumerable
					}), {
						getValue: function() {
							return a
						},
						setValue: function(e) {
							a = "" + e
						},
						stopTracking: function() {
							e._valueTracker = null, delete e[t]
						}
					}
				}
			}(e))
		}

		function J(e) {
			if (!e) return !1;
			var t = e._valueTracker;
			if (!t) return !0;
			var r = t.getValue(),
				a = "";
			return e && (a = Q(e) ? e.checked ? "true" : "false" : e.value), (e = a) !== r && (t.setValue(e), !0)
		}

		function X(e) {
			if ("undefined" === typeof(e = e || ("undefined" !== typeof document ? document : void 0))) return null;
			try {
				return e.activeElement || e.body
			} catch (t) {
				return e.body
			}
		}

		function Z(e, t) {
			var r = t.checked;
			return n({}, t, {
				defaultChecked: void 0,
				defaultValue: void 0,
				value: void 0,
				checked: null != r ? r : e._wrapperState.initialChecked
			})
		}

		function ee(e, t) {
			var r = null == t.defaultValue ? "" : t.defaultValue,
				a = null != t.checked ? t.checked : t.defaultChecked;
			r = K(null != t.value ? t.value : r), e._wrapperState = {
				initialChecked: a,
				initialValue: r,
				controlled: "checkbox" === t.type || "radio" === t.type ? null != t.checked : null != t.value
			}
		}

		function te(e, t) {
			null != (t = t.checked) && P(e, "checked", t, !1)
		}

		function re(e, t) {
			te(e, t);
			var r = K(t.value),
				a = t.type;
			if (null != r) "number" === a ? (0 === r && "" === e.value || e.value != r) && (e.value = "" + r) : e.value !== "" + r && (e.value = "" + r);
			else if ("submit" === a || "reset" === a) return void e.removeAttribute("value");
			t.hasOwnProperty("value") ? ne(e, t.type, r) : t.hasOwnProperty("defaultValue") && ne(e, t.type, K(t.defaultValue)), null == t.checked && null != t.defaultChecked && (e.defaultChecked = !!t.defaultChecked)
		}

		function ae(e, t, r) {
			if (t.hasOwnProperty("value") || t.hasOwnProperty("defaultValue")) {
				var a = t.type;
				if (!("submit" !== a && "reset" !== a || void 0 !== t.value && null !== t.value)) return;
				t = "" + e._wrapperState.initialValue, r || t === e.value || (e.value = t), e.defaultValue = t
			}
			"" !== (r = e.name) && (e.name = ""), e.defaultChecked = !!e._wrapperState.initialChecked, "" !== r && (e.name = r)
		}

		function ne(e, t, r) {
			"number" === t && X(e.ownerDocument) === e || (null == r ? e.defaultValue = "" + e._wrapperState.initialValue : e.defaultValue !== "" + r && (e.defaultValue = "" + r))
		}

		function ie(e, t) {
			return e = n({
				children: void 0
			}, t), (t = function(e) {
				var t = "";
				return a.Children.forEach(e, (function(e) {
					null != e && (t += e)
				})), t
			}(t.children)) && (e.children = t), e
		}

		function se(e, t, r, a) {
			if (e = e.options, t) {
				t = {};
				for (var n = 0; n < r.length; n++) t["$" + r[n]] = !0;
				for (r = 0; r < e.length; r++) n = t.hasOwnProperty("$" + e[r].value), e[r].selected !== n && (e[r].selected = n), n && a && (e[r].defaultSelected = !0)
			} else {
				for (r = "" + K(r), t = null, n = 0; n < e.length; n++) {
					if (e[n].value === r) return e[n].selected = !0, void(a && (e[n].defaultSelected = !0));
					null !== t || e[n].disabled || (t = e[n])
				}
				null !== t && (t.selected = !0)
			}
		}

		function pe(e, t) {
			if (null != t.dangerouslySetInnerHTML) throw Error(s(91));
			return n({}, t, {
				value: void 0,
				defaultValue: void 0,
				children: "" + e._wrapperState.initialValue
			})
		}

		function oe(e, t) {
			var r = t.value;
			if (null == r) {
				if (r = t.children, t = t.defaultValue, null != r) {
					if (null != t) throw Error(s(92));
					if (Array.isArray(r)) {
						if (!(1 >= r.length)) throw Error(s(93));
						r = r[0]
					}
					t = r
				}
				null == t && (t = ""), r = t
			}
			e._wrapperState = {
				initialValue: K(r)
			}
		}

		function ce(e, t) {
			var r = K(t.value),
				a = K(t.defaultValue);
			null != r && ((r = "" + r) !== e.value && (e.value = r), null == t.defaultValue && e.defaultValue !== r && (e.defaultValue = r)), null != a && (e.defaultValue = "" + a)
		}

		function he(e) {
			var t = e.textContent;
			t === e._wrapperState.initialValue && "" !== t && null !== t && (e.value = t)
		}
		var ue = "http://www.w3.org/1999/xhtml",
			me = "http://www.w3.org/2000/svg";

		function de(e) {
			switch (e) {
				case "svg":
					return "http://www.w3.org/2000/svg";
				case "math":
					return "http://www.w3.org/1998/Math/MathML";
				default:
					return "http://www.w3.org/1999/xhtml"
			}
		}

		function le(e, t) {
			return null == e || "http://www.w3.org/1999/xhtml" === e ? de(t) : "http://www.w3.org/2000/svg" === e && "foreignObject" === t ? "http://www.w3.org/1999/xhtml" : e
		}
		var ye, ge, fe = (ge = function(e, t) {
			if (e.namespaceURI !== me || "innerHTML" in e) e.innerHTML = t;
			else {
				for ((ye = ye || document.createElement("div")).innerHTML = "<svg>" + t.valueOf().toString() + "</svg>", t = ye.firstChild; e.firstChild;) e.removeChild(e.firstChild);
				for (; t.firstChild;) e.appendChild(t.firstChild)
			}
		}, "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(e, t, r, a) {
			MSApp.execUnsafeLocalFunction((function() {
				return ge(e, t)
			}))
		} : ge);

		function ve(e, t) {
			if (t) {
				var r = e.firstChild;
				if (r && r === e.lastChild && 3 === r.nodeType) return void(r.nodeValue = t)
			}
			e.textContent = t
		}
		var be = {
				animationIterationCount: !0,
				borderImageOutset: !0,
				borderImageSlice: !0,
				borderImageWidth: !0,
				boxFlex: !0,
				boxFlexGroup: !0,
				boxOrdinalGroup: !0,
				columnCount: !0,
				columns: !0,
				flex: !0,
				flexGrow: !0,
				flexPositive: !0,
				flexShrink: !0,
				flexNegative: !0,
				flexOrder: !0,
				gridArea: !0,
				gridRow: !0,
				gridRowEnd: !0,
				gridRowSpan: !0,
				gridRowStart: !0,
				gridColumn: !0,
				gridColumnEnd: !0,
				gridColumnSpan: !0,
				gridColumnStart: !0,
				fontWeight: !0,
				lineClamp: !0,
				lineHeight: !0,
				opacity: !0,
				order: !0,
				orphans: !0,
				tabSize: !0,
				widows: !0,
				zIndex: !0,
				zoom: !0,
				fillOpacity: !0,
				floodOpacity: !0,
				stopOpacity: !0,
				strokeDasharray: !0,
				strokeDashoffset: !0,
				strokeMiterlimit: !0,
				strokeOpacity: !0,
				strokeWidth: !0
			},
			Pe = ["Webkit", "ms", "Moz", "O"];

		function Se(e, t, r) {
			return null == t || "boolean" === typeof t || "" === t ? "" : r || "number" !== typeof t || 0 === t || be.hasOwnProperty(e) && be[e] ? ("" + t).trim() : t + "px"
		}

		function we(e, t) {
			for (var r in e = e.style, t)
				if (t.hasOwnProperty(r)) {
					var a = 0 === r.indexOf("--"),
						n = Se(r, t[r], a);
					"float" === r && (r = "cssFloat"), a ? e.setProperty(r, n) : e[r] = n
				}
		}
		Object.keys(be).forEach((function(e) {
			Pe.forEach((function(t) {
				t = t + e.charAt(0).toUpperCase() + e.substring(1), be[t] = be[e]
			}))
		}));
		var ke = n({
			menuitem: !0
		}, {
			area: !0,
			base: !0,
			br: !0,
			col: !0,
			embed: !0,
			hr: !0,
			img: !0,
			input: !0,
			keygen: !0,
			link: !0,
			meta: !0,
			param: !0,
			source: !0,
			track: !0,
			wbr: !0
		});

		function _e(e, t) {
			if (t) {
				if (ke[e] && (null != t.children || null != t.dangerouslySetInnerHTML)) throw Error(s(137, e));
				if (null != t.dangerouslySetInnerHTML) {
					if (null != t.children) throw Error(s(60));
					if ("object" !== typeof t.dangerouslySetInnerHTML || !("__html" in t.dangerouslySetInnerHTML)) throw Error(s(61))
				}
				if (null != t.style && "object" !== typeof t.style) throw Error(s(62))
			}
		}

		function Ie(e, t) {
			if (-1 === e.indexOf("-")) return "string" === typeof t.is;
			switch (e) {
				case "annotation-xml":
				case "color-profile":
				case "font-face":
				case "font-face-src":
				case "font-face-uri":
				case "font-face-format":
				case "font-face-name":
				case "missing-glyph":
					return !1;
				default:
					return !0
			}
		}

		function qe(e) {
			return (e = e.target || e.srcElement || window).correspondingUseElement && (e = e.correspondingUseElement), 3 === e.nodeType ? e.parentNode : e
		}
		var Le = null,
			xe = null,
			Ee = null;

		function Ne(e) {
			if (e = Za(e)) {
				if ("function" !== typeof Le) throw Error(s(280));
				var t = e.stateNode;
				t && (t = tn(t), Le(e.stateNode, e.type, t))
			}
		}

		function Oe(e) {
			xe ? Ee ? Ee.push(e) : Ee = [e] : xe = e
		}

		function De() {
			if (xe) {
				var e = xe,
					t = Ee;
				if (Ee = xe = null, Ne(e), t)
					for (e = 0; e < t.length; e++) Ne(t[e])
			}
		}

		function Te(e, t) {
			return e(t)
		}

		function je(e, t, r, a, n) {
			return e(t, r, a, n)
		}

		function Fe() {}
		var Ce = Te,
			Ae = !1,
			He = !1;

		function Re() {
			null === xe && null === Ee || (Fe(), De())
		}

		function Me(e, t) {
			var r = e.stateNode;
			if (null === r) return null;
			var a = tn(r);
			if (null === a) return null;
			r = a[t];
			e: switch (t) {
				case "onClick":
				case "onClickCapture":
				case "onDoubleClick":
				case "onDoubleClickCapture":
				case "onMouseDown":
				case "onMouseDownCapture":
				case "onMouseMove":
				case "onMouseMoveCapture":
				case "onMouseUp":
				case "onMouseUpCapture":
				case "onMouseEnter":
					(a = !a.disabled) || (a = !("button" === (e = e.type) || "input" === e || "select" === e || "textarea" === e)), e = !a;
					break e;
				default:
					e = !1
			}
			if (e) return null;
			if (r && "function" !== typeof r) throw Error(s(231, t, typeof r));
			return r
		}
		var $e = !1;
		if (u) try {
			var ze = {};
			Object.defineProperty(ze, "passive", {
				get: function() {
					$e = !0
				}
			}), window.addEventListener("test", ze, ze), window.removeEventListener("test", ze, ze)
		} catch (ge) {
			$e = !1
		}

		function Ue(e, t, r, a, n, i, s, p, o) {
			var c = Array.prototype.slice.call(arguments, 3);
			try {
				t.apply(r, c)
			} catch (h) {
				this.onError(h)
			}
		}
		var Be = !1,
			We = null,
			Ve = !1,
			Ge = null,
			Ke = {
				onError: function(e) {
					Be = !0, We = e
				}
			};

		function Qe(e, t, r, a, n, i, s, p, o) {
			Be = !1, We = null, Ue.apply(Ke, arguments)
		}

		function Ye(e) {
			var t = e,
				r = e;
			if (e.alternate)
				for (; t.return;) t = t.return;
			else {
				e = t;
				do {
					0 !== (1026 & (t = e).flags) && (r = t.return), e = t.return
				} while (e)
			}
			return 3 === t.tag ? r : null
		}

		function Je(e) {
			if (13 === e.tag) {
				var t = e.memoizedState;
				if (null === t && (null !== (e = e.alternate) && (t = e.memoizedState)), null !== t) return t.dehydrated
			}
			return null
		}

		function Xe(e) {
			if (Ye(e) !== e) throw Error(s(188))
		}

		function Ze(e) {
			if (!(e = function(e) {
					var t = e.alternate;
					if (!t) {
						if (null === (t = Ye(e))) throw Error(s(188));
						return t !== e ? null : e
					}
					for (var r = e, a = t;;) {
						var n = r.return;
						if (null === n) break;
						var i = n.alternate;
						if (null === i) {
							if (null !== (a = n.return)) {
								r = a;
								continue
							}
							break
						}
						if (n.child === i.child) {
							for (i = n.child; i;) {
								if (i === r) return Xe(n), e;
								if (i === a) return Xe(n), t;
								i = i.sibling
							}
							throw Error(s(188))
						}
						if (r.return !== a.return) r = n, a = i;
						else {
							for (var p = !1, o = n.child; o;) {
								if (o === r) {
									p = !0, r = n, a = i;
									break
								}
								if (o === a) {
									p = !0, a = n, r = i;
									break
								}
								o = o.sibling
							}
							if (!p) {
								for (o = i.child; o;) {
									if (o === r) {
										p = !0, r = i, a = n;
										break
									}
									if (o === a) {
										p = !0, a = i, r = n;
										break
									}
									o = o.sibling
								}
								if (!p) throw Error(s(189))
							}
						}
						if (r.alternate !== a) throw Error(s(190))
					}
					if (3 !== r.tag) throw Error(s(188));
					return r.stateNode.current === r ? e : t
				}(e))) return null;
			for (var t = e;;) {
				if (5 === t.tag || 6 === t.tag) return t;
				if (t.child) t.child.return = t, t = t.child;
				else {
					if (t === e) break;
					for (; !t.sibling;) {
						if (!t.return || t.return === e) return null;
						t = t.return
					}
					t.sibling.return = t.return, t = t.sibling
				}
			}
			return null
		}

		function et(e, t) {
			for (var r = e.alternate; null !== t;) {
				if (t === e || t === r) return !0;
				t = t.return
			}
			return !1
		}
		var tt, rt, at, nt, it = !1,
			st = [],
			pt = null,
			ot = null,
			ct = null,
			ht = new Map,
			ut = new Map,
			mt = [],
			dt = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");

		function lt(e, t, r, a, n) {
			return {
				blockedOn: e,
				domEventName: t,
				eventSystemFlags: 16 | r,
				nativeEvent: n,
				targetContainers: [a]
			}
		}

		function yt(e, t) {
			switch (e) {
				case "focusin":
				case "focusout":
					pt = null;
					break;
				case "dragenter":
				case "dragleave":
					ot = null;
					break;
				case "mouseover":
				case "mouseout":
					ct = null;
					break;
				case "pointerover":
				case "pointerout":
					ht.delete(t.pointerId);
					break;
				case "gotpointercapture":
				case "lostpointercapture":
					ut.delete(t.pointerId)
			}
		}

		function gt(e, t, r, a, n, i) {
			return null === e || e.nativeEvent !== i ? (e = lt(t, r, a, n, i), null !== t && (null !== (t = Za(t)) && rt(t)), e) : (e.eventSystemFlags |= a, t = e.targetContainers, null !== n && -1 === t.indexOf(n) && t.push(n), e)
		}

		function ft(e) {
			var t = Xa(e.target);
			if (null !== t) {
				var r = Ye(t);
				if (null !== r)
					if (13 === (t = r.tag)) {
						if (null !== (t = Je(r))) return e.blockedOn = t, void nt(e.lanePriority, (function() {
							i.unstable_runWithPriority(e.priority, (function() {
								at(r)
							}))
						}))
					} else if (3 === t && r.stateNode.hydrate) return void(e.blockedOn = 3 === r.tag ? r.stateNode.containerInfo : null)
			}
			e.blockedOn = null
		}

		function vt(e) {
			if (null !== e.blockedOn) return !1;
			for (var t = e.targetContainers; 0 < t.length;) {
				var r = Zt(e.domEventName, e.eventSystemFlags, t[0], e.nativeEvent);
				if (null !== r) return null !== (t = Za(r)) && rt(t), e.blockedOn = r, !1;
				t.shift()
			}
			return !0
		}

		function bt(e, t, r) {
			vt(e) && r.delete(t)
		}

		function Pt() {
			for (it = !1; 0 < st.length;) {
				var e = st[0];
				if (null !== e.blockedOn) {
					null !== (e = Za(e.blockedOn)) && tt(e);
					break
				}
				for (var t = e.targetContainers; 0 < t.length;) {
					var r = Zt(e.domEventName, e.eventSystemFlags, t[0], e.nativeEvent);
					if (null !== r) {
						e.blockedOn = r;
						break
					}
					t.shift()
				}
				null === e.blockedOn && st.shift()
			}
			null !== pt && vt(pt) && (pt = null), null !== ot && vt(ot) && (ot = null), null !== ct && vt(ct) && (ct = null), ht.forEach(bt), ut.forEach(bt)
		}

		function St(e, t) {
			e.blockedOn === t && (e.blockedOn = null, it || (it = !0, i.unstable_scheduleCallback(i.unstable_NormalPriority, Pt)))
		}

		function wt(e) {
			function t(t) {
				return St(t, e)
			}
			if (0 < st.length) {
				St(st[0], e);
				for (var r = 1; r < st.length; r++) {
					var a = st[r];
					a.blockedOn === e && (a.blockedOn = null)
				}
			}
			for (null !== pt && St(pt, e), null !== ot && St(ot, e), null !== ct && St(ct, e), ht.forEach(t), ut.forEach(t), r = 0; r < mt.length; r++)(a = mt[r]).blockedOn === e && (a.blockedOn = null);
			for (; 0 < mt.length && null === (r = mt[0]).blockedOn;) ft(r), null === r.blockedOn && mt.shift()
		}

		function kt(e, t) {
			var r = {};
			return r[e.toLowerCase()] = t.toLowerCase(), r["Webkit" + e] = "webkit" + t, r["Moz" + e] = "moz" + t, r
		}
		var _t = {
				animationend: kt("Animation", "AnimationEnd"),
				animationiteration: kt("Animation", "AnimationIteration"),
				animationstart: kt("Animation", "AnimationStart"),
				transitionend: kt("Transition", "TransitionEnd")
			},
			It = {},
			qt = {};

		function Lt(e) {
			if (It[e]) return It[e];
			if (!_t[e]) return e;
			var t, r = _t[e];
			for (t in r)
				if (r.hasOwnProperty(t) && t in qt) return It[e] = r[t];
			return e
		}
		u && (qt = document.createElement("div").style, "AnimationEvent" in window || (delete _t.animationend.animation, delete _t.animationiteration.animation, delete _t.animationstart.animation), "TransitionEvent" in window || delete _t.transitionend.transition);
		var xt = Lt("animationend"),
			Et = Lt("animationiteration"),
			Nt = Lt("animationstart"),
			Ot = Lt("transitionend"),
			Dt = new Map,
			Tt = new Map,
			jt = ["abort", "abort", xt, "animationEnd", Et, "animationIteration", Nt, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", Ot, "transitionEnd", "waiting", "waiting"];

		function Ft(e, t) {
			for (var r = 0; r < e.length; r += 2) {
				var a = e[r],
					n = e[r + 1];
				n = "on" + (n[0].toUpperCase() + n.slice(1)), Tt.set(a, t), Dt.set(a, n), c(n, [a])
			}
		}(0, i.unstable_now)();
		var Ct = 8;

		function At(e) {
			if (0 !== (1 & e)) return Ct = 15, 1;
			if (0 !== (2 & e)) return Ct = 14, 2;
			if (0 !== (4 & e)) return Ct = 13, 4;
			var t = 24 & e;
			return 0 !== t ? (Ct = 12, t) : 0 !== (32 & e) ? (Ct = 11, 32) : 0 !== (t = 192 & e) ? (Ct = 10, t) : 0 !== (256 & e) ? (Ct = 9, 256) : 0 !== (t = 3584 & e) ? (Ct = 8, t) : 0 !== (4096 & e) ? (Ct = 7, 4096) : 0 !== (t = 4186112 & e) ? (Ct = 6, t) : 0 !== (t = 62914560 & e) ? (Ct = 5, t) : 67108864 & e ? (Ct = 4, 67108864) : 0 !== (134217728 & e) ? (Ct = 3, 134217728) : 0 !== (t = 805306368 & e) ? (Ct = 2, t) : 0 !== (1073741824 & e) ? (Ct = 1, 1073741824) : (Ct = 8, e)
		}

		function Ht(e, t) {
			var r = e.pendingLanes;
			if (0 === r) return Ct = 0;
			var a = 0,
				n = 0,
				i = e.expiredLanes,
				s = e.suspendedLanes,
				p = e.pingedLanes;
			if (0 !== i) a = i, n = Ct = 15;
			else if (0 !== (i = 134217727 & r)) {
				var o = i & ~s;
				0 !== o ? (a = At(o), n = Ct) : 0 !== (p &= i) && (a = At(p), n = Ct)
			} else 0 !== (i = r & ~s) ? (a = At(i), n = Ct) : 0 !== p && (a = At(p), n = Ct);
			if (0 === a) return 0;
			if (a = r & ((0 > (a = 31 - Bt(a)) ? 0 : 1 << a) << 1) - 1, 0 !== t && t !== a && 0 === (t & s)) {
				if (At(t), n <= Ct) return t;
				Ct = n
			}
			if (0 !== (t = e.entangledLanes))
				for (e = e.entanglements, t &= a; 0 < t;) n = 1 << (r = 31 - Bt(t)), a |= e[r], t &= ~n;
			return a
		}

		function Rt(e) {
			return 0 !== (e = -1073741825 & e.pendingLanes) ? e : 1073741824 & e ? 1073741824 : 0
		}

		function Mt(e, t) {
			switch (e) {
				case 15:
					return 1;
				case 14:
					return 2;
				case 12:
					return 0 === (e = $t(24 & ~t)) ? Mt(10, t) : e;
				case 10:
					return 0 === (e = $t(192 & ~t)) ? Mt(8, t) : e;
				case 8:
					return 0 === (e = $t(3584 & ~t)) && (0 === (e = $t(4186112 & ~t)) && (e = 512)), e;
				case 2:
					return 0 === (t = $t(805306368 & ~t)) && (t = 268435456), t
			}
			throw Error(s(358, e))
		}

		function $t(e) {
			return e & -e
		}

		function zt(e) {
			for (var t = [], r = 0; 31 > r; r++) t.push(e);
			return t
		}

		function Ut(e, t, r) {
			e.pendingLanes |= t;
			var a = t - 1;
			e.suspendedLanes &= a, e.pingedLanes &= a, (e = e.eventTimes)[t = 31 - Bt(t)] = r
		}
		var Bt = Math.clz32 ? Math.clz32 : function(e) {
				return 0 === e ? 32 : 31 - (Wt(e) / Vt | 0) | 0
			},
			Wt = Math.log,
			Vt = Math.LN2;
		var Gt = i.unstable_UserBlockingPriority,
			Kt = i.unstable_runWithPriority,
			Qt = !0;

		function Yt(e, t, r, a) {
			Ae || Fe();
			var n = Xt,
				i = Ae;
			Ae = !0;
			try {
				je(n, e, t, r, a)
			} finally {
				(Ae = i) || Re()
			}
		}

		function Jt(e, t, r, a) {
			Kt(Gt, Xt.bind(null, e, t, r, a))
		}

		function Xt(e, t, r, a) {
			var n;
			if (Qt)
				if ((n = 0 === (4 & t)) && 0 < st.length && -1 < dt.indexOf(e)) e = lt(null, e, t, r, a), st.push(e);
				else {
					var i = Zt(e, t, r, a);
					if (null === i) n && yt(e, a);
					else {
						if (n) {
							if (-1 < dt.indexOf(e)) return e = lt(i, e, t, r, a), void st.push(e);
							if (function(e, t, r, a, n) {
									switch (t) {
										case "focusin":
											return pt = gt(pt, e, t, r, a, n), !0;
										case "dragenter":
											return ot = gt(ot, e, t, r, a, n), !0;
										case "mouseover":
											return ct = gt(ct, e, t, r, a, n), !0;
										case "pointerover":
											var i = n.pointerId;
											return ht.set(i, gt(ht.get(i) || null, e, t, r, a, n)), !0;
										case "gotpointercapture":
											return i = n.pointerId, ut.set(i, gt(ut.get(i) || null, e, t, r, a, n)), !0
									}
									return !1
								}(i, e, t, r, a)) return;
							yt(e, a)
						}
						Oa(e, t, a, null, r)
					}
				}
		}

		function Zt(e, t, r, a) {
			var n = qe(a);
			if (null !== (n = Xa(n))) {
				var i = Ye(n);
				if (null === i) n = null;
				else {
					var s = i.tag;
					if (13 === s) {
						if (null !== (n = Je(i))) return n;
						n = null
					} else if (3 === s) {
						if (i.stateNode.hydrate) return 3 === i.tag ? i.stateNode.containerInfo : null;
						n = null
					} else i !== n && (n = null)
				}
			}
			return Oa(e, t, a, n, r), null
		}
		var er = null,
			tr = null,
			rr = null;

		function ar() {
			if (rr) return rr;
			var e, t, r = tr,
				a = r.length,
				n = "value" in er ? er.value : er.textContent,
				i = n.length;
			for (e = 0; e < a && r[e] === n[e]; e++);
			var s = a - e;
			for (t = 1; t <= s && r[a - t] === n[i - t]; t++);
			return rr = n.slice(e, 1 < t ? 1 - t : void 0)
		}

		function nr(e) {
			var t = e.keyCode;
			return "charCode" in e ? 0 === (e = e.charCode) && 13 === t && (e = 13) : e = t, 10 === e && (e = 13), 32 <= e || 13 === e ? e : 0
		}

		function ir() {
			return !0
		}

		function sr() {
			return !1
		}

		function pr(e) {
			function t(t, r, a, n, i) {
				for (var s in this._reactName = t, this._targetInst = a, this.type = r, this.nativeEvent = n, this.target = i, this.currentTarget = null, e) e.hasOwnProperty(s) && (t = e[s], this[s] = t ? t(n) : n[s]);
				return this.isDefaultPrevented = (null != n.defaultPrevented ? n.defaultPrevented : !1 === n.returnValue) ? ir : sr, this.isPropagationStopped = sr, this
			}
			return n(t.prototype, {
				preventDefault: function() {
					this.defaultPrevented = !0;
					var e = this.nativeEvent;
					e && (e.preventDefault ? e.preventDefault() : "unknown" !== typeof e.returnValue && (e.returnValue = !1), this.isDefaultPrevented = ir)
				},
				stopPropagation: function() {
					var e = this.nativeEvent;
					e && (e.stopPropagation ? e.stopPropagation() : "unknown" !== typeof e.cancelBubble && (e.cancelBubble = !0), this.isPropagationStopped = ir)
				},
				persist: function() {},
				isPersistent: ir
			}), t
		}
		var or, cr, hr, ur = {
				eventPhase: 0,
				bubbles: 0,
				cancelable: 0,
				timeStamp: function(e) {
					return e.timeStamp || Date.now()
				},
				defaultPrevented: 0,
				isTrusted: 0
			},
			mr = pr(ur),
			dr = n({}, ur, {
				view: 0,
				detail: 0
			}),
			lr = pr(dr),
			yr = n({}, dr, {
				screenX: 0,
				screenY: 0,
				clientX: 0,
				clientY: 0,
				pageX: 0,
				pageY: 0,
				ctrlKey: 0,
				shiftKey: 0,
				altKey: 0,
				metaKey: 0,
				getModifierState: qr,
				button: 0,
				buttons: 0,
				relatedTarget: function(e) {
					return void 0 === e.relatedTarget ? e.fromElement === e.srcElement ? e.toElement : e.fromElement : e.relatedTarget
				},
				movementX: function(e) {
					return "movementX" in e ? e.movementX : (e !== hr && (hr && "mousemove" === e.type ? (or = e.screenX - hr.screenX, cr = e.screenY - hr.screenY) : cr = or = 0, hr = e), or)
				},
				movementY: function(e) {
					return "movementY" in e ? e.movementY : cr
				}
			}),
			gr = pr(yr),
			fr = pr(n({}, yr, {
				dataTransfer: 0
			})),
			vr = pr(n({}, dr, {
				relatedTarget: 0
			})),
			br = pr(n({}, ur, {
				animationName: 0,
				elapsedTime: 0,
				pseudoElement: 0
			})),
			Pr = pr(n({}, ur, {
				clipboardData: function(e) {
					return "clipboardData" in e ? e.clipboardData : window.clipboardData
				}
			})),
			Sr = pr(n({}, ur, {
				data: 0
			})),
			wr = {
				Esc: "Escape",
				Spacebar: " ",
				Left: "ArrowLeft",
				Up: "ArrowUp",
				Right: "ArrowRight",
				Down: "ArrowDown",
				Del: "Delete",
				Win: "OS",
				Menu: "ContextMenu",
				Apps: "ContextMenu",
				Scroll: "ScrollLock",
				MozPrintableKey: "Unidentified"
			},
			kr = {
				8: "Backspace",
				9: "Tab",
				12: "Clear",
				13: "Enter",
				16: "Shift",
				17: "Control",
				18: "Alt",
				19: "Pause",
				20: "CapsLock",
				27: "Escape",
				32: " ",
				33: "PageUp",
				34: "PageDown",
				35: "End",
				36: "Home",
				37: "ArrowLeft",
				38: "ArrowUp",
				39: "ArrowRight",
				40: "ArrowDown",
				45: "Insert",
				46: "Delete",
				112: "F1",
				113: "F2",
				114: "F3",
				115: "F4",
				116: "F5",
				117: "F6",
				118: "F7",
				119: "F8",
				120: "F9",
				121: "F10",
				122: "F11",
				123: "F12",
				144: "NumLock",
				145: "ScrollLock",
				224: "Meta"
			},
			_r = {
				Alt: "altKey",
				Control: "ctrlKey",
				Meta: "metaKey",
				Shift: "shiftKey"
			};

		function Ir(e) {
			var t = this.nativeEvent;
			return t.getModifierState ? t.getModifierState(e) : !!(e = _r[e]) && !!t[e]
		}

		function qr() {
			return Ir
		}
		var Lr = pr(n({}, dr, {
				key: function(e) {
					if (e.key) {
						var t = wr[e.key] || e.key;
						if ("Unidentified" !== t) return t
					}
					return "keypress" === e.type ? 13 === (e = nr(e)) ? "Enter" : String.fromCharCode(e) : "keydown" === e.type || "keyup" === e.type ? kr[e.keyCode] || "Unidentified" : ""
				},
				code: 0,
				location: 0,
				ctrlKey: 0,
				shiftKey: 0,
				altKey: 0,
				metaKey: 0,
				repeat: 0,
				locale: 0,
				getModifierState: qr,
				charCode: function(e) {
					return "keypress" === e.type ? nr(e) : 0
				},
				keyCode: function(e) {
					return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0
				},
				which: function(e) {
					return "keypress" === e.type ? nr(e) : "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0
				}
			})),
			xr = pr(n({}, yr, {
				pointerId: 0,
				width: 0,
				height: 0,
				pressure: 0,
				tangentialPressure: 0,
				tiltX: 0,
				tiltY: 0,
				twist: 0,
				pointerType: 0,
				isPrimary: 0
			})),
			Er = pr(n({}, dr, {
				touches: 0,
				targetTouches: 0,
				changedTouches: 0,
				altKey: 0,
				metaKey: 0,
				ctrlKey: 0,
				shiftKey: 0,
				getModifierState: qr
			})),
			Nr = pr(n({}, ur, {
				propertyName: 0,
				elapsedTime: 0,
				pseudoElement: 0
			})),
			Or = pr(n({}, yr, {
				deltaX: function(e) {
					return "deltaX" in e ? e.deltaX : "wheelDeltaX" in e ? -e.wheelDeltaX : 0
				},
				deltaY: function(e) {
					return "deltaY" in e ? e.deltaY : "wheelDeltaY" in e ? -e.wheelDeltaY : "wheelDelta" in e ? -e.wheelDelta : 0
				},
				deltaZ: 0,
				deltaMode: 0
			})),
			Dr = [9, 13, 27, 32],
			Tr = u && "CompositionEvent" in window,
			jr = null;
		u && "documentMode" in document && (jr = document.documentMode);
		var Fr = u && "TextEvent" in window && !jr,
			Cr = u && (!Tr || jr && 8 < jr && 11 >= jr),
			Ar = String.fromCharCode(32),
			Hr = !1;

		function Rr(e, t) {
			switch (e) {
				case "keyup":
					return -1 !== Dr.indexOf(t.keyCode);
				case "keydown":
					return 229 !== t.keyCode;
				case "keypress":
				case "mousedown":
				case "focusout":
					return !0;
				default:
					return !1
			}
		}

		function Mr(e) {
			return "object" === typeof(e = e.detail) && "data" in e ? e.data : null
		}
		var $r = !1;
		var zr = {
			color: !0,
			date: !0,
			datetime: !0,
			"datetime-local": !0,
			email: !0,
			month: !0,
			number: !0,
			password: !0,
			range: !0,
			search: !0,
			tel: !0,
			text: !0,
			time: !0,
			url: !0,
			week: !0
		};

		function Ur(e) {
			var t = e && e.nodeName && e.nodeName.toLowerCase();
			return "input" === t ? !!zr[e.type] : "textarea" === t
		}

		function Br(e, t, r, a) {
			Oe(a), 0 < (t = Ta(t, "onChange")).length && (r = new mr("onChange", "change", null, r, a), e.push({
				event: r,
				listeners: t
			}))
		}
		var Wr = null,
			Vr = null;

		function Gr(e) {
			Ia(e, 0)
		}

		function Kr(e) {
			if (J(en(e))) return e
		}

		function Qr(e, t) {
			if ("change" === e) return t
		}
		var Yr = !1;
		if (u) {
			var Jr;
			if (u) {
				var Xr = "oninput" in document;
				if (!Xr) {
					var Zr = document.createElement("div");
					Zr.setAttribute("oninput", "return;"), Xr = "function" === typeof Zr.oninput
				}
				Jr = Xr
			} else Jr = !1;
			Yr = Jr && (!document.documentMode || 9 < document.documentMode)
		}

		function ea() {
			Wr && (Wr.detachEvent("onpropertychange", ta), Vr = Wr = null)
		}

		function ta(e) {
			if ("value" === e.propertyName && Kr(Vr)) {
				var t = [];
				if (Br(t, Vr, e, qe(e)), e = Gr, Ae) e(t);
				else {
					Ae = !0;
					try {
						Te(e, t)
					} finally {
						Ae = !1, Re()
					}
				}
			}
		}

		function ra(e, t, r) {
			"focusin" === e ? (ea(), Vr = r, (Wr = t).attachEvent("onpropertychange", ta)) : "focusout" === e && ea()
		}

		function aa(e) {
			if ("selectionchange" === e || "keyup" === e || "keydown" === e) return Kr(Vr)
		}

		function na(e, t) {
			if ("click" === e) return Kr(t)
		}

		function ia(e, t) {
			if ("input" === e || "change" === e) return Kr(t)
		}
		var sa = "function" === typeof Object.is ? Object.is : function(e, t) {
				return e === t && (0 !== e || 1 / e === 1 / t) || e !== e && t !== t
			},
			pa = Object.prototype.hasOwnProperty;

		function oa(e, t) {
			if (sa(e, t)) return !0;
			if ("object" !== typeof e || null === e || "object" !== typeof t || null === t) return !1;
			var r = Object.keys(e),
				a = Object.keys(t);
			if (r.length !== a.length) return !1;
			for (a = 0; a < r.length; a++)
				if (!pa.call(t, r[a]) || !sa(e[r[a]], t[r[a]])) return !1;
			return !0
		}

		function ca(e) {
			for (; e && e.firstChild;) e = e.firstChild;
			return e
		}

		function ha(e, t) {
			var r, a = ca(e);
			for (e = 0; a;) {
				if (3 === a.nodeType) {
					if (r = e + a.textContent.length, e <= t && r >= t) return {
						node: a,
						offset: t - e
					};
					e = r
				}
				e: {
					for (; a;) {
						if (a.nextSibling) {
							a = a.nextSibling;
							break e
						}
						a = a.parentNode
					}
					a = void 0
				}
				a = ca(a)
			}
		}

		function ua(e, t) {
			return !(!e || !t) && (e === t || (!e || 3 !== e.nodeType) && (t && 3 === t.nodeType ? ua(e, t.parentNode) : "contains" in e ? e.contains(t) : !!e.compareDocumentPosition && !!(16 & e.compareDocumentPosition(t))))
		}

		function ma() {
			for (var e = window, t = X(); t instanceof e.HTMLIFrameElement;) {
				try {
					var r = "string" === typeof t.contentWindow.location.href
				} catch (a) {
					r = !1
				}
				if (!r) break;
				t = X((e = t.contentWindow).document)
			}
			return t
		}

		function da(e) {
			var t = e && e.nodeName && e.nodeName.toLowerCase();
			return t && ("input" === t && ("text" === e.type || "search" === e.type || "tel" === e.type || "url" === e.type || "password" === e.type) || "textarea" === t || "true" === e.contentEditable)
		}
		var la = u && "documentMode" in document && 11 >= document.documentMode,
			ya = null,
			ga = null,
			fa = null,
			va = !1;

		function ba(e, t, r) {
			var a = r.window === r ? r.document : 9 === r.nodeType ? r : r.ownerDocument;
			va || null == ya || ya !== X(a) || ("selectionStart" in (a = ya) && da(a) ? a = {
				start: a.selectionStart,
				end: a.selectionEnd
			} : a = {
				anchorNode: (a = (a.ownerDocument && a.ownerDocument.defaultView || window).getSelection()).anchorNode,
				anchorOffset: a.anchorOffset,
				focusNode: a.focusNode,
				focusOffset: a.focusOffset
			}, fa && oa(fa, a) || (fa = a, 0 < (a = Ta(ga, "onSelect")).length && (t = new mr("onSelect", "select", null, t, r), e.push({
				event: t,
				listeners: a
			}), t.target = ya)))
		}
		Ft("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0), Ft("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1), Ft(jt, 2);
		for (var Pa = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), Sa = 0; Sa < Pa.length; Sa++) Tt.set(Pa[Sa], 0);
		h("onMouseEnter", ["mouseout", "mouseover"]), h("onMouseLeave", ["mouseout", "mouseover"]), h("onPointerEnter", ["pointerout", "pointerover"]), h("onPointerLeave", ["pointerout", "pointerover"]), c("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" ")), c("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")), c("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), c("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" ")), c("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" ")), c("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
		var wa = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
			ka = new Set("cancel close invalid load scroll toggle".split(" ").concat(wa));

		function _a(e, t, r) {
			var a = e.type || "unknown-event";
			e.currentTarget = r,
				function(e, t, r, a, n, i, p, o, c) {
					if (Qe.apply(this, arguments), Be) {
						if (!Be) throw Error(s(198));
						var h = We;
						Be = !1, We = null, Ve || (Ve = !0, Ge = h)
					}
				}(a, t, void 0, e), e.currentTarget = null
		}

		function Ia(e, t) {
			t = 0 !== (4 & t);
			for (var r = 0; r < e.length; r++) {
				var a = e[r],
					n = a.event;
				a = a.listeners;
				e: {
					var i = void 0;
					if (t)
						for (var s = a.length - 1; 0 <= s; s--) {
							var p = a[s],
								o = p.instance,
								c = p.currentTarget;
							if (p = p.listener, o !== i && n.isPropagationStopped()) break e;
							_a(n, p, c), i = o
						} else
							for (s = 0; s < a.length; s++) {
								if (o = (p = a[s]).instance, c = p.currentTarget, p = p.listener, o !== i && n.isPropagationStopped()) break e;
								_a(n, p, c), i = o
							}
				}
			}
			if (Ve) throw e = Ge, Ve = !1, Ge = null, e
		}

		function qa(e, t) {
			var r = rn(t),
				a = e + "__bubble";
			r.has(a) || (Na(t, e, 2, !1), r.add(a))
		}
		var La = "_reactListening" + Math.random().toString(36).slice(2);

		function xa(e) {
			e[La] || (e[La] = !0, p.forEach((function(t) {
				ka.has(t) || Ea(t, !1, e, null), Ea(t, !0, e, null)
			})))
		}

		function Ea(e, t, r, a) {
			var n = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,
				i = r;
			if ("selectionchange" === e && 9 !== r.nodeType && (i = r.ownerDocument), null !== a && !t && ka.has(e)) {
				if ("scroll" !== e) return;
				n |= 2, i = a
			}
			var s = rn(i),
				p = e + "__" + (t ? "capture" : "bubble");
			s.has(p) || (t && (n |= 4), Na(i, e, n, t), s.add(p))
		}

		function Na(e, t, r, a) {
			var n = Tt.get(t);
			switch (void 0 === n ? 2 : n) {
				case 0:
					n = Yt;
					break;
				case 1:
					n = Jt;
					break;
				default:
					n = Xt
			}
			r = n.bind(null, t, r, e), n = void 0, !$e || "touchstart" !== t && "touchmove" !== t && "wheel" !== t || (n = !0), a ? void 0 !== n ? e.addEventListener(t, r, {
				capture: !0,
				passive: n
			}) : e.addEventListener(t, r, !0) : void 0 !== n ? e.addEventListener(t, r, {
				passive: n
			}) : e.addEventListener(t, r, !1)
		}

		function Oa(e, t, r, a, n) {
			var i = a;
			if (0 === (1 & t) && 0 === (2 & t) && null !== a) e: for (;;) {
				if (null === a) return;
				var s = a.tag;
				if (3 === s || 4 === s) {
					var p = a.stateNode.containerInfo;
					if (p === n || 8 === p.nodeType && p.parentNode === n) break;
					if (4 === s)
						for (s = a.return; null !== s;) {
							var o = s.tag;
							if ((3 === o || 4 === o) && ((o = s.stateNode.containerInfo) === n || 8 === o.nodeType && o.parentNode === n)) return;
							s = s.return
						}
					for (; null !== p;) {
						if (null === (s = Xa(p))) return;
						if (5 === (o = s.tag) || 6 === o) {
							a = i = s;
							continue e
						}
						p = p.parentNode
					}
				}
				a = a.return
			}! function(e, t, r) {
				if (He) return e(t, r);
				He = !0;
				try {
					Ce(e, t, r)
				} finally {
					He = !1, Re()
				}
			}((function() {
				var a = i,
					n = qe(r),
					s = [];
				e: {
					var p = Dt.get(e);
					if (void 0 !== p) {
						var o = mr,
							c = e;
						switch (e) {
							case "keypress":
								if (0 === nr(r)) break e;
							case "keydown":
							case "keyup":
								o = Lr;
								break;
							case "focusin":
								c = "focus", o = vr;
								break;
							case "focusout":
								c = "blur", o = vr;
								break;
							case "beforeblur":
							case "afterblur":
								o = vr;
								break;
							case "click":
								if (2 === r.button) break e;
							case "auxclick":
							case "dblclick":
							case "mousedown":
							case "mousemove":
							case "mouseup":
							case "mouseout":
							case "mouseover":
							case "contextmenu":
								o = gr;
								break;
							case "drag":
							case "dragend":
							case "dragenter":
							case "dragexit":
							case "dragleave":
							case "dragover":
							case "dragstart":
							case "drop":
								o = fr;
								break;
							case "touchcancel":
							case "touchend":
							case "touchmove":
							case "touchstart":
								o = Er;
								break;
							case xt:
							case Et:
							case Nt:
								o = br;
								break;
							case Ot:
								o = Nr;
								break;
							case "scroll":
								o = lr;
								break;
							case "wheel":
								o = Or;
								break;
							case "copy":
							case "cut":
							case "paste":
								o = Pr;
								break;
							case "gotpointercapture":
							case "lostpointercapture":
							case "pointercancel":
							case "pointerdown":
							case "pointermove":
							case "pointerout":
							case "pointerover":
							case "pointerup":
								o = xr
						}
						var h = 0 !== (4 & t),
							u = !h && "scroll" === e,
							m = h ? null !== p ? p + "Capture" : null : p;
						h = [];
						for (var d, l = a; null !== l;) {
							var y = (d = l).stateNode;
							if (5 === d.tag && null !== y && (d = y, null !== m && (null != (y = Me(l, m)) && h.push(Da(l, y, d)))), u) break;
							l = l.return
						}
						0 < h.length && (p = new o(p, c, null, r, n), s.push({
							event: p,
							listeners: h
						}))
					}
				}
				if (0 === (7 & t)) {
					if (o = "mouseout" === e || "pointerout" === e, (!(p = "mouseover" === e || "pointerover" === e) || 0 !== (16 & t) || !(c = r.relatedTarget || r.fromElement) || !Xa(c) && !c[Ya]) && (o || p) && (p = n.window === n ? n : (p = n.ownerDocument) ? p.defaultView || p.parentWindow : window, o ? (o = a, null !== (c = (c = r.relatedTarget || r.toElement) ? Xa(c) : null) && (c !== (u = Ye(c)) || 5 !== c.tag && 6 !== c.tag) && (c = null)) : (o = null, c = a), o !== c)) {
						if (h = gr, y = "onMouseLeave", m = "onMouseEnter", l = "mouse", "pointerout" !== e && "pointerover" !== e || (h = xr, y = "onPointerLeave", m = "onPointerEnter", l = "pointer"), u = null == o ? p : en(o), d = null == c ? p : en(c), (p = new h(y, l + "leave", o, r, n)).target = u, p.relatedTarget = d, y = null, Xa(n) === a && ((h = new h(m, l + "enter", c, r, n)).target = d, h.relatedTarget = u, y = h), u = y, o && c) e: {
							for (m = c, l = 0, d = h = o; d; d = ja(d)) l++;
							for (d = 0, y = m; y; y = ja(y)) d++;
							for (; 0 < l - d;) h = ja(h),
							l--;
							for (; 0 < d - l;) m = ja(m),
							d--;
							for (; l--;) {
								if (h === m || null !== m && h === m.alternate) break e;
								h = ja(h), m = ja(m)
							}
							h = null
						}
						else h = null;
						null !== o && Fa(s, p, o, h, !1), null !== c && null !== u && Fa(s, u, c, h, !0)
					}
					if ("select" === (o = (p = a ? en(a) : window).nodeName && p.nodeName.toLowerCase()) || "input" === o && "file" === p.type) var g = Qr;
					else if (Ur(p))
						if (Yr) g = ia;
						else {
							g = aa;
							var f = ra
						}
					else(o = p.nodeName) && "input" === o.toLowerCase() && ("checkbox" === p.type || "radio" === p.type) && (g = na);
					switch (g && (g = g(e, a)) ? Br(s, g, r, n) : (f && f(e, p, a), "focusout" === e && (f = p._wrapperState) && f.controlled && "number" === p.type && ne(p, "number", p.value)), f = a ? en(a) : window, e) {
						case "focusin":
							(Ur(f) || "true" === f.contentEditable) && (ya = f, ga = a, fa = null);
							break;
						case "focusout":
							fa = ga = ya = null;
							break;
						case "mousedown":
							va = !0;
							break;
						case "contextmenu":
						case "mouseup":
						case "dragend":
							va = !1, ba(s, r, n);
							break;
						case "selectionchange":
							if (la) break;
						case "keydown":
						case "keyup":
							ba(s, r, n)
					}
					var v;
					if (Tr) e: {
						switch (e) {
							case "compositionstart":
								var b = "onCompositionStart";
								break e;
							case "compositionend":
								b = "onCompositionEnd";
								break e;
							case "compositionupdate":
								b = "onCompositionUpdate";
								break e
						}
						b = void 0
					}
					else $r ? Rr(e, r) && (b = "onCompositionEnd") : "keydown" === e && 229 === r.keyCode && (b = "onCompositionStart");
					b && (Cr && "ko" !== r.locale && ($r || "onCompositionStart" !== b ? "onCompositionEnd" === b && $r && (v = ar()) : (tr = "value" in (er = n) ? er.value : er.textContent, $r = !0)), 0 < (f = Ta(a, b)).length && (b = new Sr(b, e, null, r, n), s.push({
						event: b,
						listeners: f
					}), v ? b.data = v : null !== (v = Mr(r)) && (b.data = v))), (v = Fr ? function(e, t) {
						switch (e) {
							case "compositionend":
								return Mr(t);
							case "keypress":
								return 32 !== t.which ? null : (Hr = !0, Ar);
							case "textInput":
								return (e = t.data) === Ar && Hr ? null : e;
							default:
								return null
						}
					}(e, r) : function(e, t) {
						if ($r) return "compositionend" === e || !Tr && Rr(e, t) ? (e = ar(), rr = tr = er = null, $r = !1, e) : null;
						switch (e) {
							case "paste":
								return null;
							case "keypress":
								if (!(t.ctrlKey || t.altKey || t.metaKey) || t.ctrlKey && t.altKey) {
									if (t.char && 1 < t.char.length) return t.char;
									if (t.which) return String.fromCharCode(t.which)
								}
								return null;
							case "compositionend":
								return Cr && "ko" !== t.locale ? null : t.data;
							default:
								return null
						}
					}(e, r)) && (0 < (a = Ta(a, "onBeforeInput")).length && (n = new Sr("onBeforeInput", "beforeinput", null, r, n), s.push({
						event: n,
						listeners: a
					}), n.data = v))
				}
				Ia(s, t)
			}))
		}

		function Da(e, t, r) {
			return {
				instance: e,
				listener: t,
				currentTarget: r
			}
		}

		function Ta(e, t) {
			for (var r = t + "Capture", a = []; null !== e;) {
				var n = e,
					i = n.stateNode;
				5 === n.tag && null !== i && (n = i, null != (i = Me(e, r)) && a.unshift(Da(e, i, n)), null != (i = Me(e, t)) && a.push(Da(e, i, n))), e = e.return
			}
			return a
		}

		function ja(e) {
			if (null === e) return null;
			do {
				e = e.return
			} while (e && 5 !== e.tag);
			return e || null
		}

		function Fa(e, t, r, a, n) {
			for (var i = t._reactName, s = []; null !== r && r !== a;) {
				var p = r,
					o = p.alternate,
					c = p.stateNode;
				if (null !== o && o === a) break;
				5 === p.tag && null !== c && (p = c, n ? null != (o = Me(r, i)) && s.unshift(Da(r, o, p)) : n || null != (o = Me(r, i)) && s.push(Da(r, o, p))), r = r.return
			}
			0 !== s.length && e.push({
				event: t,
				listeners: s
			})
		}

		function Ca() {}
		var Aa = null,
			Ha = null;

		function Ra(e, t) {
			switch (e) {
				case "button":
				case "input":
				case "select":
				case "textarea":
					return !!t.autoFocus
			}
			return !1
		}

		function Ma(e, t) {
			return "textarea" === e || "option" === e || "noscript" === e || "string" === typeof t.children || "number" === typeof t.children || "object" === typeof t.dangerouslySetInnerHTML && null !== t.dangerouslySetInnerHTML && null != t.dangerouslySetInnerHTML.__html
		}
		var $a = "function" === typeof setTimeout ? setTimeout : void 0,
			za = "function" === typeof clearTimeout ? clearTimeout : void 0;

		function Ua(e) {
			1 === e.nodeType ? e.textContent = "" : 9 === e.nodeType && (null != (e = e.body) && (e.textContent = ""))
		}

		function Ba(e) {
			for (; null != e; e = e.nextSibling) {
				var t = e.nodeType;
				if (1 === t || 3 === t) break
			}
			return e
		}

		function Wa(e) {
			e = e.previousSibling;
			for (var t = 0; e;) {
				if (8 === e.nodeType) {
					var r = e.data;
					if ("$" === r || "$!" === r || "$?" === r) {
						if (0 === t) return e;
						t--
					} else "/$" === r && t++
				}
				e = e.previousSibling
			}
			return null
		}
		var Va = 0;
		var Ga = Math.random().toString(36).slice(2),
			Ka = "__reactFiber$" + Ga,
			Qa = "__reactProps$" + Ga,
			Ya = "__reactContainer$" + Ga,
			Ja = "__reactEvents$" + Ga;

		function Xa(e) {
			var t = e[Ka];
			if (t) return t;
			for (var r = e.parentNode; r;) {
				if (t = r[Ya] || r[Ka]) {
					if (r = t.alternate, null !== t.child || null !== r && null !== r.child)
						for (e = Wa(e); null !== e;) {
							if (r = e[Ka]) return r;
							e = Wa(e)
						}
					return t
				}
				r = (e = r).parentNode
			}
			return null
		}

		function Za(e) {
			return !(e = e[Ka] || e[Ya]) || 5 !== e.tag && 6 !== e.tag && 13 !== e.tag && 3 !== e.tag ? null : e
		}

		function en(e) {
			if (5 === e.tag || 6 === e.tag) return e.stateNode;
			throw Error(s(33))
		}

		function tn(e) {
			return e[Qa] || null
		}

		function rn(e) {
			var t = e[Ja];
			return void 0 === t && (t = e[Ja] = new Set), t
		}
		var an = [],
			nn = -1;

		function sn(e) {
			return {
				current: e
			}
		}

		function pn(e) {
			0 > nn || (e.current = an[nn], an[nn] = null, nn--)
		}

		function on(e, t) {
			nn++, an[nn] = e.current, e.current = t
		}
		var cn = {},
			hn = sn(cn),
			un = sn(!1),
			mn = cn;

		function dn(e, t) {
			var r = e.type.contextTypes;
			if (!r) return cn;
			var a = e.stateNode;
			if (a && a.__reactInternalMemoizedUnmaskedChildContext === t) return a.__reactInternalMemoizedMaskedChildContext;
			var n, i = {};
			for (n in r) i[n] = t[n];
			return a && ((e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext = t, e.__reactInternalMemoizedMaskedChildContext = i), i
		}

		function ln(e) {
			return null !== (e = e.childContextTypes) && void 0 !== e
		}

		function yn() {
			pn(un), pn(hn)
		}

		function gn(e, t, r) {
			if (hn.current !== cn) throw Error(s(168));
			on(hn, t), on(un, r)
		}

		function fn(e, t, r) {
			var a = e.stateNode;
			if (e = t.childContextTypes, "function" !== typeof a.getChildContext) return r;
			for (var i in a = a.getChildContext())
				if (!(i in e)) throw Error(s(108, G(t) || "Unknown", i));
			return n({}, r, a)
		}

		function vn(e) {
			return e = (e = e.stateNode) && e.__reactInternalMemoizedMergedChildContext || cn, mn = hn.current, on(hn, e), on(un, un.current), !0
		}

		function bn(e, t, r) {
			var a = e.stateNode;
			if (!a) throw Error(s(169));
			r ? (e = fn(e, t, mn), a.__reactInternalMemoizedMergedChildContext = e, pn(un), pn(hn), on(hn, e)) : pn(un), on(un, r)
		}
		var Pn = null,
			Sn = null,
			wn = i.unstable_runWithPriority,
			kn = i.unstable_scheduleCallback,
			_n = i.unstable_cancelCallback,
			In = i.unstable_shouldYield,
			qn = i.unstable_requestPaint,
			Ln = i.unstable_now,
			xn = i.unstable_getCurrentPriorityLevel,
			En = i.unstable_ImmediatePriority,
			Nn = i.unstable_UserBlockingPriority,
			On = i.unstable_NormalPriority,
			Dn = i.unstable_LowPriority,
			Tn = i.unstable_IdlePriority,
			jn = {},
			Fn = void 0 !== qn ? qn : function() {},
			Cn = null,
			An = null,
			Hn = !1,
			Rn = Ln(),
			Mn = 1e4 > Rn ? Ln : function() {
				return Ln() - Rn
			};

		function $n() {
			switch (xn()) {
				case En:
					return 99;
				case Nn:
					return 98;
				case On:
					return 97;
				case Dn:
					return 96;
				case Tn:
					return 95;
				default:
					throw Error(s(332))
			}
		}

		function zn(e) {
			switch (e) {
				case 99:
					return En;
				case 98:
					return Nn;
				case 97:
					return On;
				case 96:
					return Dn;
				case 95:
					return Tn;
				default:
					throw Error(s(332))
			}
		}

		function Un(e, t) {
			return e = zn(e), wn(e, t)
		}

		function Bn(e, t, r) {
			return e = zn(e), kn(e, t, r)
		}

		function Wn() {
			if (null !== An) {
				var e = An;
				An = null, _n(e)
			}
			Vn()
		}

		function Vn() {
			if (!Hn && null !== Cn) {
				Hn = !0;
				var e = 0;
				try {
					var t = Cn;
					Un(99, (function() {
						for (; e < t.length; e++) {
							var r = t[e];
							do {
								r = r(!0)
							} while (null !== r)
						}
					})), Cn = null
				} catch (r) {
					throw null !== Cn && (Cn = Cn.slice(e + 1)), kn(En, Wn), r
				} finally {
					Hn = !1
				}
			}
		}
		var Gn = S.ReactCurrentBatchConfig;

		function Kn(e, t) {
			if (e && e.defaultProps) {
				for (var r in t = n({}, t), e = e.defaultProps) void 0 === t[r] && (t[r] = e[r]);
				return t
			}
			return t
		}
		var Qn = sn(null),
			Yn = null,
			Jn = null,
			Xn = null;

		function Zn() {
			Xn = Jn = Yn = null
		}

		function ei(e) {
			var t = Qn.current;
			pn(Qn), e.type._context._currentValue = t
		}

		function ti(e, t) {
			for (; null !== e;) {
				var r = e.alternate;
				if ((e.childLanes & t) === t) {
					if (null === r || (r.childLanes & t) === t) break;
					r.childLanes |= t
				} else e.childLanes |= t, null !== r && (r.childLanes |= t);
				e = e.return
			}
		}

		function ri(e, t) {
			Yn = e, Xn = Jn = null, null !== (e = e.dependencies) && null !== e.firstContext && (0 !== (e.lanes & t) && (Ts = !0), e.firstContext = null)
		}

		function ai(e, t) {
			if (Xn !== e && !1 !== t && 0 !== t)
				if ("number" === typeof t && 1073741823 !== t || (Xn = e, t = 1073741823), t = {
						context: e,
						observedBits: t,
						next: null
					}, null === Jn) {
					if (null === Yn) throw Error(s(308));
					Jn = t, Yn.dependencies = {
						lanes: 0,
						firstContext: t,
						responders: null
					}
				} else Jn = Jn.next = t;
			return e._currentValue
		}
		var ni = !1;

		function ii(e) {
			e.updateQueue = {
				baseState: e.memoizedState,
				firstBaseUpdate: null,
				lastBaseUpdate: null,
				shared: {
					pending: null
				},
				effects: null
			}
		}

		function si(e, t) {
			e = e.updateQueue, t.updateQueue === e && (t.updateQueue = {
				baseState: e.baseState,
				firstBaseUpdate: e.firstBaseUpdate,
				lastBaseUpdate: e.lastBaseUpdate,
				shared: e.shared,
				effects: e.effects
			})
		}

		function pi(e, t) {
			return {
				eventTime: e,
				lane: t,
				tag: 0,
				payload: null,
				callback: null,
				next: null
			}
		}

		function oi(e, t) {
			if (null !== (e = e.updateQueue)) {
				var r = (e = e.shared).pending;
				null === r ? t.next = t : (t.next = r.next, r.next = t), e.pending = t
			}
		}

		function ci(e, t) {
			var r = e.updateQueue,
				a = e.alternate;
			if (null !== a && r === (a = a.updateQueue)) {
				var n = null,
					i = null;
				if (null !== (r = r.firstBaseUpdate)) {
					do {
						var s = {
							eventTime: r.eventTime,
							lane: r.lane,
							tag: r.tag,
							payload: r.payload,
							callback: r.callback,
							next: null
						};
						null === i ? n = i = s : i = i.next = s, r = r.next
					} while (null !== r);
					null === i ? n = i = t : i = i.next = t
				} else n = i = t;
				return r = {
					baseState: a.baseState,
					firstBaseUpdate: n,
					lastBaseUpdate: i,
					shared: a.shared,
					effects: a.effects
				}, void(e.updateQueue = r)
			}
			null === (e = r.lastBaseUpdate) ? r.firstBaseUpdate = t : e.next = t, r.lastBaseUpdate = t
		}

		function hi(e, t, r, a) {
			var i = e.updateQueue;
			ni = !1;
			var s = i.firstBaseUpdate,
				p = i.lastBaseUpdate,
				o = i.shared.pending;
			if (null !== o) {
				i.shared.pending = null;
				var c = o,
					h = c.next;
				c.next = null, null === p ? s = h : p.next = h, p = c;
				var u = e.alternate;
				if (null !== u) {
					var m = (u = u.updateQueue).lastBaseUpdate;
					m !== p && (null === m ? u.firstBaseUpdate = h : m.next = h, u.lastBaseUpdate = c)
				}
			}
			if (null !== s) {
				for (m = i.baseState, p = 0, u = h = c = null;;) {
					o = s.lane;
					var d = s.eventTime;
					if ((a & o) === o) {
						null !== u && (u = u.next = {
							eventTime: d,
							lane: 0,
							tag: s.tag,
							payload: s.payload,
							callback: s.callback,
							next: null
						});
						e: {
							var l = e,
								y = s;
							switch (o = t, d = r, y.tag) {
								case 1:
									if ("function" === typeof(l = y.payload)) {
										m = l.call(d, m, o);
										break e
									}
									m = l;
									break e;
								case 3:
									l.flags = -4097 & l.flags | 64;
								case 0:
									if (null === (o = "function" === typeof(l = y.payload) ? l.call(d, m, o) : l) || void 0 === o) break e;
									m = n({}, m, o);
									break e;
								case 2:
									ni = !0
							}
						}
						null !== s.callback && (e.flags |= 32, null === (o = i.effects) ? i.effects = [s] : o.push(s))
					} else d = {
						eventTime: d,
						lane: o,
						tag: s.tag,
						payload: s.payload,
						callback: s.callback,
						next: null
					}, null === u ? (h = u = d, c = m) : u = u.next = d, p |= o;
					if (null === (s = s.next)) {
						if (null === (o = i.shared.pending)) break;
						s = o.next, o.next = null, i.lastBaseUpdate = o, i.shared.pending = null
					}
				}
				null === u && (c = m), i.baseState = c, i.firstBaseUpdate = h, i.lastBaseUpdate = u, Ap |= p, e.lanes = p, e.memoizedState = m
			}
		}

		function ui(e, t, r) {
			if (e = t.effects, t.effects = null, null !== e)
				for (t = 0; t < e.length; t++) {
					var a = e[t],
						n = a.callback;
					if (null !== n) {
						if (a.callback = null, a = r, "function" !== typeof n) throw Error(s(191, n));
						n.call(a)
					}
				}
		}
		var mi = (new a.Component).refs;

		function di(e, t, r, a) {
			r = null === (r = r(a, t = e.memoizedState)) || void 0 === r ? t : n({}, t, r), e.memoizedState = r, 0 === e.lanes && (e.updateQueue.baseState = r)
		}
		var li = {
			isMounted: function(e) {
				return !!(e = e._reactInternals) && Ye(e) === e
			},
			enqueueSetState: function(e, t, r) {
				e = e._reactInternals;
				var a = oo(),
					n = co(e),
					i = pi(a, n);
				i.payload = t, void 0 !== r && null !== r && (i.callback = r), oi(e, i), ho(e, n, a)
			},
			enqueueReplaceState: function(e, t, r) {
				e = e._reactInternals;
				var a = oo(),
					n = co(e),
					i = pi(a, n);
				i.tag = 1, i.payload = t, void 0 !== r && null !== r && (i.callback = r), oi(e, i), ho(e, n, a)
			},
			enqueueForceUpdate: function(e, t) {
				e = e._reactInternals;
				var r = oo(),
					a = co(e),
					n = pi(r, a);
				n.tag = 2, void 0 !== t && null !== t && (n.callback = t), oi(e, n), ho(e, a, r)
			}
		};

		function yi(e, t, r, a, n, i, s) {
			return "function" === typeof(e = e.stateNode).shouldComponentUpdate ? e.shouldComponentUpdate(a, i, s) : !t.prototype || !t.prototype.isPureReactComponent || (!oa(r, a) || !oa(n, i))
		}

		function gi(e, t, r) {
			var a = !1,
				n = cn,
				i = t.contextType;
			return "object" === typeof i && null !== i ? i = ai(i) : (n = ln(t) ? mn : hn.current, i = (a = null !== (a = t.contextTypes) && void 0 !== a) ? dn(e, n) : cn), t = new t(r, i), e.memoizedState = null !== t.state && void 0 !== t.state ? t.state : null, t.updater = li, e.stateNode = t, t._reactInternals = e, a && ((e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext = n, e.__reactInternalMemoizedMaskedChildContext = i), t
		}

		function fi(e, t, r, a) {
			e = t.state, "function" === typeof t.componentWillReceiveProps && t.componentWillReceiveProps(r, a), "function" === typeof t.UNSAFE_componentWillReceiveProps && t.UNSAFE_componentWillReceiveProps(r, a), t.state !== e && li.enqueueReplaceState(t, t.state, null)
		}

		function vi(e, t, r, a) {
			var n = e.stateNode;
			n.props = r, n.state = e.memoizedState, n.refs = mi, ii(e);
			var i = t.contextType;
			"object" === typeof i && null !== i ? n.context = ai(i) : (i = ln(t) ? mn : hn.current, n.context = dn(e, i)), hi(e, r, n, a), n.state = e.memoizedState, "function" === typeof(i = t.getDerivedStateFromProps) && (di(e, t, i, r), n.state = e.memoizedState), "function" === typeof t.getDerivedStateFromProps || "function" === typeof n.getSnapshotBeforeUpdate || "function" !== typeof n.UNSAFE_componentWillMount && "function" !== typeof n.componentWillMount || (t = n.state, "function" === typeof n.componentWillMount && n.componentWillMount(), "function" === typeof n.UNSAFE_componentWillMount && n.UNSAFE_componentWillMount(), t !== n.state && li.enqueueReplaceState(n, n.state, null), hi(e, r, n, a), n.state = e.memoizedState), "function" === typeof n.componentDidMount && (e.flags |= 4)
		}
		var bi = Array.isArray;

		function Pi(e, t, r) {
			if (null !== (e = r.ref) && "function" !== typeof e && "object" !== typeof e) {
				if (r._owner) {
					if (r = r._owner) {
						if (1 !== r.tag) throw Error(s(309));
						var a = r.stateNode
					}
					if (!a) throw Error(s(147, e));
					var n = "" + e;
					return null !== t && null !== t.ref && "function" === typeof t.ref && t.ref._stringRef === n ? t.ref : ((t = function(e) {
						var t = a.refs;
						t === mi && (t = a.refs = {}), null === e ? delete t[n] : t[n] = e
					})._stringRef = n, t)
				}
				if ("string" !== typeof e) throw Error(s(284));
				if (!r._owner) throw Error(s(290, e))
			}
			return e
		}

		function Si(e, t) {
			if ("textarea" !== e.type) throw Error(s(31, "[object Object]" === Object.prototype.toString.call(t) ? "object with keys {" + Object.keys(t).join(", ") + "}" : t))
		}

		function wi(e) {
			function t(t, r) {
				if (e) {
					var a = t.lastEffect;
					null !== a ? (a.nextEffect = r, t.lastEffect = r) : t.firstEffect = t.lastEffect = r, r.nextEffect = null, r.flags = 8
				}
			}

			function r(r, a) {
				if (!e) return null;
				for (; null !== a;) t(r, a), a = a.sibling;
				return null
			}

			function a(e, t) {
				for (e = new Map; null !== t;) null !== t.key ? e.set(t.key, t) : e.set(t.index, t), t = t.sibling;
				return e
			}

			function n(e, t) {
				return (e = Uo(e, t)).index = 0, e.sibling = null, e
			}

			function i(t, r, a) {
				return t.index = a, e ? null !== (a = t.alternate) ? (a = a.index) < r ? (t.flags = 2, r) : a : (t.flags = 2, r) : r
			}

			function p(t) {
				return e && null === t.alternate && (t.flags = 2), t
			}

			function o(e, t, r, a) {
				return null === t || 6 !== t.tag ? ((t = Go(r, e.mode, a)).return = e, t) : ((t = n(t, r)).return = e, t)
			}

			function c(e, t, r, a) {
				return null !== t && t.elementType === r.type ? ((a = n(t, r.props)).ref = Pi(e, t, r), a.return = e, a) : ((a = Bo(r.type, r.key, r.props, null, e.mode, a)).ref = Pi(e, t, r), a.return = e, a)
			}

			function h(e, t, r, a) {
				return null === t || 4 !== t.tag || t.stateNode.containerInfo !== r.containerInfo || t.stateNode.implementation !== r.implementation ? ((t = Ko(r, e.mode, a)).return = e, t) : ((t = n(t, r.children || [])).return = e, t)
			}

			function u(e, t, r, a, i) {
				return null === t || 7 !== t.tag ? ((t = Wo(r, e.mode, a, i)).return = e, t) : ((t = n(t, r)).return = e, t)
			}

			function m(e, t, r) {
				if ("string" === typeof t || "number" === typeof t) return (t = Go("" + t, e.mode, r)).return = e, t;
				if ("object" === typeof t && null !== t) {
					switch (t.$$typeof) {
						case w:
							return (r = Bo(t.type, t.key, t.props, null, e.mode, r)).ref = Pi(e, null, t), r.return = e, r;
						case k:
							return (t = Ko(t, e.mode, r)).return = e, t
					}
					if (bi(t) || z(t)) return (t = Wo(t, e.mode, r, null)).return = e, t;
					Si(e, t)
				}
				return null
			}

			function d(e, t, r, a) {
				var n = null !== t ? t.key : null;
				if ("string" === typeof r || "number" === typeof r) return null !== n ? null : o(e, t, "" + r, a);
				if ("object" === typeof r && null !== r) {
					switch (r.$$typeof) {
						case w:
							return r.key === n ? r.type === _ ? u(e, t, r.props.children, a, n) : c(e, t, r, a) : null;
						case k:
							return r.key === n ? h(e, t, r, a) : null
					}
					if (bi(r) || z(r)) return null !== n ? null : u(e, t, r, a, null);
					Si(e, r)
				}
				return null
			}

			function l(e, t, r, a, n) {
				if ("string" === typeof a || "number" === typeof a) return o(t, e = e.get(r) || null, "" + a, n);
				if ("object" === typeof a && null !== a) {
					switch (a.$$typeof) {
						case w:
							return e = e.get(null === a.key ? r : a.key) || null, a.type === _ ? u(t, e, a.props.children, n, a.key) : c(t, e, a, n);
						case k:
							return h(t, e = e.get(null === a.key ? r : a.key) || null, a, n)
					}
					if (bi(a) || z(a)) return u(t, e = e.get(r) || null, a, n, null);
					Si(t, a)
				}
				return null
			}

			function y(n, s, p, o) {
				for (var c = null, h = null, u = s, y = s = 0, g = null; null !== u && y < p.length; y++) {
					u.index > y ? (g = u, u = null) : g = u.sibling;
					var f = d(n, u, p[y], o);
					if (null === f) {
						null === u && (u = g);
						break
					}
					e && u && null === f.alternate && t(n, u), s = i(f, s, y), null === h ? c = f : h.sibling = f, h = f, u = g
				}
				if (y === p.length) return r(n, u), c;
				if (null === u) {
					for (; y < p.length; y++) null !== (u = m(n, p[y], o)) && (s = i(u, s, y), null === h ? c = u : h.sibling = u, h = u);
					return c
				}
				for (u = a(n, u); y < p.length; y++) null !== (g = l(u, n, y, p[y], o)) && (e && null !== g.alternate && u.delete(null === g.key ? y : g.key), s = i(g, s, y), null === h ? c = g : h.sibling = g, h = g);
				return e && u.forEach((function(e) {
					return t(n, e)
				})), c
			}

			function g(n, p, o, c) {
				var h = z(o);
				if ("function" !== typeof h) throw Error(s(150));
				if (null == (o = h.call(o))) throw Error(s(151));
				for (var u = h = null, y = p, g = p = 0, f = null, v = o.next(); null !== y && !v.done; g++, v = o.next()) {
					y.index > g ? (f = y, y = null) : f = y.sibling;
					var b = d(n, y, v.value, c);
					if (null === b) {
						null === y && (y = f);
						break
					}
					e && y && null === b.alternate && t(n, y), p = i(b, p, g), null === u ? h = b : u.sibling = b, u = b, y = f
				}
				if (v.done) return r(n, y), h;
				if (null === y) {
					for (; !v.done; g++, v = o.next()) null !== (v = m(n, v.value, c)) && (p = i(v, p, g), null === u ? h = v : u.sibling = v, u = v);
					return h
				}
				for (y = a(n, y); !v.done; g++, v = o.next()) null !== (v = l(y, n, g, v.value, c)) && (e && null !== v.alternate && y.delete(null === v.key ? g : v.key), p = i(v, p, g), null === u ? h = v : u.sibling = v, u = v);
				return e && y.forEach((function(e) {
					return t(n, e)
				})), h
			}
			return function(e, a, i, o) {
				var c = "object" === typeof i && null !== i && i.type === _ && null === i.key;
				c && (i = i.props.children);
				var h = "object" === typeof i && null !== i;
				if (h) switch (i.$$typeof) {
					case w:
						e: {
							for (h = i.key, c = a; null !== c;) {
								if (c.key === h) {
									switch (c.tag) {
										case 7:
											if (i.type === _) {
												r(e, c.sibling), (a = n(c, i.props.children)).return = e, e = a;
												break e
											}
											break;
										default:
											if (c.elementType === i.type) {
												r(e, c.sibling), (a = n(c, i.props)).ref = Pi(e, c, i), a.return = e, e = a;
												break e
											}
									}
									r(e, c);
									break
								}
								t(e, c), c = c.sibling
							}
							i.type === _ ? ((a = Wo(i.props.children, e.mode, o, i.key)).return = e, e = a) : ((o = Bo(i.type, i.key, i.props, null, e.mode, o)).ref = Pi(e, a, i), o.return = e, e = o)
						}
						return p(e);
					case k:
						e: {
							for (c = i.key; null !== a;) {
								if (a.key === c) {
									if (4 === a.tag && a.stateNode.containerInfo === i.containerInfo && a.stateNode.implementation === i.implementation) {
										r(e, a.sibling), (a = n(a, i.children || [])).return = e, e = a;
										break e
									}
									r(e, a);
									break
								}
								t(e, a), a = a.sibling
							}(a = Ko(i, e.mode, o)).return = e,
							e = a
						}
						return p(e)
				}
				if ("string" === typeof i || "number" === typeof i) return i = "" + i, null !== a && 6 === a.tag ? (r(e, a.sibling), (a = n(a, i)).return = e, e = a) : (r(e, a), (a = Go(i, e.mode, o)).return = e, e = a), p(e);
				if (bi(i)) return y(e, a, i, o);
				if (z(i)) return g(e, a, i, o);
				if (h && Si(e, i), "undefined" === typeof i && !c) switch (e.tag) {
					case 1:
					case 22:
					case 0:
					case 11:
					case 15:
						throw Error(s(152, G(e.type) || "Component"))
				}
				return r(e, a)
			}
		}
		var ki = wi(!0),
			_i = wi(!1),
			Ii = {},
			qi = sn(Ii),
			Li = sn(Ii),
			xi = sn(Ii);

		function Ei(e) {
			if (e === Ii) throw Error(s(174));
			return e
		}

		function Ni(e, t) {
			switch (on(xi, t), on(Li, e), on(qi, Ii), e = t.nodeType) {
				case 9:
				case 11:
					t = (t = t.documentElement) ? t.namespaceURI : le(null, "");
					break;
				default:
					t = le(t = (e = 8 === e ? t.parentNode : t).namespaceURI || null, e = e.tagName)
			}
			pn(qi), on(qi, t)
		}

		function Oi() {
			pn(qi), pn(Li), pn(xi)
		}

		function Di(e) {
			Ei(xi.current);
			var t = Ei(qi.current),
				r = le(t, e.type);
			t !== r && (on(Li, e), on(qi, r))
		}

		function Ti(e) {
			Li.current === e && (pn(qi), pn(Li))
		}
		var ji = sn(0);

		function Fi(e) {
			for (var t = e; null !== t;) {
				if (13 === t.tag) {
					var r = t.memoizedState;
					if (null !== r && (null === (r = r.dehydrated) || "$?" === r.data || "$!" === r.data)) return t
				} else if (19 === t.tag && void 0 !== t.memoizedProps.revealOrder) {
					if (0 !== (64 & t.flags)) return t
				} else if (null !== t.child) {
					t.child.return = t, t = t.child;
					continue
				}
				if (t === e) break;
				for (; null === t.sibling;) {
					if (null === t.return || t.return === e) return null;
					t = t.return
				}
				t.sibling.return = t.return, t = t.sibling
			}
			return null
		}
		var Ci = null,
			Ai = null,
			Hi = !1;

		function Ri(e, t) {
			var r = $o(5, null, null, 0);
			r.elementType = "DELETED", r.type = "DELETED", r.stateNode = t, r.return = e, r.flags = 8, null !== e.lastEffect ? (e.lastEffect.nextEffect = r, e.lastEffect = r) : e.firstEffect = e.lastEffect = r
		}

		function Mi(e, t) {
			switch (e.tag) {
				case 5:
					var r = e.type;
					return null !== (t = 1 !== t.nodeType || r.toLowerCase() !== t.nodeName.toLowerCase() ? null : t) && (e.stateNode = t, !0);
				case 6:
					return null !== (t = "" === e.pendingProps || 3 !== t.nodeType ? null : t) && (e.stateNode = t, !0);
				case 13:
				default:
					return !1
			}
		}

		function $i(e) {
			if (Hi) {
				var t = Ai;
				if (t) {
					var r = t;
					if (!Mi(e, t)) {
						if (!(t = Ba(r.nextSibling)) || !Mi(e, t)) return e.flags = -1025 & e.flags | 2, Hi = !1, void(Ci = e);
						Ri(Ci, r)
					}
					Ci = e, Ai = Ba(t.firstChild)
				} else e.flags = -1025 & e.flags | 2, Hi = !1, Ci = e
			}
		}

		function zi(e) {
			for (e = e.return; null !== e && 5 !== e.tag && 3 !== e.tag && 13 !== e.tag;) e = e.return;
			Ci = e
		}

		function Ui(e) {
			if (e !== Ci) return !1;
			if (!Hi) return zi(e), Hi = !0, !1;
			var t = e.type;
			if (5 !== e.tag || "head" !== t && "body" !== t && !Ma(t, e.memoizedProps))
				for (t = Ai; t;) Ri(e, t), t = Ba(t.nextSibling);
			if (zi(e), 13 === e.tag) {
				if (!(e = null !== (e = e.memoizedState) ? e.dehydrated : null)) throw Error(s(317));
				e: {
					for (e = e.nextSibling, t = 0; e;) {
						if (8 === e.nodeType) {
							var r = e.data;
							if ("/$" === r) {
								if (0 === t) {
									Ai = Ba(e.nextSibling);
									break e
								}
								t--
							} else "$" !== r && "$!" !== r && "$?" !== r || t++
						}
						e = e.nextSibling
					}
					Ai = null
				}
			} else Ai = Ci ? Ba(e.stateNode.nextSibling) : null;
			return !0
		}

		function Bi() {
			Ai = Ci = null, Hi = !1
		}
		var Wi = [];

		function Vi() {
			for (var e = 0; e < Wi.length; e++) Wi[e]._workInProgressVersionPrimary = null;
			Wi.length = 0
		}
		var Gi = S.ReactCurrentDispatcher,
			Ki = S.ReactCurrentBatchConfig,
			Qi = 0,
			Yi = null,
			Ji = null,
			Xi = null,
			Zi = !1,
			es = !1;

		function ts() {
			throw Error(s(321))
		}

		function rs(e, t) {
			if (null === t) return !1;
			for (var r = 0; r < t.length && r < e.length; r++)
				if (!sa(e[r], t[r])) return !1;
			return !0
		}

		function as(e, t, r, a, n, i) {
			if (Qi = i, Yi = t, t.memoizedState = null, t.updateQueue = null, t.lanes = 0, Gi.current = null === e || null === e.memoizedState ? Es : Ns, e = r(a, n), es) {
				i = 0;
				do {
					if (es = !1, !(25 > i)) throw Error(s(301));
					i += 1, Xi = Ji = null, t.updateQueue = null, Gi.current = Os, e = r(a, n)
				} while (es)
			}
			if (Gi.current = xs, t = null !== Ji && null !== Ji.next, Qi = 0, Xi = Ji = Yi = null, Zi = !1, t) throw Error(s(300));
			return e
		}

		function ns() {
			var e = {
				memoizedState: null,
				baseState: null,
				baseQueue: null,
				queue: null,
				next: null
			};
			return null === Xi ? Yi.memoizedState = Xi = e : Xi = Xi.next = e, Xi
		}

		function is() {
			if (null === Ji) {
				var e = Yi.alternate;
				e = null !== e ? e.memoizedState : null
			} else e = Ji.next;
			var t = null === Xi ? Yi.memoizedState : Xi.next;
			if (null !== t) Xi = t, Ji = e;
			else {
				if (null === e) throw Error(s(310));
				e = {
					memoizedState: (Ji = e).memoizedState,
					baseState: Ji.baseState,
					baseQueue: Ji.baseQueue,
					queue: Ji.queue,
					next: null
				}, null === Xi ? Yi.memoizedState = Xi = e : Xi = Xi.next = e
			}
			return Xi
		}

		function ss(e, t) {
			return "function" === typeof t ? t(e) : t
		}

		function ps(e) {
			var t = is(),
				r = t.queue;
			if (null === r) throw Error(s(311));
			r.lastRenderedReducer = e;
			var a = Ji,
				n = a.baseQueue,
				i = r.pending;
			if (null !== i) {
				if (null !== n) {
					var p = n.next;
					n.next = i.next, i.next = p
				}
				a.baseQueue = n = i, r.pending = null
			}
			if (null !== n) {
				n = n.next, a = a.baseState;
				var o = p = i = null,
					c = n;
				do {
					var h = c.lane;
					if ((Qi & h) === h) null !== o && (o = o.next = {
						lane: 0,
						action: c.action,
						eagerReducer: c.eagerReducer,
						eagerState: c.eagerState,
						next: null
					}), a = c.eagerReducer === e ? c.eagerState : e(a, c.action);
					else {
						var u = {
							lane: h,
							action: c.action,
							eagerReducer: c.eagerReducer,
							eagerState: c.eagerState,
							next: null
						};
						null === o ? (p = o = u, i = a) : o = o.next = u, Yi.lanes |= h, Ap |= h
					}
					c = c.next
				} while (null !== c && c !== n);
				null === o ? i = a : o.next = p, sa(a, t.memoizedState) || (Ts = !0), t.memoizedState = a, t.baseState = i, t.baseQueue = o, r.lastRenderedState = a
			}
			return [t.memoizedState, r.dispatch]
		}

		function os(e) {
			var t = is(),
				r = t.queue;
			if (null === r) throw Error(s(311));
			r.lastRenderedReducer = e;
			var a = r.dispatch,
				n = r.pending,
				i = t.memoizedState;
			if (null !== n) {
				r.pending = null;
				var p = n = n.next;
				do {
					i = e(i, p.action), p = p.next
				} while (p !== n);
				sa(i, t.memoizedState) || (Ts = !0), t.memoizedState = i, null === t.baseQueue && (t.baseState = i), r.lastRenderedState = i
			}
			return [i, a]
		}

		function cs(e, t, r) {
			var a = t._getVersion;
			a = a(t._source);
			var n = t._workInProgressVersionPrimary;
			if (null !== n ? e = n === a : (e = e.mutableReadLanes, (e = (Qi & e) === e) && (t._workInProgressVersionPrimary = a, Wi.push(t))), e) return r(t._source);
			throw Wi.push(t), Error(s(350))
		}

		function hs(e, t, r, a) {
			var n = Ep;
			if (null === n) throw Error(s(349));
			var i = t._getVersion,
				p = i(t._source),
				o = Gi.current,
				c = o.useState((function() {
					return cs(n, t, r)
				})),
				h = c[1],
				u = c[0];
			c = Xi;
			var m = e.memoizedState,
				d = m.refs,
				l = d.getSnapshot,
				y = m.source;
			m = m.subscribe;
			var g = Yi;
			return e.memoizedState = {
				refs: d,
				source: t,
				subscribe: a
			}, o.useEffect((function() {
				d.getSnapshot = r, d.setSnapshot = h;
				var e = i(t._source);
				if (!sa(p, e)) {
					e = r(t._source), sa(u, e) || (h(e), e = co(g), n.mutableReadLanes |= e & n.pendingLanes), e = n.mutableReadLanes, n.entangledLanes |= e;
					for (var a = n.entanglements, s = e; 0 < s;) {
						var o = 31 - Bt(s),
							c = 1 << o;
						a[o] |= e, s &= ~c
					}
				}
			}), [r, t, a]), o.useEffect((function() {
				return a(t._source, (function() {
					var e = d.getSnapshot,
						r = d.setSnapshot;
					try {
						r(e(t._source));
						var a = co(g);
						n.mutableReadLanes |= a & n.pendingLanes
					} catch (i) {
						r((function() {
							throw i
						}))
					}
				}))
			}), [t, a]), sa(l, r) && sa(y, t) && sa(m, a) || ((e = {
				pending: null,
				dispatch: null,
				lastRenderedReducer: ss,
				lastRenderedState: u
			}).dispatch = h = Ls.bind(null, Yi, e), c.queue = e, c.baseQueue = null, u = cs(n, t, r), c.memoizedState = c.baseState = u), u
		}

		function us(e, t, r) {
			return hs(is(), e, t, r)
		}

		function ms(e) {
			var t = ns();
			return "function" === typeof e && (e = e()), t.memoizedState = t.baseState = e, e = (e = t.queue = {
				pending: null,
				dispatch: null,
				lastRenderedReducer: ss,
				lastRenderedState: e
			}).dispatch = Ls.bind(null, Yi, e), [t.memoizedState, e]
		}

		function ds(e, t, r, a) {
			return e = {
				tag: e,
				create: t,
				destroy: r,
				deps: a,
				next: null
			}, null === (t = Yi.updateQueue) ? (t = {
				lastEffect: null
			}, Yi.updateQueue = t, t.lastEffect = e.next = e) : null === (r = t.lastEffect) ? t.lastEffect = e.next = e : (a = r.next, r.next = e, e.next = a, t.lastEffect = e), e
		}

		function ls(e) {
			return e = {
				current: e
			}, ns().memoizedState = e
		}

		function ys() {
			return is().memoizedState
		}

		function gs(e, t, r, a) {
			var n = ns();
			Yi.flags |= e, n.memoizedState = ds(1 | t, r, void 0, void 0 === a ? null : a)
		}

		function fs(e, t, r, a) {
			var n = is();
			a = void 0 === a ? null : a;
			var i = void 0;
			if (null !== Ji) {
				var s = Ji.memoizedState;
				if (i = s.destroy, null !== a && rs(a, s.deps)) return void ds(t, r, i, a)
			}
			Yi.flags |= e, n.memoizedState = ds(1 | t, r, i, a)
		}

		function vs(e, t) {
			return gs(516, 4, e, t)
		}

		function bs(e, t) {
			return fs(516, 4, e, t)
		}

		function Ps(e, t) {
			return fs(4, 2, e, t)
		}

		function Ss(e, t) {
			return "function" === typeof t ? (e = e(), t(e), function() {
				t(null)
			}) : null !== t && void 0 !== t ? (e = e(), t.current = e, function() {
				t.current = null
			}) : void 0
		}

		function ws(e, t, r) {
			return r = null !== r && void 0 !== r ? r.concat([e]) : null, fs(4, 2, Ss.bind(null, t, e), r)
		}

		function ks() {}

		function _s(e, t) {
			var r = is();
			t = void 0 === t ? null : t;
			var a = r.memoizedState;
			return null !== a && null !== t && rs(t, a[1]) ? a[0] : (r.memoizedState = [e, t], e)
		}

		function Is(e, t) {
			var r = is();
			t = void 0 === t ? null : t;
			var a = r.memoizedState;
			return null !== a && null !== t && rs(t, a[1]) ? a[0] : (e = e(), r.memoizedState = [e, t], e)
		}

		function qs(e, t) {
			var r = $n();
			Un(98 > r ? 98 : r, (function() {
				e(!0)
			})), Un(97 < r ? 97 : r, (function() {
				var r = Ki.transition;
				Ki.transition = 1;
				try {
					e(!1), t()
				} finally {
					Ki.transition = r
				}
			}))
		}

		function Ls(e, t, r) {
			var a = oo(),
				n = co(e),
				i = {
					lane: n,
					action: r,
					eagerReducer: null,
					eagerState: null,
					next: null
				},
				s = t.pending;
			if (null === s ? i.next = i : (i.next = s.next, s.next = i), t.pending = i, s = e.alternate, e === Yi || null !== s && s === Yi) es = Zi = !0;
			else {
				if (0 === e.lanes && (null === s || 0 === s.lanes) && null !== (s = t.lastRenderedReducer)) try {
					var p = t.lastRenderedState,
						o = s(p, r);
					if (i.eagerReducer = s, i.eagerState = o, sa(o, p)) return
				} catch (c) {}
				ho(e, n, a)
			}
		}
		var xs = {
				readContext: ai,
				useCallback: ts,
				useContext: ts,
				useEffect: ts,
				useImperativeHandle: ts,
				useLayoutEffect: ts,
				useMemo: ts,
				useReducer: ts,
				useRef: ts,
				useState: ts,
				useDebugValue: ts,
				useDeferredValue: ts,
				useTransition: ts,
				useMutableSource: ts,
				useOpaqueIdentifier: ts,
				unstable_isNewReconciler: !1
			},
			Es = {
				readContext: ai,
				useCallback: function(e, t) {
					return ns().memoizedState = [e, void 0 === t ? null : t], e
				},
				useContext: ai,
				useEffect: vs,
				useImperativeHandle: function(e, t, r) {
					return r = null !== r && void 0 !== r ? r.concat([e]) : null, gs(4, 2, Ss.bind(null, t, e), r)
				},
				useLayoutEffect: function(e, t) {
					return gs(4, 2, e, t)
				},
				useMemo: function(e, t) {
					var r = ns();
					return t = void 0 === t ? null : t, e = e(), r.memoizedState = [e, t], e
				},
				useReducer: function(e, t, r) {
					var a = ns();
					return t = void 0 !== r ? r(t) : t, a.memoizedState = a.baseState = t, e = (e = a.queue = {
						pending: null,
						dispatch: null,
						lastRenderedReducer: e,
						lastRenderedState: t
					}).dispatch = Ls.bind(null, Yi, e), [a.memoizedState, e]
				},
				useRef: ls,
				useState: ms,
				useDebugValue: ks,
				useDeferredValue: function(e) {
					var t = ms(e),
						r = t[0],
						a = t[1];
					return vs((function() {
						var t = Ki.transition;
						Ki.transition = 1;
						try {
							a(e)
						} finally {
							Ki.transition = t
						}
					}), [e]), r
				},
				useTransition: function() {
					var e = ms(!1),
						t = e[0];
					return ls(e = qs.bind(null, e[1])), [e, t]
				},
				useMutableSource: function(e, t, r) {
					var a = ns();
					return a.memoizedState = {
						refs: {
							getSnapshot: t,
							setSnapshot: null
						},
						source: e,
						subscribe: r
					}, hs(a, e, t, r)
				},
				useOpaqueIdentifier: function() {
					if (Hi) {
						var e = !1,
							t = function(e) {
								return {
									$$typeof: F,
									toString: e,
									valueOf: e
								}
							}((function() {
								throw e || (e = !0, r("r:" + (Va++).toString(36))), Error(s(355))
							})),
							r = ms(t)[1];
						return 0 === (2 & Yi.mode) && (Yi.flags |= 516, ds(5, (function() {
							r("r:" + (Va++).toString(36))
						}), void 0, null)), t
					}
					return ms(t = "r:" + (Va++).toString(36)), t
				},
				unstable_isNewReconciler: !1
			},
			Ns = {
				readContext: ai,
				useCallback: _s,
				useContext: ai,
				useEffect: bs,
				useImperativeHandle: ws,
				useLayoutEffect: Ps,
				useMemo: Is,
				useReducer: ps,
				useRef: ys,
				useState: function() {
					return ps(ss)
				},
				useDebugValue: ks,
				useDeferredValue: function(e) {
					var t = ps(ss),
						r = t[0],
						a = t[1];
					return bs((function() {
						var t = Ki.transition;
						Ki.transition = 1;
						try {
							a(e)
						} finally {
							Ki.transition = t
						}
					}), [e]), r
				},
				useTransition: function() {
					var e = ps(ss)[0];
					return [ys().current, e]
				},
				useMutableSource: us,
				useOpaqueIdentifier: function() {
					return ps(ss)[0]
				},
				unstable_isNewReconciler: !1
			},
			Os = {
				readContext: ai,
				useCallback: _s,
				useContext: ai,
				useEffect: bs,
				useImperativeHandle: ws,
				useLayoutEffect: Ps,
				useMemo: Is,
				useReducer: os,
				useRef: ys,
				useState: function() {
					return os(ss)
				},
				useDebugValue: ks,
				useDeferredValue: function(e) {
					var t = os(ss),
						r = t[0],
						a = t[1];
					return bs((function() {
						var t = Ki.transition;
						Ki.transition = 1;
						try {
							a(e)
						} finally {
							Ki.transition = t
						}
					}), [e]), r
				},
				useTransition: function() {
					var e = os(ss)[0];
					return [ys().current, e]
				},
				useMutableSource: us,
				useOpaqueIdentifier: function() {
					return os(ss)[0]
				},
				unstable_isNewReconciler: !1
			},
			Ds = S.ReactCurrentOwner,
			Ts = !1;

		function js(e, t, r, a) {
			t.child = null === e ? _i(t, null, r, a) : ki(t, e.child, r, a)
		}

		function Fs(e, t, r, a, n) {
			r = r.render;
			var i = t.ref;
			return ri(t, n), a = as(e, t, r, a, i, n), null === e || Ts ? (t.flags |= 1, js(e, t, a, n), t.child) : (t.updateQueue = e.updateQueue, t.flags &= -517, e.lanes &= ~n, tp(e, t, n))
		}

		function Cs(e, t, r, a, n, i) {
			if (null === e) {
				var s = r.type;
				return "function" !== typeof s || zo(s) || void 0 !== s.defaultProps || null !== r.compare || void 0 !== r.defaultProps ? ((e = Bo(r.type, null, a, t, t.mode, i)).ref = t.ref, e.return = t, t.child = e) : (t.tag = 15, t.type = s, As(e, t, s, a, n, i))
			}
			return s = e.child, 0 === (n & i) && (n = s.memoizedProps, (r = null !== (r = r.compare) ? r : oa)(n, a) && e.ref === t.ref) ? tp(e, t, i) : (t.flags |= 1, (e = Uo(s, a)).ref = t.ref, e.return = t, t.child = e)
		}

		function As(e, t, r, a, n, i) {
			if (null !== e && oa(e.memoizedProps, a) && e.ref === t.ref) {
				if (Ts = !1, 0 === (i & n)) return t.lanes = e.lanes, tp(e, t, i);
				0 !== (16384 & e.flags) && (Ts = !0)
			}
			return Ms(e, t, r, a, i)
		}

		function Hs(e, t, r) {
			var a = t.pendingProps,
				n = a.children,
				i = null !== e ? e.memoizedState : null;
			if ("hidden" === a.mode || "unstable-defer-without-hiding" === a.mode)
				if (0 === (4 & t.mode)) t.memoizedState = {
					baseLanes: 0
				}, bo(t, r);
				else {
					if (0 === (1073741824 & r)) return e = null !== i ? i.baseLanes | r : r, t.lanes = t.childLanes = 1073741824, t.memoizedState = {
						baseLanes: e
					}, bo(t, e), null;
					t.memoizedState = {
						baseLanes: 0
					}, bo(t, null !== i ? i.baseLanes : r)
				}
			else null !== i ? (a = i.baseLanes | r, t.memoizedState = null) : a = r, bo(t, a);
			return js(e, t, n, r), t.child
		}

		function Rs(e, t) {
			var r = t.ref;
			(null === e && null !== r || null !== e && e.ref !== r) && (t.flags |= 128)
		}

		function Ms(e, t, r, a, n) {
			var i = ln(r) ? mn : hn.current;
			return i = dn(t, i), ri(t, n), r = as(e, t, r, a, i, n), null === e || Ts ? (t.flags |= 1, js(e, t, r, n), t.child) : (t.updateQueue = e.updateQueue, t.flags &= -517, e.lanes &= ~n, tp(e, t, n))
		}

		function $s(e, t, r, a, n) {
			if (ln(r)) {
				var i = !0;
				vn(t)
			} else i = !1;
			if (ri(t, n), null === t.stateNode) null !== e && (e.alternate = null, t.alternate = null, t.flags |= 2), gi(t, r, a), vi(t, r, a, n), a = !0;
			else if (null === e) {
				var s = t.stateNode,
					p = t.memoizedProps;
				s.props = p;
				var o = s.context,
					c = r.contextType;
				"object" === typeof c && null !== c ? c = ai(c) : c = dn(t, c = ln(r) ? mn : hn.current);
				var h = r.getDerivedStateFromProps,
					u = "function" === typeof h || "function" === typeof s.getSnapshotBeforeUpdate;
				u || "function" !== typeof s.UNSAFE_componentWillReceiveProps && "function" !== typeof s.componentWillReceiveProps || (p !== a || o !== c) && fi(t, s, a, c), ni = !1;
				var m = t.memoizedState;
				s.state = m, hi(t, a, s, n), o = t.memoizedState, p !== a || m !== o || un.current || ni ? ("function" === typeof h && (di(t, r, h, a), o = t.memoizedState), (p = ni || yi(t, r, p, a, m, o, c)) ? (u || "function" !== typeof s.UNSAFE_componentWillMount && "function" !== typeof s.componentWillMount || ("function" === typeof s.componentWillMount && s.componentWillMount(), "function" === typeof s.UNSAFE_componentWillMount && s.UNSAFE_componentWillMount()), "function" === typeof s.componentDidMount && (t.flags |= 4)) : ("function" === typeof s.componentDidMount && (t.flags |= 4), t.memoizedProps = a, t.memoizedState = o), s.props = a, s.state = o, s.context = c, a = p) : ("function" === typeof s.componentDidMount && (t.flags |= 4), a = !1)
			} else {
				s = t.stateNode, si(e, t), p = t.memoizedProps, c = t.type === t.elementType ? p : Kn(t.type, p), s.props = c, u = t.pendingProps, m = s.context, "object" === typeof(o = r.contextType) && null !== o ? o = ai(o) : o = dn(t, o = ln(r) ? mn : hn.current);
				var d = r.getDerivedStateFromProps;
				(h = "function" === typeof d || "function" === typeof s.getSnapshotBeforeUpdate) || "function" !== typeof s.UNSAFE_componentWillReceiveProps && "function" !== typeof s.componentWillReceiveProps || (p !== u || m !== o) && fi(t, s, a, o), ni = !1, m = t.memoizedState, s.state = m, hi(t, a, s, n);
				var l = t.memoizedState;
				p !== u || m !== l || un.current || ni ? ("function" === typeof d && (di(t, r, d, a), l = t.memoizedState), (c = ni || yi(t, r, c, a, m, l, o)) ? (h || "function" !== typeof s.UNSAFE_componentWillUpdate && "function" !== typeof s.componentWillUpdate || ("function" === typeof s.componentWillUpdate && s.componentWillUpdate(a, l, o), "function" === typeof s.UNSAFE_componentWillUpdate && s.UNSAFE_componentWillUpdate(a, l, o)), "function" === typeof s.componentDidUpdate && (t.flags |= 4), "function" === typeof s.getSnapshotBeforeUpdate && (t.flags |= 256)) : ("function" !== typeof s.componentDidUpdate || p === e.memoizedProps && m === e.memoizedState || (t.flags |= 4), "function" !== typeof s.getSnapshotBeforeUpdate || p === e.memoizedProps && m === e.memoizedState || (t.flags |= 256), t.memoizedProps = a, t.memoizedState = l), s.props = a, s.state = l, s.context = o, a = c) : ("function" !== typeof s.componentDidUpdate || p === e.memoizedProps && m === e.memoizedState || (t.flags |= 4), "function" !== typeof s.getSnapshotBeforeUpdate || p === e.memoizedProps && m === e.memoizedState || (t.flags |= 256), a = !1)
			}
			return zs(e, t, r, a, i, n)
		}

		function zs(e, t, r, a, n, i) {
			Rs(e, t);
			var s = 0 !== (64 & t.flags);
			if (!a && !s) return n && bn(t, r, !1), tp(e, t, i);
			a = t.stateNode, Ds.current = t;
			var p = s && "function" !== typeof r.getDerivedStateFromError ? null : a.render();
			return t.flags |= 1, null !== e && s ? (t.child = ki(t, e.child, null, i), t.child = ki(t, null, p, i)) : js(e, t, p, i), t.memoizedState = a.state, n && bn(t, r, !0), t.child
		}

		function Us(e) {
			var t = e.stateNode;
			t.pendingContext ? gn(0, t.pendingContext, t.pendingContext !== t.context) : t.context && gn(0, t.context, !1), Ni(e, t.containerInfo)
		}
		var Bs, Ws, Vs, Gs = {
			dehydrated: null,
			retryLane: 0
		};

		function Ks(e, t, r) {
			var a, n = t.pendingProps,
				i = ji.current,
				s = !1;
			return (a = 0 !== (64 & t.flags)) || (a = (null === e || null !== e.memoizedState) && 0 !== (2 & i)), a ? (s = !0, t.flags &= -65) : null !== e && null === e.memoizedState || void 0 === n.fallback || !0 === n.unstable_avoidThisFallback || (i |= 1), on(ji, 1 & i), null === e ? (void 0 !== n.fallback && $i(t), e = n.children, i = n.fallback, s ? (e = Qs(t, e, i, r), t.child.memoizedState = {
				baseLanes: r
			}, t.memoizedState = Gs, e) : "number" === typeof n.unstable_expectedLoadTime ? (e = Qs(t, e, i, r), t.child.memoizedState = {
				baseLanes: r
			}, t.memoizedState = Gs, t.lanes = 33554432, e) : ((r = Vo({
				mode: "visible",
				children: e
			}, t.mode, r, null)).return = t, t.child = r)) : (e.memoizedState, s ? (n = Js(e, t, n.children, n.fallback, r), s = t.child, i = e.child.memoizedState, s.memoizedState = null === i ? {
				baseLanes: r
			} : {
				baseLanes: i.baseLanes | r
			}, s.childLanes = e.childLanes & ~r, t.memoizedState = Gs, n) : (r = Ys(e, t, n.children, r), t.memoizedState = null, r))
		}

		function Qs(e, t, r, a) {
			var n = e.mode,
				i = e.child;
			return t = {
				mode: "hidden",
				children: t
			}, 0 === (2 & n) && null !== i ? (i.childLanes = 0, i.pendingProps = t) : i = Vo(t, n, 0, null), r = Wo(r, n, a, null), i.return = e, r.return = e, i.sibling = r, e.child = i, r
		}

		function Ys(e, t, r, a) {
			var n = e.child;
			return e = n.sibling, r = Uo(n, {
				mode: "visible",
				children: r
			}), 0 === (2 & t.mode) && (r.lanes = a), r.return = t, r.sibling = null, null !== e && (e.nextEffect = null, e.flags = 8, t.firstEffect = t.lastEffect = e), t.child = r
		}

		function Js(e, t, r, a, n) {
			var i = t.mode,
				s = e.child;
			e = s.sibling;
			var p = {
				mode: "hidden",
				children: r
			};
			return 0 === (2 & i) && t.child !== s ? ((r = t.child).childLanes = 0, r.pendingProps = p, null !== (s = r.lastEffect) ? (t.firstEffect = r.firstEffect, t.lastEffect = s, s.nextEffect = null) : t.firstEffect = t.lastEffect = null) : r = Uo(s, p), null !== e ? a = Uo(e, a) : (a = Wo(a, i, n, null)).flags |= 2, a.return = t, r.return = t, r.sibling = a, t.child = r, a
		}

		function Xs(e, t) {
			e.lanes |= t;
			var r = e.alternate;
			null !== r && (r.lanes |= t), ti(e.return, t)
		}

		function Zs(e, t, r, a, n, i) {
			var s = e.memoizedState;
			null === s ? e.memoizedState = {
				isBackwards: t,
				rendering: null,
				renderingStartTime: 0,
				last: a,
				tail: r,
				tailMode: n,
				lastEffect: i
			} : (s.isBackwards = t, s.rendering = null, s.renderingStartTime = 0, s.last = a, s.tail = r, s.tailMode = n, s.lastEffect = i)
		}

		function ep(e, t, r) {
			var a = t.pendingProps,
				n = a.revealOrder,
				i = a.tail;
			if (js(e, t, a.children, r), 0 !== (2 & (a = ji.current))) a = 1 & a | 2, t.flags |= 64;
			else {
				if (null !== e && 0 !== (64 & e.flags)) e: for (e = t.child; null !== e;) {
					if (13 === e.tag) null !== e.memoizedState && Xs(e, r);
					else if (19 === e.tag) Xs(e, r);
					else if (null !== e.child) {
						e.child.return = e, e = e.child;
						continue
					}
					if (e === t) break e;
					for (; null === e.sibling;) {
						if (null === e.return || e.return === t) break e;
						e = e.return
					}
					e.sibling.return = e.return, e = e.sibling
				}
				a &= 1
			}
			if (on(ji, a), 0 === (2 & t.mode)) t.memoizedState = null;
			else switch (n) {
				case "forwards":
					for (r = t.child, n = null; null !== r;) null !== (e = r.alternate) && null === Fi(e) && (n = r), r = r.sibling;
					null === (r = n) ? (n = t.child, t.child = null) : (n = r.sibling, r.sibling = null), Zs(t, !1, n, r, i, t.lastEffect);
					break;
				case "backwards":
					for (r = null, n = t.child, t.child = null; null !== n;) {
						if (null !== (e = n.alternate) && null === Fi(e)) {
							t.child = n;
							break
						}
						e = n.sibling, n.sibling = r, r = n, n = e
					}
					Zs(t, !0, r, null, i, t.lastEffect);
					break;
				case "together":
					Zs(t, !1, null, null, void 0, t.lastEffect);
					break;
				default:
					t.memoizedState = null
			}
			return t.child
		}

		function tp(e, t, r) {
			if (null !== e && (t.dependencies = e.dependencies), Ap |= t.lanes, 0 !== (r & t.childLanes)) {
				if (null !== e && t.child !== e.child) throw Error(s(153));
				if (null !== t.child) {
					for (r = Uo(e = t.child, e.pendingProps), t.child = r, r.return = t; null !== e.sibling;) e = e.sibling, (r = r.sibling = Uo(e, e.pendingProps)).return = t;
					r.sibling = null
				}
				return t.child
			}
			return null
		}

		function rp(e, t) {
			if (!Hi) switch (e.tailMode) {
				case "hidden":
					t = e.tail;
					for (var r = null; null !== t;) null !== t.alternate && (r = t), t = t.sibling;
					null === r ? e.tail = null : r.sibling = null;
					break;
				case "collapsed":
					r = e.tail;
					for (var a = null; null !== r;) null !== r.alternate && (a = r), r = r.sibling;
					null === a ? t || null === e.tail ? e.tail = null : e.tail.sibling = null : a.sibling = null
			}
		}

		function ap(e, t, r) {
			var a = t.pendingProps;
			switch (t.tag) {
				case 2:
				case 16:
				case 15:
				case 0:
				case 11:
				case 7:
				case 8:
				case 12:
				case 9:
				case 14:
					return null;
				case 1:
					return ln(t.type) && yn(), null;
				case 3:
					return Oi(), pn(un), pn(hn), Vi(), (a = t.stateNode).pendingContext && (a.context = a.pendingContext, a.pendingContext = null), null !== e && null !== e.child || (Ui(t) ? t.flags |= 4 : a.hydrate || (t.flags |= 256)), null;
				case 5:
					Ti(t);
					var i = Ei(xi.current);
					if (r = t.type, null !== e && null != t.stateNode) Ws(e, t, r, a), e.ref !== t.ref && (t.flags |= 128);
					else {
						if (!a) {
							if (null === t.stateNode) throw Error(s(166));
							return null
						}
						if (e = Ei(qi.current), Ui(t)) {
							a = t.stateNode, r = t.type;
							var p = t.memoizedProps;
							switch (a[Ka] = t, a[Qa] = p, r) {
								case "dialog":
									qa("cancel", a), qa("close", a);
									break;
								case "iframe":
								case "object":
								case "embed":
									qa("load", a);
									break;
								case "video":
								case "audio":
									for (e = 0; e < wa.length; e++) qa(wa[e], a);
									break;
								case "source":
									qa("error", a);
									break;
								case "img":
								case "image":
								case "link":
									qa("error", a), qa("load", a);
									break;
								case "details":
									qa("toggle", a);
									break;
								case "input":
									ee(a, p), qa("invalid", a);
									break;
								case "select":
									a._wrapperState = {
										wasMultiple: !!p.multiple
									}, qa("invalid", a);
									break;
								case "textarea":
									oe(a, p), qa("invalid", a)
							}
							for (var c in _e(r, p), e = null, p) p.hasOwnProperty(c) && (i = p[c], "children" === c ? "string" === typeof i ? a.textContent !== i && (e = ["children", i]) : "number" === typeof i && a.textContent !== "" + i && (e = ["children", "" + i]) : o.hasOwnProperty(c) && null != i && "onScroll" === c && qa("scroll", a));
							switch (r) {
								case "input":
									Y(a), ae(a, p, !0);
									break;
								case "textarea":
									Y(a), he(a);
									break;
								case "select":
								case "option":
									break;
								default:
									"function" === typeof p.onClick && (a.onclick = Ca)
							}
							a = e, t.updateQueue = a, null !== a && (t.flags |= 4)
						} else {
							switch (c = 9 === i.nodeType ? i : i.ownerDocument, e === ue && (e = de(r)), e === ue ? "script" === r ? ((e = c.createElement("div")).innerHTML = "<script><\/script>", e = e.removeChild(e.firstChild)) : "string" === typeof a.is ? e = c.createElement(r, {
									is: a.is
								}) : (e = c.createElement(r), "select" === r && (c = e, a.multiple ? c.multiple = !0 : a.size && (c.size = a.size))) : e = c.createElementNS(e, r), e[Ka] = t, e[Qa] = a, Bs(e, t), t.stateNode = e, c = Ie(r, a), r) {
								case "dialog":
									qa("cancel", e), qa("close", e), i = a;
									break;
								case "iframe":
								case "object":
								case "embed":
									qa("load", e), i = a;
									break;
								case "video":
								case "audio":
									for (i = 0; i < wa.length; i++) qa(wa[i], e);
									i = a;
									break;
								case "source":
									qa("error", e), i = a;
									break;
								case "img":
								case "image":
								case "link":
									qa("error", e), qa("load", e), i = a;
									break;
								case "details":
									qa("toggle", e), i = a;
									break;
								case "input":
									ee(e, a), i = Z(e, a), qa("invalid", e);
									break;
								case "option":
									i = ie(e, a);
									break;
								case "select":
									e._wrapperState = {
										wasMultiple: !!a.multiple
									}, i = n({}, a, {
										value: void 0
									}), qa("invalid", e);
									break;
								case "textarea":
									oe(e, a), i = pe(e, a), qa("invalid", e);
									break;
								default:
									i = a
							}
							_e(r, i);
							var h = i;
							for (p in h)
								if (h.hasOwnProperty(p)) {
									var u = h[p];
									"style" === p ? we(e, u) : "dangerouslySetInnerHTML" === p ? null != (u = u ? u.__html : void 0) && fe(e, u) : "children" === p ? "string" === typeof u ? ("textarea" !== r || "" !== u) && ve(e, u) : "number" === typeof u && ve(e, "" + u) : "suppressContentEditableWarning" !== p && "suppressHydrationWarning" !== p && "autoFocus" !== p && (o.hasOwnProperty(p) ? null != u && "onScroll" === p && qa("scroll", e) : null != u && P(e, p, u, c))
								} switch (r) {
								case "input":
									Y(e), ae(e, a, !1);
									break;
								case "textarea":
									Y(e), he(e);
									break;
								case "option":
									null != a.value && e.setAttribute("value", "" + K(a.value));
									break;
								case "select":
									e.multiple = !!a.multiple, null != (p = a.value) ? se(e, !!a.multiple, p, !1) : null != a.defaultValue && se(e, !!a.multiple, a.defaultValue, !0);
									break;
								default:
									"function" === typeof i.onClick && (e.onclick = Ca)
							}
							Ra(r, a) && (t.flags |= 4)
						}
						null !== t.ref && (t.flags |= 128)
					}
					return null;
				case 6:
					if (e && null != t.stateNode) Vs(0, t, e.memoizedProps, a);
					else {
						if ("string" !== typeof a && null === t.stateNode) throw Error(s(166));
						r = Ei(xi.current), Ei(qi.current), Ui(t) ? (a = t.stateNode, r = t.memoizedProps, a[Ka] = t, a.nodeValue !== r && (t.flags |= 4)) : ((a = (9 === r.nodeType ? r : r.ownerDocument).createTextNode(a))[Ka] = t, t.stateNode = a)
					}
					return null;
				case 13:
					return pn(ji), a = t.memoizedState, 0 !== (64 & t.flags) ? (t.lanes = r, t) : (a = null !== a, r = !1, null === e ? void 0 !== t.memoizedProps.fallback && Ui(t) : r = null !== e.memoizedState, a && !r && 0 !== (2 & t.mode) && (null === e && !0 !== t.memoizedProps.unstable_avoidThisFallback || 0 !== (1 & ji.current) ? 0 === jp && (jp = 3) : (0 !== jp && 3 !== jp || (jp = 4), null === Ep || 0 === (134217727 & Ap) && 0 === (134217727 & Hp) || yo(Ep, Op))), (a || r) && (t.flags |= 4), null);
				case 4:
					return Oi(), null === e && xa(t.stateNode.containerInfo), null;
				case 10:
					return ei(t), null;
				case 17:
					return ln(t.type) && yn(), null;
				case 19:
					if (pn(ji), null === (a = t.memoizedState)) return null;
					if (p = 0 !== (64 & t.flags), null === (c = a.rendering))
						if (p) rp(a, !1);
						else {
							if (0 !== jp || null !== e && 0 !== (64 & e.flags))
								for (e = t.child; null !== e;) {
									if (null !== (c = Fi(e))) {
										for (t.flags |= 64, rp(a, !1), null !== (p = c.updateQueue) && (t.updateQueue = p, t.flags |= 4), null === a.lastEffect && (t.firstEffect = null), t.lastEffect = a.lastEffect, a = r, r = t.child; null !== r;) e = a, (p = r).flags &= 2, p.nextEffect = null, p.firstEffect = null, p.lastEffect = null, null === (c = p.alternate) ? (p.childLanes = 0, p.lanes = e, p.child = null, p.memoizedProps = null, p.memoizedState = null, p.updateQueue = null, p.dependencies = null, p.stateNode = null) : (p.childLanes = c.childLanes, p.lanes = c.lanes, p.child = c.child, p.memoizedProps = c.memoizedProps, p.memoizedState = c.memoizedState, p.updateQueue = c.updateQueue, p.type = c.type, e = c.dependencies, p.dependencies = null === e ? null : {
											lanes: e.lanes,
											firstContext: e.firstContext
										}), r = r.sibling;
										return on(ji, 1 & ji.current | 2), t.child
									}
									e = e.sibling
								}
							null !== a.tail && Mn() > zp && (t.flags |= 64, p = !0, rp(a, !1), t.lanes = 33554432)
						}
					else {
						if (!p)
							if (null !== (e = Fi(c))) {
								if (t.flags |= 64, p = !0, null !== (r = e.updateQueue) && (t.updateQueue = r, t.flags |= 4), rp(a, !0), null === a.tail && "hidden" === a.tailMode && !c.alternate && !Hi) return null !== (t = t.lastEffect = a.lastEffect) && (t.nextEffect = null), null
							} else 2 * Mn() - a.renderingStartTime > zp && 1073741824 !== r && (t.flags |= 64, p = !0, rp(a, !1), t.lanes = 33554432);
						a.isBackwards ? (c.sibling = t.child, t.child = c) : (null !== (r = a.last) ? r.sibling = c : t.child = c, a.last = c)
					}
					return null !== a.tail ? (r = a.tail, a.rendering = r, a.tail = r.sibling, a.lastEffect = t.lastEffect, a.renderingStartTime = Mn(), r.sibling = null, t = ji.current, on(ji, p ? 1 & t | 2 : 1 & t), r) : null;
				case 23:
				case 24:
					return Po(), null !== e && null !== e.memoizedState !== (null !== t.memoizedState) && "unstable-defer-without-hiding" !== a.mode && (t.flags |= 4), null
			}
			throw Error(s(156, t.tag))
		}

		function np(e) {
			switch (e.tag) {
				case 1:
					ln(e.type) && yn();
					var t = e.flags;
					return 4096 & t ? (e.flags = -4097 & t | 64, e) : null;
				case 3:
					if (Oi(), pn(un), pn(hn), Vi(), 0 !== (64 & (t = e.flags))) throw Error(s(285));
					return e.flags = -4097 & t | 64, e;
				case 5:
					return Ti(e), null;
				case 13:
					return pn(ji), 4096 & (t = e.flags) ? (e.flags = -4097 & t | 64, e) : null;
				case 19:
					return pn(ji), null;
				case 4:
					return Oi(), null;
				case 10:
					return ei(e), null;
				case 23:
				case 24:
					return Po(), null;
				default:
					return null
			}
		}

		function ip(e, t) {
			try {
				var r = "",
					a = t;
				do {
					r += V(a), a = a.return
				} while (a);
				var n = r
			} catch (i) {
				n = "\nError generating stack: " + i.message + "\n" + i.stack
			}
			return {
				value: e,
				source: t,
				stack: n
			}
		}

		function sp(e, t) {
			try {
				console.error(t.value)
			} catch (r) {
				setTimeout((function() {
					throw r
				}))
			}
		}
		Bs = function(e, t) {
			for (var r = t.child; null !== r;) {
				if (5 === r.tag || 6 === r.tag) e.appendChild(r.stateNode);
				else if (4 !== r.tag && null !== r.child) {
					r.child.return = r, r = r.child;
					continue
				}
				if (r === t) break;
				for (; null === r.sibling;) {
					if (null === r.return || r.return === t) return;
					r = r.return
				}
				r.sibling.return = r.return, r = r.sibling
			}
		}, Ws = function(e, t, r, a) {
			var i = e.memoizedProps;
			if (i !== a) {
				e = t.stateNode, Ei(qi.current);
				var s, p = null;
				switch (r) {
					case "input":
						i = Z(e, i), a = Z(e, a), p = [];
						break;
					case "option":
						i = ie(e, i), a = ie(e, a), p = [];
						break;
					case "select":
						i = n({}, i, {
							value: void 0
						}), a = n({}, a, {
							value: void 0
						}), p = [];
						break;
					case "textarea":
						i = pe(e, i), a = pe(e, a), p = [];
						break;
					default:
						"function" !== typeof i.onClick && "function" === typeof a.onClick && (e.onclick = Ca)
				}
				for (u in _e(r, a), r = null, i)
					if (!a.hasOwnProperty(u) && i.hasOwnProperty(u) && null != i[u])
						if ("style" === u) {
							var c = i[u];
							for (s in c) c.hasOwnProperty(s) && (r || (r = {}), r[s] = "")
						} else "dangerouslySetInnerHTML" !== u && "children" !== u && "suppressContentEditableWarning" !== u && "suppressHydrationWarning" !== u && "autoFocus" !== u && (o.hasOwnProperty(u) ? p || (p = []) : (p = p || []).push(u, null));
				for (u in a) {
					var h = a[u];
					if (c = null != i ? i[u] : void 0, a.hasOwnProperty(u) && h !== c && (null != h || null != c))
						if ("style" === u)
							if (c) {
								for (s in c) !c.hasOwnProperty(s) || h && h.hasOwnProperty(s) || (r || (r = {}), r[s] = "");
								for (s in h) h.hasOwnProperty(s) && c[s] !== h[s] && (r || (r = {}), r[s] = h[s])
							} else r || (p || (p = []), p.push(u, r)), r = h;
					else "dangerouslySetInnerHTML" === u ? (h = h ? h.__html : void 0, c = c ? c.__html : void 0, null != h && c !== h && (p = p || []).push(u, h)) : "children" === u ? "string" !== typeof h && "number" !== typeof h || (p = p || []).push(u, "" + h) : "suppressContentEditableWarning" !== u && "suppressHydrationWarning" !== u && (o.hasOwnProperty(u) ? (null != h && "onScroll" === u && qa("scroll", e), p || c === h || (p = [])) : "object" === typeof h && null !== h && h.$$typeof === F ? h.toString() : (p = p || []).push(u, h))
				}
				r && (p = p || []).push("style", r);
				var u = p;
				(t.updateQueue = u) && (t.flags |= 4)
			}
		}, Vs = function(e, t, r, a) {
			r !== a && (t.flags |= 4)
		};
		var pp = "function" === typeof WeakMap ? WeakMap : Map;

		function op(e, t, r) {
			(r = pi(-1, r)).tag = 3, r.payload = {
				element: null
			};
			var a = t.value;
			return r.callback = function() {
				Vp || (Vp = !0, Gp = a), sp(0, t)
			}, r
		}

		function cp(e, t, r) {
			(r = pi(-1, r)).tag = 3;
			var a = e.type.getDerivedStateFromError;
			if ("function" === typeof a) {
				var n = t.value;
				r.payload = function() {
					return sp(0, t), a(n)
				}
			}
			var i = e.stateNode;
			return null !== i && "function" === typeof i.componentDidCatch && (r.callback = function() {
				"function" !== typeof a && (null === Kp ? Kp = new Set([this]) : Kp.add(this), sp(0, t));
				var e = t.stack;
				this.componentDidCatch(t.value, {
					componentStack: null !== e ? e : ""
				})
			}), r
		}
		var hp = "function" === typeof WeakSet ? WeakSet : Set;

		function up(e) {
			var t = e.ref;
			if (null !== t)
				if ("function" === typeof t) try {
					t(null)
				} catch (r) {
					Ao(e, r)
				} else t.current = null
		}

		function mp(e, t) {
			switch (t.tag) {
				case 0:
				case 11:
				case 15:
				case 22:
					return;
				case 1:
					if (256 & t.flags && null !== e) {
						var r = e.memoizedProps,
							a = e.memoizedState;
						t = (e = t.stateNode).getSnapshotBeforeUpdate(t.elementType === t.type ? r : Kn(t.type, r), a), e.__reactInternalSnapshotBeforeUpdate = t
					}
					return;
				case 3:
					return void(256 & t.flags && Ua(t.stateNode.containerInfo));
				case 5:
				case 6:
				case 4:
				case 17:
					return
			}
			throw Error(s(163))
		}

		function dp(e, t, r) {
			switch (r.tag) {
				case 0:
				case 11:
				case 15:
				case 22:
					if (null !== (t = null !== (t = r.updateQueue) ? t.lastEffect : null)) {
						e = t = t.next;
						do {
							if (3 === (3 & e.tag)) {
								var a = e.create;
								e.destroy = a()
							}
							e = e.next
						} while (e !== t)
					}
					if (null !== (t = null !== (t = r.updateQueue) ? t.lastEffect : null)) {
						e = t = t.next;
						do {
							var n = e;
							a = n.next, 0 !== (4 & (n = n.tag)) && 0 !== (1 & n) && (jo(r, e), To(r, e)), e = a
						} while (e !== t)
					}
					return;
				case 1:
					return e = r.stateNode, 4 & r.flags && (null === t ? e.componentDidMount() : (a = r.elementType === r.type ? t.memoizedProps : Kn(r.type, t.memoizedProps), e.componentDidUpdate(a, t.memoizedState, e.__reactInternalSnapshotBeforeUpdate))), void(null !== (t = r.updateQueue) && ui(r, t, e));
				case 3:
					if (null !== (t = r.updateQueue)) {
						if (e = null, null !== r.child) switch (r.child.tag) {
							case 5:
								e = r.child.stateNode;
								break;
							case 1:
								e = r.child.stateNode
						}
						ui(r, t, e)
					}
					return;
				case 5:
					return e = r.stateNode, void(null === t && 4 & r.flags && Ra(r.type, r.memoizedProps) && e.focus());
				case 6:
				case 4:
				case 12:
					return;
				case 13:
					return void(null === r.memoizedState && (r = r.alternate, null !== r && (r = r.memoizedState, null !== r && (r = r.dehydrated, null !== r && wt(r)))));
				case 19:
				case 17:
				case 20:
				case 21:
				case 23:
				case 24:
					return
			}
			throw Error(s(163))
		}

		function lp(e, t) {
			for (var r = e;;) {
				if (5 === r.tag) {
					var a = r.stateNode;
					if (t) "function" === typeof(a = a.style).setProperty ? a.setProperty("display", "none", "important") : a.display = "none";
					else {
						a = r.stateNode;
						var n = r.memoizedProps.style;
						n = void 0 !== n && null !== n && n.hasOwnProperty("display") ? n.display : null, a.style.display = Se("display", n)
					}
				} else if (6 === r.tag) r.stateNode.nodeValue = t ? "" : r.memoizedProps;
				else if ((23 !== r.tag && 24 !== r.tag || null === r.memoizedState || r === e) && null !== r.child) {
					r.child.return = r, r = r.child;
					continue
				}
				if (r === e) break;
				for (; null === r.sibling;) {
					if (null === r.return || r.return === e) return;
					r = r.return
				}
				r.sibling.return = r.return, r = r.sibling
			}
		}

		function yp(e, t) {
			if (Sn && "function" === typeof Sn.onCommitFiberUnmount) try {
				Sn.onCommitFiberUnmount(Pn, t)
			} catch (i) {}
			switch (t.tag) {
				case 0:
				case 11:
				case 14:
				case 15:
				case 22:
					if (null !== (e = t.updateQueue) && null !== (e = e.lastEffect)) {
						var r = e = e.next;
						do {
							var a = r,
								n = a.destroy;
							if (a = a.tag, void 0 !== n)
								if (0 !== (4 & a)) jo(t, r);
								else {
									a = t;
									try {
										n()
									} catch (i) {
										Ao(a, i)
									}
								} r = r.next
						} while (r !== e)
					}
					break;
				case 1:
					if (up(t), "function" === typeof(e = t.stateNode).componentWillUnmount) try {
						e.props = t.memoizedProps, e.state = t.memoizedState, e.componentWillUnmount()
					} catch (i) {
						Ao(t, i)
					}
					break;
				case 5:
					up(t);
					break;
				case 4:
					Sp(e, t)
			}
		}

		function gp(e) {
			e.alternate = null, e.child = null, e.dependencies = null, e.firstEffect = null, e.lastEffect = null, e.memoizedProps = null, e.memoizedState = null, e.pendingProps = null, e.return = null, e.updateQueue = null
		}

		function fp(e) {
			return 5 === e.tag || 3 === e.tag || 4 === e.tag
		}

		function vp(e) {
			e: {
				for (var t = e.return; null !== t;) {
					if (fp(t)) break e;
					t = t.return
				}
				throw Error(s(160))
			}
			var r = t;
			switch (t = r.stateNode, r.tag) {
				case 5:
					var a = !1;
					break;
				case 3:
				case 4:
					t = t.containerInfo, a = !0;
					break;
				default:
					throw Error(s(161))
			}
			16 & r.flags && (ve(t, ""), r.flags &= -17);e: t: for (r = e;;) {
				for (; null === r.sibling;) {
					if (null === r.return || fp(r.return)) {
						r = null;
						break e
					}
					r = r.return
				}
				for (r.sibling.return = r.return, r = r.sibling; 5 !== r.tag && 6 !== r.tag && 18 !== r.tag;) {
					if (2 & r.flags) continue t;
					if (null === r.child || 4 === r.tag) continue t;
					r.child.return = r, r = r.child
				}
				if (!(2 & r.flags)) {
					r = r.stateNode;
					break e
				}
			}
			a ? bp(e, r, t) : Pp(e, r, t)
		}

		function bp(e, t, r) {
			var a = e.tag,
				n = 5 === a || 6 === a;
			if (n) e = n ? e.stateNode : e.stateNode.instance, t ? 8 === r.nodeType ? r.parentNode.insertBefore(e, t) : r.insertBefore(e, t) : (8 === r.nodeType ? (t = r.parentNode).insertBefore(e, r) : (t = r).appendChild(e), null !== (r = r._reactRootContainer) && void 0 !== r || null !== t.onclick || (t.onclick = Ca));
			else if (4 !== a && null !== (e = e.child))
				for (bp(e, t, r), e = e.sibling; null !== e;) bp(e, t, r), e = e.sibling
		}

		function Pp(e, t, r) {
			var a = e.tag,
				n = 5 === a || 6 === a;
			if (n) e = n ? e.stateNode : e.stateNode.instance, t ? r.insertBefore(e, t) : r.appendChild(e);
			else if (4 !== a && null !== (e = e.child))
				for (Pp(e, t, r), e = e.sibling; null !== e;) Pp(e, t, r), e = e.sibling
		}

		function Sp(e, t) {
			for (var r, a, n = t, i = !1;;) {
				if (!i) {
					i = n.return;
					e: for (;;) {
						if (null === i) throw Error(s(160));
						switch (r = i.stateNode, i.tag) {
							case 5:
								a = !1;
								break e;
							case 3:
							case 4:
								r = r.containerInfo, a = !0;
								break e
						}
						i = i.return
					}
					i = !0
				}
				if (5 === n.tag || 6 === n.tag) {
					e: for (var p = e, o = n, c = o;;)
						if (yp(p, c), null !== c.child && 4 !== c.tag) c.child.return = c, c = c.child;
						else {
							if (c === o) break e;
							for (; null === c.sibling;) {
								if (null === c.return || c.return === o) break e;
								c = c.return
							}
							c.sibling.return = c.return, c = c.sibling
						}a ? (p = r, o = n.stateNode, 8 === p.nodeType ? p.parentNode.removeChild(o) : p.removeChild(o)) : r.removeChild(n.stateNode)
				}
				else if (4 === n.tag) {
					if (null !== n.child) {
						r = n.stateNode.containerInfo, a = !0, n.child.return = n, n = n.child;
						continue
					}
				} else if (yp(e, n), null !== n.child) {
					n.child.return = n, n = n.child;
					continue
				}
				if (n === t) break;
				for (; null === n.sibling;) {
					if (null === n.return || n.return === t) return;
					4 === (n = n.return).tag && (i = !1)
				}
				n.sibling.return = n.return, n = n.sibling
			}
		}

		function wp(e, t) {
			switch (t.tag) {
				case 0:
				case 11:
				case 14:
				case 15:
				case 22:
					var r = t.updateQueue;
					if (null !== (r = null !== r ? r.lastEffect : null)) {
						var a = r = r.next;
						do {
							3 === (3 & a.tag) && (e = a.destroy, a.destroy = void 0, void 0 !== e && e()), a = a.next
						} while (a !== r)
					}
					return;
				case 1:
					return;
				case 5:
					if (null != (r = t.stateNode)) {
						a = t.memoizedProps;
						var n = null !== e ? e.memoizedProps : a;
						e = t.type;
						var i = t.updateQueue;
						if (t.updateQueue = null, null !== i) {
							for (r[Qa] = a, "input" === e && "radio" === a.type && null != a.name && te(r, a), Ie(e, n), t = Ie(e, a), n = 0; n < i.length; n += 2) {
								var p = i[n],
									o = i[n + 1];
								"style" === p ? we(r, o) : "dangerouslySetInnerHTML" === p ? fe(r, o) : "children" === p ? ve(r, o) : P(r, p, o, t)
							}
							switch (e) {
								case "input":
									re(r, a);
									break;
								case "textarea":
									ce(r, a);
									break;
								case "select":
									e = r._wrapperState.wasMultiple, r._wrapperState.wasMultiple = !!a.multiple, null != (i = a.value) ? se(r, !!a.multiple, i, !1) : e !== !!a.multiple && (null != a.defaultValue ? se(r, !!a.multiple, a.defaultValue, !0) : se(r, !!a.multiple, a.multiple ? [] : "", !1))
							}
						}
					}
					return;
				case 6:
					if (null === t.stateNode) throw Error(s(162));
					return void(t.stateNode.nodeValue = t.memoizedProps);
				case 3:
					return void((r = t.stateNode).hydrate && (r.hydrate = !1, wt(r.containerInfo)));
				case 12:
					return;
				case 13:
					return null !== t.memoizedState && ($p = Mn(), lp(t.child, !0)), void kp(t);
				case 19:
					return void kp(t);
				case 17:
					return;
				case 23:
				case 24:
					return void lp(t, null !== t.memoizedState)
			}
			throw Error(s(163))
		}

		function kp(e) {
			var t = e.updateQueue;
			if (null !== t) {
				e.updateQueue = null;
				var r = e.stateNode;
				null === r && (r = e.stateNode = new hp), t.forEach((function(t) {
					var a = Ro.bind(null, e, t);
					r.has(t) || (r.add(t), t.then(a, a))
				}))
			}
		}

		function _p(e, t) {
			return null !== e && (null === (e = e.memoizedState) || null !== e.dehydrated) && (null !== (t = t.memoizedState) && null === t.dehydrated)
		}
		var Ip = Math.ceil,
			qp = S.ReactCurrentDispatcher,
			Lp = S.ReactCurrentOwner,
			xp = 0,
			Ep = null,
			Np = null,
			Op = 0,
			Dp = 0,
			Tp = sn(0),
			jp = 0,
			Fp = null,
			Cp = 0,
			Ap = 0,
			Hp = 0,
			Rp = 0,
			Mp = null,
			$p = 0,
			zp = 1 / 0;

		function Up() {
			zp = Mn() + 500
		}
		var Bp, Wp = null,
			Vp = !1,
			Gp = null,
			Kp = null,
			Qp = !1,
			Yp = null,
			Jp = 90,
			Xp = [],
			Zp = [],
			eo = null,
			to = 0,
			ro = null,
			ao = -1,
			no = 0,
			io = 0,
			so = null,
			po = !1;

		function oo() {
			return 0 !== (48 & xp) ? Mn() : -1 !== ao ? ao : ao = Mn()
		}

		function co(e) {
			if (0 === (2 & (e = e.mode))) return 1;
			if (0 === (4 & e)) return 99 === $n() ? 1 : 2;
			if (0 === no && (no = Cp), 0 !== Gn.transition) {
				0 !== io && (io = null !== Mp ? Mp.pendingLanes : 0), e = no;
				var t = 4186112 & ~io;
				return 0 === (t &= -t) && (0 === (t = (e = 4186112 & ~e) & -e) && (t = 8192)), t
			}
			return e = $n(), 0 !== (4 & xp) && 98 === e ? e = Mt(12, no) : e = Mt(e = function(e) {
				switch (e) {
					case 99:
						return 15;
					case 98:
						return 10;
					case 97:
					case 96:
						return 8;
					case 95:
						return 2;
					default:
						return 0
				}
			}(e), no), e
		}

		function ho(e, t, r) {
			if (50 < to) throw to = 0, ro = null, Error(s(185));
			if (null === (e = uo(e, t))) return null;
			Ut(e, t, r), e === Ep && (Hp |= t, 4 === jp && yo(e, Op));
			var a = $n();
			1 === t ? 0 !== (8 & xp) && 0 === (48 & xp) ? go(e) : (mo(e, r), 0 === xp && (Up(), Wn())) : (0 === (4 & xp) || 98 !== a && 99 !== a || (null === eo ? eo = new Set([e]) : eo.add(e)), mo(e, r)), Mp = e
		}

		function uo(e, t) {
			e.lanes |= t;
			var r = e.alternate;
			for (null !== r && (r.lanes |= t), r = e, e = e.return; null !== e;) e.childLanes |= t, null !== (r = e.alternate) && (r.childLanes |= t), r = e, e = e.return;
			return 3 === r.tag ? r.stateNode : null
		}

		function mo(e, t) {
			for (var r = e.callbackNode, a = e.suspendedLanes, n = e.pingedLanes, i = e.expirationTimes, p = e.pendingLanes; 0 < p;) {
				var o = 31 - Bt(p),
					c = 1 << o,
					h = i[o];
				if (-1 === h) {
					if (0 === (c & a) || 0 !== (c & n)) {
						h = t, At(c);
						var u = Ct;
						i[o] = 10 <= u ? h + 250 : 6 <= u ? h + 5e3 : -1
					}
				} else h <= t && (e.expiredLanes |= c);
				p &= ~c
			}
			if (a = Ht(e, e === Ep ? Op : 0), t = Ct, 0 === a) null !== r && (r !== jn && _n(r), e.callbackNode = null, e.callbackPriority = 0);
			else {
				if (null !== r) {
					if (e.callbackPriority === t) return;
					r !== jn && _n(r)
				}
				15 === t ? (r = go.bind(null, e), null === Cn ? (Cn = [r], An = kn(En, Vn)) : Cn.push(r), r = jn) : 14 === t ? r = Bn(99, go.bind(null, e)) : r = Bn(r = function(e) {
					switch (e) {
						case 15:
						case 14:
							return 99;
						case 13:
						case 12:
						case 11:
						case 10:
							return 98;
						case 9:
						case 8:
						case 7:
						case 6:
						case 4:
						case 5:
							return 97;
						case 3:
						case 2:
						case 1:
							return 95;
						case 0:
							return 90;
						default:
							throw Error(s(358, e))
					}
				}(t), lo.bind(null, e)), e.callbackPriority = t, e.callbackNode = r
			}
		}

		function lo(e) {
			if (ao = -1, io = no = 0, 0 !== (48 & xp)) throw Error(s(327));
			var t = e.callbackNode;
			if (Do() && e.callbackNode !== t) return null;
			var r = Ht(e, e === Ep ? Op : 0);
			if (0 === r) return null;
			var a = r,
				n = xp;
			xp |= 16;
			var i = ko();
			for (Ep === e && Op === a || (Up(), So(e, a));;) try {
				qo();
				break
			} catch (o) {
				wo(e, o)
			}
			if (Zn(), qp.current = i, xp = n, null !== Np ? a = 0 : (Ep = null, Op = 0, a = jp), 0 !== (Cp & Hp)) So(e, 0);
			else if (0 !== a) {
				if (2 === a && (xp |= 64, e.hydrate && (e.hydrate = !1, Ua(e.containerInfo)), 0 !== (r = Rt(e)) && (a = _o(e, r))), 1 === a) throw t = Fp, So(e, 0), yo(e, r), mo(e, Mn()), t;
				switch (e.finishedWork = e.current.alternate, e.finishedLanes = r, a) {
					case 0:
					case 1:
						throw Error(s(345));
					case 2:
						Eo(e);
						break;
					case 3:
						if (yo(e, r), (62914560 & r) === r && 10 < (a = $p + 500 - Mn())) {
							if (0 !== Ht(e, 0)) break;
							if (((n = e.suspendedLanes) & r) !== r) {
								oo(), e.pingedLanes |= e.suspendedLanes & n;
								break
							}
							e.timeoutHandle = $a(Eo.bind(null, e), a);
							break
						}
						Eo(e);
						break;
					case 4:
						if (yo(e, r), (4186112 & r) === r) break;
						for (a = e.eventTimes, n = -1; 0 < r;) {
							var p = 31 - Bt(r);
							i = 1 << p, (p = a[p]) > n && (n = p), r &= ~i
						}
						if (r = n, 10 < (r = (120 > (r = Mn() - r) ? 120 : 480 > r ? 480 : 1080 > r ? 1080 : 1920 > r ? 1920 : 3e3 > r ? 3e3 : 4320 > r ? 4320 : 1960 * Ip(r / 1960)) - r)) {
							e.timeoutHandle = $a(Eo.bind(null, e), r);
							break
						}
						Eo(e);
						break;
					case 5:
						Eo(e);
						break;
					default:
						throw Error(s(329))
				}
			}
			return mo(e, Mn()), e.callbackNode === t ? lo.bind(null, e) : null
		}

		function yo(e, t) {
			for (t &= ~Rp, t &= ~Hp, e.suspendedLanes |= t, e.pingedLanes &= ~t, e = e.expirationTimes; 0 < t;) {
				var r = 31 - Bt(t),
					a = 1 << r;
				e[r] = -1, t &= ~a
			}
		}

		function go(e) {
			if (0 !== (48 & xp)) throw Error(s(327));
			if (Do(), e === Ep && 0 !== (e.expiredLanes & Op)) {
				var t = Op,
					r = _o(e, t);
				0 !== (Cp & Hp) && (r = _o(e, t = Ht(e, t)))
			} else r = _o(e, t = Ht(e, 0));
			if (0 !== e.tag && 2 === r && (xp |= 64, e.hydrate && (e.hydrate = !1, Ua(e.containerInfo)), 0 !== (t = Rt(e)) && (r = _o(e, t))), 1 === r) throw r = Fp, So(e, 0), yo(e, t), mo(e, Mn()), r;
			return e.finishedWork = e.current.alternate, e.finishedLanes = t, Eo(e), mo(e, Mn()), null
		}

		function fo(e, t) {
			var r = xp;
			xp |= 1;
			try {
				return e(t)
			} finally {
				0 === (xp = r) && (Up(), Wn())
			}
		}

		function vo(e, t) {
			var r = xp;
			xp &= -2, xp |= 8;
			try {
				return e(t)
			} finally {
				0 === (xp = r) && (Up(), Wn())
			}
		}

		function bo(e, t) {
			on(Tp, Dp), Dp |= t, Cp |= t
		}

		function Po() {
			Dp = Tp.current, pn(Tp)
		}

		function So(e, t) {
			e.finishedWork = null, e.finishedLanes = 0;
			var r = e.timeoutHandle;
			if (-1 !== r && (e.timeoutHandle = -1, za(r)), null !== Np)
				for (r = Np.return; null !== r;) {
					var a = r;
					switch (a.tag) {
						case 1:
							null !== (a = a.type.childContextTypes) && void 0 !== a && yn();
							break;
						case 3:
							Oi(), pn(un), pn(hn), Vi();
							break;
						case 5:
							Ti(a);
							break;
						case 4:
							Oi();
							break;
						case 13:
						case 19:
							pn(ji);
							break;
						case 10:
							ei(a);
							break;
						case 23:
						case 24:
							Po()
					}
					r = r.return
				}
			Ep = e, Np = Uo(e.current, null), Op = Dp = Cp = t, jp = 0, Fp = null, Rp = Hp = Ap = 0
		}

		function wo(e, t) {
			for (;;) {
				var r = Np;
				try {
					if (Zn(), Gi.current = xs, Zi) {
						for (var a = Yi.memoizedState; null !== a;) {
							var n = a.queue;
							null !== n && (n.pending = null), a = a.next
						}
						Zi = !1
					}
					if (Qi = 0, Xi = Ji = Yi = null, es = !1, Lp.current = null, null === r || null === r.return) {
						jp = 1, Fp = t, Np = null;
						break
					}
					e: {
						var i = e,
							s = r.return,
							p = r,
							o = t;
						if (t = Op, p.flags |= 2048, p.firstEffect = p.lastEffect = null, null !== o && "object" === typeof o && "function" === typeof o.then) {
							var c = o;
							if (0 === (2 & p.mode)) {
								var h = p.alternate;
								h ? (p.updateQueue = h.updateQueue, p.memoizedState = h.memoizedState, p.lanes = h.lanes) : (p.updateQueue = null, p.memoizedState = null)
							}
							var u = 0 !== (1 & ji.current),
								m = s;
							do {
								var d;
								if (d = 13 === m.tag) {
									var l = m.memoizedState;
									if (null !== l) d = null !== l.dehydrated;
									else {
										var y = m.memoizedProps;
										d = void 0 !== y.fallback && (!0 !== y.unstable_avoidThisFallback || !u)
									}
								}
								if (d) {
									var g = m.updateQueue;
									if (null === g) {
										var f = new Set;
										f.add(c), m.updateQueue = f
									} else g.add(c);
									if (0 === (2 & m.mode)) {
										if (m.flags |= 64, p.flags |= 16384, p.flags &= -2981, 1 === p.tag)
											if (null === p.alternate) p.tag = 17;
											else {
												var v = pi(-1, 1);
												v.tag = 2, oi(p, v)
											} p.lanes |= 1;
										break e
									}
									o = void 0, p = t;
									var b = i.pingCache;
									if (null === b ? (b = i.pingCache = new pp, o = new Set, b.set(c, o)) : void 0 === (o = b.get(c)) && (o = new Set, b.set(c, o)), !o.has(p)) {
										o.add(p);
										var P = Ho.bind(null, i, c, p);
										c.then(P, P)
									}
									m.flags |= 4096, m.lanes = t;
									break e
								}
								m = m.return
							} while (null !== m);
							o = Error((G(p.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")
						}
						5 !== jp && (jp = 2),
						o = ip(o, p),
						m = s;do {
							switch (m.tag) {
								case 3:
									i = o, m.flags |= 4096, t &= -t, m.lanes |= t, ci(m, op(0, i, t));
									break e;
								case 1:
									i = o;
									var S = m.type,
										w = m.stateNode;
									if (0 === (64 & m.flags) && ("function" === typeof S.getDerivedStateFromError || null !== w && "function" === typeof w.componentDidCatch && (null === Kp || !Kp.has(w)))) {
										m.flags |= 4096, t &= -t, m.lanes |= t, ci(m, cp(m, i, t));
										break e
									}
							}
							m = m.return
						} while (null !== m)
					}
					xo(r)
				} catch (k) {
					t = k, Np === r && null !== r && (Np = r = r.return);
					continue
				}
				break
			}
		}

		function ko() {
			var e = qp.current;
			return qp.current = xs, null === e ? xs : e
		}

		function _o(e, t) {
			var r = xp;
			xp |= 16;
			var a = ko();
			for (Ep === e && Op === t || So(e, t);;) try {
				Io();
				break
			} catch (n) {
				wo(e, n)
			}
			if (Zn(), xp = r, qp.current = a, null !== Np) throw Error(s(261));
			return Ep = null, Op = 0, jp
		}

		function Io() {
			for (; null !== Np;) Lo(Np)
		}

		function qo() {
			for (; null !== Np && !In();) Lo(Np)
		}

		function Lo(e) {
			var t = Bp(e.alternate, e, Dp);
			e.memoizedProps = e.pendingProps, null === t ? xo(e) : Np = t, Lp.current = null
		}

		function xo(e) {
			var t = e;
			do {
				var r = t.alternate;
				if (e = t.return, 0 === (2048 & t.flags)) {
					if (null !== (r = ap(r, t, Dp))) return void(Np = r);
					if (24 !== (r = t).tag && 23 !== r.tag || null === r.memoizedState || 0 !== (1073741824 & Dp) || 0 === (4 & r.mode)) {
						for (var a = 0, n = r.child; null !== n;) a |= n.lanes | n.childLanes, n = n.sibling;
						r.childLanes = a
					}
					null !== e && 0 === (2048 & e.flags) && (null === e.firstEffect && (e.firstEffect = t.firstEffect), null !== t.lastEffect && (null !== e.lastEffect && (e.lastEffect.nextEffect = t.firstEffect), e.lastEffect = t.lastEffect), 1 < t.flags && (null !== e.lastEffect ? e.lastEffect.nextEffect = t : e.firstEffect = t, e.lastEffect = t))
				} else {
					if (null !== (r = np(t))) return r.flags &= 2047, void(Np = r);
					null !== e && (e.firstEffect = e.lastEffect = null, e.flags |= 2048)
				}
				if (null !== (t = t.sibling)) return void(Np = t);
				Np = t = e
			} while (null !== t);
			0 === jp && (jp = 5)
		}

		function Eo(e) {
			var t = $n();
			return Un(99, No.bind(null, e, t)), null
		}

		function No(e, t) {
			do {
				Do()
			} while (null !== Yp);
			if (0 !== (48 & xp)) throw Error(s(327));
			var r = e.finishedWork;
			if (null === r) return null;
			if (e.finishedWork = null, e.finishedLanes = 0, r === e.current) throw Error(s(177));
			e.callbackNode = null;
			var a = r.lanes | r.childLanes,
				n = a,
				i = e.pendingLanes & ~n;
			e.pendingLanes = n, e.suspendedLanes = 0, e.pingedLanes = 0, e.expiredLanes &= n, e.mutableReadLanes &= n, e.entangledLanes &= n, n = e.entanglements;
			for (var p = e.eventTimes, o = e.expirationTimes; 0 < i;) {
				var c = 31 - Bt(i),
					h = 1 << c;
				n[c] = 0, p[c] = -1, o[c] = -1, i &= ~h
			}
			if (null !== eo && 0 === (24 & a) && eo.has(e) && eo.delete(e), e === Ep && (Np = Ep = null, Op = 0), 1 < r.flags ? null !== r.lastEffect ? (r.lastEffect.nextEffect = r, a = r.firstEffect) : a = r : a = r.firstEffect, null !== a) {
				if (n = xp, xp |= 32, Lp.current = null, Aa = Qt, da(p = ma())) {
					if ("selectionStart" in p) o = {
						start: p.selectionStart,
						end: p.selectionEnd
					};
					else e: if (o = (o = p.ownerDocument) && o.defaultView || window, (h = o.getSelection && o.getSelection()) && 0 !== h.rangeCount) {
						o = h.anchorNode, i = h.anchorOffset, c = h.focusNode, h = h.focusOffset;
						try {
							o.nodeType, c.nodeType
						} catch (q) {
							o = null;
							break e
						}
						var u = 0,
							m = -1,
							d = -1,
							l = 0,
							y = 0,
							g = p,
							f = null;
						t: for (;;) {
							for (var v; g !== o || 0 !== i && 3 !== g.nodeType || (m = u + i), g !== c || 0 !== h && 3 !== g.nodeType || (d = u + h), 3 === g.nodeType && (u += g.nodeValue.length), null !== (v = g.firstChild);) f = g, g = v;
							for (;;) {
								if (g === p) break t;
								if (f === o && ++l === i && (m = u), f === c && ++y === h && (d = u), null !== (v = g.nextSibling)) break;
								f = (g = f).parentNode
							}
							g = v
						}
						o = -1 === m || -1 === d ? null : {
							start: m,
							end: d
						}
					} else o = null;
					o = o || {
						start: 0,
						end: 0
					}
				} else o = null;
				Ha = {
					focusedElem: p,
					selectionRange: o
				}, Qt = !1, so = null, po = !1, Wp = a;
				do {
					try {
						Oo()
					} catch (q) {
						if (null === Wp) throw Error(s(330));
						Ao(Wp, q), Wp = Wp.nextEffect
					}
				} while (null !== Wp);
				so = null, Wp = a;
				do {
					try {
						for (p = e; null !== Wp;) {
							var b = Wp.flags;
							if (16 & b && ve(Wp.stateNode, ""), 128 & b) {
								var P = Wp.alternate;
								if (null !== P) {
									var S = P.ref;
									null !== S && ("function" === typeof S ? S(null) : S.current = null)
								}
							}
							switch (1038 & b) {
								case 2:
									vp(Wp), Wp.flags &= -3;
									break;
								case 6:
									vp(Wp), Wp.flags &= -3, wp(Wp.alternate, Wp);
									break;
								case 1024:
									Wp.flags &= -1025;
									break;
								case 1028:
									Wp.flags &= -1025, wp(Wp.alternate, Wp);
									break;
								case 4:
									wp(Wp.alternate, Wp);
									break;
								case 8:
									Sp(p, o = Wp);
									var w = o.alternate;
									gp(o), null !== w && gp(w)
							}
							Wp = Wp.nextEffect
						}
					} catch (q) {
						if (null === Wp) throw Error(s(330));
						Ao(Wp, q), Wp = Wp.nextEffect
					}
				} while (null !== Wp);
				if (S = Ha, P = ma(), b = S.focusedElem, p = S.selectionRange, P !== b && b && b.ownerDocument && ua(b.ownerDocument.documentElement, b)) {
					null !== p && da(b) && (P = p.start, void 0 === (S = p.end) && (S = P), "selectionStart" in b ? (b.selectionStart = P, b.selectionEnd = Math.min(S, b.value.length)) : (S = (P = b.ownerDocument || document) && P.defaultView || window).getSelection && (S = S.getSelection(), o = b.textContent.length, w = Math.min(p.start, o), p = void 0 === p.end ? w : Math.min(p.end, o), !S.extend && w > p && (o = p, p = w, w = o), o = ha(b, w), i = ha(b, p), o && i && (1 !== S.rangeCount || S.anchorNode !== o.node || S.anchorOffset !== o.offset || S.focusNode !== i.node || S.focusOffset !== i.offset) && ((P = P.createRange()).setStart(o.node, o.offset), S.removeAllRanges(), w > p ? (S.addRange(P), S.extend(i.node, i.offset)) : (P.setEnd(i.node, i.offset), S.addRange(P))))), P = [];
					for (S = b; S = S.parentNode;) 1 === S.nodeType && P.push({
						element: S,
						left: S.scrollLeft,
						top: S.scrollTop
					});
					for ("function" === typeof b.focus && b.focus(), b = 0; b < P.length; b++)(S = P[b]).element.scrollLeft = S.left, S.element.scrollTop = S.top
				}
				Qt = !!Aa, Ha = Aa = null, e.current = r, Wp = a;
				do {
					try {
						for (b = e; null !== Wp;) {
							var k = Wp.flags;
							if (36 & k && dp(b, Wp.alternate, Wp), 128 & k) {
								P = void 0;
								var _ = Wp.ref;
								if (null !== _) {
									var I = Wp.stateNode;
									switch (Wp.tag) {
										case 5:
											P = I;
											break;
										default:
											P = I
									}
									"function" === typeof _ ? _(P) : _.current = P
								}
							}
							Wp = Wp.nextEffect
						}
					} catch (q) {
						if (null === Wp) throw Error(s(330));
						Ao(Wp, q), Wp = Wp.nextEffect
					}
				} while (null !== Wp);
				Wp = null, Fn(), xp = n
			} else e.current = r;
			if (Qp) Qp = !1, Yp = e, Jp = t;
			else
				for (Wp = a; null !== Wp;) t = Wp.nextEffect, Wp.nextEffect = null, 8 & Wp.flags && ((k = Wp).sibling = null, k.stateNode = null), Wp = t;
			if (0 === (a = e.pendingLanes) && (Kp = null), 1 === a ? e === ro ? to++ : (to = 0, ro = e) : to = 0, r = r.stateNode, Sn && "function" === typeof Sn.onCommitFiberRoot) try {
				Sn.onCommitFiberRoot(Pn, r, void 0, 64 === (64 & r.current.flags))
			} catch (q) {}
			if (mo(e, Mn()), Vp) throw Vp = !1, e = Gp, Gp = null, e;
			return 0 !== (8 & xp) || Wn(), null
		}

		function Oo() {
			for (; null !== Wp;) {
				var e = Wp.alternate;
				po || null === so || (0 !== (8 & Wp.flags) ? et(Wp, so) && (po = !0) : 13 === Wp.tag && _p(e, Wp) && et(Wp, so) && (po = !0));
				var t = Wp.flags;
				0 !== (256 & t) && mp(e, Wp), 0 === (512 & t) || Qp || (Qp = !0, Bn(97, (function() {
					return Do(), null
				}))), Wp = Wp.nextEffect
			}
		}

		function Do() {
			if (90 !== Jp) {
				var e = 97 < Jp ? 97 : Jp;
				return Jp = 90, Un(e, Fo)
			}
			return !1
		}

		function To(e, t) {
			Xp.push(t, e), Qp || (Qp = !0, Bn(97, (function() {
				return Do(), null
			})))
		}

		function jo(e, t) {
			Zp.push(t, e), Qp || (Qp = !0, Bn(97, (function() {
				return Do(), null
			})))
		}

		function Fo() {
			if (null === Yp) return !1;
			var e = Yp;
			if (Yp = null, 0 !== (48 & xp)) throw Error(s(331));
			var t = xp;
			xp |= 32;
			var r = Zp;
			Zp = [];
			for (var a = 0; a < r.length; a += 2) {
				var n = r[a],
					i = r[a + 1],
					p = n.destroy;
				if (n.destroy = void 0, "function" === typeof p) try {
					p()
				} catch (c) {
					if (null === i) throw Error(s(330));
					Ao(i, c)
				}
			}
			for (r = Xp, Xp = [], a = 0; a < r.length; a += 2) {
				n = r[a], i = r[a + 1];
				try {
					var o = n.create;
					n.destroy = o()
				} catch (c) {
					if (null === i) throw Error(s(330));
					Ao(i, c)
				}
			}
			for (o = e.current.firstEffect; null !== o;) e = o.nextEffect, o.nextEffect = null, 8 & o.flags && (o.sibling = null, o.stateNode = null), o = e;
			return xp = t, Wn(), !0
		}

		function Co(e, t, r) {
			oi(e, t = op(0, t = ip(r, t), 1)), t = oo(), null !== (e = uo(e, 1)) && (Ut(e, 1, t), mo(e, t))
		}

		function Ao(e, t) {
			if (3 === e.tag) Co(e, e, t);
			else
				for (var r = e.return; null !== r;) {
					if (3 === r.tag) {
						Co(r, e, t);
						break
					}
					if (1 === r.tag) {
						var a = r.stateNode;
						if ("function" === typeof r.type.getDerivedStateFromError || "function" === typeof a.componentDidCatch && (null === Kp || !Kp.has(a))) {
							var n = cp(r, e = ip(t, e), 1);
							if (oi(r, n), n = oo(), null !== (r = uo(r, 1))) Ut(r, 1, n), mo(r, n);
							else if ("function" === typeof a.componentDidCatch && (null === Kp || !Kp.has(a))) try {
								a.componentDidCatch(t, e)
							} catch (i) {}
							break
						}
					}
					r = r.return
				}
		}

		function Ho(e, t, r) {
			var a = e.pingCache;
			null !== a && a.delete(t), t = oo(), e.pingedLanes |= e.suspendedLanes & r, Ep === e && (Op & r) === r && (4 === jp || 3 === jp && (62914560 & Op) === Op && 500 > Mn() - $p ? So(e, 0) : Rp |= r), mo(e, t)
		}

		function Ro(e, t) {
			var r = e.stateNode;
			null !== r && r.delete(t), 0 === (t = 0) && (0 === (2 & (t = e.mode)) ? t = 1 : 0 === (4 & t) ? t = 99 === $n() ? 1 : 2 : (0 === no && (no = Cp), 0 === (t = $t(62914560 & ~no)) && (t = 4194304))), r = oo(), null !== (e = uo(e, t)) && (Ut(e, t, r), mo(e, r))
		}

		function Mo(e, t, r, a) {
			this.tag = e, this.key = r, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = t, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = a, this.flags = 0, this.lastEffect = this.firstEffect = this.nextEffect = null, this.childLanes = this.lanes = 0, this.alternate = null
		}

		function $o(e, t, r, a) {
			return new Mo(e, t, r, a)
		}

		function zo(e) {
			return !(!(e = e.prototype) || !e.isReactComponent)
		}

		function Uo(e, t) {
			var r = e.alternate;
			return null === r ? ((r = $o(e.tag, t, e.key, e.mode)).elementType = e.elementType, r.type = e.type, r.stateNode = e.stateNode, r.alternate = e, e.alternate = r) : (r.pendingProps = t, r.type = e.type, r.flags = 0, r.nextEffect = null, r.firstEffect = null, r.lastEffect = null), r.childLanes = e.childLanes, r.lanes = e.lanes, r.child = e.child, r.memoizedProps = e.memoizedProps, r.memoizedState = e.memoizedState, r.updateQueue = e.updateQueue, t = e.dependencies, r.dependencies = null === t ? null : {
				lanes: t.lanes,
				firstContext: t.firstContext
			}, r.sibling = e.sibling, r.index = e.index, r.ref = e.ref, r
		}

		function Bo(e, t, r, a, n, i) {
			var p = 2;
			if (a = e, "function" === typeof e) zo(e) && (p = 1);
			else if ("string" === typeof e) p = 5;
			else e: switch (e) {
				case _:
					return Wo(r.children, n, i, t);
				case C:
					p = 8, n |= 16;
					break;
				case I:
					p = 8, n |= 1;
					break;
				case q:
					return (e = $o(12, r, t, 8 | n)).elementType = q, e.type = q, e.lanes = i, e;
				case N:
					return (e = $o(13, r, t, n)).type = N, e.elementType = N, e.lanes = i, e;
				case O:
					return (e = $o(19, r, t, n)).elementType = O, e.lanes = i, e;
				case A:
					return Vo(r, n, i, t);
				case H:
					return (e = $o(24, r, t, n)).elementType = H, e.lanes = i, e;
				default:
					if ("object" === typeof e && null !== e) switch (e.$$typeof) {
						case L:
							p = 10;
							break e;
						case x:
							p = 9;
							break e;
						case E:
							p = 11;
							break e;
						case D:
							p = 14;
							break e;
						case T:
							p = 16, a = null;
							break e;
						case j:
							p = 22;
							break e
					}
					throw Error(s(130, null == e ? e : typeof e, ""))
			}
			return (t = $o(p, r, t, n)).elementType = e, t.type = a, t.lanes = i, t
		}

		function Wo(e, t, r, a) {
			return (e = $o(7, e, a, t)).lanes = r, e
		}

		function Vo(e, t, r, a) {
			return (e = $o(23, e, a, t)).elementType = A, e.lanes = r, e
		}

		function Go(e, t, r) {
			return (e = $o(6, e, null, t)).lanes = r, e
		}

		function Ko(e, t, r) {
			return (t = $o(4, null !== e.children ? e.children : [], e.key, t)).lanes = r, t.stateNode = {
				containerInfo: e.containerInfo,
				pendingChildren: null,
				implementation: e.implementation
			}, t
		}

		function Qo(e, t, r) {
			this.tag = t, this.containerInfo = e, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.pendingContext = this.context = null, this.hydrate = r, this.callbackNode = null, this.callbackPriority = 0, this.eventTimes = zt(0), this.expirationTimes = zt(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = zt(0), this.mutableSourceEagerHydrationData = null
		}

		function Yo(e, t, r) {
			var a = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
			return {
				$$typeof: k,
				key: null == a ? null : "" + a,
				children: e,
				containerInfo: t,
				implementation: r
			}
		}

		function Jo(e, t, r, a) {
			var n = t.current,
				i = oo(),
				p = co(n);
			e: if (r) {
				t: {
					if (Ye(r = r._reactInternals) !== r || 1 !== r.tag) throw Error(s(170));
					var o = r;do {
						switch (o.tag) {
							case 3:
								o = o.stateNode.context;
								break t;
							case 1:
								if (ln(o.type)) {
									o = o.stateNode.__reactInternalMemoizedMergedChildContext;
									break t
								}
						}
						o = o.return
					} while (null !== o);
					throw Error(s(171))
				}
				if (1 === r.tag) {
					var c = r.type;
					if (ln(c)) {
						r = fn(r, c, o);
						break e
					}
				}
				r = o
			}
			else r = cn;
			return null === t.context ? t.context = r : t.pendingContext = r, (t = pi(i, p)).payload = {
				element: e
			}, null !== (a = void 0 === a ? null : a) && (t.callback = a), oi(n, t), ho(n, p, i), p
		}

		function Xo(e) {
			if (!(e = e.current).child) return null;
			switch (e.child.tag) {
				case 5:
				default:
					return e.child.stateNode
			}
		}

		function Zo(e, t) {
			if (null !== (e = e.memoizedState) && null !== e.dehydrated) {
				var r = e.retryLane;
				e.retryLane = 0 !== r && r < t ? r : t
			}
		}

		function ec(e, t) {
			Zo(e, t), (e = e.alternate) && Zo(e, t)
		}

		function tc(e, t, r) {
			var a = null != r && null != r.hydrationOptions && r.hydrationOptions.mutableSources || null;
			if (r = new Qo(e, t, null != r && !0 === r.hydrate), t = $o(3, null, null, 2 === t ? 7 : 1 === t ? 3 : 0), r.current = t, t.stateNode = r, ii(t), e[Ya] = r.current, xa(8 === e.nodeType ? e.parentNode : e), a)
				for (e = 0; e < a.length; e++) {
					var n = (t = a[e])._getVersion;
					n = n(t._source), null == r.mutableSourceEagerHydrationData ? r.mutableSourceEagerHydrationData = [t, n] : r.mutableSourceEagerHydrationData.push(t, n)
				}
			this._internalRoot = r
		}

		function rc(e) {
			return !(!e || 1 !== e.nodeType && 9 !== e.nodeType && 11 !== e.nodeType && (8 !== e.nodeType || " react-mount-point-unstable " !== e.nodeValue))
		}

		function ac(e, t, r, a, n) {
			var i = r._reactRootContainer;
			if (i) {
				var s = i._internalRoot;
				if ("function" === typeof n) {
					var p = n;
					n = function() {
						var e = Xo(s);
						p.call(e)
					}
				}
				Jo(t, s, e, n)
			} else {
				if (i = r._reactRootContainer = function(e, t) {
						if (t || (t = !(!(t = e ? 9 === e.nodeType ? e.documentElement : e.firstChild : null) || 1 !== t.nodeType || !t.hasAttribute("data-reactroot"))), !t)
							for (var r; r = e.lastChild;) e.removeChild(r);
						return new tc(e, 0, t ? {
							hydrate: !0
						} : void 0)
					}(r, a), s = i._internalRoot, "function" === typeof n) {
					var o = n;
					n = function() {
						var e = Xo(s);
						o.call(e)
					}
				}
				vo((function() {
					Jo(t, s, e, n)
				}))
			}
			return Xo(s)
		}

		function nc(e, t) {
			var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
			if (!rc(t)) throw Error(s(200));
			return Yo(e, t, null, r)
		}
		Bp = function(e, t, r) {
			var a = t.lanes;
			if (null !== e)
				if (e.memoizedProps !== t.pendingProps || un.current) Ts = !0;
				else {
					if (0 === (r & a)) {
						switch (Ts = !1, t.tag) {
							case 3:
								Us(t), Bi();
								break;
							case 5:
								Di(t);
								break;
							case 1:
								ln(t.type) && vn(t);
								break;
							case 4:
								Ni(t, t.stateNode.containerInfo);
								break;
							case 10:
								a = t.memoizedProps.value;
								var n = t.type._context;
								on(Qn, n._currentValue), n._currentValue = a;
								break;
							case 13:
								if (null !== t.memoizedState) return 0 !== (r & t.child.childLanes) ? Ks(e, t, r) : (on(ji, 1 & ji.current), null !== (t = tp(e, t, r)) ? t.sibling : null);
								on(ji, 1 & ji.current);
								break;
							case 19:
								if (a = 0 !== (r & t.childLanes), 0 !== (64 & e.flags)) {
									if (a) return ep(e, t, r);
									t.flags |= 64
								}
								if (null !== (n = t.memoizedState) && (n.rendering = null, n.tail = null, n.lastEffect = null), on(ji, ji.current), a) break;
								return null;
							case 23:
							case 24:
								return t.lanes = 0, Hs(e, t, r)
						}
						return tp(e, t, r)
					}
					Ts = 0 !== (16384 & e.flags)
				}
			else Ts = !1;
			switch (t.lanes = 0, t.tag) {
				case 2:
					if (a = t.type, null !== e && (e.alternate = null, t.alternate = null, t.flags |= 2), e = t.pendingProps, n = dn(t, hn.current), ri(t, r), n = as(null, t, a, e, n, r), t.flags |= 1, "object" === typeof n && null !== n && "function" === typeof n.render && void 0 === n.$$typeof) {
						if (t.tag = 1, t.memoizedState = null, t.updateQueue = null, ln(a)) {
							var i = !0;
							vn(t)
						} else i = !1;
						t.memoizedState = null !== n.state && void 0 !== n.state ? n.state : null, ii(t);
						var p = a.getDerivedStateFromProps;
						"function" === typeof p && di(t, a, p, e), n.updater = li, t.stateNode = n, n._reactInternals = t, vi(t, a, e, r), t = zs(null, t, a, !0, i, r)
					} else t.tag = 0, js(null, t, n, r), t = t.child;
					return t;
				case 16:
					n = t.elementType;
					e: {
						switch (null !== e && (e.alternate = null, t.alternate = null, t.flags |= 2), e = t.pendingProps, n = (i = n._init)(n._payload), t.type = n, i = t.tag = function(e) {
								if ("function" === typeof e) return zo(e) ? 1 : 0;
								if (void 0 !== e && null !== e) {
									if ((e = e.$$typeof) === E) return 11;
									if (e === D) return 14
								}
								return 2
							}(n), e = Kn(n, e), i) {
							case 0:
								t = Ms(null, t, n, e, r);
								break e;
							case 1:
								t = $s(null, t, n, e, r);
								break e;
							case 11:
								t = Fs(null, t, n, e, r);
								break e;
							case 14:
								t = Cs(null, t, n, Kn(n.type, e), a, r);
								break e
						}
						throw Error(s(306, n, ""))
					}
					return t;
				case 0:
					return a = t.type, n = t.pendingProps, Ms(e, t, a, n = t.elementType === a ? n : Kn(a, n), r);
				case 1:
					return a = t.type, n = t.pendingProps, $s(e, t, a, n = t.elementType === a ? n : Kn(a, n), r);
				case 3:
					if (Us(t), a = t.updateQueue, null === e || null === a) throw Error(s(282));
					if (a = t.pendingProps, n = null !== (n = t.memoizedState) ? n.element : null, si(e, t), hi(t, a, null, r), (a = t.memoizedState.element) === n) Bi(), t = tp(e, t, r);
					else {
						if ((i = (n = t.stateNode).hydrate) && (Ai = Ba(t.stateNode.containerInfo.firstChild), Ci = t, i = Hi = !0), i) {
							if (null != (e = n.mutableSourceEagerHydrationData))
								for (n = 0; n < e.length; n += 2)(i = e[n])._workInProgressVersionPrimary = e[n + 1], Wi.push(i);
							for (r = _i(t, null, a, r), t.child = r; r;) r.flags = -3 & r.flags | 1024, r = r.sibling
						} else js(e, t, a, r), Bi();
						t = t.child
					}
					return t;
				case 5:
					return Di(t), null === e && $i(t), a = t.type, n = t.pendingProps, i = null !== e ? e.memoizedProps : null, p = n.children, Ma(a, n) ? p = null : null !== i && Ma(a, i) && (t.flags |= 16), Rs(e, t), js(e, t, p, r), t.child;
				case 6:
					return null === e && $i(t), null;
				case 13:
					return Ks(e, t, r);
				case 4:
					return Ni(t, t.stateNode.containerInfo), a = t.pendingProps, null === e ? t.child = ki(t, null, a, r) : js(e, t, a, r), t.child;
				case 11:
					return a = t.type, n = t.pendingProps, Fs(e, t, a, n = t.elementType === a ? n : Kn(a, n), r);
				case 7:
					return js(e, t, t.pendingProps, r), t.child;
				case 8:
				case 12:
					return js(e, t, t.pendingProps.children, r), t.child;
				case 10:
					e: {
						a = t.type._context,
						n = t.pendingProps,
						p = t.memoizedProps,
						i = n.value;
						var o = t.type._context;
						if (on(Qn, o._currentValue), o._currentValue = i, null !== p)
							if (o = p.value, 0 === (i = sa(o, i) ? 0 : 0 | ("function" === typeof a._calculateChangedBits ? a._calculateChangedBits(o, i) : 1073741823))) {
								if (p.children === n.children && !un.current) {
									t = tp(e, t, r);
									break e
								}
							} else
								for (null !== (o = t.child) && (o.return = t); null !== o;) {
									var c = o.dependencies;
									if (null !== c) {
										p = o.child;
										for (var h = c.firstContext; null !== h;) {
											if (h.context === a && 0 !== (h.observedBits & i)) {
												1 === o.tag && ((h = pi(-1, r & -r)).tag = 2, oi(o, h)), o.lanes |= r, null !== (h = o.alternate) && (h.lanes |= r), ti(o.return, r), c.lanes |= r;
												break
											}
											h = h.next
										}
									} else p = 10 === o.tag && o.type === t.type ? null : o.child;
									if (null !== p) p.return = o;
									else
										for (p = o; null !== p;) {
											if (p === t) {
												p = null;
												break
											}
											if (null !== (o = p.sibling)) {
												o.return = p.return, p = o;
												break
											}
											p = p.return
										}
									o = p
								}
						js(e, t, n.children, r),
						t = t.child
					}
					return t;
				case 9:
					return n = t.type, a = (i = t.pendingProps).children, ri(t, r), a = a(n = ai(n, i.unstable_observedBits)), t.flags |= 1, js(e, t, a, r), t.child;
				case 14:
					return i = Kn(n = t.type, t.pendingProps), Cs(e, t, n, i = Kn(n.type, i), a, r);
				case 15:
					return As(e, t, t.type, t.pendingProps, a, r);
				case 17:
					return a = t.type, n = t.pendingProps, n = t.elementType === a ? n : Kn(a, n), null !== e && (e.alternate = null, t.alternate = null, t.flags |= 2), t.tag = 1, ln(a) ? (e = !0, vn(t)) : e = !1, ri(t, r), gi(t, a, n), vi(t, a, n, r), zs(null, t, a, !0, e, r);
				case 19:
					return ep(e, t, r);
				case 23:
				case 24:
					return Hs(e, t, r)
			}
			throw Error(s(156, t.tag))
		}, tc.prototype.render = function(e) {
			Jo(e, this._internalRoot, null, null)
		}, tc.prototype.unmount = function() {
			var e = this._internalRoot,
				t = e.containerInfo;
			Jo(null, e, null, (function() {
				t[Ya] = null
			}))
		}, tt = function(e) {
			13 === e.tag && (ho(e, 4, oo()), ec(e, 4))
		}, rt = function(e) {
			13 === e.tag && (ho(e, 67108864, oo()), ec(e, 67108864))
		}, at = function(e) {
			if (13 === e.tag) {
				var t = oo(),
					r = co(e);
				ho(e, r, t), ec(e, r)
			}
		}, nt = function(e, t) {
			return t()
		}, Le = function(e, t, r) {
			switch (t) {
				case "input":
					if (re(e, r), t = r.name, "radio" === r.type && null != t) {
						for (r = e; r.parentNode;) r = r.parentNode;
						for (r = r.querySelectorAll("input[name=" + JSON.stringify("" + t) + '][type="radio"]'), t = 0; t < r.length; t++) {
							var a = r[t];
							if (a !== e && a.form === e.form) {
								var n = tn(a);
								if (!n) throw Error(s(90));
								J(a), re(a, n)
							}
						}
					}
					break;
				case "textarea":
					ce(e, r);
					break;
				case "select":
					null != (t = r.value) && se(e, !!r.multiple, t, !1)
			}
		}, Te = fo, je = function(e, t, r, a, n) {
			var i = xp;
			xp |= 4;
			try {
				return Un(98, e.bind(null, t, r, a, n))
			} finally {
				0 === (xp = i) && (Up(), Wn())
			}
		}, Fe = function() {
			0 === (49 & xp) && (function() {
				if (null !== eo) {
					var e = eo;
					eo = null, e.forEach((function(e) {
						e.expiredLanes |= 24 & e.pendingLanes, mo(e, Mn())
					}))
				}
				Wn()
			}(), Do())
		}, Ce = function(e, t) {
			var r = xp;
			xp |= 2;
			try {
				return e(t)
			} finally {
				0 === (xp = r) && (Up(), Wn())
			}
		};
		var ic = {
				Events: [Za, en, tn, Oe, De, Do, {
					current: !1
				}]
			},
			sc = {
				findFiberByHostInstance: Xa,
				bundleType: 0,
				version: "17.0.1",
				rendererPackageName: "react-dom"
			},
			pc = {
				bundleType: sc.bundleType,
				version: sc.version,
				rendererPackageName: sc.rendererPackageName,
				rendererConfig: sc.rendererConfig,
				overrideHookState: null,
				overrideHookStateDeletePath: null,
				overrideHookStateRenamePath: null,
				overrideProps: null,
				overridePropsDeletePath: null,
				overridePropsRenamePath: null,
				setSuspenseHandler: null,
				scheduleUpdate: null,
				currentDispatcherRef: S.ReactCurrentDispatcher,
				findHostInstanceByFiber: function(e) {
					return null === (e = Ze(e)) ? null : e.stateNode
				},
				findFiberByHostInstance: sc.findFiberByHostInstance || function() {
					return null
				},
				findHostInstancesForRefresh: null,
				scheduleRefresh: null,
				scheduleRoot: null,
				setRefreshHandler: null,
				getCurrentFiber: null
			};
		if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
			var oc = __REACT_DEVTOOLS_GLOBAL_HOOK__;
			if (!oc.isDisabled && oc.supportsFiber) try {
				Pn = oc.inject(pc), Sn = oc
			} catch (ge) {}
		}
		t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ic, t.createPortal = nc, t.findDOMNode = function(e) {
			if (null == e) return null;
			if (1 === e.nodeType) return e;
			var t = e._reactInternals;
			if (void 0 === t) {
				if ("function" === typeof e.render) throw Error(s(188));
				throw Error(s(268, Object.keys(e)))
			}
			return e = null === (e = Ze(t)) ? null : e.stateNode
		}, t.flushSync = function(e, t) {
			var r = xp;
			if (0 !== (48 & r)) return e(t);
			xp |= 1;
			try {
				if (e) return Un(99, e.bind(null, t))
			} finally {
				xp = r, Wn()
			}
		}, t.hydrate = function(e, t, r) {
			if (!rc(t)) throw Error(s(200));
			return ac(null, e, t, !0, r)
		}, t.render = function(e, t, r) {
			if (!rc(t)) throw Error(s(200));
			return ac(null, e, t, !1, r)
		}, t.unmountComponentAtNode = function(e) {
			if (!rc(e)) throw Error(s(40));
			return !!e._reactRootContainer && (vo((function() {
				ac(null, null, e, !1, (function() {
					e._reactRootContainer = null, e[Ya] = null
				}))
			})), !0)
		}, t.unstable_batchedUpdates = fo, t.unstable_createPortal = function(e, t) {
			return nc(e, t, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null)
		}, t.unstable_renderSubtreeIntoContainer = function(e, t, r, a) {
			if (!rc(r)) throw Error(s(200));
			if (null == e || void 0 === e._reactInternals) throw Error(s(38));
			return ac(e, t, r, !1, a)
		}, t.version = "17.0.1"
	}, function(e, t, r) {
		"use strict";
		e.exports = r(104)
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s;
		if ("object" === typeof performance && "function" === typeof performance.now) {
			var p = performance;
			t.unstable_now = function() {
				return p.now()
			}
		} else {
			var o = Date,
				c = o.now();
			t.unstable_now = function() {
				return o.now() - c
			}
		}
		if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
			var h = null,
				u = null,
				m = function e() {
					if (null !== h) try {
						var r = t.unstable_now();
						h(!0, r), h = null
					} catch (a) {
						throw setTimeout(e, 0), a
					}
				};
			a = function(e) {
				null !== h ? setTimeout(a, 0, e) : (h = e, setTimeout(m, 0))
			}, n = function(e, t) {
				u = setTimeout(e, t)
			}, i = function() {
				clearTimeout(u)
			}, t.unstable_shouldYield = function() {
				return !1
			}, s = t.unstable_forceFrameRate = function() {}
		} else {
			var d = window.setTimeout,
				l = window.clearTimeout;
			if ("undefined" !== typeof console) {
				var y = window.cancelAnimationFrame;
				"function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), "function" !== typeof y && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")
			}
			var g = !1,
				f = null,
				v = -1,
				b = 5,
				P = 0;
			t.unstable_shouldYield = function() {
				return t.unstable_now() >= P
			}, s = function() {}, t.unstable_forceFrameRate = function(e) {
				0 > e || 125 < e ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : b = 0 < e ? Math.floor(1e3 / e) : 5
			};
			var S = new MessageChannel,
				w = S.port2;
			S.port1.onmessage = function() {
				if (null !== f) {
					var e = t.unstable_now();
					P = e + b;
					try {
						f(!0, e) ? w.postMessage(null) : (g = !1, f = null)
					} catch (r) {
						throw w.postMessage(null), r
					}
				} else g = !1
			}, a = function(e) {
				f = e, g || (g = !0, w.postMessage(null))
			}, n = function(e, r) {
				v = d((function() {
					e(t.unstable_now())
				}), r)
			}, i = function() {
				l(v), v = -1
			}
		}

		function k(e, t) {
			var r = e.length;
			e.push(t);
			e: for (;;) {
				var a = r - 1 >>> 1,
					n = e[a];
				if (!(void 0 !== n && 0 < q(n, t))) break e;
				e[a] = t, e[r] = n, r = a
			}
		}

		function _(e) {
			return void 0 === (e = e[0]) ? null : e
		}

		function I(e) {
			var t = e[0];
			if (void 0 !== t) {
				var r = e.pop();
				if (r !== t) {
					e[0] = r;
					e: for (var a = 0, n = e.length; a < n;) {
						var i = 2 * (a + 1) - 1,
							s = e[i],
							p = i + 1,
							o = e[p];
						if (void 0 !== s && 0 > q(s, r)) void 0 !== o && 0 > q(o, s) ? (e[a] = o, e[p] = r, a = p) : (e[a] = s, e[i] = r, a = i);
						else {
							if (!(void 0 !== o && 0 > q(o, r))) break e;
							e[a] = o, e[p] = r, a = p
						}
					}
				}
				return t
			}
			return null
		}

		function q(e, t) {
			var r = e.sortIndex - t.sortIndex;
			return 0 !== r ? r : e.id - t.id
		}
		var L = [],
			x = [],
			E = 1,
			N = null,
			O = 3,
			D = !1,
			T = !1,
			j = !1;

		function F(e) {
			for (var t = _(x); null !== t;) {
				if (null === t.callback) I(x);
				else {
					if (!(t.startTime <= e)) break;
					I(x), t.sortIndex = t.expirationTime, k(L, t)
				}
				t = _(x)
			}
		}

		function C(e) {
			if (j = !1, F(e), !T)
				if (null !== _(L)) T = !0, a(A);
				else {
					var t = _(x);
					null !== t && n(C, t.startTime - e)
				}
		}

		function A(e, r) {
			T = !1, j && (j = !1, i()), D = !0;
			var a = O;
			try {
				for (F(r), N = _(L); null !== N && (!(N.expirationTime > r) || e && !t.unstable_shouldYield());) {
					var s = N.callback;
					if ("function" === typeof s) {
						N.callback = null, O = N.priorityLevel;
						var p = s(N.expirationTime <= r);
						r = t.unstable_now(), "function" === typeof p ? N.callback = p : N === _(L) && I(L), F(r)
					} else I(L);
					N = _(L)
				}
				if (null !== N) var o = !0;
				else {
					var c = _(x);
					null !== c && n(C, c.startTime - r), o = !1
				}
				return o
			} finally {
				N = null, O = a, D = !1
			}
		}
		var H = s;
		t.unstable_IdlePriority = 5, t.unstable_ImmediatePriority = 1, t.unstable_LowPriority = 4, t.unstable_NormalPriority = 3, t.unstable_Profiling = null, t.unstable_UserBlockingPriority = 2, t.unstable_cancelCallback = function(e) {
			e.callback = null
		}, t.unstable_continueExecution = function() {
			T || D || (T = !0, a(A))
		}, t.unstable_getCurrentPriorityLevel = function() {
			return O
		}, t.unstable_getFirstCallbackNode = function() {
			return _(L)
		}, t.unstable_next = function(e) {
			switch (O) {
				case 1:
				case 2:
				case 3:
					var t = 3;
					break;
				default:
					t = O
			}
			var r = O;
			O = t;
			try {
				return e()
			} finally {
				O = r
			}
		}, t.unstable_pauseExecution = function() {}, t.unstable_requestPaint = H, t.unstable_runWithPriority = function(e, t) {
			switch (e) {
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
					break;
				default:
					e = 3
			}
			var r = O;
			O = e;
			try {
				return t()
			} finally {
				O = r
			}
		}, t.unstable_scheduleCallback = function(e, r, s) {
			var p = t.unstable_now();
			switch ("object" === typeof s && null !== s ? s = "number" === typeof(s = s.delay) && 0 < s ? p + s : p : s = p, e) {
				case 1:
					var o = -1;
					break;
				case 2:
					o = 250;
					break;
				case 5:
					o = 1073741823;
					break;
				case 4:
					o = 1e4;
					break;
				default:
					o = 5e3
			}
			return e = {
				id: E++,
				callback: r,
				priorityLevel: e,
				startTime: s,
				expirationTime: o = s + o,
				sortIndex: -1
			}, s > p ? (e.sortIndex = s, k(x, e), null === _(L) && e === _(x) && (j ? i() : j = !0, n(C, s - p))) : (e.sortIndex = o, k(L, e), T || D || (T = !0, a(A))), e
		}, t.unstable_wrapCallback = function(e) {
			var t = O;
			return function() {
				var r = O;
				O = t;
				try {
					return e.apply(this, arguments)
				} finally {
					O = r
				}
			}
		}
	}, , , function(e, t, r) {
		"use strict";
		var a = "function" === typeof Symbol && Symbol.for,
			n = a ? Symbol.for("react.element") : 60103,
			i = a ? Symbol.for("react.portal") : 60106,
			s = a ? Symbol.for("react.fragment") : 60107,
			p = a ? Symbol.for("react.strict_mode") : 60108,
			o = a ? Symbol.for("react.profiler") : 60114,
			c = a ? Symbol.for("react.provider") : 60109,
			h = a ? Symbol.for("react.context") : 60110,
			u = a ? Symbol.for("react.async_mode") : 60111,
			m = a ? Symbol.for("react.concurrent_mode") : 60111,
			d = a ? Symbol.for("react.forward_ref") : 60112,
			l = a ? Symbol.for("react.suspense") : 60113,
			y = a ? Symbol.for("react.suspense_list") : 60120,
			g = a ? Symbol.for("react.memo") : 60115,
			f = a ? Symbol.for("react.lazy") : 60116,
			v = a ? Symbol.for("react.block") : 60121,
			b = a ? Symbol.for("react.fundamental") : 60117,
			P = a ? Symbol.for("react.responder") : 60118,
			S = a ? Symbol.for("react.scope") : 60119;

		function w(e) {
			if ("object" === typeof e && null !== e) {
				var t = e.$$typeof;
				switch (t) {
					case n:
						switch (e = e.type) {
							case u:
							case m:
							case s:
							case o:
							case p:
							case l:
								return e;
							default:
								switch (e = e && e.$$typeof) {
									case h:
									case d:
									case f:
									case g:
									case c:
										return e;
									default:
										return t
								}
						}
						case i:
							return t
				}
			}
		}

		function k(e) {
			return w(e) === m
		}
		t.AsyncMode = u, t.ConcurrentMode = m, t.ContextConsumer = h, t.ContextProvider = c, t.Element = n, t.ForwardRef = d, t.Fragment = s, t.Lazy = f, t.Memo = g, t.Portal = i, t.Profiler = o, t.StrictMode = p, t.Suspense = l, t.isAsyncMode = function(e) {
			return k(e) || w(e) === u
		}, t.isConcurrentMode = k, t.isContextConsumer = function(e) {
			return w(e) === h
		}, t.isContextProvider = function(e) {
			return w(e) === c
		}, t.isElement = function(e) {
			return "object" === typeof e && null !== e && e.$$typeof === n
		}, t.isForwardRef = function(e) {
			return w(e) === d
		}, t.isFragment = function(e) {
			return w(e) === s
		}, t.isLazy = function(e) {
			return w(e) === f
		}, t.isMemo = function(e) {
			return w(e) === g
		}, t.isPortal = function(e) {
			return w(e) === i
		}, t.isProfiler = function(e) {
			return w(e) === o
		}, t.isStrictMode = function(e) {
			return w(e) === p
		}, t.isSuspense = function(e) {
			return w(e) === l
		}, t.isValidElementType = function(e) {
			return "string" === typeof e || "function" === typeof e || e === s || e === m || e === o || e === p || e === l || e === y || "object" === typeof e && null !== e && (e.$$typeof === f || e.$$typeof === g || e.$$typeof === c || e.$$typeof === h || e.$$typeof === d || e.$$typeof === b || e.$$typeof === P || e.$$typeof === S || e.$$typeof === v)
		}, t.typeOf = w
	}, function(e, t, r) {
		"use strict";
		var a = r(109);

		function n() {}

		function i() {}
		i.resetWarningCache = n, e.exports = function() {
			function e(e, t, r, n, i, s) {
				if (s !== a) {
					var p = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
					throw p.name = "Invariant Violation", p
				}
			}

			function t() {
				return e
			}
			e.isRequired = e;
			var r = {
				array: e,
				bool: e,
				func: e,
				number: e,
				object: e,
				string: e,
				symbol: e,
				any: e,
				arrayOf: t,
				element: e,
				elementType: e,
				instanceOf: t,
				node: e,
				objectOf: t,
				oneOf: t,
				oneOfType: t,
				shape: t,
				exact: t,
				checkPropTypes: i,
				resetWarningCache: n
			};
			return r.PropTypes = r, r
		}
	}, function(e, t, r) {
		"use strict";
		e.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.default = function(e) {
			return e.displayName || e.name || ("string" === typeof e && e.length > 0 ? e : "Unknown")
		}
	}, function(e, t) {
		e.exports = function(e) {
			if (!e.webpackPolyfill) {
				var t = Object.create(e);
				t.children || (t.children = []), Object.defineProperty(t, "loaded", {
					enumerable: !0,
					get: function() {
						return t.l
					}
				}), Object.defineProperty(t, "id", {
					enumerable: !0,
					get: function() {
						return t.i
					}
				}), Object.defineProperty(t, "exports", {
					enumerable: !0
				}), t.webpackPolyfill = 1
			}
			return t
		}
	}, function(e, t, r) {
		"use strict";
		r(60);
		var a = r(0),
			n = 60103;
		if (t.Fragment = 60107, "function" === typeof Symbol && Symbol.for) {
			var i = Symbol.for;
			n = i("react.element"), t.Fragment = i("react.fragment")
		}
		var s = a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
			p = Object.prototype.hasOwnProperty,
			o = {
				key: !0,
				ref: !0,
				__self: !0,
				__source: !0
			};

		function c(e, t, r) {
			var a, i = {},
				c = null,
				h = null;
			for (a in void 0 !== r && (c = "" + r), void 0 !== t.key && (c = "" + t.key), void 0 !== t.ref && (h = t.ref), t) p.call(t, a) && !o.hasOwnProperty(a) && (i[a] = t[a]);
			if (e && e.defaultProps)
				for (a in t = e.defaultProps) void 0 === i[a] && (i[a] = t[a]);
			return {
				$$typeof: n,
				type: e,
				key: c,
				ref: h,
				props: i,
				_owner: s.current
			}
		}
		t.jsx = c, t.jsxs = c
	}, function(e, t, r) {
		var a = function(e) {
			"use strict";
			var t, r = Object.prototype,
				a = r.hasOwnProperty,
				n = "function" === typeof Symbol ? Symbol : {},
				i = n.iterator || "@@iterator",
				s = n.asyncIterator || "@@asyncIterator",
				p = n.toStringTag || "@@toStringTag";

			function o(e, t, r) {
				return Object.defineProperty(e, t, {
					value: r,
					enumerable: !0,
					configurable: !0,
					writable: !0
				}), e[t]
			}
			try {
				o({}, "")
			} catch (O) {
				o = function(e, t, r) {
					return e[t] = r
				}
			}

			function c(e, t, r, a) {
				var n = t && t.prototype instanceof g ? t : g,
					i = Object.create(n.prototype),
					s = new x(a || []);
				return i._invoke = function(e, t, r) {
					var a = u;
					return function(n, i) {
						if (a === d) throw new Error("Generator is already running");
						if (a === l) {
							if ("throw" === n) throw i;
							return N()
						}
						for (r.method = n, r.arg = i;;) {
							var s = r.delegate;
							if (s) {
								var p = I(s, r);
								if (p) {
									if (p === y) continue;
									return p
								}
							}
							if ("next" === r.method) r.sent = r._sent = r.arg;
							else if ("throw" === r.method) {
								if (a === u) throw a = l, r.arg;
								r.dispatchException(r.arg)
							} else "return" === r.method && r.abrupt("return", r.arg);
							a = d;
							var o = h(e, t, r);
							if ("normal" === o.type) {
								if (a = r.done ? l : m, o.arg === y) continue;
								return {
									value: o.arg,
									done: r.done
								}
							}
							"throw" === o.type && (a = l, r.method = "throw", r.arg = o.arg)
						}
					}
				}(e, r, s), i
			}

			function h(e, t, r) {
				try {
					return {
						type: "normal",
						arg: e.call(t, r)
					}
				} catch (O) {
					return {
						type: "throw",
						arg: O
					}
				}
			}
			e.wrap = c;
			var u = "suspendedStart",
				m = "suspendedYield",
				d = "executing",
				l = "completed",
				y = {};

			function g() {}

			function f() {}

			function v() {}
			var b = {};
			b[i] = function() {
				return this
			};
			var P = Object.getPrototypeOf,
				S = P && P(P(E([])));
			S && S !== r && a.call(S, i) && (b = S);
			var w = v.prototype = g.prototype = Object.create(b);

			function k(e) {
				["next", "throw", "return"].forEach((function(t) {
					o(e, t, (function(e) {
						return this._invoke(t, e)
					}))
				}))
			}

			function _(e, t) {
				function r(n, i, s, p) {
					var o = h(e[n], e, i);
					if ("throw" !== o.type) {
						var c = o.arg,
							u = c.value;
						return u && "object" === typeof u && a.call(u, "__await") ? t.resolve(u.__await).then((function(e) {
							r("next", e, s, p)
						}), (function(e) {
							r("throw", e, s, p)
						})) : t.resolve(u).then((function(e) {
							c.value = e, s(c)
						}), (function(e) {
							return r("throw", e, s, p)
						}))
					}
					p(o.arg)
				}
				var n;
				this._invoke = function(e, a) {
					function i() {
						return new t((function(t, n) {
							r(e, a, t, n)
						}))
					}
					return n = n ? n.then(i, i) : i()
				}
			}

			function I(e, r) {
				var a = e.iterator[r.method];
				if (a === t) {
					if (r.delegate = null, "throw" === r.method) {
						if (e.iterator.return && (r.method = "return", r.arg = t, I(e, r), "throw" === r.method)) return y;
						r.method = "throw", r.arg = new TypeError("The iterator does not provide a 'throw' method")
					}
					return y
				}
				var n = h(a, e.iterator, r.arg);
				if ("throw" === n.type) return r.method = "throw", r.arg = n.arg, r.delegate = null, y;
				var i = n.arg;
				return i ? i.done ? (r[e.resultName] = i.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : i : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y)
			}

			function q(e) {
				var t = {
					tryLoc: e[0]
				};
				1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t)
			}

			function L(e) {
				var t = e.completion || {};
				t.type = "normal", delete t.arg, e.completion = t
			}

			function x(e) {
				this.tryEntries = [{
					tryLoc: "root"
				}], e.forEach(q, this), this.reset(!0)
			}

			function E(e) {
				if (e) {
					var r = e[i];
					if (r) return r.call(e);
					if ("function" === typeof e.next) return e;
					if (!isNaN(e.length)) {
						var n = -1,
							s = function r() {
								for (; ++n < e.length;)
									if (a.call(e, n)) return r.value = e[n], r.done = !1, r;
								return r.value = t, r.done = !0, r
							};
						return s.next = s
					}
				}
				return {
					next: N
				}
			}

			function N() {
				return {
					value: t,
					done: !0
				}
			}
			return f.prototype = w.constructor = v, v.constructor = f, f.displayName = o(v, p, "GeneratorFunction"), e.isGeneratorFunction = function(e) {
				var t = "function" === typeof e && e.constructor;
				return !!t && (t === f || "GeneratorFunction" === (t.displayName || t.name))
			}, e.mark = function(e) {
				return Object.setPrototypeOf ? Object.setPrototypeOf(e, v) : (e.__proto__ = v, o(e, p, "GeneratorFunction")), e.prototype = Object.create(w), e
			}, e.awrap = function(e) {
				return {
					__await: e
				}
			}, k(_.prototype), _.prototype[s] = function() {
				return this
			}, e.AsyncIterator = _, e.async = function(t, r, a, n, i) {
				void 0 === i && (i = Promise);
				var s = new _(c(t, r, a, n), i);
				return e.isGeneratorFunction(r) ? s : s.next().then((function(e) {
					return e.done ? e.value : s.next()
				}))
			}, k(w), o(w, p, "Generator"), w[i] = function() {
				return this
			}, w.toString = function() {
				return "[object Generator]"
			}, e.keys = function(e) {
				var t = [];
				for (var r in e) t.push(r);
				return t.reverse(),
					function r() {
						for (; t.length;) {
							var a = t.pop();
							if (a in e) return r.value = a, r.done = !1, r
						}
						return r.done = !0, r
					}
			}, e.values = E, x.prototype = {
				constructor: x,
				reset: function(e) {
					if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(L), !e)
						for (var r in this) "t" === r.charAt(0) && a.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t)
				},
				stop: function() {
					this.done = !0;
					var e = this.tryEntries[0].completion;
					if ("throw" === e.type) throw e.arg;
					return this.rval
				},
				dispatchException: function(e) {
					if (this.done) throw e;
					var r = this;

					function n(a, n) {
						return p.type = "throw", p.arg = e, r.next = a, n && (r.method = "next", r.arg = t), !!n
					}
					for (var i = this.tryEntries.length - 1; i >= 0; --i) {
						var s = this.tryEntries[i],
							p = s.completion;
						if ("root" === s.tryLoc) return n("end");
						if (s.tryLoc <= this.prev) {
							var o = a.call(s, "catchLoc"),
								c = a.call(s, "finallyLoc");
							if (o && c) {
								if (this.prev < s.catchLoc) return n(s.catchLoc, !0);
								if (this.prev < s.finallyLoc) return n(s.finallyLoc)
							} else if (o) {
								if (this.prev < s.catchLoc) return n(s.catchLoc, !0)
							} else {
								if (!c) throw new Error("try statement without catch or finally");
								if (this.prev < s.finallyLoc) return n(s.finallyLoc)
							}
						}
					}
				},
				abrupt: function(e, t) {
					for (var r = this.tryEntries.length - 1; r >= 0; --r) {
						var n = this.tryEntries[r];
						if (n.tryLoc <= this.prev && a.call(n, "finallyLoc") && this.prev < n.finallyLoc) {
							var i = n;
							break
						}
					}
					i && ("break" === e || "continue" === e) && i.tryLoc <= t && t <= i.finallyLoc && (i = null);
					var s = i ? i.completion : {};
					return s.type = e, s.arg = t, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(s)
				},
				complete: function(e, t) {
					if ("throw" === e.type) throw e.arg;
					return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), y
				},
				finish: function(e) {
					for (var t = this.tryEntries.length - 1; t >= 0; --t) {
						var r = this.tryEntries[t];
						if (r.finallyLoc === e) return this.complete(r.completion, r.afterLoc), L(r), y
					}
				},
				catch: function(e) {
					for (var t = this.tryEntries.length - 1; t >= 0; --t) {
						var r = this.tryEntries[t];
						if (r.tryLoc === e) {
							var a = r.completion;
							if ("throw" === a.type) {
								var n = a.arg;
								L(r)
							}
							return n
						}
					}
					throw new Error("illegal catch attempt")
				},
				delegateYield: function(e, r, a) {
					return this.delegate = {
						iterator: E(e),
						resultName: r,
						nextLoc: a
					}, "next" === this.method && (this.arg = t), y
				}
			}, e
		}(e.exports);
		try {
			regeneratorRuntime = a
		} catch (n) {
			Function("r", "regeneratorRuntime = r")(a)
		}
	}, function(e, t) {
		var r, a, n = e.exports = {};

		function i() {
			throw new Error("setTimeout has not been defined")
		}

		function s() {
			throw new Error("clearTimeout has not been defined")
		}

		function p(e) {
			if (r === setTimeout) return setTimeout(e, 0);
			if ((r === i || !r) && setTimeout) return r = setTimeout, setTimeout(e, 0);
			try {
				return r(e, 0)
			} catch (t) {
				try {
					return r.call(null, e, 0)
				} catch (t) {
					return r.call(this, e, 0)
				}
			}
		}! function() {
			try {
				r = "function" === typeof setTimeout ? setTimeout : i
			} catch (e) {
				r = i
			}
			try {
				a = "function" === typeof clearTimeout ? clearTimeout : s
			} catch (e) {
				a = s
			}
		}();
		var o, c = [],
			h = !1,
			u = -1;

		function m() {
			h && o && (h = !1, o.length ? c = o.concat(c) : u = -1, c.length && d())
		}

		function d() {
			if (!h) {
				var e = p(m);
				h = !0;
				for (var t = c.length; t;) {
					for (o = c, c = []; ++u < t;) o && o[u].run();
					u = -1, t = c.length
				}
				o = null, h = !1,
					function(e) {
						if (a === clearTimeout) return clearTimeout(e);
						if ((a === s || !a) && clearTimeout) return a = clearTimeout, clearTimeout(e);
						try {
							a(e)
						} catch (t) {
							try {
								return a.call(null, e)
							} catch (t) {
								return a.call(this, e)
							}
						}
					}(e)
			}
		}

		function l(e, t) {
			this.fun = e, this.array = t
		}

		function y() {}
		n.nextTick = function(e) {
			var t = new Array(arguments.length - 1);
			if (arguments.length > 1)
				for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
			c.push(new l(e, t)), 1 !== c.length || h || p(d)
		}, l.prototype.run = function() {
			this.fun.apply(null, this.array)
		}, n.title = "browser", n.browser = !0, n.env = {}, n.argv = [], n.version = "", n.versions = {}, n.on = y, n.addListener = y, n.once = y, n.off = y, n.removeListener = y, n.removeAllListeners = y, n.emit = y, n.prependListener = y, n.prependOnceListener = y, n.listeners = function(e) {
			return []
		}, n.binding = function(e) {
			throw new Error("process.binding is not supported")
		}, n.cwd = function() {
			return "/"
		}, n.chdir = function(e) {
			throw new Error("process.chdir is not supported")
		}, n.umask = function() {
			return 0
		}
	}, function(e, t, r) {
		"use strict";
		(function(e) {
			var a = r(116),
				n = r(117),
				i = r(118);

			function s() {
				return o.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823
			}

			function p(e, t) {
				if (s() < t) throw new RangeError("Invalid typed array length");
				return o.TYPED_ARRAY_SUPPORT ? (e = new Uint8Array(t)).__proto__ = o.prototype : (null === e && (e = new o(t)), e.length = t), e
			}

			function o(e, t, r) {
				if (!o.TYPED_ARRAY_SUPPORT && !(this instanceof o)) return new o(e, t, r);
				if ("number" === typeof e) {
					if ("string" === typeof t) throw new Error("If encoding is specified then the first argument must be a string");
					return u(this, e)
				}
				return c(this, e, t, r)
			}

			function c(e, t, r, a) {
				if ("number" === typeof t) throw new TypeError('"value" argument must not be a number');
				return "undefined" !== typeof ArrayBuffer && t instanceof ArrayBuffer ? function(e, t, r, a) {
					if (t.byteLength, r < 0 || t.byteLength < r) throw new RangeError("'offset' is out of bounds");
					if (t.byteLength < r + (a || 0)) throw new RangeError("'length' is out of bounds");
					t = void 0 === r && void 0 === a ? new Uint8Array(t) : void 0 === a ? new Uint8Array(t, r) : new Uint8Array(t, r, a);
					o.TYPED_ARRAY_SUPPORT ? (e = t).__proto__ = o.prototype : e = m(e, t);
					return e
				}(e, t, r, a) : "string" === typeof t ? function(e, t, r) {
					"string" === typeof r && "" !== r || (r = "utf8");
					if (!o.isEncoding(r)) throw new TypeError('"encoding" must be a valid string encoding');
					var a = 0 | l(t, r),
						n = (e = p(e, a)).write(t, r);
					n !== a && (e = e.slice(0, n));
					return e
				}(e, t, r) : function(e, t) {
					if (o.isBuffer(t)) {
						var r = 0 | d(t.length);
						return 0 === (e = p(e, r)).length || t.copy(e, 0, 0, r), e
					}
					if (t) {
						if ("undefined" !== typeof ArrayBuffer && t.buffer instanceof ArrayBuffer || "length" in t) return "number" !== typeof t.length || (a = t.length) !== a ? p(e, 0) : m(e, t);
						if ("Buffer" === t.type && i(t.data)) return m(e, t.data)
					}
					var a;
					throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")
				}(e, t)
			}

			function h(e) {
				if ("number" !== typeof e) throw new TypeError('"size" argument must be a number');
				if (e < 0) throw new RangeError('"size" argument must not be negative')
			}

			function u(e, t) {
				if (h(t), e = p(e, t < 0 ? 0 : 0 | d(t)), !o.TYPED_ARRAY_SUPPORT)
					for (var r = 0; r < t; ++r) e[r] = 0;
				return e
			}

			function m(e, t) {
				var r = t.length < 0 ? 0 : 0 | d(t.length);
				e = p(e, r);
				for (var a = 0; a < r; a += 1) e[a] = 255 & t[a];
				return e
			}

			function d(e) {
				if (e >= s()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s().toString(16) + " bytes");
				return 0 | e
			}

			function l(e, t) {
				if (o.isBuffer(e)) return e.length;
				if ("undefined" !== typeof ArrayBuffer && "function" === typeof ArrayBuffer.isView && (ArrayBuffer.isView(e) || e instanceof ArrayBuffer)) return e.byteLength;
				"string" !== typeof e && (e = "" + e);
				var r = e.length;
				if (0 === r) return 0;
				for (var a = !1;;) switch (t) {
					case "ascii":
					case "latin1":
					case "binary":
						return r;
					case "utf8":
					case "utf-8":
					case void 0:
						return $(e).length;
					case "ucs2":
					case "ucs-2":
					case "utf16le":
					case "utf-16le":
						return 2 * r;
					case "hex":
						return r >>> 1;
					case "base64":
						return z(e).length;
					default:
						if (a) return $(e).length;
						t = ("" + t).toLowerCase(), a = !0
				}
			}

			function y(e, t, r) {
				var a = !1;
				if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
				if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
				if ((r >>>= 0) <= (t >>>= 0)) return "";
				for (e || (e = "utf8");;) switch (e) {
					case "hex":
						return N(this, t, r);
					case "utf8":
					case "utf-8":
						return q(this, t, r);
					case "ascii":
						return x(this, t, r);
					case "latin1":
					case "binary":
						return E(this, t, r);
					case "base64":
						return I(this, t, r);
					case "ucs2":
					case "ucs-2":
					case "utf16le":
					case "utf-16le":
						return O(this, t, r);
					default:
						if (a) throw new TypeError("Unknown encoding: " + e);
						e = (e + "").toLowerCase(), a = !0
				}
			}

			function g(e, t, r) {
				var a = e[t];
				e[t] = e[r], e[r] = a
			}

			function f(e, t, r, a, n) {
				if (0 === e.length) return -1;
				if ("string" === typeof r ? (a = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = n ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
					if (n) return -1;
					r = e.length - 1
				} else if (r < 0) {
					if (!n) return -1;
					r = 0
				}
				if ("string" === typeof t && (t = o.from(t, a)), o.isBuffer(t)) return 0 === t.length ? -1 : v(e, t, r, a, n);
				if ("number" === typeof t) return t &= 255, o.TYPED_ARRAY_SUPPORT && "function" === typeof Uint8Array.prototype.indexOf ? n ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : v(e, [t], r, a, n);
				throw new TypeError("val must be string, number or Buffer")
			}

			function v(e, t, r, a, n) {
				var i, s = 1,
					p = e.length,
					o = t.length;
				if (void 0 !== a && ("ucs2" === (a = String(a).toLowerCase()) || "ucs-2" === a || "utf16le" === a || "utf-16le" === a)) {
					if (e.length < 2 || t.length < 2) return -1;
					s = 2, p /= 2, o /= 2, r /= 2
				}

				function c(e, t) {
					return 1 === s ? e[t] : e.readUInt16BE(t * s)
				}
				if (n) {
					var h = -1;
					for (i = r; i < p; i++)
						if (c(e, i) === c(t, -1 === h ? 0 : i - h)) {
							if (-1 === h && (h = i), i - h + 1 === o) return h * s
						} else -1 !== h && (i -= i - h), h = -1
				} else
					for (r + o > p && (r = p - o), i = r; i >= 0; i--) {
						for (var u = !0, m = 0; m < o; m++)
							if (c(e, i + m) !== c(t, m)) {
								u = !1;
								break
							} if (u) return i
					}
				return -1
			}

			function b(e, t, r, a) {
				r = Number(r) || 0;
				var n = e.length - r;
				a ? (a = Number(a)) > n && (a = n) : a = n;
				var i = t.length;
				if (i % 2 !== 0) throw new TypeError("Invalid hex string");
				a > i / 2 && (a = i / 2);
				for (var s = 0; s < a; ++s) {
					var p = parseInt(t.substr(2 * s, 2), 16);
					if (isNaN(p)) return s;
					e[r + s] = p
				}
				return s
			}

			function P(e, t, r, a) {
				return U($(t, e.length - r), e, r, a)
			}

			function S(e, t, r, a) {
				return U(function(e) {
					for (var t = [], r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));
					return t
				}(t), e, r, a)
			}

			function w(e, t, r, a) {
				return S(e, t, r, a)
			}

			function k(e, t, r, a) {
				return U(z(t), e, r, a)
			}

			function _(e, t, r, a) {
				return U(function(e, t) {
					for (var r, a, n, i = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) a = (r = e.charCodeAt(s)) >> 8, n = r % 256, i.push(n), i.push(a);
					return i
				}(t, e.length - r), e, r, a)
			}

			function I(e, t, r) {
				return 0 === t && r === e.length ? a.fromByteArray(e) : a.fromByteArray(e.slice(t, r))
			}

			function q(e, t, r) {
				r = Math.min(e.length, r);
				for (var a = [], n = t; n < r;) {
					var i, s, p, o, c = e[n],
						h = null,
						u = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;
					if (n + u <= r) switch (u) {
						case 1:
							c < 128 && (h = c);
							break;
						case 2:
							128 === (192 & (i = e[n + 1])) && (o = (31 & c) << 6 | 63 & i) > 127 && (h = o);
							break;
						case 3:
							i = e[n + 1], s = e[n + 2], 128 === (192 & i) && 128 === (192 & s) && (o = (15 & c) << 12 | (63 & i) << 6 | 63 & s) > 2047 && (o < 55296 || o > 57343) && (h = o);
							break;
						case 4:
							i = e[n + 1], s = e[n + 2], p = e[n + 3], 128 === (192 & i) && 128 === (192 & s) && 128 === (192 & p) && (o = (15 & c) << 18 | (63 & i) << 12 | (63 & s) << 6 | 63 & p) > 65535 && o < 1114112 && (h = o)
					}
					null === h ? (h = 65533, u = 1) : h > 65535 && (h -= 65536, a.push(h >>> 10 & 1023 | 55296), h = 56320 | 1023 & h), a.push(h), n += u
				}
				return function(e) {
					var t = e.length;
					if (t <= L) return String.fromCharCode.apply(String, e);
					var r = "",
						a = 0;
					for (; a < t;) r += String.fromCharCode.apply(String, e.slice(a, a += L));
					return r
				}(a)
			}
			t.Buffer = o, t.SlowBuffer = function(e) {
				+e != e && (e = 0);
				return o.alloc(+e)
			}, t.INSPECT_MAX_BYTES = 50, o.TYPED_ARRAY_SUPPORT = void 0 !== e.TYPED_ARRAY_SUPPORT ? e.TYPED_ARRAY_SUPPORT : function() {
				try {
					var e = new Uint8Array(1);
					return e.__proto__ = {
						__proto__: Uint8Array.prototype,
						foo: function() {
							return 42
						}
					}, 42 === e.foo() && "function" === typeof e.subarray && 0 === e.subarray(1, 1).byteLength
				} catch (t) {
					return !1
				}
			}(), t.kMaxLength = s(), o.poolSize = 8192, o._augment = function(e) {
				return e.__proto__ = o.prototype, e
			}, o.from = function(e, t, r) {
				return c(null, e, t, r)
			}, o.TYPED_ARRAY_SUPPORT && (o.prototype.__proto__ = Uint8Array.prototype, o.__proto__ = Uint8Array, "undefined" !== typeof Symbol && Symbol.species && o[Symbol.species] === o && Object.defineProperty(o, Symbol.species, {
				value: null,
				configurable: !0
			})), o.alloc = function(e, t, r) {
				return function(e, t, r, a) {
					return h(t), t <= 0 ? p(e, t) : void 0 !== r ? "string" === typeof a ? p(e, t).fill(r, a) : p(e, t).fill(r) : p(e, t)
				}(null, e, t, r)
			}, o.allocUnsafe = function(e) {
				return u(null, e)
			}, o.allocUnsafeSlow = function(e) {
				return u(null, e)
			}, o.isBuffer = function(e) {
				return !(null == e || !e._isBuffer)
			}, o.compare = function(e, t) {
				if (!o.isBuffer(e) || !o.isBuffer(t)) throw new TypeError("Arguments must be Buffers");
				if (e === t) return 0;
				for (var r = e.length, a = t.length, n = 0, i = Math.min(r, a); n < i; ++n)
					if (e[n] !== t[n]) {
						r = e[n], a = t[n];
						break
					} return r < a ? -1 : a < r ? 1 : 0
			}, o.isEncoding = function(e) {
				switch (String(e).toLowerCase()) {
					case "hex":
					case "utf8":
					case "utf-8":
					case "ascii":
					case "latin1":
					case "binary":
					case "base64":
					case "ucs2":
					case "ucs-2":
					case "utf16le":
					case "utf-16le":
						return !0;
					default:
						return !1
				}
			}, o.concat = function(e, t) {
				if (!i(e)) throw new TypeError('"list" argument must be an Array of Buffers');
				if (0 === e.length) return o.alloc(0);
				var r;
				if (void 0 === t)
					for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;
				var a = o.allocUnsafe(t),
					n = 0;
				for (r = 0; r < e.length; ++r) {
					var s = e[r];
					if (!o.isBuffer(s)) throw new TypeError('"list" argument must be an Array of Buffers');
					s.copy(a, n), n += s.length
				}
				return a
			}, o.byteLength = l, o.prototype._isBuffer = !0, o.prototype.swap16 = function() {
				var e = this.length;
				if (e % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
				for (var t = 0; t < e; t += 2) g(this, t, t + 1);
				return this
			}, o.prototype.swap32 = function() {
				var e = this.length;
				if (e % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
				for (var t = 0; t < e; t += 4) g(this, t, t + 3), g(this, t + 1, t + 2);
				return this
			}, o.prototype.swap64 = function() {
				var e = this.length;
				if (e % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
				for (var t = 0; t < e; t += 8) g(this, t, t + 7), g(this, t + 1, t + 6), g(this, t + 2, t + 5), g(this, t + 3, t + 4);
				return this
			}, o.prototype.toString = function() {
				var e = 0 | this.length;
				return 0 === e ? "" : 0 === arguments.length ? q(this, 0, e) : y.apply(this, arguments)
			}, o.prototype.equals = function(e) {
				if (!o.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
				return this === e || 0 === o.compare(this, e)
			}, o.prototype.inspect = function() {
				var e = "",
					r = t.INSPECT_MAX_BYTES;
				return this.length > 0 && (e = this.toString("hex", 0, r).match(/.{2}/g).join(" "), this.length > r && (e += " ... ")), "<Buffer " + e + ">"
			}, o.prototype.compare = function(e, t, r, a, n) {
				if (!o.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
				if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === a && (a = 0), void 0 === n && (n = this.length), t < 0 || r > e.length || a < 0 || n > this.length) throw new RangeError("out of range index");
				if (a >= n && t >= r) return 0;
				if (a >= n) return -1;
				if (t >= r) return 1;
				if (this === e) return 0;
				for (var i = (n >>>= 0) - (a >>>= 0), s = (r >>>= 0) - (t >>>= 0), p = Math.min(i, s), c = this.slice(a, n), h = e.slice(t, r), u = 0; u < p; ++u)
					if (c[u] !== h[u]) {
						i = c[u], s = h[u];
						break
					} return i < s ? -1 : s < i ? 1 : 0
			}, o.prototype.includes = function(e, t, r) {
				return -1 !== this.indexOf(e, t, r)
			}, o.prototype.indexOf = function(e, t, r) {
				return f(this, e, t, r, !0)
			}, o.prototype.lastIndexOf = function(e, t, r) {
				return f(this, e, t, r, !1)
			}, o.prototype.write = function(e, t, r, a) {
				if (void 0 === t) a = "utf8", r = this.length, t = 0;
				else if (void 0 === r && "string" === typeof t) a = t, r = this.length, t = 0;
				else {
					if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
					t |= 0, isFinite(r) ? (r |= 0, void 0 === a && (a = "utf8")) : (a = r, r = void 0)
				}
				var n = this.length - t;
				if ((void 0 === r || r > n) && (r = n), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
				a || (a = "utf8");
				for (var i = !1;;) switch (a) {
					case "hex":
						return b(this, e, t, r);
					case "utf8":
					case "utf-8":
						return P(this, e, t, r);
					case "ascii":
						return S(this, e, t, r);
					case "latin1":
					case "binary":
						return w(this, e, t, r);
					case "base64":
						return k(this, e, t, r);
					case "ucs2":
					case "ucs-2":
					case "utf16le":
					case "utf-16le":
						return _(this, e, t, r);
					default:
						if (i) throw new TypeError("Unknown encoding: " + a);
						a = ("" + a).toLowerCase(), i = !0
				}
			}, o.prototype.toJSON = function() {
				return {
					type: "Buffer",
					data: Array.prototype.slice.call(this._arr || this, 0)
				}
			};
			var L = 4096;

			function x(e, t, r) {
				var a = "";
				r = Math.min(e.length, r);
				for (var n = t; n < r; ++n) a += String.fromCharCode(127 & e[n]);
				return a
			}

			function E(e, t, r) {
				var a = "";
				r = Math.min(e.length, r);
				for (var n = t; n < r; ++n) a += String.fromCharCode(e[n]);
				return a
			}

			function N(e, t, r) {
				var a = e.length;
				(!t || t < 0) && (t = 0), (!r || r < 0 || r > a) && (r = a);
				for (var n = "", i = t; i < r; ++i) n += M(e[i]);
				return n
			}

			function O(e, t, r) {
				for (var a = e.slice(t, r), n = "", i = 0; i < a.length; i += 2) n += String.fromCharCode(a[i] + 256 * a[i + 1]);
				return n
			}

			function D(e, t, r) {
				if (e % 1 !== 0 || e < 0) throw new RangeError("offset is not uint");
				if (e + t > r) throw new RangeError("Trying to access beyond buffer length")
			}

			function T(e, t, r, a, n, i) {
				if (!o.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
				if (t > n || t < i) throw new RangeError('"value" argument is out of bounds');
				if (r + a > e.length) throw new RangeError("Index out of range")
			}

			function j(e, t, r, a) {
				t < 0 && (t = 65535 + t + 1);
				for (var n = 0, i = Math.min(e.length - r, 2); n < i; ++n) e[r + n] = (t & 255 << 8 * (a ? n : 1 - n)) >>> 8 * (a ? n : 1 - n)
			}

			function F(e, t, r, a) {
				t < 0 && (t = 4294967295 + t + 1);
				for (var n = 0, i = Math.min(e.length - r, 4); n < i; ++n) e[r + n] = t >>> 8 * (a ? n : 3 - n) & 255
			}

			function C(e, t, r, a, n, i) {
				if (r + a > e.length) throw new RangeError("Index out of range");
				if (r < 0) throw new RangeError("Index out of range")
			}

			function A(e, t, r, a, i) {
				return i || C(e, 0, r, 4), n.write(e, t, r, a, 23, 4), r + 4
			}

			function H(e, t, r, a, i) {
				return i || C(e, 0, r, 8), n.write(e, t, r, a, 52, 8), r + 8
			}
			o.prototype.slice = function(e, t) {
				var r, a = this.length;
				if ((e = ~~e) < 0 ? (e += a) < 0 && (e = 0) : e > a && (e = a), (t = void 0 === t ? a : ~~t) < 0 ? (t += a) < 0 && (t = 0) : t > a && (t = a), t < e && (t = e), o.TYPED_ARRAY_SUPPORT)(r = this.subarray(e, t)).__proto__ = o.prototype;
				else {
					var n = t - e;
					r = new o(n, void 0);
					for (var i = 0; i < n; ++i) r[i] = this[i + e]
				}
				return r
			}, o.prototype.readUIntLE = function(e, t, r) {
				e |= 0, t |= 0, r || D(e, t, this.length);
				for (var a = this[e], n = 1, i = 0; ++i < t && (n *= 256);) a += this[e + i] * n;
				return a
			}, o.prototype.readUIntBE = function(e, t, r) {
				e |= 0, t |= 0, r || D(e, t, this.length);
				for (var a = this[e + --t], n = 1; t > 0 && (n *= 256);) a += this[e + --t] * n;
				return a
			}, o.prototype.readUInt8 = function(e, t) {
				return t || D(e, 1, this.length), this[e]
			}, o.prototype.readUInt16LE = function(e, t) {
				return t || D(e, 2, this.length), this[e] | this[e + 1] << 8
			}, o.prototype.readUInt16BE = function(e, t) {
				return t || D(e, 2, this.length), this[e] << 8 | this[e + 1]
			}, o.prototype.readUInt32LE = function(e, t) {
				return t || D(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3]
			}, o.prototype.readUInt32BE = function(e, t) {
				return t || D(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3])
			}, o.prototype.readIntLE = function(e, t, r) {
				e |= 0, t |= 0, r || D(e, t, this.length);
				for (var a = this[e], n = 1, i = 0; ++i < t && (n *= 256);) a += this[e + i] * n;
				return a >= (n *= 128) && (a -= Math.pow(2, 8 * t)), a
			}, o.prototype.readIntBE = function(e, t, r) {
				e |= 0, t |= 0, r || D(e, t, this.length);
				for (var a = t, n = 1, i = this[e + --a]; a > 0 && (n *= 256);) i += this[e + --a] * n;
				return i >= (n *= 128) && (i -= Math.pow(2, 8 * t)), i
			}, o.prototype.readInt8 = function(e, t) {
				return t || D(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e]
			}, o.prototype.readInt16LE = function(e, t) {
				t || D(e, 2, this.length);
				var r = this[e] | this[e + 1] << 8;
				return 32768 & r ? 4294901760 | r : r
			}, o.prototype.readInt16BE = function(e, t) {
				t || D(e, 2, this.length);
				var r = this[e + 1] | this[e] << 8;
				return 32768 & r ? 4294901760 | r : r
			}, o.prototype.readInt32LE = function(e, t) {
				return t || D(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24
			}, o.prototype.readInt32BE = function(e, t) {
				return t || D(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]
			}, o.prototype.readFloatLE = function(e, t) {
				return t || D(e, 4, this.length), n.read(this, e, !0, 23, 4)
			}, o.prototype.readFloatBE = function(e, t) {
				return t || D(e, 4, this.length), n.read(this, e, !1, 23, 4)
			}, o.prototype.readDoubleLE = function(e, t) {
				return t || D(e, 8, this.length), n.read(this, e, !0, 52, 8)
			}, o.prototype.readDoubleBE = function(e, t) {
				return t || D(e, 8, this.length), n.read(this, e, !1, 52, 8)
			}, o.prototype.writeUIntLE = function(e, t, r, a) {
				(e = +e, t |= 0, r |= 0, a) || T(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
				var n = 1,
					i = 0;
				for (this[t] = 255 & e; ++i < r && (n *= 256);) this[t + i] = e / n & 255;
				return t + r
			}, o.prototype.writeUIntBE = function(e, t, r, a) {
				(e = +e, t |= 0, r |= 0, a) || T(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
				var n = r - 1,
					i = 1;
				for (this[t + n] = 255 & e; --n >= 0 && (i *= 256);) this[t + n] = e / i & 255;
				return t + r
			}, o.prototype.writeUInt8 = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 1, 255, 0), o.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[t] = 255 & e, t + 1
			}, o.prototype.writeUInt16LE = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 2, 65535, 0), o.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : j(this, e, t, !0), t + 2
			}, o.prototype.writeUInt16BE = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 2, 65535, 0), o.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : j(this, e, t, !1), t + 2
			}, o.prototype.writeUInt32LE = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 4, 4294967295, 0), o.TYPED_ARRAY_SUPPORT ? (this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e) : F(this, e, t, !0), t + 4
			}, o.prototype.writeUInt32BE = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 4, 4294967295, 0), o.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : F(this, e, t, !1), t + 4
			}, o.prototype.writeIntLE = function(e, t, r, a) {
				if (e = +e, t |= 0, !a) {
					var n = Math.pow(2, 8 * r - 1);
					T(this, e, t, r, n - 1, -n)
				}
				var i = 0,
					s = 1,
					p = 0;
				for (this[t] = 255 & e; ++i < r && (s *= 256);) e < 0 && 0 === p && 0 !== this[t + i - 1] && (p = 1), this[t + i] = (e / s >> 0) - p & 255;
				return t + r
			}, o.prototype.writeIntBE = function(e, t, r, a) {
				if (e = +e, t |= 0, !a) {
					var n = Math.pow(2, 8 * r - 1);
					T(this, e, t, r, n - 1, -n)
				}
				var i = r - 1,
					s = 1,
					p = 0;
				for (this[t + i] = 255 & e; --i >= 0 && (s *= 256);) e < 0 && 0 === p && 0 !== this[t + i + 1] && (p = 1), this[t + i] = (e / s >> 0) - p & 255;
				return t + r
			}, o.prototype.writeInt8 = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 1, 127, -128), o.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1
			}, o.prototype.writeInt16LE = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 2, 32767, -32768), o.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : j(this, e, t, !0), t + 2
			}, o.prototype.writeInt16BE = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 2, 32767, -32768), o.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : j(this, e, t, !1), t + 2
			}, o.prototype.writeInt32LE = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 4, 2147483647, -2147483648), o.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24) : F(this, e, t, !0), t + 4
			}, o.prototype.writeInt32BE = function(e, t, r) {
				return e = +e, t |= 0, r || T(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), o.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : F(this, e, t, !1), t + 4
			}, o.prototype.writeFloatLE = function(e, t, r) {
				return A(this, e, t, !0, r)
			}, o.prototype.writeFloatBE = function(e, t, r) {
				return A(this, e, t, !1, r)
			}, o.prototype.writeDoubleLE = function(e, t, r) {
				return H(this, e, t, !0, r)
			}, o.prototype.writeDoubleBE = function(e, t, r) {
				return H(this, e, t, !1, r)
			}, o.prototype.copy = function(e, t, r, a) {
				if (r || (r = 0), a || 0 === a || (a = this.length), t >= e.length && (t = e.length), t || (t = 0), a > 0 && a < r && (a = r), a === r) return 0;
				if (0 === e.length || 0 === this.length) return 0;
				if (t < 0) throw new RangeError("targetStart out of bounds");
				if (r < 0 || r >= this.length) throw new RangeError("sourceStart out of bounds");
				if (a < 0) throw new RangeError("sourceEnd out of bounds");
				a > this.length && (a = this.length), e.length - t < a - r && (a = e.length - t + r);
				var n, i = a - r;
				if (this === e && r < t && t < a)
					for (n = i - 1; n >= 0; --n) e[n + t] = this[n + r];
				else if (i < 1e3 || !o.TYPED_ARRAY_SUPPORT)
					for (n = 0; n < i; ++n) e[n + t] = this[n + r];
				else Uint8Array.prototype.set.call(e, this.subarray(r, r + i), t);
				return i
			}, o.prototype.fill = function(e, t, r, a) {
				if ("string" === typeof e) {
					if ("string" === typeof t ? (a = t, t = 0, r = this.length) : "string" === typeof r && (a = r, r = this.length), 1 === e.length) {
						var n = e.charCodeAt(0);
						n < 256 && (e = n)
					}
					if (void 0 !== a && "string" !== typeof a) throw new TypeError("encoding must be a string");
					if ("string" === typeof a && !o.isEncoding(a)) throw new TypeError("Unknown encoding: " + a)
				} else "number" === typeof e && (e &= 255);
				if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
				if (r <= t) return this;
				var i;
				if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" === typeof e)
					for (i = t; i < r; ++i) this[i] = e;
				else {
					var s = o.isBuffer(e) ? e : $(new o(e, a).toString()),
						p = s.length;
					for (i = 0; i < r - t; ++i) this[i + t] = s[i % p]
				}
				return this
			};
			var R = /[^+\/0-9A-Za-z-_]/g;

			function M(e) {
				return e < 16 ? "0" + e.toString(16) : e.toString(16)
			}

			function $(e, t) {
				var r;
				t = t || 1 / 0;
				for (var a = e.length, n = null, i = [], s = 0; s < a; ++s) {
					if ((r = e.charCodeAt(s)) > 55295 && r < 57344) {
						if (!n) {
							if (r > 56319) {
								(t -= 3) > -1 && i.push(239, 191, 189);
								continue
							}
							if (s + 1 === a) {
								(t -= 3) > -1 && i.push(239, 191, 189);
								continue
							}
							n = r;
							continue
						}
						if (r < 56320) {
							(t -= 3) > -1 && i.push(239, 191, 189), n = r;
							continue
						}
						r = 65536 + (n - 55296 << 10 | r - 56320)
					} else n && (t -= 3) > -1 && i.push(239, 191, 189);
					if (n = null, r < 128) {
						if ((t -= 1) < 0) break;
						i.push(r)
					} else if (r < 2048) {
						if ((t -= 2) < 0) break;
						i.push(r >> 6 | 192, 63 & r | 128)
					} else if (r < 65536) {
						if ((t -= 3) < 0) break;
						i.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128)
					} else {
						if (!(r < 1114112)) throw new Error("Invalid code point");
						if ((t -= 4) < 0) break;
						i.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128)
					}
				}
				return i
			}

			function z(e) {
				return a.toByteArray(function(e) {
					if ((e = function(e) {
							return e.trim ? e.trim() : e.replace(/^\s+|\s+$/g, "")
						}(e).replace(R, "")).length < 2) return "";
					for (; e.length % 4 !== 0;) e += "=";
					return e
				}(e))
			}

			function U(e, t, r, a) {
				for (var n = 0; n < a && !(n + r >= t.length || n >= e.length); ++n) t[n + r] = e[n];
				return n
			}
		}).call(this, r(42))
	}, function(e, t, r) {
		"use strict";
		t.byteLength = function(e) {
			var t = c(e),
				r = t[0],
				a = t[1];
			return 3 * (r + a) / 4 - a
		}, t.toByteArray = function(e) {
			var t, r, a = c(e),
				s = a[0],
				p = a[1],
				o = new i(function(e, t, r) {
					return 3 * (t + r) / 4 - r
				}(0, s, p)),
				h = 0,
				u = p > 0 ? s - 4 : s;
			for (r = 0; r < u; r += 4) t = n[e.charCodeAt(r)] << 18 | n[e.charCodeAt(r + 1)] << 12 | n[e.charCodeAt(r + 2)] << 6 | n[e.charCodeAt(r + 3)], o[h++] = t >> 16 & 255, o[h++] = t >> 8 & 255, o[h++] = 255 & t;
			2 === p && (t = n[e.charCodeAt(r)] << 2 | n[e.charCodeAt(r + 1)] >> 4, o[h++] = 255 & t);
			1 === p && (t = n[e.charCodeAt(r)] << 10 | n[e.charCodeAt(r + 1)] << 4 | n[e.charCodeAt(r + 2)] >> 2, o[h++] = t >> 8 & 255, o[h++] = 255 & t);
			return o
		}, t.fromByteArray = function(e) {
			for (var t, r = e.length, n = r % 3, i = [], s = 16383, p = 0, o = r - n; p < o; p += s) i.push(h(e, p, p + s > o ? o : p + s));
			1 === n ? (t = e[r - 1], i.push(a[t >> 2] + a[t << 4 & 63] + "==")) : 2 === n && (t = (e[r - 2] << 8) + e[r - 1], i.push(a[t >> 10] + a[t >> 4 & 63] + a[t << 2 & 63] + "="));
			return i.join("")
		};
		for (var a = [], n = [], i = "undefined" !== typeof Uint8Array ? Uint8Array : Array, s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", p = 0, o = s.length; p < o; ++p) a[p] = s[p], n[s.charCodeAt(p)] = p;

		function c(e) {
			var t = e.length;
			if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
			var r = e.indexOf("=");
			return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4]
		}

		function h(e, t, r) {
			for (var n, i, s = [], p = t; p < r; p += 3) n = (e[p] << 16 & 16711680) + (e[p + 1] << 8 & 65280) + (255 & e[p + 2]), s.push(a[(i = n) >> 18 & 63] + a[i >> 12 & 63] + a[i >> 6 & 63] + a[63 & i]);
			return s.join("")
		}
		n["-".charCodeAt(0)] = 62, n["_".charCodeAt(0)] = 63
	}, function(e, t) {
		t.read = function(e, t, r, a, n) {
			var i, s, p = 8 * n - a - 1,
				o = (1 << p) - 1,
				c = o >> 1,
				h = -7,
				u = r ? n - 1 : 0,
				m = r ? -1 : 1,
				d = e[t + u];
			for (u += m, i = d & (1 << -h) - 1, d >>= -h, h += p; h > 0; i = 256 * i + e[t + u], u += m, h -= 8);
			for (s = i & (1 << -h) - 1, i >>= -h, h += a; h > 0; s = 256 * s + e[t + u], u += m, h -= 8);
			if (0 === i) i = 1 - c;
			else {
				if (i === o) return s ? NaN : 1 / 0 * (d ? -1 : 1);
				s += Math.pow(2, a), i -= c
			}
			return (d ? -1 : 1) * s * Math.pow(2, i - a)
		}, t.write = function(e, t, r, a, n, i) {
			var s, p, o, c = 8 * i - n - 1,
				h = (1 << c) - 1,
				u = h >> 1,
				m = 23 === n ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
				d = a ? 0 : i - 1,
				l = a ? 1 : -1,
				y = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;
			for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (p = isNaN(t) ? 1 : 0, s = h) : (s = Math.floor(Math.log(t) / Math.LN2), t * (o = Math.pow(2, -s)) < 1 && (s--, o *= 2), (t += s + u >= 1 ? m / o : m * Math.pow(2, 1 - u)) * o >= 2 && (s++, o /= 2), s + u >= h ? (p = 0, s = h) : s + u >= 1 ? (p = (t * o - 1) * Math.pow(2, n), s += u) : (p = t * Math.pow(2, u - 1) * Math.pow(2, n), s = 0)); n >= 8; e[r + d] = 255 & p, d += l, p /= 256, n -= 8);
			for (s = s << n | p, c += n; c > 0; e[r + d] = 255 & s, d += l, s /= 256, c -= 8);
			e[r + d - l] |= 128 * y
		}
	}, function(e, t) {
		var r = {}.toString;
		e.exports = Array.isArray || function(e) {
			return "[object Array]" == r.call(e)
		}
	}, function(e, t, r) {
		var a;
		! function(n, i) {
			"use strict";
			var s = "function",
				p = "undefined",
				o = "object",
				c = "string",
				h = "model",
				u = "name",
				m = "type",
				d = "vendor",
				l = "version",
				y = "architecture",
				g = "console",
				f = "mobile",
				v = "tablet",
				b = "smarttv",
				P = "wearable",
				S = "embedded",
				w = {
					extend: function(e, t) {
						var r = {};
						for (var a in e) t[a] && t[a].length % 2 === 0 ? r[a] = t[a].concat(e[a]) : r[a] = e[a];
						return r
					},
					has: function(e, t) {
						return typeof e === c && -1 !== t.toLowerCase().indexOf(e.toLowerCase())
					},
					lowerize: function(e) {
						return e.toLowerCase()
					},
					major: function(e) {
						return typeof e === c ? e.replace(/[^\d\.]/g, "").split(".")[0] : i
					},
					trim: function(e, t) {
						return e = e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ""), typeof t === p ? e : e.substring(0, 255)
					}
				},
				k = {
					rgx: function(e, t) {
						for (var r, a, n, p, c, h, u = 0; u < t.length && !c;) {
							var m = t[u],
								d = t[u + 1];
							for (r = a = 0; r < m.length && !c;)
								if (c = m[r++].exec(e))
									for (n = 0; n < d.length; n++) h = c[++a], typeof(p = d[n]) === o && p.length > 0 ? 2 == p.length ? typeof p[1] == s ? this[p[0]] = p[1].call(this, h) : this[p[0]] = p[1] : 3 == p.length ? typeof p[1] !== s || p[1].exec && p[1].test ? this[p[0]] = h ? h.replace(p[1], p[2]) : i : this[p[0]] = h ? p[1].call(this, h, p[2]) : i : 4 == p.length && (this[p[0]] = h ? p[3].call(this, h.replace(p[1], p[2])) : i) : this[p] = h || i;
							u += 2
						}
					},
					str: function(e, t) {
						for (var r in t)
							if (typeof t[r] === o && t[r].length > 0) {
								for (var a = 0; a < t[r].length; a++)
									if (w.has(t[r][a], e)) return "?" === r ? i : r
							} else if (w.has(t[r], e)) return "?" === r ? i : r;
						return e
					}
				},
				_ = {
					browser: {
						oldSafari: {
							version: {
								"1.0": "/8",
								1.2: "/1",
								1.3: "/3",
								"2.0": "/412",
								"2.0.2": "/416",
								"2.0.3": "/417",
								"2.0.4": "/419",
								"?": "/"
							}
						},
						oldEdge: {
							version: {
								.1: "12.",
								21: "13.",
								31: "14.",
								39: "15.",
								41: "16.",
								42: "17.",
								44: "18."
							}
						}
					},
					os: {
						windows: {
							version: {
								ME: "4.90",
								"NT 3.11": "NT3.51",
								"NT 4.0": "NT4.0",
								2e3: "NT 5.0",
								XP: ["NT 5.1", "NT 5.2"],
								Vista: "NT 6.0",
								7: "NT 6.1",
								8: "NT 6.2",
								8.1: "NT 6.3",
								10: ["NT 6.4", "NT 10.0"],
								RT: "ARM"
							}
						}
					}
				},
				I = {
					browser: [
						[/\b(?:crmo|crios)\/([\w\.]+)/i],
						[l, [u, "Chrome"]],
						[/(?:edge|edgios|edga|edg)\/([\w\.]+)/i],
						[l, [u, "Edge"]],
						[/(opera\smini)\/([\w\.-]+)/i, /(opera\s[mobiletab]{3,6})\b.+version\/([\w\.-]+)/i, /(opera)(?:.+version\/|[\/\s]+)([\w\.]+)/i],
						[u, l],
						[/opios[\/\s]+([\w\.]+)/i],
						[l, [u, "Opera Mini"]],
						[/\sopr\/([\w\.]+)/i],
						[l, [u, "Opera"]],
						[/(kindle)\/([\w\.]+)/i, /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i, /(avant\s|iemobile|slim)(?:browser)?[\/\s]?([\w\.]*)/i, /(ba?idubrowser)[\/\s]?([\w\.]+)/i, /(?:ms|\()(ie)\s([\w\.]+)/i, /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon)\/([\w\.-]+)/i, /(rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([\w\.]+)/i, /(weibo)__([\d\.]+)/i],
						[u, l],
						[/(?:[\s\/]uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i],
						[l, [u, "UCBrowser"]],
						[/(?:windowswechat)?\sqbcore\/([\w\.]+)\b.*(?:windowswechat)?/i],
						[l, [u, "WeChat(Win) Desktop"]],
						[/micromessenger\/([\w\.]+)/i],
						[l, [u, "WeChat"]],
						[/konqueror\/([\w\.]+)/i],
						[l, [u, "Konqueror"]],
						[/trident.+rv[:\s]([\w\.]{1,9})\b.+like\sgecko/i],
						[l, [u, "IE"]],
						[/yabrowser\/([\w\.]+)/i],
						[l, [u, "Yandex"]],
						[/(avast|avg)\/([\w\.]+)/i],
						[
							[u, /(.+)/, "$1 Secure Browser"], l
						],
						[/focus\/([\w\.]+)/i],
						[l, [u, "Firefox Focus"]],
						[/opt\/([\w\.]+)/i],
						[l, [u, "Opera Touch"]],
						[/coc_coc_browser\/([\w\.]+)/i],
						[l, [u, "Coc Coc"]],
						[/dolfin\/([\w\.]+)/i],
						[l, [u, "Dolphin"]],
						[/coast\/([\w\.]+)/i],
						[l, [u, "Opera Coast"]],
						[/xiaomi\/miuibrowser\/([\w\.]+)/i],
						[l, [u, "MIUI Browser"]],
						[/fxios\/([\w\.-]+)/i],
						[l, [u, "Firefox"]],
						[/(qihu|qhbrowser|qihoobrowser|360browser)/i],
						[
							[u, "360 Browser"]
						],
						[/(oculus|samsung|sailfish)browser\/([\w\.]+)/i],
						[
							[u, /(.+)/, "$1 Browser"], l
						],
						[/(comodo_dragon)\/([\w\.]+)/i],
						[
							[u, /_/g, " "], l
						],
						[/\s(electron)\/([\w\.]+)\ssafari/i, /(tesla)(?:\sqtcarbrowser|\/(20[12]\d\.[\w\.-]+))/i, /m?(qqbrowser|baiduboxapp|2345Explorer)[\/\s]?([\w\.]+)/i],
						[u, l],
						[/(MetaSr)[\/\s]?([\w\.]+)/i, /(LBBROWSER)/i],
						[u],
						[/;fbav\/([\w\.]+);/i],
						[l, [u, "Facebook"]],
						[/FBAN\/FBIOS|FB_IAB\/FB4A/i],
						[
							[u, "Facebook"]
						],
						[/safari\s(line)\/([\w\.]+)/i, /\b(line)\/([\w\.]+)\/iab/i, /(chromium|instagram)[\/\s]([\w\.-]+)/i],
						[u, l],
						[/\bgsa\/([\w\.]+)\s.*safari\//i],
						[l, [u, "GSA"]],
						[/headlesschrome(?:\/([\w\.]+)|\s)/i],
						[l, [u, "Chrome Headless"]],
						[/\swv\).+(chrome)\/([\w\.]+)/i],
						[
							[u, "Chrome WebView"], l
						],
						[/droid.+\sversion\/([\w\.]+)\b.+(?:mobile\ssafari|safari)/i],
						[l, [u, "Android Browser"]],
						[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i],
						[u, l],
						[/version\/([\w\.]+)\s.*mobile\/\w+\s(safari)/i],
						[l, [u, "Mobile Safari"]],
						[/version\/([\w\.]+)\s.*(mobile\s?safari|safari)/i],
						[l, u],
						[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],
						[u, [l, k.str, _.browser.oldSafari.version]],
						[/(webkit|khtml)\/([\w\.]+)/i],
						[u, l],
						[/(navigator|netscape)\/([\w\.-]+)/i],
						[
							[u, "Netscape"], l
						],
						[/ile\svr;\srv:([\w\.]+)\).+firefox/i],
						[l, [u, "Firefox Reality"]],
						[/ekiohf.+(flow)\/([\w\.]+)/i, /(swiftfox)/i, /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i, /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i, /(firefox)\/([\w\.]+)\s[\w\s\-]+\/[\w\.]+$/i, /(mozilla)\/([\w\.]+)\s.+rv\:.+gecko\/\d+/i, /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i, /(links)\s\(([\w\.]+)/i, /(gobrowser)\/?([\w\.]*)/i, /(ice\s?browser)\/v?([\w\._]+)/i, /(mosaic)[\/\s]([\w\.]+)/i],
						[u, l]
					],
					cpu: [
						[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],
						[
							[y, "amd64"]
						],
						[/(ia32(?=;))/i],
						[
							[y, w.lowerize]
						],
						[/((?:i[346]|x)86)[;\)]/i],
						[
							[y, "ia32"]
						],
						[/\b(aarch64|armv?8e?l?)\b/i],
						[
							[y, "arm64"]
						],
						[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],
						[
							[y, "armhf"]
						],
						[/windows\s(ce|mobile);\sppc;/i],
						[
							[y, "arm"]
						],
						[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],
						[
							[y, /ower/, "", w.lowerize]
						],
						[/(sun4\w)[;\)]/i],
						[
							[y, "sparc"]
						],
						[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?:64|(?=v(?:[1-7]|[5-7]1)l?|;|eabi))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],
						[
							[y, w.lowerize]
						]
					],
					device: [
						[/\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus\s10)/i],
						[h, [d, "Samsung"],
							[m, v]
						],
						[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy\snexus)/i, /\ssamsung[\s-]([\w-]+)/i, /sec-(sgh\w+)/i],
						[h, [d, "Samsung"],
							[m, f]
						],
						[/\((ip(?:hone|od)[\s\w]*);/i],
						[h, [d, "Apple"],
							[m, f]
						],
						[/\((ipad);[\w\s\),;-]+apple/i, /applecoremedia\/[\w\.]+\s\((ipad)/i, /\b(ipad)\d\d?,\d\d?[;\]].+ios/i],
						[h, [d, "Apple"],
							[m, v]
						],
						[/\b((?:agr|ags[23]|bah2?|sht?)-a?[lw]\d{2})/i],
						[h, [d, "Huawei"],
							[m, v]
						],
						[/d\/huawei([\w\s-]+)[;\)]/i, /\b(nexus\s6p|vog-[at]?l\d\d|ane-[at]?l[x\d]\d|eml-a?l\d\da?|lya-[at]?l\d[\dc]|clt-a?l\d\di?|ele-l\d\d)/i, /\b(\w{2,4}-[atu][ln][01259][019])[;\)\s]/i],
						[h, [d, "Huawei"],
							[m, f]
						],
						[/\b(poco[\s\w]+)(?:\sbuild|\))/i, /\b;\s(\w+)\sbuild\/hm\1/i, /\b(hm[\s\-_]?note?[\s_]?(?:\d\w)?)\sbuild/i, /\b(redmi[\s\-_]?(?:note|k)?[\w\s_]+)(?:\sbuild|\))/i, /\b(mi[\s\-_]?(?:a\d|one|one[\s_]plus|note lte)?[\s_]?(?:\d?\w?)[\s_]?(?:plus)?)\sbuild/i],
						[
							[h, /_/g, " "],
							[d, "Xiaomi"],
							[m, f]
						],
						[/\b(mi[\s\-_]?(?:pad)(?:[\w\s_]+))(?:\sbuild|\))/i],
						[
							[h, /_/g, " "],
							[d, "Xiaomi"],
							[m, v]
						],
						[/;\s(\w+)\sbuild.+\soppo/i, /\s(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007)\b/i],
						[h, [d, "OPPO"],
							[m, f]
						],
						[/\svivo\s(\w+)(?:\sbuild|\))/i, /\s(v[12]\d{3}\w?[at])(?:\sbuild|;)/i],
						[h, [d, "Vivo"],
							[m, f]
						],
						[/\s(rmx[12]\d{3})(?:\sbuild|;)/i],
						[h, [d, "Realme"],
							[m, f]
						],
						[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)\b[\w\s]+build\//i, /\smot(?:orola)?[\s-](\w*)/i, /((?:moto[\s\w\(\)]+|xt\d{3,4}|nexus\s6)(?=\sbuild|\)))/i],
						[h, [d, "Motorola"],
							[m, f]
						],
						[/\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],
						[h, [d, "Motorola"],
							[m, v]
						],
						[/((?=lg)?[vl]k\-?\d{3})\sbuild|\s3\.[\s\w;-]{10}lg?-([06cv9]{3,4})/i],
						[h, [d, "LG"],
							[m, v]
						],
						[/(lm-?f100[nv]?|nexus\s[45])/i, /lg[e;\s\/-]+((?!browser|netcast)\w+)/i, /\blg(\-?[\d\w]+)\sbuild/i],
						[h, [d, "LG"],
							[m, f]
						],
						[/(ideatab[\w\-\s]+)/i, /lenovo\s?(s(?:5000|6000)(?:[\w-]+)|tab(?:[\s\w]+)|yt[\d\w-]{6}|tb[\d\w-]{6})/i],
						[h, [d, "Lenovo"],
							[m, v]
						],
						[/(?:maemo|nokia).*(n900|lumia\s\d+)/i, /nokia[\s_-]?([\w\.-]*)/i],
						[
							[h, /_/g, " "],
							[d, "Nokia"],
							[m, f]
						],
						[/droid.+;\s(pixel\sc)[\s)]/i],
						[h, [d, "Google"],
							[m, v]
						],
						[/droid.+;\s(pixel[\s\daxl]{0,6})(?:\sbuild|\))/i],
						[h, [d, "Google"],
							[m, f]
						],
						[/droid.+\s([c-g]\d{4}|so[-l]\w+|xq-a\w[4-7][12])(?=\sbuild\/|\).+chrome\/(?![1-6]{0,1}\d\.))/i],
						[h, [d, "Sony"],
							[m, f]
						],
						[/sony\stablet\s[ps]\sbuild\//i, /(?:sony)?sgp\w+(?:\sbuild\/|\))/i],
						[
							[h, "Xperia Tablet"],
							[d, "Sony"],
							[m, v]
						],
						[/\s(kb2005|in20[12]5|be20[12][59])\b/i, /\ba000(1)\sbuild/i, /\boneplus\s(a\d{4})[\s)]/i],
						[h, [d, "OnePlus"],
							[m, f]
						],
						[/(alexa)webm/i, /(kf[a-z]{2}wi)(\sbuild\/|\))/i, /(kf[a-z]+)(\sbuild\/|\)).+silk\//i],
						[h, [d, "Amazon"],
							[m, v]
						],
						[/(sd|kf)[0349hijorstuw]+(\sbuild\/|\)).+silk\//i],
						[
							[h, "Fire Phone"],
							[d, "Amazon"],
							[m, f]
						],
						[/\((playbook);[\w\s\),;-]+(rim)/i],
						[h, d, [m, v]],
						[/((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10;\s(\w+)/i],
						[h, [d, "BlackBerry"],
							[m, f]
						],
						[/(?:\b|asus_)(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus\s7|padfone|p00[cj])/i],
						[h, [d, "ASUS"],
							[m, v]
						],
						[/\s(z[es]6[027][01][km][ls]|zenfone\s\d\w?)\b/i],
						[h, [d, "ASUS"],
							[m, f]
						],
						[/(nexus\s9)/i],
						[h, [d, "HTC"],
							[m, v]
						],
						[/(htc)[;_\s-]{1,2}([\w\s]+(?=\)|\sbuild)|\w+)/i, /(zte)-(\w*)/i, /(alcatel|geeksphone|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i],
						[d, [h, /_/g, " "],
							[m, f]
						],
						[/droid[x\d\.\s;]+\s([ab][1-7]\-?[0178a]\d\d?)/i],
						[h, [d, "Acer"],
							[m, v]
						],
						[/droid.+;\s(m[1-5]\snote)\sbuild/i, /\bmz-([\w-]{2,})/i],
						[h, [d, "Meizu"],
							[m, f]
						],
						[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i, /(hp)\s([\w\s]+\w)/i, /(asus)-?(\w+)/i, /(microsoft);\s(lumia[\s\w]+)/i, /(lenovo)[_\s-]?([\w-]+)/i, /linux;.+(jolla);/i, /droid.+;\s(oppo)\s?([\w\s]+)\sbuild/i],
						[d, h, [m, f]],
						[/(archos)\s(gamepad2?)/i, /(hp).+(touchpad(?!.+tablet)|tablet)/i, /(kindle)\/([\w\.]+)/i, /\s(nook)[\w\s]+build\/(\w+)/i, /(dell)\s(strea[kpr\s\d]*[\dko])/i, /[;\/]\s?(le[\s\-]+pan)[\s\-]+(\w{1,9})\sbuild/i, /[;\/]\s?(trinity)[\-\s]*(t\d{3})\sbuild/i, /\b(gigaset)[\s\-]+(q\w{1,9})\sbuild/i, /\b(vodafone)\s([\w\s]+)(?:\)|\sbuild)/i],
						[d, h, [m, v]],
						[/\s(surface\sduo)\s/i],
						[h, [d, "Microsoft"],
							[m, v]
						],
						[/droid\s[\d\.]+;\s(fp\du?)\sbuild/i],
						[h, [d, "Fairphone"],
							[m, f]
						],
						[/\s(u304aa)\sbuild/i],
						[h, [d, "AT&T"],
							[m, f]
						],
						[/sie-(\w*)/i],
						[h, [d, "Siemens"],
							[m, f]
						],
						[/[;\/]\s?(rct\w+)\sbuild/i],
						[h, [d, "RCA"],
							[m, v]
						],
						[/[;\/\s](venue[\d\s]{2,7})\sbuild/i],
						[h, [d, "Dell"],
							[m, v]
						],
						[/[;\/]\s?(q(?:mv|ta)\w+)\sbuild/i],
						[h, [d, "Verizon"],
							[m, v]
						],
						[/[;\/]\s(?:barnes[&\s]+noble\s|bn[rt])([\w\s\+]*)\sbuild/i],
						[h, [d, "Barnes & Noble"],
							[m, v]
						],
						[/[;\/]\s(tm\d{3}\w+)\sbuild/i],
						[h, [d, "NuVision"],
							[m, v]
						],
						[/;\s(k88)\sbuild/i],
						[h, [d, "ZTE"],
							[m, v]
						],
						[/;\s(nx\d{3}j)\sbuild/i],
						[h, [d, "ZTE"],
							[m, f]
						],
						[/[;\/]\s?(gen\d{3})\sbuild.*49h/i],
						[h, [d, "Swiss"],
							[m, f]
						],
						[/[;\/]\s?(zur\d{3})\sbuild/i],
						[h, [d, "Swiss"],
							[m, v]
						],
						[/[;\/]\s?((zeki)?tb.*\b)\sbuild/i],
						[h, [d, "Zeki"],
							[m, v]
						],
						[/[;\/]\s([yr]\d{2})\sbuild/i, /[;\/]\s(dragon[\-\s]+touch\s|dt)(\w{5})\sbuild/i],
						[
							[d, "Dragon Touch"], h, [m, v]
						],
						[/[;\/]\s?(ns-?\w{0,9})\sbuild/i],
						[h, [d, "Insignia"],
							[m, v]
						],
						[/[;\/]\s?((nxa|Next)-?\w{0,9})\sbuild/i],
						[h, [d, "NextBook"],
							[m, v]
						],
						[/[;\/]\s?(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05]))\sbuild/i],
						[
							[d, "Voice"], h, [m, f]
						],
						[/[;\/]\s?(lvtel\-)?(v1[12])\sbuild/i],
						[
							[d, "LvTel"], h, [m, f]
						],
						[/;\s(ph-1)\s/i],
						[h, [d, "Essential"],
							[m, f]
						],
						[/[;\/]\s?(v(100md|700na|7011|917g).*\b)\sbuild/i],
						[h, [d, "Envizen"],
							[m, v]
						],
						[/[;\/]\s?(trio[\s\w\-\.]+)\sbuild/i],
						[h, [d, "MachSpeed"],
							[m, v]
						],
						[/[;\/]\s?tu_(1491)\sbuild/i],
						[h, [d, "Rotor"],
							[m, v]
						],
						[/(shield[\w\s]+)\sbuild/i],
						[h, [d, "Nvidia"],
							[m, v]
						],
						[/(sprint)\s(\w+)/i],
						[d, h, [m, f]],
						[/(kin\.[onetw]{3})/i],
						[
							[h, /\./g, " "],
							[d, "Microsoft"],
							[m, f]
						],
						[/droid\s[\d\.]+;\s(cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],
						[h, [d, "Zebra"],
							[m, v]
						],
						[/droid\s[\d\.]+;\s(ec30|ps20|tc[2-8]\d[kx])\)/i],
						[h, [d, "Zebra"],
							[m, f]
						],
						[/\s(ouya)\s/i, /(nintendo)\s([wids3utch]+)/i],
						[d, h, [m, g]],
						[/droid.+;\s(shield)\sbuild/i],
						[h, [d, "Nvidia"],
							[m, g]
						],
						[/(playstation\s[345portablevi]+)/i],
						[h, [d, "Sony"],
							[m, g]
						],
						[/[\s\(;](xbox(?:\sone)?(?!;\sxbox))[\s\);]/i],
						[h, [d, "Microsoft"],
							[m, g]
						],
						[/smart-tv.+(samsung)/i],
						[d, [m, b]],
						[/hbbtv.+maple;(\d+)/i],
						[
							[h, /^/, "SmartTV"],
							[d, "Samsung"],
							[m, b]
						],
						[/(?:linux;\snetcast.+smarttv|lg\snetcast\.tv-201\d)/i],
						[
							[d, "LG"],
							[m, b]
						],
						[/(apple)\s?tv/i],
						[d, [h, "Apple TV"],
							[m, b]
						],
						[/crkey/i],
						[
							[h, "Chromecast"],
							[d, "Google"],
							[m, b]
						],
						[/droid.+aft([\w])(\sbuild\/|\))/i],
						[h, [d, "Amazon"],
							[m, b]
						],
						[/\(dtv[\);].+(aquos)/i],
						[h, [d, "Sharp"],
							[m, b]
						],
						[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],
						[
							[d, w.trim],
							[h, w.trim],
							[m, b]
						],
						[/[\s\/\(](android\s|smart[-\s]?|opera\s)tv[;\)\s]/i],
						[
							[m, b]
						],
						[/((pebble))app\/[\d\.]+\s/i],
						[d, h, [m, P]],
						[/droid.+;\s(glass)\s\d/i],
						[h, [d, "Google"],
							[m, P]
						],
						[/droid\s[\d\.]+;\s(wt63?0{2,3})\)/i],
						[h, [d, "Zebra"],
							[m, P]
						],
						[/(tesla)(?:\sqtcarbrowser|\/20[12]\d\.[\w\.-]+)/i],
						[d, [m, S]],
						[/droid .+?; ([^;]+?)(?: build|\) applewebkit).+? mobile safari/i],
						[h, [m, f]],
						[/droid .+?;\s([^;]+?)(?: build|\) applewebkit).+?(?! mobile) safari/i],
						[h, [m, v]],
						[/\s(tablet|tab)[;\/]/i, /\s(mobile)(?:[;\/]|\ssafari)/i],
						[
							[m, w.lowerize]
						],
						[/(android[\w\.\s\-]{0,9});.+build/i],
						[h, [d, "Generic"]],
						[/(phone)/i],
						[
							[m, f]
						]
					],
					engine: [
						[/windows.+\sedge\/([\w\.]+)/i],
						[l, [u, "EdgeHTML"]],
						[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],
						[l, [u, "Blink"]],
						[/(presto)\/([\w\.]+)/i, /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, /ekioh(flow)\/([\w\.]+)/i, /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i, /(icab)[\/\s]([23]\.[\d\.]+)/i],
						[u, l],
						[/rv\:([\w\.]{1,9})\b.+(gecko)/i],
						[l, u]
					],
					os: [
						[/microsoft\s(windows)\s(vista|xp)/i],
						[u, l],
						[/(windows)\snt\s6\.2;\s(arm)/i, /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i, /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)(?!.+xbox)/i],
						[u, [l, k.str, _.os.windows.version]],
						[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],
						[
							[u, "Windows"],
							[l, k.str, _.os.windows.version]
						],
						[/ip[honead]{2,4}\b(?:.*os\s([\w]+)\slike\smac|;\sopera)/i, /cfnetwork\/.+darwin/i],
						[
							[l, /_/g, "."],
							[u, "iOS"]
						],
						[/(mac\sos\sx)\s?([\w\s\.]*)/i, /(macintosh|mac(?=_powerpc)\s)(?!.+haiku)/i],
						[
							[u, "Mac OS"],
							[l, /_/g, "."]
						],
						[/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|sailfish|contiki)[\/\s-]?([\w\.]*)/i, /(blackberry)\w*\/([\w\.]*)/i, /(tizen|kaios)[\/\s]([\w\.]+)/i, /\((series40);/i],
						[u, l],
						[/\(bb(10);/i],
						[l, [u, "BlackBerry"]],
						[/(?:symbian\s?os|symbos|s60(?=;)|series60)[\/\s-]?([\w\.]*)/i],
						[l, [u, "Symbian"]],
						[/mozilla.+\(mobile;.+gecko.+firefox/i],
						[
							[u, "Firefox OS"]
						],
						[/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],
						[l, [u, "webOS"]],
						[/crkey\/([\d\.]+)/i],
						[l, [u, "Chromecast"]],
						[/(cros)\s[\w]+\s([\w\.]+\w)/i],
						[
							[u, "Chromium OS"], l
						],
						[/(nintendo|playstation)\s([wids345portablevuch]+)/i, /(xbox);\s+xbox\s([^\);]+)/i, /(mint)[\/\s\(\)]?(\w*)/i, /(mageia|vectorlinux)[;\s]/i, /(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?=\slinux)|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus|raspbian)(?:\sgnu\/linux)?(?:\slinux)?[\/\s-]?(?!chrom|package)([\w\.-]*)/i, /(hurd|linux)\s?([\w\.]*)/i, /(gnu)\s?([\w\.]*)/i, /\s([frentopc-]{0,4}bsd|dragonfly)\s?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, /(haiku)\s(\w+)/i],
						[u, l],
						[/(sunos)\s?([\w\.\d]*)/i],
						[
							[u, "Solaris"], l
						],
						[/((?:open)?solaris)[\/\s-]?([\w\.]*)/i, /(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i, /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms|fuchsia)/i, /(unix)\s?([\w\.]*)/i],
						[u, l]
					]
				},
				q = function e(t, r) {
					if ("object" === typeof t && (r = t, t = i), !(this instanceof e)) return new e(t, r).getResult();
					var a = t || ("undefined" !== typeof n && n.navigator && n.navigator.userAgent ? n.navigator.userAgent : ""),
						s = r ? w.extend(I, r) : I;
					return this.getBrowser = function() {
						var e = {
							name: i,
							version: i
						};
						return k.rgx.call(e, a, s.browser), e.major = w.major(e.version), e
					}, this.getCPU = function() {
						var e = {
							architecture: i
						};
						return k.rgx.call(e, a, s.cpu), e
					}, this.getDevice = function() {
						var e = {
							vendor: i,
							model: i,
							type: i
						};
						return k.rgx.call(e, a, s.device), e
					}, this.getEngine = function() {
						var e = {
							name: i,
							version: i
						};
						return k.rgx.call(e, a, s.engine), e
					}, this.getOS = function() {
						var e = {
							name: i,
							version: i
						};
						return k.rgx.call(e, a, s.os), e
					}, this.getResult = function() {
						return {
							ua: this.getUA(),
							browser: this.getBrowser(),
							engine: this.getEngine(),
							os: this.getOS(),
							device: this.getDevice(),
							cpu: this.getCPU()
						}
					}, this.getUA = function() {
						return a
					}, this.setUA = function(e) {
						return a = typeof e === c && e.length > 255 ? w.trim(e, 255) : e, this
					}, this.setUA(a), this
				};
			q.VERSION = "0.7.28", q.BROWSER = {
				NAME: u,
				MAJOR: "major",
				VERSION: l
			}, q.CPU = {
				ARCHITECTURE: y
			}, q.DEVICE = {
				MODEL: h,
				VENDOR: d,
				TYPE: m,
				CONSOLE: g,
				MOBILE: f,
				SMARTTV: b,
				TABLET: v,
				WEARABLE: P,
				EMBEDDED: S
			}, q.ENGINE = {
				NAME: u,
				VERSION: l
			}, q.OS = {
				NAME: u,
				VERSION: l
			}, typeof t !== p ? (typeof e !== p && e.exports && (t = e.exports = q), t.UAParser = q) : (a = function() {
				return q
			}.call(t, r, t, e)) === i || (e.exports = a);
			var L = "undefined" !== typeof n && (n.jQuery || n.Zepto);
			if (L && !L.ua) {
				var x = new q;
				L.ua = x.getResult(), L.ua.get = function() {
					return x.getUA()
				}, L.ua.set = function(e) {
					x.setUA(e);
					var t = x.getResult();
					for (var r in t) L.ua[r] = t[r]
				}
			}
		}("object" === typeof window ? window : this)
	}, function(e, t, r) {
		var a, n, i;
		! function(s, p) {
			"use strict";
			n = [r(121), r(122), r(123)], void 0 === (i = "function" === typeof(a = function(e, t, r) {
				var a = {
						filter: function(e) {
							return -1 === (e.functionName || "").indexOf("StackTrace$$") && -1 === (e.functionName || "").indexOf("ErrorStackParser$$") && -1 === (e.functionName || "").indexOf("StackTraceGPS$$") && -1 === (e.functionName || "").indexOf("StackGenerator$$")
						},
						sourceCache: {}
					},
					n = function() {
						try {
							throw new Error
						} catch (e) {
							return e
						}
					};

				function i(e, t) {
					var r = {};
					return [e, t].forEach((function(e) {
						for (var t in e) Object.prototype.hasOwnProperty.call(e, t) && (r[t] = e[t]);
						return r
					})), r
				}

				function s(e) {
					return e.stack || e["opera#sourceloc"]
				}

				function p(e, t) {
					return "function" === typeof t ? e.filter(t) : e
				}
				return {
					get: function(e) {
						var t = n();
						return s(t) ? this.fromError(t, e) : this.generateArtificially(e)
					},
					getSync: function(r) {
						r = i(a, r);
						var o = n();
						return p(s(o) ? e.parse(o) : t.backtrace(r), r.filter)
					},
					fromError: function(t, n) {
						n = i(a, n);
						var s = new r(n);
						return new Promise(function(r) {
							var a = p(e.parse(t), n.filter);
							r(Promise.all(a.map((function(e) {
								return new Promise((function(t) {
									function r() {
										t(e)
									}
									s.pinpoint(e).then(t, r).catch(r)
								}))
							}))))
						}.bind(this))
					},
					generateArtificially: function(e) {
						e = i(a, e);
						var r = t.backtrace(e);
						return "function" === typeof e.filter && (r = r.filter(e.filter)), Promise.resolve(r)
					},
					instrument: function(e, t, r, a) {
						if ("function" !== typeof e) throw new Error("Cannot instrument non-function object");
						if ("function" === typeof e.__stacktraceOriginalFn) return e;
						var n = function() {
							try {
								return this.get().then(t, r).catch(r), e.apply(a || this, arguments)
							} catch (n) {
								throw s(n) && this.fromError(n).then(t, r).catch(r), n
							}
						}.bind(this);
						return n.__stacktraceOriginalFn = e, n
					},
					deinstrument: function(e) {
						if ("function" !== typeof e) throw new Error("Cannot de-instrument non-function object");
						return "function" === typeof e.__stacktraceOriginalFn ? e.__stacktraceOriginalFn : e
					},
					report: function(e, t, r, a) {
						return new Promise((function(n, i) {
							var s = new XMLHttpRequest;
							if (s.onerror = i, s.onreadystatechange = function() {
									4 === s.readyState && (s.status >= 200 && s.status < 400 ? n(s.responseText) : i(new Error("POST to " + t + " failed with status: " + s.status)))
								}, s.open("post", t), s.setRequestHeader("Content-Type", "application/json"), a && "object" === typeof a.headers) {
								var p = a.headers;
								for (var o in p) Object.prototype.hasOwnProperty.call(p, o) && s.setRequestHeader(o, p[o])
							}
							var c = {
								stack: e
							};
							void 0 !== r && null !== r && (c.message = r), s.send(JSON.stringify(c))
						}))
					}
				}
			}) ? a.apply(t, n) : a) || (e.exports = i)
		}()
	}, function(e, t, r) {
		var a, n, i;
		! function(s, p) {
			"use strict";
			n = [r(61)], void 0 === (i = "function" === typeof(a = function(e) {
				var t = /(^|@)\S+:\d+/,
					r = /^\s*at .*(\S+:\d+|\(native\))/m,
					a = /^(eval@)?(\[native code])?$/;
				return {
					parse: function(e) {
						if ("undefined" !== typeof e.stacktrace || "undefined" !== typeof e["opera#sourceloc"]) return this.parseOpera(e);
						if (e.stack && e.stack.match(r)) return this.parseV8OrIE(e);
						if (e.stack) return this.parseFFOrSafari(e);
						throw new Error("Cannot parse given Error object")
					},
					extractLocation: function(e) {
						if (-1 === e.indexOf(":")) return [e];
						var t = /(.+?)(?::(\d+))?(?::(\d+))?$/.exec(e.replace(/[()]/g, ""));
						return [t[1], t[2] || void 0, t[3] || void 0]
					},
					parseV8OrIE: function(t) {
						return t.stack.split("\n").filter((function(e) {
							return !!e.match(r)
						}), this).map((function(t) {
							t.indexOf("(eval ") > -1 && (t = t.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, ""));
							var r = t.replace(/^\s+/, "").replace(/\(eval code/g, "("),
								a = r.match(/ (\((.+):(\d+):(\d+)\)$)/),
								n = (r = a ? r.replace(a[0], "") : r).split(/\s+/).slice(1),
								i = this.extractLocation(a ? a[1] : n.pop()),
								s = n.join(" ") || void 0,
								p = ["eval", "<anonymous>"].indexOf(i[0]) > -1 ? void 0 : i[0];
							return new e({
								functionName: s,
								fileName: p,
								lineNumber: i[1],
								columnNumber: i[2],
								source: t
							})
						}), this)
					},
					parseFFOrSafari: function(t) {
						return t.stack.split("\n").filter((function(e) {
							return !e.match(a)
						}), this).map((function(t) {
							if (t.indexOf(" > eval") > -1 && (t = t.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1")), -1 === t.indexOf("@") && -1 === t.indexOf(":")) return new e({
								functionName: t
							});
							var r = /((.*".+"[^@]*)?[^@]*)(?:@)/,
								a = t.match(r),
								n = a && a[1] ? a[1] : void 0,
								i = this.extractLocation(t.replace(r, ""));
							return new e({
								functionName: n,
								fileName: i[0],
								lineNumber: i[1],
								columnNumber: i[2],
								source: t
							})
						}), this)
					},
					parseOpera: function(e) {
						return !e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length ? this.parseOpera9(e) : e.stack ? this.parseOpera11(e) : this.parseOpera10(e)
					},
					parseOpera9: function(t) {
						for (var r = /Line (\d+).*script (?:in )?(\S+)/i, a = t.message.split("\n"), n = [], i = 2, s = a.length; i < s; i += 2) {
							var p = r.exec(a[i]);
							p && n.push(new e({
								fileName: p[2],
								lineNumber: p[1],
								source: a[i]
							}))
						}
						return n
					},
					parseOpera10: function(t) {
						for (var r = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, a = t.stacktrace.split("\n"), n = [], i = 0, s = a.length; i < s; i += 2) {
							var p = r.exec(a[i]);
							p && n.push(new e({
								functionName: p[3] || void 0,
								fileName: p[2],
								lineNumber: p[1],
								source: a[i]
							}))
						}
						return n
					},
					parseOpera11: function(r) {
						return r.stack.split("\n").filter((function(e) {
							return !!e.match(t) && !e.match(/^Error created at/)
						}), this).map((function(t) {
							var r, a = t.split("@"),
								n = this.extractLocation(a.pop()),
								i = a.shift() || "",
								s = i.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
							i.match(/\(([^)]*)\)/) && (r = i.replace(/^[^(]+\(([^)]*)\)$/, "$1"));
							var p = void 0 === r || "[arguments not available]" === r ? void 0 : r.split(",");
							return new e({
								functionName: s,
								args: p,
								fileName: n[0],
								lineNumber: n[1],
								columnNumber: n[2],
								source: t
							})
						}), this)
					}
				}
			}) ? a.apply(t, n) : a) || (e.exports = i)
		}()
	}, function(e, t, r) {
		var a, n, i;
		! function(s, p) {
			"use strict";
			n = [r(61)], void 0 === (i = "function" === typeof(a = function(e) {
				return {
					backtrace: function(t) {
						var r = [],
							a = 10;
						"object" === typeof t && "number" === typeof t.maxStackSize && (a = t.maxStackSize);
						for (var n = arguments.callee; n && r.length < a && n.arguments;) {
							for (var i = new Array(n.arguments.length), s = 0; s < i.length; ++s) i[s] = n.arguments[s];
							/function(?:\s+([\w$]+))+\s*\(/.test(n.toString()) ? r.push(new e({
								functionName: RegExp.$1 || void 0,
								args: i
							})) : r.push(new e({
								args: i
							}));
							try {
								n = n.caller
							} catch (p) {
								break
							}
						}
						return r
					}
				}
			}) ? a.apply(t, n) : a) || (e.exports = i)
		}()
	}, function(e, t, r) {
		var a, n, i;
		! function(s, p) {
			"use strict";
			n = [r(124), r(61)], void 0 === (i = "function" === typeof(a = function(e, t) {
				function r(e) {
					return new Promise((function(t, r) {
						var a = new XMLHttpRequest;
						a.open("get", e), a.onerror = r, a.onreadystatechange = function() {
							4 === a.readyState && (a.status >= 200 && a.status < 300 || "file://" === e.substr(0, 7) && a.responseText ? t(a.responseText) : r(new Error("HTTP status: " + a.status + " retrieving " + e)))
						}, a.send()
					}))
				}

				function a(e) {
					if ("undefined" !== typeof window && window.atob) return window.atob(e);
					throw new Error("You must supply a polyfill for window.atob in this environment")
				}

				function n(e) {
					if ("undefined" !== typeof JSON && JSON.parse) return JSON.parse(e);
					throw new Error("You must supply a polyfill for JSON.parse in this environment")
				}

				function i(e, t) {
					for (var r = [/['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*function\b/, /function\s+([^('"`]*?)\s*\(([^)]*)\)/, /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*(?:eval|new Function)\b/, /\b(?!(?:if|for|switch|while|with|catch)\b)(?:(?:static)\s+)?(\S+)\s*\(.*?\)\s*\{/, /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*\(.*?\)\s*=>/], a = e.split("\n"), n = "", i = Math.min(t, 20), s = 0; s < i; ++s) {
						var p = a[t - s - 1],
							o = p.indexOf("//");
						if (o >= 0 && (p = p.substr(0, o)), p) {
							n = p + n;
							for (var c = r.length, h = 0; h < c; h++) {
								var u = r[h].exec(n);
								if (u && u[1]) return u[1]
							}
						}
					}
				}

				function s() {
					if ("function" !== typeof Object.defineProperty || "function" !== typeof Object.create) throw new Error("Unable to consume source maps in older browsers")
				}

				function p(e) {
					if ("object" !== typeof e) throw new TypeError("Given StackFrame is not an object");
					if ("string" !== typeof e.fileName) throw new TypeError("Given file name is not a String");
					if ("number" !== typeof e.lineNumber || e.lineNumber % 1 !== 0 || e.lineNumber < 1) throw new TypeError("Given line number must be a positive integer");
					if ("number" !== typeof e.columnNumber || e.columnNumber % 1 !== 0 || e.columnNumber < 0) throw new TypeError("Given column number must be a non-negative integer");
					return !0
				}

				function o(e) {
					for (var t, r, a = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/gm; r = a.exec(e);) t = r[1];
					if (t) return t;
					throw new Error("sourceMappingURL not found")
				}

				function c(e, r, a) {
					return new Promise((function(n, i) {
						var s = r.originalPositionFor({
							line: e.lineNumber,
							column: e.columnNumber
						});
						if (s.source) {
							var p = r.sourceContentFor(s.source);
							p && (a[s.source] = p), n(new t({
								functionName: s.name || e.functionName,
								args: e.args,
								fileName: s.source,
								lineNumber: s.line,
								columnNumber: s.column
							}))
						} else i(new Error("Could not get original source for given stackframe and source map"))
					}))
				}
				return function h(u) {
					if (!(this instanceof h)) return new h(u);
					u = u || {}, this.sourceCache = u.sourceCache || {}, this.sourceMapConsumerCache = u.sourceMapConsumerCache || {}, this.ajax = u.ajax || r, this._atob = u.atob || a, this._get = function(e) {
						return new Promise(function(t, r) {
							var a = "data:" === e.substr(0, 5);
							if (this.sourceCache[e]) t(this.sourceCache[e]);
							else if (u.offline && !a) r(new Error("Cannot make network requests in offline mode"));
							else if (a) {
								var n = /^data:application\/json;([\w=:"-]+;)*base64,/,
									i = e.match(n);
								if (i) {
									var s = i[0].length,
										p = e.substr(s),
										o = this._atob(p);
									this.sourceCache[e] = o, t(o)
								} else r(new Error("The encoding of the inline sourcemap is not supported"))
							} else {
								var c = this.ajax(e, {
									method: "get"
								});
								this.sourceCache[e] = c, c.then(t, r)
							}
						}.bind(this))
					}, this._getSourceMapConsumer = function(t, r) {
						return new Promise(function(a) {
							if (this.sourceMapConsumerCache[t]) a(this.sourceMapConsumerCache[t]);
							else {
								var i = new Promise(function(a, i) {
									return this._get(t).then((function(t) {
										"string" === typeof t && (t = n(t.replace(/^\)\]\}'/, ""))), "undefined" === typeof t.sourceRoot && (t.sourceRoot = r), a(new e.SourceMapConsumer(t))
									}), i)
								}.bind(this));
								this.sourceMapConsumerCache[t] = i, a(i)
							}
						}.bind(this))
					}, this.pinpoint = function(e) {
						return new Promise(function(t, r) {
							this.getMappedLocation(e).then(function(e) {
								function r() {
									t(e)
								}
								this.findFunctionName(e).then(t, r).catch(r)
							}.bind(this), r)
						}.bind(this))
					}, this.findFunctionName = function(e) {
						return new Promise(function(r, a) {
							p(e), this._get(e.fileName).then((function(a) {
								var n = e.lineNumber,
									s = e.columnNumber,
									p = i(a, n, s);
								r(p ? new t({
									functionName: p,
									args: e.args,
									fileName: e.fileName,
									lineNumber: n,
									columnNumber: s
								}) : e)
							}), a).catch(a)
						}.bind(this))
					}, this.getMappedLocation = function(e) {
						return new Promise(function(t, r) {
							s(), p(e);
							var a = this.sourceCache,
								n = e.fileName;
							this._get(n).then(function(r) {
								var i = o(r),
									s = "data:" === i.substr(0, 5),
									p = n.substring(0, n.lastIndexOf("/") + 1);
								return "/" === i[0] || s || /^https?:\/\/|^\/\//i.test(i) || (i = p + i), this._getSourceMapConsumer(i, p).then((function(r) {
									return c(e, r, a).then(t).catch((function() {
										t(e)
									}))
								}))
							}.bind(this), r).catch(r)
						}.bind(this))
					}
				}
			}) ? a.apply(t, n) : a) || (e.exports = i)
		}()
	}, function(e, t, r) {
		t.SourceMapGenerator = r(69).SourceMapGenerator, t.SourceMapConsumer = r(127).SourceMapConsumer, t.SourceNode = r(130).SourceNode
	}, function(e, t) {
		var r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
		t.encode = function(e) {
			if (0 <= e && e < r.length) return r[e];
			throw new TypeError("Must be between 0 and 63: " + e)
		}, t.decode = function(e) {
			return 65 <= e && e <= 90 ? e - 65 : 97 <= e && e <= 122 ? e - 97 + 26 : 48 <= e && e <= 57 ? e - 48 + 52 : 43 == e ? 62 : 47 == e ? 63 : -1
		}
	}, function(e, t, r) {
		var a = r(37);

		function n() {
			this._array = [], this._sorted = !0, this._last = {
				generatedLine: -1,
				generatedColumn: 0
			}
		}
		n.prototype.unsortedForEach = function(e, t) {
			this._array.forEach(e, t)
		}, n.prototype.add = function(e) {
			! function(e, t) {
				var r = e.generatedLine,
					n = t.generatedLine,
					i = e.generatedColumn,
					s = t.generatedColumn;
				return n > r || n == r && s >= i || a.compareByGeneratedPositionsInflated(e, t) <= 0
			}(this._last, e) ? (this._sorted = !1, this._array.push(e)) : (this._last = e, this._array.push(e))
		}, n.prototype.toArray = function() {
			return this._sorted || (this._array.sort(a.compareByGeneratedPositionsInflated), this._sorted = !0), this._array
		}, t.MappingList = n
	}, function(e, t, r) {
		var a = r(37),
			n = r(128),
			i = r(71).ArraySet,
			s = r(70),
			p = r(129).quickSort;

		function o(e) {
			var t = e;
			return "string" === typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, ""))), null != t.sections ? new u(t) : new c(t)
		}

		function c(e) {
			var t = e;
			"string" === typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
			var r = a.getArg(t, "version"),
				n = a.getArg(t, "sources"),
				s = a.getArg(t, "names", []),
				p = a.getArg(t, "sourceRoot", null),
				o = a.getArg(t, "sourcesContent", null),
				c = a.getArg(t, "mappings"),
				h = a.getArg(t, "file", null);
			if (r != this._version) throw new Error("Unsupported version: " + r);
			n = n.map(String).map(a.normalize).map((function(e) {
				return p && a.isAbsolute(p) && a.isAbsolute(e) ? a.relative(p, e) : e
			})), this._names = i.fromArray(s.map(String), !0), this._sources = i.fromArray(n, !0), this.sourceRoot = p, this.sourcesContent = o, this._mappings = c, this.file = h
		}

		function h() {
			this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null
		}

		function u(e) {
			var t = e;
			"string" === typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
			var r = a.getArg(t, "version"),
				n = a.getArg(t, "sections");
			if (r != this._version) throw new Error("Unsupported version: " + r);
			this._sources = new i, this._names = new i;
			var s = {
				line: -1,
				column: 0
			};
			this._sections = n.map((function(e) {
				if (e.url) throw new Error("Support for url field in sections not implemented.");
				var t = a.getArg(e, "offset"),
					r = a.getArg(t, "line"),
					n = a.getArg(t, "column");
				if (r < s.line || r === s.line && n < s.column) throw new Error("Section offsets must be ordered and non-overlapping.");
				return s = t, {
					generatedOffset: {
						generatedLine: r + 1,
						generatedColumn: n + 1
					},
					consumer: new o(a.getArg(e, "map"))
				}
			}))
		}
		o.fromSourceMap = function(e) {
			return c.fromSourceMap(e)
		}, o.prototype._version = 3, o.prototype.__generatedMappings = null, Object.defineProperty(o.prototype, "_generatedMappings", {
			get: function() {
				return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings
			}
		}), o.prototype.__originalMappings = null, Object.defineProperty(o.prototype, "_originalMappings", {
			get: function() {
				return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings
			}
		}), o.prototype._charIsMappingSeparator = function(e, t) {
			var r = e.charAt(t);
			return ";" === r || "," === r
		}, o.prototype._parseMappings = function(e, t) {
			throw new Error("Subclasses must implement _parseMappings")
		}, o.GENERATED_ORDER = 1, o.ORIGINAL_ORDER = 2, o.GREATEST_LOWER_BOUND = 1, o.LEAST_UPPER_BOUND = 2, o.prototype.eachMapping = function(e, t, r) {
			var n, i = t || null;
			switch (r || o.GENERATED_ORDER) {
				case o.GENERATED_ORDER:
					n = this._generatedMappings;
					break;
				case o.ORIGINAL_ORDER:
					n = this._originalMappings;
					break;
				default:
					throw new Error("Unknown order of iteration.")
			}
			var s = this.sourceRoot;
			n.map((function(e) {
				var t = null === e.source ? null : this._sources.at(e.source);
				return null != t && null != s && (t = a.join(s, t)), {
					source: t,
					generatedLine: e.generatedLine,
					generatedColumn: e.generatedColumn,
					originalLine: e.originalLine,
					originalColumn: e.originalColumn,
					name: null === e.name ? null : this._names.at(e.name)
				}
			}), this).forEach(e, i)
		}, o.prototype.allGeneratedPositionsFor = function(e) {
			var t = a.getArg(e, "line"),
				r = {
					source: a.getArg(e, "source"),
					originalLine: t,
					originalColumn: a.getArg(e, "column", 0)
				};
			if (null != this.sourceRoot && (r.source = a.relative(this.sourceRoot, r.source)), !this._sources.has(r.source)) return [];
			r.source = this._sources.indexOf(r.source);
			var i = [],
				s = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", a.compareByOriginalPositions, n.LEAST_UPPER_BOUND);
			if (s >= 0) {
				var p = this._originalMappings[s];
				if (void 0 === e.column)
					for (var o = p.originalLine; p && p.originalLine === o;) i.push({
						line: a.getArg(p, "generatedLine", null),
						column: a.getArg(p, "generatedColumn", null),
						lastColumn: a.getArg(p, "lastGeneratedColumn", null)
					}), p = this._originalMappings[++s];
				else
					for (var c = p.originalColumn; p && p.originalLine === t && p.originalColumn == c;) i.push({
						line: a.getArg(p, "generatedLine", null),
						column: a.getArg(p, "generatedColumn", null),
						lastColumn: a.getArg(p, "lastGeneratedColumn", null)
					}), p = this._originalMappings[++s]
			}
			return i
		}, t.SourceMapConsumer = o, c.prototype = Object.create(o.prototype), c.prototype.consumer = o, c.fromSourceMap = function(e) {
			var t = Object.create(c.prototype),
				r = t._names = i.fromArray(e._names.toArray(), !0),
				n = t._sources = i.fromArray(e._sources.toArray(), !0);
			t.sourceRoot = e._sourceRoot, t.sourcesContent = e._generateSourcesContent(t._sources.toArray(), t.sourceRoot), t.file = e._file;
			for (var s = e._mappings.toArray().slice(), o = t.__generatedMappings = [], u = t.__originalMappings = [], m = 0, d = s.length; m < d; m++) {
				var l = s[m],
					y = new h;
				y.generatedLine = l.generatedLine, y.generatedColumn = l.generatedColumn, l.source && (y.source = n.indexOf(l.source), y.originalLine = l.originalLine, y.originalColumn = l.originalColumn, l.name && (y.name = r.indexOf(l.name)), u.push(y)), o.push(y)
			}
			return p(t.__originalMappings, a.compareByOriginalPositions), t
		}, c.prototype._version = 3, Object.defineProperty(c.prototype, "sources", {
			get: function() {
				return this._sources.toArray().map((function(e) {
					return null != this.sourceRoot ? a.join(this.sourceRoot, e) : e
				}), this)
			}
		}), c.prototype._parseMappings = function(e, t) {
			for (var r, n, i, o, c, u = 1, m = 0, d = 0, l = 0, y = 0, g = 0, f = e.length, v = 0, b = {}, P = {}, S = [], w = []; v < f;)
				if (";" === e.charAt(v)) u++, v++, m = 0;
				else if ("," === e.charAt(v)) v++;
			else {
				for ((r = new h).generatedLine = u, o = v; o < f && !this._charIsMappingSeparator(e, o); o++);
				if (i = b[n = e.slice(v, o)]) v += n.length;
				else {
					for (i = []; v < o;) s.decode(e, v, P), c = P.value, v = P.rest, i.push(c);
					if (2 === i.length) throw new Error("Found a source, but no line and column");
					if (3 === i.length) throw new Error("Found a source and line, but no column");
					b[n] = i
				}
				r.generatedColumn = m + i[0], m = r.generatedColumn, i.length > 1 && (r.source = y + i[1], y += i[1], r.originalLine = d + i[2], d = r.originalLine, r.originalLine += 1, r.originalColumn = l + i[3], l = r.originalColumn, i.length > 4 && (r.name = g + i[4], g += i[4])), w.push(r), "number" === typeof r.originalLine && S.push(r)
			}
			p(w, a.compareByGeneratedPositionsDeflated), this.__generatedMappings = w, p(S, a.compareByOriginalPositions), this.__originalMappings = S
		}, c.prototype._findMapping = function(e, t, r, a, i, s) {
			if (e[r] <= 0) throw new TypeError("Line must be greater than or equal to 1, got " + e[r]);
			if (e[a] < 0) throw new TypeError("Column must be greater than or equal to 0, got " + e[a]);
			return n.search(e, t, i, s)
		}, c.prototype.computeColumnSpans = function() {
			for (var e = 0; e < this._generatedMappings.length; ++e) {
				var t = this._generatedMappings[e];
				if (e + 1 < this._generatedMappings.length) {
					var r = this._generatedMappings[e + 1];
					if (t.generatedLine === r.generatedLine) {
						t.lastGeneratedColumn = r.generatedColumn - 1;
						continue
					}
				}
				t.lastGeneratedColumn = 1 / 0
			}
		}, c.prototype.originalPositionFor = function(e) {
			var t = {
					generatedLine: a.getArg(e, "line"),
					generatedColumn: a.getArg(e, "column")
				},
				r = this._findMapping(t, this._generatedMappings, "generatedLine", "generatedColumn", a.compareByGeneratedPositionsDeflated, a.getArg(e, "bias", o.GREATEST_LOWER_BOUND));
			if (r >= 0) {
				var n = this._generatedMappings[r];
				if (n.generatedLine === t.generatedLine) {
					var i = a.getArg(n, "source", null);
					null !== i && (i = this._sources.at(i), null != this.sourceRoot && (i = a.join(this.sourceRoot, i)));
					var s = a.getArg(n, "name", null);
					return null !== s && (s = this._names.at(s)), {
						source: i,
						line: a.getArg(n, "originalLine", null),
						column: a.getArg(n, "originalColumn", null),
						name: s
					}
				}
			}
			return {
				source: null,
				line: null,
				column: null,
				name: null
			}
		}, c.prototype.hasContentsOfAllSources = function() {
			return !!this.sourcesContent && (this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some((function(e) {
				return null == e
			})))
		}, c.prototype.sourceContentFor = function(e, t) {
			if (!this.sourcesContent) return null;
			if (null != this.sourceRoot && (e = a.relative(this.sourceRoot, e)), this._sources.has(e)) return this.sourcesContent[this._sources.indexOf(e)];
			var r;
			if (null != this.sourceRoot && (r = a.urlParse(this.sourceRoot))) {
				var n = e.replace(/^file:\/\//, "");
				if ("file" == r.scheme && this._sources.has(n)) return this.sourcesContent[this._sources.indexOf(n)];
				if ((!r.path || "/" == r.path) && this._sources.has("/" + e)) return this.sourcesContent[this._sources.indexOf("/" + e)]
			}
			if (t) return null;
			throw new Error('"' + e + '" is not in the SourceMap.')
		}, c.prototype.generatedPositionFor = function(e) {
			var t = a.getArg(e, "source");
			if (null != this.sourceRoot && (t = a.relative(this.sourceRoot, t)), !this._sources.has(t)) return {
				line: null,
				column: null,
				lastColumn: null
			};
			var r = {
					source: t = this._sources.indexOf(t),
					originalLine: a.getArg(e, "line"),
					originalColumn: a.getArg(e, "column")
				},
				n = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", a.compareByOriginalPositions, a.getArg(e, "bias", o.GREATEST_LOWER_BOUND));
			if (n >= 0) {
				var i = this._originalMappings[n];
				if (i.source === r.source) return {
					line: a.getArg(i, "generatedLine", null),
					column: a.getArg(i, "generatedColumn", null),
					lastColumn: a.getArg(i, "lastGeneratedColumn", null)
				}
			}
			return {
				line: null,
				column: null,
				lastColumn: null
			}
		}, t.BasicSourceMapConsumer = c, u.prototype = Object.create(o.prototype), u.prototype.constructor = o, u.prototype._version = 3, Object.defineProperty(u.prototype, "sources", {
			get: function() {
				for (var e = [], t = 0; t < this._sections.length; t++)
					for (var r = 0; r < this._sections[t].consumer.sources.length; r++) e.push(this._sections[t].consumer.sources[r]);
				return e
			}
		}), u.prototype.originalPositionFor = function(e) {
			var t = {
					generatedLine: a.getArg(e, "line"),
					generatedColumn: a.getArg(e, "column")
				},
				r = n.search(t, this._sections, (function(e, t) {
					var r = e.generatedLine - t.generatedOffset.generatedLine;
					return r || e.generatedColumn - t.generatedOffset.generatedColumn
				})),
				i = this._sections[r];
			return i ? i.consumer.originalPositionFor({
				line: t.generatedLine - (i.generatedOffset.generatedLine - 1),
				column: t.generatedColumn - (i.generatedOffset.generatedLine === t.generatedLine ? i.generatedOffset.generatedColumn - 1 : 0),
				bias: e.bias
			}) : {
				source: null,
				line: null,
				column: null,
				name: null
			}
		}, u.prototype.hasContentsOfAllSources = function() {
			return this._sections.every((function(e) {
				return e.consumer.hasContentsOfAllSources()
			}))
		}, u.prototype.sourceContentFor = function(e, t) {
			for (var r = 0; r < this._sections.length; r++) {
				var a = this._sections[r].consumer.sourceContentFor(e, !0);
				if (a) return a
			}
			if (t) return null;
			throw new Error('"' + e + '" is not in the SourceMap.')
		}, u.prototype.generatedPositionFor = function(e) {
			for (var t = 0; t < this._sections.length; t++) {
				var r = this._sections[t];
				if (-1 !== r.consumer.sources.indexOf(a.getArg(e, "source"))) {
					var n = r.consumer.generatedPositionFor(e);
					if (n) return {
						line: n.line + (r.generatedOffset.generatedLine - 1),
						column: n.column + (r.generatedOffset.generatedLine === n.line ? r.generatedOffset.generatedColumn - 1 : 0)
					}
				}
			}
			return {
				line: null,
				column: null
			}
		}, u.prototype._parseMappings = function(e, t) {
			this.__generatedMappings = [], this.__originalMappings = [];
			for (var r = 0; r < this._sections.length; r++)
				for (var n = this._sections[r], i = n.consumer._generatedMappings, s = 0; s < i.length; s++) {
					var o = i[s],
						c = n.consumer._sources.at(o.source);
					null !== n.consumer.sourceRoot && (c = a.join(n.consumer.sourceRoot, c)), this._sources.add(c), c = this._sources.indexOf(c);
					var h = n.consumer._names.at(o.name);
					this._names.add(h), h = this._names.indexOf(h);
					var u = {
						source: c,
						generatedLine: o.generatedLine + (n.generatedOffset.generatedLine - 1),
						generatedColumn: o.generatedColumn + (n.generatedOffset.generatedLine === o.generatedLine ? n.generatedOffset.generatedColumn - 1 : 0),
						originalLine: o.originalLine,
						originalColumn: o.originalColumn,
						name: h
					};
					this.__generatedMappings.push(u), "number" === typeof u.originalLine && this.__originalMappings.push(u)
				}
			p(this.__generatedMappings, a.compareByGeneratedPositionsDeflated), p(this.__originalMappings, a.compareByOriginalPositions)
		}, t.IndexedSourceMapConsumer = u
	}, function(e, t) {
		function r(e, a, n, i, s, p) {
			var o = Math.floor((a - e) / 2) + e,
				c = s(n, i[o], !0);
			return 0 === c ? o : c > 0 ? a - o > 1 ? r(o, a, n, i, s, p) : p == t.LEAST_UPPER_BOUND ? a < i.length ? a : -1 : o : o - e > 1 ? r(e, o, n, i, s, p) : p == t.LEAST_UPPER_BOUND ? o : e < 0 ? -1 : e
		}
		t.GREATEST_LOWER_BOUND = 1, t.LEAST_UPPER_BOUND = 2, t.search = function(e, a, n, i) {
			if (0 === a.length) return -1;
			var s = r(-1, a.length, e, a, n, i || t.GREATEST_LOWER_BOUND);
			if (s < 0) return -1;
			for (; s - 1 >= 0 && 0 === n(a[s], a[s - 1], !0);) --s;
			return s
		}
	}, function(e, t) {
		function r(e, t, r) {
			var a = e[t];
			e[t] = e[r], e[r] = a
		}

		function a(e, t, n, i) {
			if (n < i) {
				var s = n - 1;
				r(e, (h = n, u = i, Math.round(h + Math.random() * (u - h))), i);
				for (var p = e[i], o = n; o < i; o++) t(e[o], p) <= 0 && r(e, s += 1, o);
				r(e, s + 1, o);
				var c = s + 1;
				a(e, t, n, c - 1), a(e, t, c + 1, i)
			}
			var h, u
		}
		t.quickSort = function(e, t) {
			a(e, t, 0, e.length - 1)
		}
	}, function(e, t, r) {
		var a = r(69).SourceMapGenerator,
			n = r(37),
			i = /(\r?\n)/,
			s = "$$$isSourceNode$$$";

		function p(e, t, r, a, n) {
			this.children = [], this.sourceContents = {}, this.line = null == e ? null : e, this.column = null == t ? null : t, this.source = null == r ? null : r, this.name = null == n ? null : n, this[s] = !0, null != a && this.add(a)
		}
		p.fromStringWithSourceMap = function(e, t, r) {
			var a = new p,
				s = e.split(i),
				o = function() {
					return s.shift() + (s.shift() || "")
				},
				c = 1,
				h = 0,
				u = null;
			return t.eachMapping((function(e) {
				if (null !== u) {
					if (!(c < e.generatedLine)) {
						var t = (r = s[0]).substr(0, e.generatedColumn - h);
						return s[0] = r.substr(e.generatedColumn - h), h = e.generatedColumn, m(u, t), void(u = e)
					}
					m(u, o()), c++, h = 0
				}
				for (; c < e.generatedLine;) a.add(o()), c++;
				if (h < e.generatedColumn) {
					var r = s[0];
					a.add(r.substr(0, e.generatedColumn)), s[0] = r.substr(e.generatedColumn), h = e.generatedColumn
				}
				u = e
			}), this), s.length > 0 && (u && m(u, o()), a.add(s.join(""))), t.sources.forEach((function(e) {
				var i = t.sourceContentFor(e);
				null != i && (null != r && (e = n.join(r, e)), a.setSourceContent(e, i))
			})), a;

			function m(e, t) {
				if (null === e || void 0 === e.source) a.add(t);
				else {
					var i = r ? n.join(r, e.source) : e.source;
					a.add(new p(e.originalLine, e.originalColumn, i, t, e.name))
				}
			}
		}, p.prototype.add = function(e) {
			if (Array.isArray(e)) e.forEach((function(e) {
				this.add(e)
			}), this);
			else {
				if (!e[s] && "string" !== typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
				e && this.children.push(e)
			}
			return this
		}, p.prototype.prepend = function(e) {
			if (Array.isArray(e))
				for (var t = e.length - 1; t >= 0; t--) this.prepend(e[t]);
			else {
				if (!e[s] && "string" !== typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
				this.children.unshift(e)
			}
			return this
		}, p.prototype.walk = function(e) {
			for (var t, r = 0, a = this.children.length; r < a; r++)(t = this.children[r])[s] ? t.walk(e) : "" !== t && e(t, {
				source: this.source,
				line: this.line,
				column: this.column,
				name: this.name
			})
		}, p.prototype.join = function(e) {
			var t, r, a = this.children.length;
			if (a > 0) {
				for (t = [], r = 0; r < a - 1; r++) t.push(this.children[r]), t.push(e);
				t.push(this.children[r]), this.children = t
			}
			return this
		}, p.prototype.replaceRight = function(e, t) {
			var r = this.children[this.children.length - 1];
			return r[s] ? r.replaceRight(e, t) : "string" === typeof r ? this.children[this.children.length - 1] = r.replace(e, t) : this.children.push("".replace(e, t)), this
		}, p.prototype.setSourceContent = function(e, t) {
			this.sourceContents[n.toSetString(e)] = t
		}, p.prototype.walkSourceContents = function(e) {
			for (var t = 0, r = this.children.length; t < r; t++) this.children[t][s] && this.children[t].walkSourceContents(e);
			var a = Object.keys(this.sourceContents);
			for (t = 0, r = a.length; t < r; t++) e(n.fromSetString(a[t]), this.sourceContents[a[t]])
		}, p.prototype.toString = function() {
			var e = "";
			return this.walk((function(t) {
				e += t
			})), e
		}, p.prototype.toStringWithSourceMap = function(e) {
			var t = {
					code: "",
					line: 1,
					column: 0
				},
				r = new a(e),
				n = !1,
				i = null,
				s = null,
				p = null,
				o = null;
			return this.walk((function(e, a) {
				t.code += e, null !== a.source && null !== a.line && null !== a.column ? (i === a.source && s === a.line && p === a.column && o === a.name || r.addMapping({
					source: a.source,
					original: {
						line: a.line,
						column: a.column
					},
					generated: {
						line: t.line,
						column: t.column
					},
					name: a.name
				}), i = a.source, s = a.line, p = a.column, o = a.name, n = !0) : n && (r.addMapping({
					generated: {
						line: t.line,
						column: t.column
					}
				}), i = null, n = !1);
				for (var c = 0, h = e.length; c < h; c++) 10 === e.charCodeAt(c) ? (t.line++, t.column = 0, c + 1 === h ? (i = null, n = !1) : n && r.addMapping({
					source: a.source,
					original: {
						line: a.line,
						column: a.column
					},
					generated: {
						line: t.line,
						column: t.column
					},
					name: a.name
				})) : t.column++
			})), this.walkSourceContents((function(e, t) {
				r.setSourceContent(e, t)
			})), {
				code: t.code,
				map: r
			}
		}, t.SourceNode = p
	}, function(e, t, r) {
		var a = r(38);
		e.exports = function(e, t) {
			for (; !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = a(e)););
			return e
		}
	}, function(e, t, r) {
		var a = r(133),
			n = r(134);
		e.exports = function(e, t) {
			return !t || "object" !== a(t) && "function" !== typeof t ? n(e) : t
		}
	}, function(e, t) {
		function r(t) {
			return "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? e.exports = r = function(e) {
				return typeof e
			} : e.exports = r = function(e) {
				return e && "function" === typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
			}, r(t)
		}
		e.exports = r
	}, function(e, t) {
		e.exports = function(e) {
			if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			return e
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(16),
			n = r(26),
			i = r(136),
			s = r(20),
			p = r(29),
			o = r(32);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.CodeGen = t.Name = t.nil = t.stringify = t.str = t._ = t.KeywordCxt = void 0;
		var c = r(43);
		Object.defineProperty(t, "KeywordCxt", {
			enumerable: !0,
			get: function() {
				return c.KeywordCxt
			}
		});
		var h = r(4);
		Object.defineProperty(t, "_", {
			enumerable: !0,
			get: function() {
				return h._
			}
		}), Object.defineProperty(t, "str", {
			enumerable: !0,
			get: function() {
				return h.str
			}
		}), Object.defineProperty(t, "stringify", {
			enumerable: !0,
			get: function() {
				return h.stringify
			}
		}), Object.defineProperty(t, "nil", {
			enumerable: !0,
			get: function() {
				return h.nil
			}
		}), Object.defineProperty(t, "Name", {
			enumerable: !0,
			get: function() {
				return h.Name
			}
		}), Object.defineProperty(t, "CodeGen", {
			enumerable: !0,
			get: function() {
				return h.CodeGen
			}
		});
		var u = r(81),
			m = r(82),
			d = r(77),
			l = r(83),
			y = r(4),
			g = r(47),
			f = r(46),
			v = r(7),
			b = r(150),
			P = ["removeAdditional", "useDefaults", "coerceTypes"],
			S = new Set(["validate", "serialize", "parse", "wrapper", "root", "schema", "keyword", "pattern", "formats", "validate$data", "func", "obj", "Error"]),
			w = {
				errorDataPath: "",
				format: "`validateFormats: false` can be used instead.",
				nullable: '"nullable" keyword is supported by default.',
				jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
				extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
				missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
				processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
				sourceCode: "Use option `code: {source: true}`",
				strictDefaults: "It is default now, see option `strict`.",
				strictKeywords: "It is default now, see option `strict`.",
				uniqueItems: '"uniqueItems" keyword is always validated.',
				unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
				cache: "Map is used as cache, schema object as key.",
				serialize: "Map is used as cache, schema object as key.",
				ajvErrors: "It is default now."
			},
			k = {
				ignoreKeywordsWithRef: "",
				jsPropertySyntax: "",
				unicode: '"minLength"/"maxLength" account for unicode characters by default.'
			};

		function _(e) {
			var t, r, a, n, i, s, p, c, h, u, m, d, l, y, g, f, v, b, P, S, w, k, _ = e.strict,
				I = null === (t = e.code) || void 0 === t ? void 0 : t.optimize,
				q = !0 === I || void 0 === I ? 1 : I || 0;
			return {
				strictSchema: null === (a = null !== (r = e.strictSchema) && void 0 !== r ? r : _) || void 0 === a || a,
				strictNumbers: null === (i = null !== (n = e.strictNumbers) && void 0 !== n ? n : _) || void 0 === i || i,
				strictTypes: null !== (p = null !== (s = e.strictTypes) && void 0 !== s ? s : _) && void 0 !== p ? p : "log",
				strictTuples: null !== (h = null !== (c = e.strictTuples) && void 0 !== c ? c : _) && void 0 !== h ? h : "log",
				strictRequired: null !== (m = null !== (u = e.strictRequired) && void 0 !== u ? u : _) && void 0 !== m && m,
				code: e.code ? o(o({}, e.code), {}, {
					optimize: q
				}) : {
					optimize: q
				},
				loopRequired: null !== (d = e.loopRequired) && void 0 !== d ? d : 200,
				loopEnum: null !== (l = e.loopEnum) && void 0 !== l ? l : 200,
				meta: null === (y = e.meta) || void 0 === y || y,
				messages: null === (g = e.messages) || void 0 === g || g,
				inlineRefs: null === (f = e.inlineRefs) || void 0 === f || f,
				schemaId: null !== (v = e.schemaId) && void 0 !== v ? v : "$id",
				addUsedSchema: null === (b = e.addUsedSchema) || void 0 === b || b,
				validateSchema: null === (P = e.validateSchema) || void 0 === P || P,
				validateFormats: null === (S = e.validateFormats) || void 0 === S || S,
				unicodeRegExp: null === (w = e.unicodeRegExp) || void 0 === w || w,
				int32range: null === (k = e.int32range) || void 0 === k || k
			}
		}
		var I = function() {
			function e() {
				var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
				s(this, e), this.schemas = {}, this.refs = {}, this.formats = {}, this._compilations = new Set, this._loading = {}, this._cache = new Map, t = this.opts = o(o({}, t), _(t));
				var r = this.opts.code,
					a = r.es5,
					n = r.lines;
				this.scope = new y.ValueScope({
					scope: {},
					prefixes: S,
					es5: a,
					lines: n
				}), this.logger = T(t.logger);
				var i = t.validateFormats;
				t.validateFormats = !1, this.RULES = d.getRules(), q.call(this, w, t, "NOT SUPPORTED"), q.call(this, k, t, "DEPRECATED", "warn"), this._metaOpts = O.call(this), t.formats && E.call(this), this._addVocabularies(), this._addDefaultMetaSchema(), t.keywords && N.call(this, t.keywords), "object" == typeof t.meta && this.addMetaSchema(t.meta), x.call(this), t.validateFormats = i
			}
			return p(e, [{
				key: "_addVocabularies",
				value: function() {
					this.addKeyword("$async")
				}
			}, {
				key: "_addDefaultMetaSchema",
				value: function() {
					var e = this.opts,
						t = e.$data,
						r = e.meta,
						a = e.schemaId,
						n = b;
					"id" === a && ((n = o({}, b)).id = n.$id, delete n.$id), r && t && this.addMetaSchema(n, n[a], !1)
				}
			}, {
				key: "defaultMeta",
				value: function() {
					var e = this.opts,
						t = e.meta,
						r = e.schemaId;
					return this.opts.defaultMeta = "object" == typeof t ? t[r] || t : void 0
				}
			}, {
				key: "validate",
				value: function(e, t) {
					var r;
					if ("string" == typeof e) {
						if (!(r = this.getSchema(e))) throw new Error('no schema with key or ref "'.concat(e, '"'))
					} else r = this.compile(e);
					var a = r(t);
					return "$async" in r || (this.errors = r.errors), a
				}
			}, {
				key: "compile",
				value: function(e, t) {
					var r = this._addSchema(e, t);
					return r.validate || this._compileSchemaEnv(r)
				}
			}, {
				key: "compileAsync",
				value: function(e, t) {
					if ("function" != typeof this.opts.loadSchema) throw new Error("options.loadSchema should be a function");
					var r = this.opts.loadSchema;
					return a.call(this, e, t);

					function a(e, t) {
						return s.apply(this, arguments)
					}

					function s() {
						return (s = i(n.mark((function e(t, r) {
							var a;
							return n.wrap((function(e) {
								for (;;) switch (e.prev = e.next) {
									case 0:
										return e.next = 2, p.call(this, t.$schema);
									case 2:
										return a = this._addSchema(t, r), e.abrupt("return", a.validate || c.call(this, a));
									case 4:
									case "end":
										return e.stop()
								}
							}), e, this)
						})))).apply(this, arguments)
					}

					function p(e) {
						return o.apply(this, arguments)
					}

					function o() {
						return (o = i(n.mark((function e(t) {
							return n.wrap((function(e) {
								for (;;) switch (e.prev = e.next) {
									case 0:
										if (!t || this.getSchema(t)) {
											e.next = 3;
											break
										}
										return e.next = 3, a.call(this, {
											$ref: t
										}, !0);
									case 3:
									case "end":
										return e.stop()
								}
							}), e, this)
						})))).apply(this, arguments)
					}

					function c(e) {
						return h.apply(this, arguments)
					}

					function h() {
						return (h = i(n.mark((function e(t) {
							return n.wrap((function(e) {
								for (;;) switch (e.prev = e.next) {
									case 0:
										return e.prev = 0, e.abrupt("return", this._compileSchemaEnv(t));
									case 4:
										if (e.prev = 4, e.t0 = e.catch(0), e.t0 instanceof m.default) {
											e.next = 8;
											break
										}
										throw e.t0;
									case 8:
										return u.call(this, e.t0), e.next = 11, d.call(this, e.t0.missingSchema);
									case 11:
										return e.abrupt("return", c.call(this, t));
									case 12:
									case "end":
										return e.stop()
								}
							}), e, this, [
								[0, 4]
							])
						})))).apply(this, arguments)
					}

					function u(e) {
						var t = e.missingSchema,
							r = e.missingRef;
						if (this.refs[t]) throw new Error("AnySchema ".concat(t, " is loaded but ").concat(r, " cannot be resolved"))
					}

					function d(e) {
						return l.apply(this, arguments)
					}

					function l() {
						return (l = i(n.mark((function e(r) {
							var a;
							return n.wrap((function(e) {
								for (;;) switch (e.prev = e.next) {
									case 0:
										return e.next = 2, y.call(this, r);
									case 2:
										if (a = e.sent, this.refs[r]) {
											e.next = 6;
											break
										}
										return e.next = 6, p.call(this, a.$schema);
									case 6:
										this.refs[r] || this.addSchema(a, r, t);
									case 7:
									case "end":
										return e.stop()
								}
							}), e, this)
						})))).apply(this, arguments)
					}

					function y(e) {
						return g.apply(this, arguments)
					}

					function g() {
						return (g = i(n.mark((function e(t) {
							var a;
							return n.wrap((function(e) {
								for (;;) switch (e.prev = e.next) {
									case 0:
										if (!(a = this._loading[t])) {
											e.next = 3;
											break
										}
										return e.abrupt("return", a);
									case 3:
										return e.prev = 3, e.next = 6, this._loading[t] = r(t);
									case 6:
										return e.abrupt("return", e.sent);
									case 7:
										return e.prev = 7, delete this._loading[t], e.finish(7);
									case 10:
									case "end":
										return e.stop()
								}
							}), e, this, [
								[3, , 7, 10]
							])
						})))).apply(this, arguments)
					}
				}
			}, {
				key: "addSchema",
				value: function(e, t, r) {
					var n, i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.opts.validateSchema;
					if (Array.isArray(e)) {
						var s, p = a(e);
						try {
							for (p.s(); !(s = p.n()).done;) {
								var o = s.value;
								this.addSchema(o, void 0, r, i)
							}
						} catch (h) {
							p.e(h)
						} finally {
							p.f()
						}
						return this
					}
					if ("object" === typeof e) {
						var c = this.opts.schemaId;
						if (void 0 !== (n = e[c]) && "string" != typeof n) throw new Error("schema ".concat(c, " must be string"))
					}
					return t = g.normalizeId(t || n), this._checkUnique(t), this.schemas[t] = this._addSchema(e, r, t, i, !0), this
				}
			}, {
				key: "addMetaSchema",
				value: function(e, t) {
					var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.opts.validateSchema;
					return this.addSchema(e, t, !0, r), this
				}
			}, {
				key: "validateSchema",
				value: function(e, t) {
					if ("boolean" == typeof e) return !0;
					var r;
					if (void 0 !== (r = e.$schema) && "string" != typeof r) throw new Error("$schema must be a string");
					if (!(r = r || this.opts.defaultMeta || this.defaultMeta())) return this.logger.warn("meta-schema not available"), this.errors = null, !0;
					var a = this.validate(r, e);
					if (!a && t) {
						var n = "schema is invalid: " + this.errorsText();
						if ("log" !== this.opts.validateSchema) throw new Error(n);
						this.logger.error(n)
					}
					return a
				}
			}, {
				key: "getSchema",
				value: function(e) {
					for (var t;
						"string" == typeof(t = L.call(this, e));) e = t;
					if (void 0 === t) {
						var r = this.opts.schemaId,
							a = new l.SchemaEnv({
								schema: {},
								schemaId: r
							});
						if (!(t = l.resolveSchema.call(this, a, e))) return;
						this.refs[e] = t
					}
					return t.validate || this._compileSchemaEnv(t)
				}
			}, {
				key: "removeSchema",
				value: function(e) {
					if (e instanceof RegExp) return this._removeAllSchemas(this.schemas, e), this._removeAllSchemas(this.refs, e), this;
					switch (typeof e) {
						case "undefined":
							return this._removeAllSchemas(this.schemas), this._removeAllSchemas(this.refs), this._cache.clear(), this;
						case "string":
							var t = L.call(this, e);
							return "object" == typeof t && this._cache.delete(t.schema), delete this.schemas[e], delete this.refs[e], this;
						case "object":
							var r = e;
							this._cache.delete(r);
							var a = e[this.opts.schemaId];
							return a && (a = g.normalizeId(a), delete this.schemas[a], delete this.refs[a]), this;
						default:
							throw new Error("ajv.removeSchema: invalid parameter")
					}
				}
			}, {
				key: "addVocabulary",
				value: function(e) {
					var t, r = a(e);
					try {
						for (r.s(); !(t = r.n()).done;) {
							var n = t.value;
							this.addKeyword(n)
						}
					} catch (i) {
						r.e(i)
					} finally {
						r.f()
					}
					return this
				}
			}, {
				key: "addKeyword",
				value: function(e, t) {
					var r, a = this;
					if ("string" == typeof e) r = e, "object" == typeof t && (this.logger.warn("these parameters are deprecated, see docs for addKeyword"), t.keyword = r);
					else {
						if ("object" != typeof e || void 0 !== t) throw new Error("invalid addKeywords parameters");
						if (r = (t = e).keyword, Array.isArray(r) && !r.length) throw new Error("addKeywords: keyword must be string or non-empty array")
					}
					if (F.call(this, r, t), !t) return v.eachItem(r, (function(e) {
						return C.call(a, e)
					})), this;
					H.call(this, t);
					var n = o(o({}, t), {}, {
						type: f.getJSONTypes(t.type),
						schemaType: f.getJSONTypes(t.schemaType)
					});
					return v.eachItem(r, 0 === n.type.length ? function(e) {
						return C.call(a, e, n)
					} : function(e) {
						return n.type.forEach((function(t) {
							return C.call(a, e, n, t)
						}))
					}), this
				}
			}, {
				key: "getKeyword",
				value: function(e) {
					var t = this.RULES.all[e];
					return "object" == typeof t ? t.definition : !!t
				}
			}, {
				key: "removeKeyword",
				value: function(e) {
					var t = this.RULES;
					delete t.keywords[e], delete t.all[e];
					var r, n = a(t.rules);
					try {
						for (n.s(); !(r = n.n()).done;) {
							var i = r.value,
								s = i.rules.findIndex((function(t) {
									return t.keyword === e
								}));
							s >= 0 && i.rules.splice(s, 1)
						}
					} catch (p) {
						n.e(p)
					} finally {
						n.f()
					}
					return this
				}
			}, {
				key: "addFormat",
				value: function(e, t) {
					return "string" == typeof t && (t = new RegExp(t)), this.formats[e] = t, this
				}
			}, {
				key: "errorsText",
				value: function() {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.errors,
						t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
						r = t.separator,
						a = void 0 === r ? ", " : r,
						n = t.dataVar,
						i = void 0 === n ? "data" : n;
					return e && 0 !== e.length ? e.map((function(e) {
						return "".concat(i).concat(e.instancePath, " ").concat(e.message)
					})).reduce((function(e, t) {
						return e + a + t
					})) : "No errors"
				}
			}, {
				key: "$dataMetaSchema",
				value: function(e, t) {
					var r = this.RULES.all;
					e = JSON.parse(JSON.stringify(e));
					var n, i = a(t);
					try {
						for (i.s(); !(n = i.n()).done;) {
							var s, p = n.value.split("/").slice(1),
								o = e,
								c = a(p);
							try {
								for (c.s(); !(s = c.n()).done;) {
									o = o[s.value]
								}
							} catch (l) {
								c.e(l)
							} finally {
								c.f()
							}
							for (var h in r) {
								var u = r[h];
								if ("object" == typeof u) {
									var m = u.definition.$data,
										d = o[h];
									m && d && (o[h] = M(d))
								}
							}
						}
					} catch (l) {
						i.e(l)
					} finally {
						i.f()
					}
					return e
				}
			}, {
				key: "_removeAllSchemas",
				value: function(e, t) {
					for (var r in e) {
						var a = e[r];
						t && !t.test(r) || ("string" == typeof a ? delete e[r] : a && !a.meta && (this._cache.delete(a.schema), delete e[r]))
					}
				}
			}, {
				key: "_addSchema",
				value: function(e, t, r) {
					var a, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.opts.validateSchema,
						i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.opts.addUsedSchema,
						s = this.opts.schemaId;
					if ("object" == typeof e) a = e[s];
					else {
						if (this.opts.jtd) throw new Error("schema must be object");
						if ("boolean" != typeof e) throw new Error("schema must be object or boolean")
					}
					var p = this._cache.get(e);
					if (void 0 !== p) return p;
					var o = g.getSchemaRefs.call(this, e);
					return r = g.normalizeId(a || r), p = new l.SchemaEnv({
						schema: e,
						schemaId: s,
						meta: t,
						baseId: r,
						localRefs: o
					}), this._cache.set(p.schema, p), i && !r.startsWith("#") && (r && this._checkUnique(r), this.refs[r] = p), n && this.validateSchema(e, !0), p
				}
			}, {
				key: "_checkUnique",
				value: function(e) {
					if (this.schemas[e] || this.refs[e]) throw new Error('schema with key or id "'.concat(e, '" already exists'))
				}
			}, {
				key: "_compileSchemaEnv",
				value: function(e) {
					if (e.meta ? this._compileMetaSchema(e) : l.compileSchema.call(this, e), !e.validate) throw new Error("ajv implementation error");
					return e.validate
				}
			}, {
				key: "_compileMetaSchema",
				value: function(e) {
					var t = this.opts;
					this.opts = this._metaOpts;
					try {
						l.compileSchema.call(this, e)
					} finally {
						this.opts = t
					}
				}
			}]), e
		}();

		function q(e, t, r) {
			var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "error";
			for (var n in e) {
				var i = n;
				i in t && this.logger[a]("".concat(r, ": option ").concat(n, ". ").concat(e[i]))
			}
		}

		function L(e) {
			return e = g.normalizeId(e), this.schemas[e] || this.refs[e]
		}

		function x() {
			var e = this.opts.schemas;
			if (e)
				if (Array.isArray(e)) this.addSchema(e);
				else
					for (var t in e) this.addSchema(e[t], t)
		}

		function E() {
			for (var e in this.opts.formats) {
				var t = this.opts.formats[e];
				t && this.addFormat(e, t)
			}
		}

		function N(e) {
			if (Array.isArray(e)) this.addVocabulary(e);
			else
				for (var t in this.logger.warn("keywords option as map is deprecated, pass array"), e) {
					var r = e[t];
					r.keyword || (r.keyword = t), this.addKeyword(r)
				}
		}

		function O() {
			var e, t = o({}, this.opts),
				r = a(P);
			try {
				for (r.s(); !(e = r.n()).done;) {
					delete t[e.value]
				}
			} catch (n) {
				r.e(n)
			} finally {
				r.f()
			}
			return t
		}
		t.default = I, I.ValidationError = u.default, I.MissingRefError = m.default;
		var D = {
			log: function() {},
			warn: function() {},
			error: function() {}
		};

		function T(e) {
			if (!1 === e) return D;
			if (void 0 === e) return console;
			if (e.log && e.warn && e.error) return e;
			throw new Error("logger must implement log, warn and error methods")
		}
		var j = /^[a-z_$][a-z0-9_$:-]*$/i;

		function F(e, t) {
			var r = this.RULES;
			if (v.eachItem(e, (function(e) {
					if (r.keywords[e]) throw new Error("Keyword ".concat(e, " is already defined"));
					if (!j.test(e)) throw new Error("Keyword ".concat(e, " has invalid name"))
				})), t && t.$data && !("code" in t) && !("validate" in t)) throw new Error('$data keyword must have "code" or "validate" function')
		}

		function C(e, t, r) {
			var a, n = this,
				i = null === t || void 0 === t ? void 0 : t.post;
			if (r && i) throw new Error('keyword with "post" flag cannot have "type"');
			var s = this.RULES,
				p = i ? s.post : s.rules.find((function(e) {
					return e.type === r
				}));
			if (p || (p = {
					type: r,
					rules: []
				}, s.rules.push(p)), s.keywords[e] = !0, t) {
				var c = {
					keyword: e,
					definition: o(o({}, t), {}, {
						type: f.getJSONTypes(t.type),
						schemaType: f.getJSONTypes(t.schemaType)
					})
				};
				t.before ? A.call(this, p, c, t.before) : p.rules.push(c), s.all[e] = c, null === (a = t.implements) || void 0 === a || a.forEach((function(e) {
					return n.addKeyword(e)
				}))
			}
		}

		function A(e, t, r) {
			var a = e.rules.findIndex((function(e) {
				return e.keyword === r
			}));
			a >= 0 ? e.rules.splice(a, 0, t) : (e.rules.push(t), this.logger.warn("rule ".concat(r, " is not defined")))
		}

		function H(e) {
			var t = e.metaSchema;
			void 0 !== t && (e.$data && this.opts.$data && (t = M(t)), e.validateSchema = this.compile(t, !0))
		}
		var R = {
			$ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
		};

		function M(e) {
			return {
				anyOf: [e, R]
			}
		}
	}, function(e, t) {
		function r(e, t, r, a, n, i, s) {
			try {
				var p = e[i](s),
					o = p.value
			} catch (c) {
				return void r(c)
			}
			p.done ? t(o) : Promise.resolve(o).then(a, n)
		}
		e.exports = function(e) {
			return function() {
				var t = this,
					a = arguments;
				return new Promise((function(n, i) {
					var s = e.apply(t, a);

					function p(e) {
						r(s, n, i, p, o, "next", e)
					}

					function o(e) {
						r(s, n, i, p, o, "throw", e)
					}
					p(void 0)
				}))
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a, n = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.boolOrEmptySchema = t.topBoolOrEmptySchema = void 0;
		var i = r(44),
			s = r(4),
			p = r(24),
			o = {
				message: "boolean schema is false"
			};

		function c(e, t) {
			var r = {
				gen: e.gen,
				keyword: "false schema",
				data: e.data,
				schema: !1,
				schemaCode: !1,
				schemaValue: !1,
				params: {},
				it: e
			};
			i.reportError(r, o, void 0, t)
		}
		t.topBoolOrEmptySchema = function(e) {
			var t = e.gen,
				r = e.schema,
				i = e.validateName;
			!1 === r ? c(e, !1) : "object" == typeof r && !0 === r.$async ? t.return(p.default.data) : (t.assign(s._(a || (a = n(["", ".errors"])), i), null), t.return(!0))
		}, t.boolOrEmptySchema = function(e, t) {
			var r = e.gen;
			!1 === e.schema ? (r.var(t, !1), c(e)) : r.var(t, !0)
		}
	}, function(e, t) {
		e.exports = function(e) {
			if (Array.isArray(e)) return e
		}
	}, function(e, t) {
		e.exports = function(e, t) {
			if ("undefined" !== typeof Symbol && Symbol.iterator in Object(e)) {
				var r = [],
					a = !0,
					n = !1,
					i = void 0;
				try {
					for (var s, p = e[Symbol.iterator](); !(a = (s = p.next()).done) && (r.push(s.value), !t || r.length !== t); a = !0);
				} catch (o) {
					n = !0, i = o
				} finally {
					try {
						a || null == p.return || p.return()
					} finally {
						if (n) throw i
					}
				}
				return r
			}
		}
	}, function(e, t) {
		e.exports = function() {
			throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
		}
	}, function(e, t, r) {
		var a = r(74);
		e.exports = function(e) {
			if (Array.isArray(e)) return a(e)
		}
	}, function(e, t) {
		e.exports = function(e) {
			if ("undefined" !== typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e)
		}
	}, function(e, t) {
		e.exports = function() {
			throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
		}
	}, function(e, t) {
		e.exports = function(e) {
			return -1 !== Function.toString.call(e).indexOf("[native code]")
		}
	}, function(e, t, r) {
		var a = r(62),
			n = r(73);

		function i(t, r, s) {
			return n() ? e.exports = i = Reflect.construct : e.exports = i = function(e, t, r) {
				var n = [null];
				n.push.apply(n, t);
				var i = new(Function.bind.apply(e, n));
				return r && a(i, r.prototype), i
			}, i.apply(null, arguments)
		}
		e.exports = i
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.assignDefaults = void 0;
		var o = r(4),
			c = r(7);

		function h(e, t, r) {
			var h = e.gen,
				u = e.compositeRule,
				m = e.data,
				d = e.opts;
			if (void 0 !== r) {
				var l = o._(a || (a = p(["", "", ""])), m, o.getProperty(t));
				if (u) c.checkStrictMode(e, "default is ignored for: ".concat(l));
				else {
					var y = o._(n || (n = p(["", " === undefined"])), l);
					"empty" === d.useDefaults && (y = o._(i || (i = p(["", " || ", " === null || ", ' === ""'])), y, l, l)), h.if(y, o._(s || (s = p(["", " = ", ""])), l, o.stringify(r)))
				}
			}
		}
		t.assignDefaults = function(e, t) {
			var r = e.schema,
				a = r.properties,
				n = r.items;
			if ("object" === t && a)
				for (var i in a) h(e, i, a[i].default);
			else "array" === t && Array.isArray(n) && n.forEach((function(t, r) {
				return h(e, r, t.default)
			}))
		}
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m, d = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.validateKeywordUsage = t.validSchemaType = t.funcKeywordCode = t.macroKeywordCode = void 0;
		var l = r(4),
			y = r(24),
			g = r(15),
			f = r(44);

		function v(e) {
			var t = e.gen,
				r = e.data,
				a = e.it;
			t.if(a.parentData, (function() {
				return t.assign(r, l._(c || (c = d(["", "[", "]"])), a.parentData, a.parentDataProperty))
			}))
		}

		function b(e, t, r) {
			if (void 0 === r) throw new Error('keyword "'.concat(t, '" failed to compile'));
			return e.scopeValue("keyword", "function" == typeof r ? {
				ref: r
			} : {
				ref: r,
				code: l.stringify(r)
			})
		}
		t.macroKeywordCode = function(e, t) {
			var r = e.gen,
				a = e.keyword,
				n = e.schema,
				i = e.parentSchema,
				s = e.it,
				p = t.macro.call(s.self, n, i, s),
				o = b(r, a, p);
			!1 !== s.opts.validateSchema && s.self.validateSchema(p, !0);
			var c = r.name("valid");
			e.subschema({
				schema: p,
				schemaPath: l.nil,
				errSchemaPath: "".concat(s.errSchemaPath, "/").concat(a),
				topSchemaRef: o,
				compositeRule: !0
			}, c), e.pass(c, (function() {
				return e.error(!0)
			}))
		}, t.funcKeywordCode = function(e, t) {
			var r, c = e.gen,
				P = e.keyword,
				S = e.schema,
				w = e.parentSchema,
				k = e.$data,
				_ = e.it;
			! function(e, t) {
				var r = e.schemaEnv;
				if (t.async && !r.$async) throw new Error("async keyword in sync schema")
			}(_, t);
			var I = !k && t.compile ? t.compile.call(_.self, S, w, _) : t.validate,
				q = b(c, P, I),
				L = c.let("valid");

			function x() {
				var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : t.async ? l._(p || (p = d(["await "]))) : l.nil,
					a = _.opts.passContext ? y.default.this : y.default.self,
					n = !("compile" in t && !k || !1 === t.schema);
				c.assign(L, l._(o || (o = d(["", "", ""])), r, g.callValidateCode(e, q, a, n)), t.modifying)
			}

			function E(e) {
				var r;
				c.if(l.not(null !== (r = t.valid) && void 0 !== r ? r : L), e)
			}
			e.block$data(L, (function() {
				if (!1 === t.errors) x(), t.modifying && v(e), E((function() {
					return e.error()
				}));
				else {
					var r = t.async ? function() {
						var e = c.let("ruleErrs", null);
						return c.try((function() {
							return x(l._(a || (a = d(["await "]))))
						}), (function(t) {
							return c.assign(L, !1).if(l._(n || (n = d(["", " instanceof ", ""])), t, _.ValidationError), (function() {
								return c.assign(e, l._(i || (i = d(["", ".errors"])), t))
							}), (function() {
								return c.throw(t)
							}))
						})), e
					}() : function() {
						var e = l._(s || (s = d(["", ".errors"])), q);
						return c.assign(e, null), x(l.nil), e
					}();
					t.modifying && v(e), E((function() {
						return function(e, t) {
							var r = e.gen;
							r.if(l._(h || (h = d(["Array.isArray(", ")"])), t), (function() {
								r.assign(y.default.vErrors, l._(u || (u = d(["", " === null ? ", " : ", ".concat(", ")"])), y.default.vErrors, t, y.default.vErrors, t)).assign(y.default.errors, l._(m || (m = d(["", ".length"])), y.default.vErrors)), f.extendErrors(e)
							}), (function() {
								return e.error()
							}))
						}(e, r)
					}))
				}
			})), e.ok(null !== (r = t.valid) && void 0 !== r ? r : L)
		}, t.validSchemaType = function(e, t) {
			var r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
			return !t.length || t.some((function(t) {
				return "array" === t ? Array.isArray(e) : "object" === t ? e && "object" == typeof e && !Array.isArray(e) : typeof e == t || r && "undefined" == typeof e
			}))
		}, t.validateKeywordUsage = function(e, t, r) {
			var a = e.schema,
				n = e.opts,
				i = e.self,
				s = e.errSchemaPath;
			if (Array.isArray(t.keyword) ? !t.keyword.includes(r) : t.keyword !== r) throw new Error("ajv implementation error");
			var p = t.dependencies;
			if (null === p || void 0 === p ? void 0 : p.some((function(e) {
					return !Object.prototype.hasOwnProperty.call(a, e)
				}))) throw new Error("parent schema must have dependencies of ".concat(r, ": ").concat(p.join(",")));
			if (t.validateSchema && !t.validateSchema(a[r])) {
				var o = 'keyword "'.concat(r, '" value is invalid at path "').concat(s, '": ') + i.errorsText(t.validateSchema.errors);
				if ("log" !== n.validateSchema) throw new Error(o);
				i.logger.error(o)
			}
		}
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o = r(33),
			c = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.extendSubschemaMode = t.extendSubschemaData = t.getSubschema = void 0;
		var h = r(4),
			u = r(7);
		t.getSubschema = function(e, t) {
			var r = t.keyword,
				i = t.schemaProp,
				s = t.schema,
				p = t.schemaPath,
				o = t.errSchemaPath,
				m = t.topSchemaRef;
			if (void 0 !== r && void 0 !== s) throw new Error('both "keyword" and "schema" passed, only one allowed');
			if (void 0 !== r) {
				var d = e.schema[r];
				return void 0 === i ? {
					schema: d,
					schemaPath: h._(a || (a = c(["", "", ""])), e.schemaPath, h.getProperty(r)),
					errSchemaPath: "".concat(e.errSchemaPath, "/").concat(r)
				} : {
					schema: d[i],
					schemaPath: h._(n || (n = c(["", "", "", ""])), e.schemaPath, h.getProperty(r), h.getProperty(i)),
					errSchemaPath: "".concat(e.errSchemaPath, "/").concat(r, "/").concat(u.escapeFragment(i))
				}
			}
			if (void 0 !== s) {
				if (void 0 === p || void 0 === o || void 0 === m) throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
				return {
					schema: s,
					schemaPath: p,
					topSchemaRef: m,
					errSchemaPath: o
				}
			}
			throw new Error('either "keyword" or "schema" must be passed')
		}, t.extendSubschemaData = function(e, t, r) {
			var a = r.dataProp,
				n = r.dataPropType,
				m = r.data,
				d = r.dataTypes,
				l = r.propertyName;
			if (void 0 !== m && void 0 !== a) throw new Error('both "data" and "dataProp" passed, only one allowed');
			var y = t.gen;
			if (void 0 !== a) {
				var g = t.errorPath,
					f = t.dataPathArr,
					v = t.opts;
				b(y.let("data", h._(i || (i = c(["", "", ""])), t.data, h.getProperty(a)), !0)), e.errorPath = h.str(s || (s = c(["", "", ""])), g, u.getErrorPath(a, n, v.jsPropertySyntax)), e.parentDataProperty = h._(p || (p = c(["", ""])), a), e.dataPathArr = [].concat(o(f), [e.parentDataProperty])
			}

			function b(r) {
				e.data = r, e.dataLevel = t.dataLevel + 1, e.dataTypes = [], t.definedProperties = new Set, e.parentData = t.data, e.dataNames = [].concat(o(t.dataNames), [r])
			}
			void 0 !== m && (b(m instanceof h.Name ? m : y.let("data", m, !0)), void 0 !== l && (e.propertyName = l)), d && (e.dataTypes = d)
		}, t.extendSubschemaMode = function(e, t) {
			var r = t.jtdDiscriminator,
				a = t.jtdMetadata,
				n = t.compositeRule,
				i = t.createErrors,
				s = t.allErrors;
			void 0 !== n && (e.compositeRule = n), void 0 !== i && (e.createErrors = i), void 0 !== s && (e.allErrors = s), e.jtdDiscriminator = r, e.jtdMetadata = a
		}
	}, function(e, t, r) {
		"use strict";
		var a = e.exports = function(e, t, r) {
			"function" == typeof t && (r = t, t = {}), n(t, "function" == typeof(r = t.cb || r) ? r : r.pre || function() {}, r.post || function() {}, e, "", e)
		};

		function n(e, t, r, i, s, p, o, c, h, u) {
			if (i && "object" == typeof i && !Array.isArray(i)) {
				for (var m in t(i, s, p, o, c, h, u), i) {
					var d = i[m];
					if (Array.isArray(d)) {
						if (m in a.arrayKeywords)
							for (var l = 0; l < d.length; l++) n(e, t, r, d[l], s + "/" + m + "/" + l, p, s, m, i, l)
					} else if (m in a.propsKeywords) {
						if (d && "object" == typeof d)
							for (var y in d) n(e, t, r, d[y], s + "/" + m + "/" + y.replace(/~/g, "~0").replace(/\//g, "~1"), p, s, m, i, y)
					} else(m in a.keywords || e.allKeys && !(m in a.skipKeywords)) && n(e, t, r, d, s + "/" + m, p, s, m, i)
				}
				r(i, s, p, o, c, h, u)
			}
		}
		a.keywords = {
			additionalItems: !0,
			items: !0,
			contains: !0,
			additionalProperties: !0,
			propertyNames: !0,
			not: !0,
			if: !0,
			then: !0,
			else: !0
		}, a.arrayKeywords = {
			items: !0,
			allOf: !0,
			anyOf: !0,
			oneOf: !0
		}, a.propsKeywords = {
			$defs: !0,
			definitions: !0,
			properties: !0,
			patternProperties: !0,
			dependencies: !0
		}, a.skipKeywords = {
			default: !0,
			enum: !0,
			const: !0,
			required: !0,
			maximum: !0,
			minimum: !0,
			exclusiveMaximum: !0,
			exclusiveMinimum: !0,
			multipleOf: !0,
			maxLength: !0,
			minLength: !0,
			pattern: !0,
			format: !0,
			maxItems: !0,
			minItems: !0,
			uniqueItems: !0,
			maxProperties: !0,
			minProperties: !0
		}
	}, function(e) {
		e.exports = JSON.parse('{"$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON AnySchema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}')
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(152),
			n = r(155),
			i = r(167),
			s = r(181),
			p = r(183),
			o = [a.default, n.default, i.default(), s.default, p.metadataVocabulary, p.contentVocabulary];
		t.default = o
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(153),
			n = r(154),
			i = ["$schema", "$id", "$defs", "$vocabulary", {
				keyword: "$comment"
			}, "definitions", a.default, n.default];
		t.default = i
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = {
			keyword: "id",
			code: function() {
				throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')
			}
		};
		t.default = a
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.callRef = t.getValidate = void 0;
		var d = r(82),
			l = r(15),
			y = r(4),
			g = r(24),
			f = r(83),
			v = r(7),
			b = {
				keyword: "$ref",
				schemaType: "string",
				code: function(e) {
					var t = e.gen,
						r = e.schema,
						n = e.it,
						i = n.baseId,
						s = n.schemaEnv,
						p = n.validateName,
						o = n.opts,
						c = n.self,
						h = s.root;
					if (("#" === r || "#/" === r) && i === h.baseId) return function() {
						if (s === h) return S(e, p, s, s.$async);
						var r = t.scopeValue("root", {
							ref: h
						});
						return S(e, y._(a || (a = m(["", ".validate"])), r), h, h.$async)
					}();
					var u = f.resolveRef.call(c, h, i, r);
					if (void 0 === u) throw new d.default(i, r);
					return u instanceof f.SchemaEnv ? function(t) {
						var r = P(e, t);
						S(e, r, t, t.$async)
					}(u) : function(a) {
						var n = t.scopeValue("schema", !0 === o.code.source ? {
								ref: a,
								code: y.stringify(a)
							} : {
								ref: a
							}),
							i = t.name("valid"),
							s = e.subschema({
								schema: a,
								dataTypes: [],
								schemaPath: y.nil,
								topSchemaRef: n,
								errSchemaPath: r
							}, i);
						e.mergeEvaluated(s), e.ok(i)
					}(u)
				}
			};

		function P(e, t) {
			var r = e.gen;
			return t.validate ? r.scopeValue("validate", {
				ref: t.validate
			}) : y._(n || (n = m(["", ".validate"])), r.scopeValue("wrapper", {
				ref: t
			}))
		}

		function S(e, t, r, a) {
			var n = e.gen,
				d = e.it,
				f = d.allErrors,
				b = d.schemaEnv,
				P = d.opts.passContext ? g.default.this : y.nil;

			function S(e) {
				var t = y._(p || (p = m(["", ".errors"])), e);
				n.assign(g.default.vErrors, y._(o || (o = m(["", " === null ? ", " : ", ".concat(", ")"])), g.default.vErrors, t, g.default.vErrors, t)), n.assign(g.default.errors, y._(c || (c = m(["", ".length"])), g.default.vErrors))
			}

			function w(e) {
				var t;
				if (d.opts.unevaluated) {
					var a = null === (t = null === r || void 0 === r ? void 0 : r.validate) || void 0 === t ? void 0 : t.evaluated;
					if (!0 !== d.props)
						if (a && !a.dynamicProps) void 0 !== a.props && (d.props = v.mergeEvaluated.props(n, a.props, d.props));
						else {
							var i = n.var("props", y._(h || (h = m(["", ".evaluated.props"])), e));
							d.props = v.mergeEvaluated.props(n, i, d.props, y.Name)
						} if (!0 !== d.items)
						if (a && !a.dynamicItems) void 0 !== a.items && (d.items = v.mergeEvaluated.items(n, a.items, d.items));
						else {
							var s = n.var("items", y._(u || (u = m(["", ".evaluated.items"])), e));
							d.items = v.mergeEvaluated.items(n, s, d.items, y.Name)
						}
				}
			}
			a ? function() {
				if (!b.$async) throw new Error("async schema referenced by sync schema");
				var r = n.let("valid");
				n.try((function() {
					n.code(y._(i || (i = m(["await ", ""])), l.callValidateCode(e, t, P))), w(t), f || n.assign(r, !0)
				}), (function(e) {
					n.if(y._(s || (s = m(["!(", " instanceof ", ")"])), e, d.ValidationError), (function() {
						return n.throw(e)
					})), S(e), f || n.assign(r, !1)
				})), e.ok(r)
			}() : e.result(l.callValidateCode(e, t, P), (function() {
				return w(t)
			}), (function() {
				return S(t)
			}))
		}
		t.getValidate = P, t.callRef = S, t.default = b
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(156),
			n = r(157),
			i = r(158),
			s = r(160),
			p = r(161),
			o = r(162),
			c = r(163),
			h = r(164),
			u = r(165),
			m = r(166),
			d = [a.default, n.default, i.default, s.default, p.default, o.default, c.default, h.default, {
				keyword: "type",
				schemaType: ["string", "array"]
			}, {
				keyword: "nullable",
				schemaType: "boolean"
			}, u.default, m.default];
		t.default = d
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = r(4),
			o = p.operators,
			c = {
				maximum: {
					okStr: "<=",
					ok: o.LTE,
					fail: o.GT
				},
				minimum: {
					okStr: ">=",
					ok: o.GTE,
					fail: o.LT
				},
				exclusiveMaximum: {
					okStr: "<",
					ok: o.LT,
					fail: o.GTE
				},
				exclusiveMinimum: {
					okStr: ">",
					ok: o.GT,
					fail: o.LTE
				}
			},
			h = {
				message: function(e) {
					var t = e.keyword,
						r = e.schemaCode;
					return p.str(a || (a = s(["must be ", " ", ""])), c[t].okStr, r)
				},
				params: function(e) {
					var t = e.keyword,
						r = e.schemaCode;
					return p._(n || (n = s(["{comparison: ", ", limit: ", "}"])), c[t].okStr, r)
				}
			},
			u = {
				keyword: Object.keys(c),
				type: "number",
				schemaType: "number",
				$data: !0,
				error: h,
				code: function(e) {
					var t = e.keyword,
						r = e.data,
						a = e.schemaCode;
					e.fail$data(p._(i || (i = s(["", " ", " ", " || isNaN(", ")"])), r, c[t].fail, a, r))
				}
			};
		t.default = u
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var c = r(4),
			h = {
				keyword: "multipleOf",
				type: "number",
				schemaType: "number",
				$data: !0,
				error: {
					message: function(e) {
						var t = e.schemaCode;
						return c.str(a || (a = o(["must be multiple of ", ""])), t)
					},
					params: function(e) {
						var t = e.schemaCode;
						return c._(n || (n = o(["{multipleOf: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.data,
						a = e.schemaCode,
						n = e.it.opts.multipleOfPrecision,
						h = t.let("res"),
						u = n ? c._(i || (i = o(["Math.abs(Math.round(", ") - ", ") > 1e-", ""])), h, h, n) : c._(s || (s = o(["", " !== parseInt(", ")"])), h, h);
					e.fail$data(c._(p || (p = o(["(", " === 0 || (", " = ", "/", ", ", "))"])), a, h, r, a, u))
				}
			};
		t.default = h
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var c = r(4),
			h = r(7),
			u = r(159),
			m = {
				keyword: ["maxLength", "minLength"],
				type: "string",
				schemaType: "number",
				$data: !0,
				error: {
					message: function(e) {
						var t = e.keyword,
							r = e.schemaCode,
							n = "maxLength" === t ? "more" : "fewer";
						return c.str(a || (a = o(["must NOT have ", " than ", " characters"])), n, r)
					},
					params: function(e) {
						var t = e.schemaCode;
						return c._(n || (n = o(["{limit: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.keyword,
						r = e.data,
						a = e.schemaCode,
						n = e.it,
						m = "maxLength" === t ? c.operators.GT : c.operators.LT,
						d = !1 === n.opts.unicode ? c._(i || (i = o(["", ".length"])), r) : c._(s || (s = o(["", "(", ")"])), h.useFunc(e.gen, u.default), r);
					e.fail$data(c._(p || (p = o(["", " ", " ", ""])), d, m, a))
				}
			};
		t.default = m
	}, function(e, t, r) {
		"use strict";

		function a(e) {
			for (var t, r = e.length, a = 0, n = 0; n < r;) a++, (t = e.charCodeAt(n++)) >= 55296 && t <= 56319 && n < r && 56320 === (64512 & (t = e.charCodeAt(n))) && n++;
			return a
		}
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.default = a, a.code = 'require("ajv/dist/runtime/ucs2length").default'
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var o = r(15),
			c = r(4),
			h = {
				keyword: "pattern",
				type: "string",
				schemaType: "string",
				$data: !0,
				error: {
					message: function(e) {
						var t = e.schemaCode;
						return c.str(a || (a = p(['must match pattern "', '"'])), t)
					},
					params: function(e) {
						var t = e.schemaCode;
						return c._(n || (n = p(["{pattern: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.data,
						r = e.$data,
						a = e.schema,
						n = e.schemaCode,
						h = e.it.opts.unicodeRegExp ? "u" : "",
						u = r ? c._(i || (i = p(["(new RegExp(", ", ", "))"])), n, h) : o.usePattern(e, a);
					e.fail$data(c._(s || (s = p(["!", ".test(", ")"])), u, t))
				}
			};
		t.default = h
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = r(4),
			o = {
				keyword: ["maxProperties", "minProperties"],
				type: "object",
				schemaType: "number",
				$data: !0,
				error: {
					message: function(e) {
						var t = e.keyword,
							r = e.schemaCode,
							n = "maxProperties" === t ? "more" : "fewer";
						return p.str(a || (a = s(["must NOT have ", " than ", " items"])), n, r)
					},
					params: function(e) {
						var t = e.schemaCode;
						return p._(n || (n = s(["{limit: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.keyword,
						r = e.data,
						a = e.schemaCode,
						n = "maxProperties" === t ? p.operators.GT : p.operators.LT;
					e.fail$data(p._(i || (i = s(["Object.keys(", ").length ", " ", ""])), r, n, a))
				}
			};
		t.default = o
	}, function(e, t, r) {
		"use strict";
		var a, n, i = r(16),
			s = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = r(15),
			o = r(4),
			c = r(7),
			h = {
				keyword: "required",
				type: "object",
				schemaType: "array",
				$data: !0,
				error: {
					message: function(e) {
						var t = e.params.missingProperty;
						return o.str(a || (a = s(["must have required property '", "'"])), t)
					},
					params: function(e) {
						var t = e.params.missingProperty;
						return o._(n || (n = s(["{missingProperty: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.schema,
						a = e.schemaCode,
						n = e.data,
						s = e.$data,
						h = e.it,
						u = h.opts;
					if (s || 0 !== r.length) {
						var m = r.length >= u.loopRequired;
						if (h.allErrors ? function() {
								if (m || s) e.block$data(o.nil, P);
								else {
									var t, a = i(r);
									try {
										for (a.s(); !(t = a.n()).done;) {
											var n = t.value;
											p.checkReportMissingProp(e, n)
										}
									} catch (c) {
										a.e(c)
									} finally {
										a.f()
									}
								}
							}() : function() {
								var i = t.let("missing");
								if (m || s) {
									var c = t.let("valid", !0);
									e.block$data(c, (function() {
										return function(r, i) {
											e.setParams({
												missingProperty: r
											}), t.forOf(r, a, (function() {
												t.assign(i, p.propertyInData(t, n, r, u.ownProperties)), t.if(o.not(i), (function() {
													e.error(), t.break()
												}))
											}), o.nil)
										}(i, c)
									})), e.ok(c)
								} else t.if(p.checkMissingProp(e, r, i)), p.reportMissingProp(e, i), t.else()
							}(), u.strictRequired) {
							var d, l = e.parentSchema.properties,
								y = e.it.definedProperties,
								g = i(r);
							try {
								for (g.s(); !(d = g.n()).done;) {
									var f = d.value;
									if (void 0 === (null === l || void 0 === l ? void 0 : l[f]) && !y.has(f)) {
										var v = h.schemaEnv.baseId + h.errSchemaPath,
											b = 'required property "'.concat(f, '" is not defined at "').concat(v, '" (strictRequired)');
										c.checkStrictMode(h, b, h.opts.strictRequired)
									}
								}
							} catch (S) {
								g.e(S)
							} finally {
								g.f()
							}
						}
					}

					function P() {
						t.forOf("prop", a, (function(r) {
							e.setParams({
								missingProperty: r
							}), t.if(p.noPropertyInData(t, n, r, u.ownProperties), (function() {
								return e.error()
							}))
						}))
					}
				}
			};
		t.default = h
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = r(4),
			o = {
				keyword: ["maxItems", "minItems"],
				type: "array",
				schemaType: "number",
				$data: !0,
				error: {
					message: function(e) {
						var t = e.keyword,
							r = e.schemaCode,
							n = "maxItems" === t ? "more" : "fewer";
						return p.str(a || (a = s(["must NOT have ", " than ", " items"])), n, r)
					},
					params: function(e) {
						var t = e.schemaCode;
						return p._(n || (n = s(["{limit: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.keyword,
						r = e.data,
						a = e.schemaCode,
						n = "maxItems" === t ? p.operators.GT : p.operators.LT;
					e.fail$data(p._(i || (i = s(["", ".length ", " ", ""])), r, n, a))
				}
			};
		t.default = o
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m, d, l, y, g, f, v, b, P = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var S = r(46),
			w = r(4),
			k = r(7),
			_ = r(66),
			I = {
				keyword: "uniqueItems",
				type: "array",
				schemaType: "boolean",
				$data: !0,
				error: {
					message: function(e) {
						var t = e.params,
							r = t.i,
							n = t.j;
						return w.str(a || (a = P(["must NOT have duplicate items (items ## ", " and ", " are identical)"])), n, r)
					},
					params: function(e) {
						var t = e.params,
							r = t.i,
							a = t.j;
						return w._(n || (n = P(["{i: ", ", j: ", "}"])), r, a)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.data,
						a = e.$data,
						n = e.schema,
						I = e.parentSchema,
						q = e.schemaCode,
						L = e.it;
					if (a || n) {
						var x = t.let("valid"),
							E = I.items ? S.getSchemaTypes(I.items) : [];
						e.block$data(x, (function() {
							var a = t.let("i", w._(s || (s = P(["", ".length"])), r)),
								n = t.let("j");
							e.setParams({
								i: a,
								j: n
							}), t.assign(x, !0), t.if(w._(p || (p = P(["", " > 1"])), a), (function() {
								return (E.length > 0 && !E.some((function(e) {
									return "object" === e || "array" === e
								})) ? N : O)(a, n)
							}))
						}), w._(i || (i = P(["", " === false"])), q)), e.ok(x)
					}

					function N(a, n) {
						var i = t.name("item"),
							s = S.checkDataTypes(E, i, L.opts.strictNumbers, S.DataType.Wrong),
							p = t.const("indices", w._(o || (o = P(["{}"]))));
						t.for(w._(c || (c = P([";", "--;"])), a), (function() {
							t.let(i, w._(h || (h = P(["", "[", "]"])), r, a)), t.if(s, w._(u || (u = P(["continue"])))), E.length > 1 && t.if(w._(m || (m = P(["typeof ", ' == "string"'])), i), w._(d || (d = P(["", ' += "_"'])), i)), t.if(w._(l || (l = P(["typeof ", "[", '] == "number"'])), p, i), (function() {
								t.assign(n, w._(y || (y = P(["", "[", "]"])), p, i)), e.error(), t.assign(x, !1).break()
							})).code(w._(g || (g = P(["", "[", "] = ", ""])), p, i, a))
						}))
					}

					function O(a, n) {
						var i = k.useFunc(t, _.default),
							s = t.name("outer");
						t.label(s).for(w._(f || (f = P([";", "--;"])), a), (function() {
							return t.for(w._(v || (v = P(["", " = ", "; ", "--;"])), n, a, n), (function() {
								return t.if(w._(b || (b = P(["", "(", "[", "], ", "[", "])"])), i, r, a, r, n), (function() {
									e.error(), t.assign(x, !1).break(s)
								}))
							}))
						}))
					}
				}
			};
		t.default = I
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = r(4),
			o = r(7),
			c = r(66),
			h = {
				keyword: "const",
				$data: !0,
				error: {
					message: "must be equal to constant",
					params: function(e) {
						var t = e.schemaCode;
						return p._(a || (a = s(["{allowedValue: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.data,
						a = e.$data,
						h = e.schemaCode,
						u = e.schema;
					a || u && "object" == typeof u ? e.fail$data(p._(n || (n = s(["!", "(", ", ", ")"])), o.useFunc(t, c.default), r, h)) : e.fail(p._(i || (i = s(["", " !== ", ""])), u, r))
				}
			};
		t.default = h
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p = r(33),
			o = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var c = r(4),
			h = r(7),
			u = r(66),
			m = {
				keyword: "enum",
				schemaType: "array",
				$data: !0,
				error: {
					message: "must be equal to one of the allowed values",
					params: function(e) {
						var t = e.schemaCode;
						return c._(a || (a = o(["{allowedValues: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.data,
						a = e.$data,
						m = e.schema,
						d = e.schemaCode,
						l = e.it;
					if (!a && 0 === m.length) throw new Error("enum must have non-empty array");
					var y, g = m.length >= l.opts.loopEnum,
						f = h.useFunc(t, u.default);
					if (g || a) y = t.let("valid"), e.block$data(y, (function() {
						t.assign(y, !1), t.forOf("v", d, (function(e) {
							return t.if(c._(n || (n = o(["", "(", ", ", ")"])), f, r, e), (function() {
								return t.assign(y, !0).break()
							}))
						}))
					}));
					else {
						if (!Array.isArray(m)) throw new Error("ajv implementation error");
						var v = t.const("vSchema", d);
						y = c.or.apply(c, p(m.map((function(e, t) {
							return function(e, t) {
								var a = m[t];
								return "object" === typeof a && null !== a ? c._(i || (i = o(["", "(", ", ", "[", "])"])), f, r, e, t) : c._(s || (s = o(["", " === ", ""])), r, a)
							}(v, t)
						}))))
					}
					e.pass(y)
				}
			};
		t.default = m
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(84),
			n = r(168),
			i = r(85),
			s = r(169),
			p = r(170),
			o = r(171),
			c = r(172),
			h = r(86),
			u = r(173),
			m = r(174),
			d = r(175),
			l = r(176),
			y = r(177),
			g = r(178),
			f = r(179),
			v = r(180);
		t.default = function() {
			var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
				t = [d.default, l.default, y.default, g.default, f.default, v.default, c.default, h.default, o.default, u.default, m.default];
			return e ? t.push(n.default, s.default) : t.push(a.default, i.default), t.push(p.default), t
		}
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(85),
			n = {
				keyword: "prefixItems",
				type: "array",
				schemaType: ["array"],
				before: "uniqueItems",
				code: function(e) {
					return a.validateTuple(e, "items")
				}
			};
		t.default = n
	}, function(e, t, r) {
		"use strict";
		var a, n, i = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var s = r(4),
			p = r(7),
			o = r(15),
			c = r(84),
			h = {
				keyword: "items",
				type: "array",
				schemaType: ["object", "boolean"],
				before: "uniqueItems",
				error: {
					message: function(e) {
						var t = e.params.len;
						return s.str(a || (a = i(["must NOT have more than ", " items"])), t)
					},
					params: function(e) {
						var t = e.params.len;
						return s._(n || (n = i(["{limit: ", "}"])), t)
					}
				},
				code: function(e) {
					var t = e.schema,
						r = e.parentSchema,
						a = e.it,
						n = r.prefixItems;
					a.items = !0, p.alwaysValidSchema(a, t) || (n ? c.validateAdditionalItems(e, n) : e.ok(o.validateArray(e)))
				}
			};
		t.default = h
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m, d, l = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var y = r(4),
			g = r(7),
			f = {
				keyword: "contains",
				type: "array",
				schemaType: ["object", "boolean"],
				before: "uniqueItems",
				trackErrors: !0,
				error: {
					message: function(e) {
						var t = e.params,
							r = t.min,
							i = t.max;
						return void 0 === i ? y.str(a || (a = l(["must contain at least ", " valid item(s)"])), r) : y.str(n || (n = l(["must contain at least ", " and no more than ", " valid item(s)"])), r, i)
					},
					params: function(e) {
						var t = e.params,
							r = t.min,
							a = t.max;
						return void 0 === a ? y._(i || (i = l(["{minContains: ", "}"])), r) : y._(s || (s = l(["{minContains: ", ", maxContains: ", "}"])), r, a)
					}
				},
				code: function(e) {
					var t, r, a = e.gen,
						n = e.schema,
						i = e.parentSchema,
						s = e.data,
						f = e.it,
						v = i.minContains,
						b = i.maxContains;
					f.opts.next ? (t = void 0 === v ? 1 : v, r = b) : t = 1;
					var P = a.const("len", y._(p || (p = l(["", ".length"])), s));
					if (e.setParams({
							min: t,
							max: r
						}), void 0 !== r || 0 !== t) {
						if (void 0 !== r && t > r) return g.checkStrictMode(f, '"minContains" > "maxContains" is always invalid'), void e.fail();
						if (g.alwaysValidSchema(f, n)) {
							var S = y._(o || (o = l(["", " >= ", ""])), P, t);
							return void 0 !== r && (S = y._(c || (c = l(["", " && ", " <= ", ""])), S, P, r)), void e.pass(S)
						}
						f.items = !0;
						var w = a.name("valid");
						if (void 0 === r && 1 === t) I(w, (function() {
							return a.if(w, (function() {
								return a.break()
							}))
						}));
						else {
							a.let(w, !1);
							var k = a.name("_valid"),
								_ = a.let("count", 0);
							I(k, (function() {
								return a.if(k, (function() {
									return function(e) {
										a.code(y._(h || (h = l(["", "++"])), e)), void 0 === r ? a.if(y._(u || (u = l(["", " >= ", ""])), e, t), (function() {
											return a.assign(w, !0).break()
										})) : (a.if(y._(m || (m = l(["", " > ", ""])), e, r), (function() {
											return a.assign(w, !1).break()
										})), 1 === t ? a.assign(w, !0) : a.if(y._(d || (d = l(["", " >= ", ""])), e, t), (function() {
											return a.assign(w, !0)
										})))
									}(_)
								}))
							}))
						}
						e.result(w, (function() {
							return e.reset()
						}))
					} else g.checkStrictMode(f, '"minContains" == 0 without "maxContains": "contains" keyword ignored');

					function I(t, r) {
						a.forRange("i", 0, P, (function(a) {
							e.subschema({
								keyword: "contains",
								dataProp: a,
								dataPropType: g.Type.Num,
								compositeRule: !0
							}, t), r()
						}))
					}
				}
			};
		t.default = f
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s = r(16),
			p = r(64),
			o = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.validateSchemaDeps = t.validatePropertyDeps = t.error = void 0;
		var c = r(4),
			h = r(7),
			u = r(15);
		t.error = {
			message: function(e) {
				var t = e.params,
					r = t.property,
					n = t.depsCount,
					i = t.deps,
					s = 1 === n ? "property" : "properties";
				return c.str(a || (a = o(["must have ", " ", " when property ", " is present"])), s, i, r)
			},
			params: function(e) {
				var t = e.params,
					r = t.property,
					a = t.depsCount,
					i = t.deps,
					s = t.missingProperty;
				return c._(n || (n = o(["{property: ", ",\n    missingProperty: ", ",\n    depsCount: ", ",\n    deps: ", "}"])), r, s, a, i)
			}
		};
		var m = {
			keyword: "dependencies",
			type: "object",
			schemaType: "object",
			error: t.error,
			code: function(e) {
				var t = function(e) {
						var t = e.schema,
							r = {},
							a = {};
						for (var n in t) {
							if ("__proto__" !== n)(Array.isArray(t[n]) ? r : a)[n] = t[n]
						}
						return [r, a]
					}(e),
					r = p(t, 2),
					a = r[0],
					n = r[1];
				d(e, a), l(e, n)
			}
		};

		function d(e) {
			var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e.schema,
				r = e.gen,
				a = e.data,
				n = e.it;
			if (0 !== Object.keys(t).length) {
				var p = r.let("missing"),
					h = function(h) {
						var m = t[h];
						if (0 === m.length) return "continue";
						var d = u.propertyInData(r, a, h, n.opts.ownProperties);
						e.setParams({
							property: h,
							depsCount: m.length,
							deps: m.join(", ")
						}), n.allErrors ? r.if(d, (function() {
							var t, r = s(m);
							try {
								for (r.s(); !(t = r.n()).done;) {
									var a = t.value;
									u.checkReportMissingProp(e, a)
								}
							} catch (n) {
								r.e(n)
							} finally {
								r.f()
							}
						})) : (r.if(c._(i || (i = o(["", " && (", ")"])), d, u.checkMissingProp(e, m, p))), u.reportMissingProp(e, p), r.else())
					};
				for (var m in t) h(m)
			}
		}

		function l(e) {
			var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e.schema,
				r = e.gen,
				a = e.data,
				n = e.keyword,
				i = e.it,
				s = r.name("valid"),
				p = function(p) {
					if (h.alwaysValidSchema(i, t[p])) return "continue";
					r.if(u.propertyInData(r, a, p, i.opts.ownProperties), (function() {
						var t = e.subschema({
							keyword: n,
							schemaProp: p
						}, s);
						e.mergeValidEvaluated(t, s)
					}), (function() {
						return r.var(s, !0)
					})), e.ok(s)
				};
			for (var o in t) p(o)
		}
		t.validatePropertyDeps = d, t.validateSchemaDeps = l, t.default = m
	}, function(e, t, r) {
		"use strict";
		var a, n = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var i = r(4),
			s = r(7),
			p = {
				keyword: "propertyNames",
				type: "object",
				schemaType: ["object", "boolean"],
				error: {
					message: "property name must be valid",
					params: function(e) {
						var t = e.params;
						return i._(a || (a = n(["{propertyName: ", "}"])), t.propertyName)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.schema,
						a = e.data,
						n = e.it;
					if (!s.alwaysValidSchema(n, r)) {
						var p = t.name("valid");
						t.forIn("key", a, (function(r) {
							e.setParams({
								propertyName: r
							}), e.subschema({
								keyword: "propertyNames",
								data: r,
								dataTypes: ["string"],
								propertyName: r,
								compositeRule: !0
							}, p), t.if(i.not(p), (function() {
								e.error(!0), n.allErrors || t.break()
							}))
						})), e.ok(p)
					}
				}
			};
		t.default = p
	}, function(e, t, r) {
		"use strict";
		var a = r(16);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var n = r(43),
			i = r(15),
			s = r(7),
			p = r(86),
			o = {
				keyword: "properties",
				type: "object",
				schemaType: "object",
				code: function(e) {
					var t = e.gen,
						r = e.schema,
						o = e.parentSchema,
						c = e.data,
						h = e.it;
					"all" === h.opts.removeAdditional && void 0 === o.additionalProperties && p.default.code(new n.KeywordCxt(h, p.default, "additionalProperties"));
					var u, m = i.allSchemaProperties(r),
						d = a(m);
					try {
						for (d.s(); !(u = d.n()).done;) {
							var l = u.value;
							h.definedProperties.add(l)
						}
					} catch (w) {
						d.e(w)
					} finally {
						d.f()
					}
					h.opts.unevaluated && m.length && !0 !== h.props && (h.props = s.mergeEvaluated.props(t, s.toHash(m), h.props));
					var y = m.filter((function(e) {
						return !s.alwaysValidSchema(h, r[e])
					}));
					if (0 !== y.length) {
						var g, f = t.name("valid"),
							v = a(y);
						try {
							for (v.s(); !(g = v.n()).done;) {
								var b = g.value;
								P(b) ? S(b) : (t.if(i.propertyInData(t, c, b, h.opts.ownProperties)), S(b), h.allErrors || t.else().var(f, !0), t.endIf()), e.it.definedProperties.add(b), e.ok(f)
							}
						} catch (w) {
							v.e(w)
						} finally {
							v.f()
						}
					}

					function P(e) {
						return h.opts.useDefaults && !h.compositeRule && void 0 !== r[e].default
					}

					function S(t) {
						e.subschema({
							keyword: "properties",
							schemaProp: t,
							dataProp: t
						}, f)
					}
				}
			};
		t.default = o
	}, function(e, t, r) {
		"use strict";
		var a, n, i = r(5),
			s = r(16);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = r(15),
			o = r(4),
			c = r(7),
			h = r(7),
			u = {
				keyword: "patternProperties",
				type: "object",
				schemaType: "object",
				code: function(e) {
					var t = e.gen,
						r = e.schema,
						u = e.data,
						m = e.parentSchema,
						d = e.it,
						l = d.opts,
						y = p.allSchemaProperties(r),
						g = y.filter((function(e) {
							return c.alwaysValidSchema(d, r[e])
						}));
					if (0 !== y.length && (g.length !== y.length || d.opts.unevaluated && !0 !== d.props)) {
						var f = l.strictSchema && !l.allowMatchingProperties && m.properties,
							v = t.name("valid");
						!0 === d.props || d.props instanceof o.Name || (d.props = h.evaluatedPropsToName(t, d.props));
						var b = d.props;
						! function() {
							var e, r = s(y);
							try {
								for (r.s(); !(e = r.n()).done;) {
									var a = e.value;
									f && P(a), d.allErrors ? S(a) : (t.var(v, !0), S(a), t.if(v))
								}
							} catch (n) {
								r.e(n)
							} finally {
								r.f()
							}
						}()
					}

					function P(e) {
						for (var t in f) new RegExp(e).test(t) && c.checkStrictMode(d, "property ".concat(t, " matches pattern ").concat(e, " (use allowMatchingProperties)"))
					}

					function S(r) {
						t.forIn("key", u, (function(s) {
							t.if(o._(a || (a = i(["", ".test(", ")"])), p.usePattern(e, r), s), (function() {
								var a = g.includes(r);
								a || e.subschema({
									keyword: "patternProperties",
									schemaProp: r,
									dataProp: s,
									dataPropType: h.Type.Str
								}, v), d.opts.unevaluated && !0 !== b ? t.assign(o._(n || (n = i(["", "[", "]"])), b, s), !0) : a || d.allErrors || t.if(o.not(v), (function() {
									return t.break()
								}))
							}))
						}))
					}
				}
			};
		t.default = u
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(7),
			n = {
				keyword: "not",
				schemaType: ["object", "boolean"],
				trackErrors: !0,
				code: function(e) {
					var t = e.gen,
						r = e.schema,
						n = e.it;
					if (a.alwaysValidSchema(n, r)) e.fail();
					else {
						var i = t.name("valid");
						e.subschema({
							keyword: "not",
							compositeRule: !0,
							createErrors: !1,
							allErrors: !1
						}, i), e.failResult(i, (function() {
							return e.reset()
						}), (function() {
							return e.error()
						}))
					}
				},
				error: {
					message: "must NOT be valid"
				}
			};
		t.default = n
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = {
			keyword: "anyOf",
			schemaType: "array",
			trackErrors: !0,
			code: r(15).validateUnion,
			error: {
				message: "must match a schema in anyOf"
			}
		};
		t.default = a
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = r(4),
			o = r(7),
			c = {
				keyword: "oneOf",
				schemaType: "array",
				trackErrors: !0,
				error: {
					message: "must match exactly one schema in oneOf",
					params: function(e) {
						var t = e.params;
						return p._(a || (a = s(["{passingSchemas: ", "}"])), t.passing)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.schema,
						a = e.parentSchema,
						c = e.it;
					if (!Array.isArray(r)) throw new Error("ajv implementation error");
					if (!c.opts.discriminator || !a.discriminator) {
						var h = r,
							u = t.let("valid", !1),
							m = t.let("passing", null),
							d = t.name("_valid");
						e.setParams({
							passing: m
						}), t.block((function() {
							h.forEach((function(r, a) {
								var h;
								o.alwaysValidSchema(c, r) ? t.var(d, !0) : h = e.subschema({
									keyword: "oneOf",
									schemaProp: a,
									compositeRule: !0
								}, d), a > 0 && t.if(p._(n || (n = s(["", " && ", ""])), d, u)).assign(u, !1).assign(m, p._(i || (i = s(["[", ", ", "]"])), m, a)).else(), t.if(d, (function() {
									t.assign(u, !0), t.assign(m, a), h && e.mergeEvaluated(h, p.Name)
								}))
							}))
						})), e.result(u, (function() {
							return e.reset()
						}), (function() {
							return e.error(!0)
						}))
					}
				}
			};
		t.default = c
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(7),
			n = {
				keyword: "allOf",
				schemaType: "array",
				code: function(e) {
					var t = e.gen,
						r = e.schema,
						n = e.it;
					if (!Array.isArray(r)) throw new Error("ajv implementation error");
					var i = t.name("valid");
					r.forEach((function(t, r) {
						if (!a.alwaysValidSchema(n, t)) {
							var s = e.subschema({
								keyword: "allOf",
								schemaProp: r
							}, i);
							e.ok(i), e.mergeEvaluated(s)
						}
					}))
				}
			};
		t.default = n
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var p = r(4),
			o = r(7),
			c = {
				keyword: "if",
				schemaType: ["object", "boolean"],
				trackErrors: !0,
				error: {
					message: function(e) {
						var t = e.params;
						return p.str(a || (a = s(['must match "', '" schema'])), t.ifClause)
					},
					params: function(e) {
						var t = e.params;
						return p._(n || (n = s(["{failingKeyword: ", "}"])), t.ifClause)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.parentSchema,
						a = e.it;
					void 0 === r.then && void 0 === r.else && o.checkStrictMode(a, '"if" without "then" and "else" is ignored');
					var n = h(a, "then"),
						c = h(a, "else");
					if (n || c) {
						var u = t.let("valid", !0),
							m = t.name("_valid");
						if (function() {
								var t = e.subschema({
									keyword: "if",
									compositeRule: !0,
									createErrors: !1,
									allErrors: !1
								}, m);
								e.mergeEvaluated(t)
							}(), e.reset(), n && c) {
							var d = t.let("ifClause");
							e.setParams({
								ifClause: d
							}), t.if(m, l("then", d), l("else", d))
						} else n ? t.if(m, l("then")) : t.if(p.not(m), l("else"));
						e.pass(u, (function() {
							return e.error(!0)
						}))
					}

					function l(r, a) {
						return function() {
							var n = e.subschema({
								keyword: r
							}, m);
							t.assign(u, m), e.mergeValidEvaluated(n, u), a ? t.assign(a, p._(i || (i = s(["", ""])), r)) : e.setParams({
								ifClause: r
							})
						}
					}
				}
			};

		function h(e, t) {
			var r = e.schema[t];
			return void 0 !== r && !o.alwaysValidSchema(e, r)
		}
		t.default = c
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = r(7),
			n = {
				keyword: ["then", "else"],
				schemaType: ["object", "boolean"],
				code: function(e) {
					var t = e.keyword,
						r = e.parentSchema,
						n = e.it;
					void 0 === r.if && a.checkStrictMode(n, '"'.concat(t, '" without "if" is ignored'))
				}
			};
		t.default = n
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var a = [r(182).default];
		t.default = a
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p, o, c, h, u, m, d, l, y, g, f, v, b, P = r(64),
			S = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var w = r(4),
			k = {
				keyword: "format",
				type: ["number", "string"],
				schemaType: "string",
				$data: !0,
				error: {
					message: function(e) {
						var t = e.schemaCode;
						return w.str(a || (a = S(['must match format "', '"'])), t)
					},
					params: function(e) {
						var t = e.schemaCode;
						return w._(n || (n = S(["{format: ", "}"])), t)
					}
				},
				code: function(e, t) {
					var r = e.gen,
						a = e.data,
						n = e.$data,
						k = e.schema,
						_ = e.schemaCode,
						I = e.it,
						q = I.opts,
						L = I.errSchemaPath,
						x = I.schemaEnv,
						E = I.self;
					q.validateFormats && (n ? function() {
						var n = r.scopeValue("formats", {
								ref: E.formats,
								code: q.code.formats
							}),
							y = r.const("fDef", w._(i || (i = S(["", "[", "]"])), n, _)),
							g = r.let("fType"),
							f = r.let("format");
						r.if(w._(s || (s = S(["typeof ", ' == "object" && !(', " instanceof RegExp)"])), y, y), (function() {
							return r.assign(g, w._(p || (p = S(["", '.type || "string"'])), y)).assign(f, w._(o || (o = S(["", ".validate"])), y))
						}), (function() {
							return r.assign(g, w._(c || (c = S(['"string"'])))).assign(f, y)
						})), e.fail$data(w.or(!1 === q.strictSchema ? w.nil : w._(h || (h = S(["", " && !", ""])), _, f), function() {
							var e = x.$async ? w._(u || (u = S(["(", ".async ? await ", "(", ") : ", "(", "))"])), y, f, a, f, a) : w._(m || (m = S(["", "(", ")"])), f, a),
								r = w._(d || (d = S(["(typeof ", ' == "function" ? ', " : ", ".test(", "))"])), f, e, f, a);
							return w._(l || (l = S(["", " && ", " !== true && ", " === ", " && !", ""])), f, f, g, t, r)
						}()))
					}() : function() {
						var n = E.formats[k];
						if (!n) return void
						function() {
							if (!1 === q.strictSchema) return void E.logger.warn(e());
							throw new Error(e());

							function e() {
								return 'unknown format "'.concat(k, '" ignored in schema at path "').concat(L, '"')
							}
						}();
						if (!0 === n) return;
						var i = function(e) {
								var t = e instanceof RegExp ? w.regexpCode(e) : q.code.formats ? w._(y || (y = S(["", "", ""])), q.code.formats, w.getProperty(k)) : void 0,
									a = r.scopeValue("formats", {
										key: k,
										ref: e,
										code: t
									});
								if ("object" == typeof e && !(e instanceof RegExp)) return [e.type || "string", e.validate, w._(g || (g = S(["", ".validate"])), a)];
								return ["string", e, a]
							}(n),
							s = P(i, 3),
							p = s[0],
							o = s[1],
							c = s[2];
						p === t && e.pass(function() {
							if ("object" == typeof n && !(n instanceof RegExp) && n.async) {
								if (!x.$async) throw new Error("async format in sync schema");
								return w._(f || (f = S(["await ", "(", ")"])), c, a)
							}
							return "function" == typeof o ? w._(v || (v = S(["", "(", ")"])), c, a) : w._(b || (b = S(["", ".test(", ")"])), c, a)
						}())
					}())
				}
			};
		t.default = k
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
			value: !0
		}), t.contentVocabulary = t.metadataVocabulary = void 0, t.metadataVocabulary = ["title", "description", "default", "deprecated", "readOnly", "writeOnly", "examples"], t.contentVocabulary = ["contentMediaType", "contentEncoding", "contentSchema"]
	}, function(e, t, r) {
		"use strict";
		var a, n, i, s, p = r(16),
			o = r(5);
		Object.defineProperty(t, "__esModule", {
			value: !0
		});
		var c = r(4),
			h = r(185),
			u = {
				keyword: "discriminator",
				type: "object",
				schemaType: "object",
				error: {
					message: function(e) {
						var t = e.params,
							r = t.discrError,
							a = t.tagName;
						return r === h.DiscrError.Tag ? 'tag "'.concat(a, '" must be string') : 'value of tag "'.concat(a, '" must be in oneOf')
					},
					params: function(e) {
						var t = e.params,
							r = t.discrError,
							n = t.tag,
							i = t.tagName;
						return c._(a || (a = o(["{error: ", ", tag: ", ", tagValue: ", "}"])), r, i, n)
					}
				},
				code: function(e) {
					var t = e.gen,
						r = e.data,
						a = e.schema,
						u = e.parentSchema,
						m = e.it,
						d = u.oneOf;
					if (!m.opts.discriminator) throw new Error("discriminator: requires discriminator option");
					var l = a.propertyName;
					if ("string" != typeof l) throw new Error("discriminator: requires propertyName");
					if (a.mapping) throw new Error("discriminator: mapping is not supported");
					if (!d) throw new Error("discriminator: requires oneOf keyword");
					var y = t.let("valid", !1),
						g = t.const("tag", c._(n || (n = o(["", "", ""])), r, c.getProperty(l)));

					function f(r) {
						var a = t.name("valid"),
							n = e.subschema({
								keyword: "oneOf",
								schemaProp: r
							}, a);
						return e.mergeEvaluated(n, c.Name), a
					}
					t.if(c._(i || (i = o(["typeof ", ' == "string"'])), g), (function() {
						return function() {
							var r = function() {
								for (var e, t = {}, r = o(u), a = !0, n = 0; n < d.length; n++) {
									var i = d[n],
										s = null === (e = i.properties) || void 0 === e ? void 0 : e[l];
									if ("object" != typeof s) throw new Error('discriminator: oneOf schemas must have "properties/'.concat(l, '"'));
									a = a && (r || o(i)), c(s, n)
								}
								if (!a) throw new Error('discriminator: "'.concat(l, '" must be required'));
								return t;

								function o(e) {
									var t = e.required;
									return Array.isArray(t) && t.includes(l)
								}

								function c(e, t) {
									if (e.const) h(e.const, t);
									else {
										if (!e.enum) throw new Error('discriminator: "properties/'.concat(l, '" must have "const" or "enum"'));
										var r, a = p(e.enum);
										try {
											for (a.s(); !(r = a.n()).done;) {
												h(r.value, t)
											}
										} catch (n) {
											a.e(n)
										} finally {
											a.f()
										}
									}
								}

								function h(e, r) {
									if ("string" != typeof e || e in t) throw new Error('discriminator: "'.concat(l, '" values must be unique strings'));
									t[e] = r
								}
							}();
							for (var a in t.if(!1), r) t.elseIf(c._(s || (s = o(["", " === ", ""])), g, a)), t.assign(y, f(r[a]));
							t.else(), e.error(!1, {
								discrError: h.DiscrError.Mapping,
								tag: g,
								tagName: l
							}), t.endIf()
						}()
					}), (function() {
						return e.error(!1, {
							discrError: h.DiscrError.Tag,
							tag: g,
							tagName: l
						})
					})), e.ok(y)
				}
			};
		t.default = u
	}, function(e, t, r) {
		"use strict";
		Object.defineProperty(t, "__esModule", {
				value: !0
			}), t.DiscrError = void 0,
			function(e) {
				e.Tag = "tag", e.Mapping = "mapping"
			}(t.DiscrError || (t.DiscrError = {}))
	}, function(e) {
		e.exports = JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}')
	}, , function(e, t, r) {
		"use strict";

		function a(e) {
			for (var t = "https://material-ui.com/production-error/?code=" + e, r = 1; r < arguments.length; r += 1) t += "&args[]=" + encodeURIComponent(arguments[r]);
			return "Minified Material-UI error #" + e + "; visit " + t + " for the full message."
		}
		r.d(t, "a", (function() {
			return a
		}))
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return j
		}));
		var a = r(8),
			n = r(1),
			i = r(0),
			s = r.n(i),
			p = r(6);

		function o() {
			var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
				t = e.baseClasses,
				r = e.newClasses;
			e.Component;
			if (!r) return t;
			var a = Object(n.a)({}, t);
			return Object.keys(r).forEach((function(e) {
				r[e] && (a[e] = "".concat(t[e], " ").concat(r[e]))
			})), a
		}
		var c = {
				set: function(e, t, r, a) {
					var n = e.get(t);
					n || (n = new Map, e.set(t, n)), n.set(r, a)
				},
				get: function(e, t, r) {
					var a = e.get(t);
					return a ? a.get(r) : void 0
				},
				delete: function(e, t, r) {
					e.get(t).delete(r)
				}
			},
			h = r(208),
			u = (r(9), "function" === typeof Symbol && Symbol.for ? Symbol.for("mui.nested") : "__THEME_NESTED__"),
			m = ["checked", "disabled", "error", "focused", "focusVisible", "required", "expanded", "selected"];
		var d = r(48),
			l = r(49),
			y = r(50),
			g = r(56),
			f = r(51),
			v = r(57),
			b = r(53);

		function P() {
			return {
				plugins: [Object(d.a)(), Object(l.a)(), Object(y.a)(), Object(g.a)(), Object(f.a)(), "undefined" === typeof window ? null : Object(v.a)(), Object(b.a)()]
			}
		}
		var S = Object(p.d)(P()),
			w = {
				disableGeneration: !1,
				generateClassName: function() {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
						t = e.disableGlobal,
						r = void 0 !== t && t,
						a = e.productionPrefix,
						n = void 0 === a ? "jss" : a,
						i = e.seed,
						s = void 0 === i ? "" : i,
						p = "" === s ? "" : "".concat(s, "-"),
						o = 0,
						c = function() {
							return o += 1
						};
					return function(e, t) {
						var a = t.options.name;
						if (a && 0 === a.indexOf("Mui") && !t.options.link && !r) {
							if (-1 !== m.indexOf(e.key)) return "Mui-".concat(e.key);
							var i = "".concat(p).concat(a, "-").concat(e.key);
							return t.options.theme[u] && "" === s ? "".concat(i, "-").concat(c()) : i
						}
						return "".concat(p).concat(n).concat(c())
					}
				}(),
				jss: S,
				sheetsCache: null,
				sheetsManager: new Map,
				sheetsRegistry: null
			},
			k = s.a.createContext(w);
		var _ = -1e9;

		function I() {
			return _ += 1
		}
		r(39);
		var q = r(206);

		function L(e) {
			var t = "function" === typeof e;
			return {
				create: function(r, a) {
					var i;
					try {
						i = t ? e(r) : e
					} catch (o) {
						throw o
					}
					if (!a || !r.overrides || !r.overrides[a]) return i;
					var s = r.overrides[a],
						p = Object(n.a)({}, i);
					return Object.keys(s).forEach((function(e) {
						p[e] = Object(q.a)(p[e], s[e])
					})), p
				},
				options: {}
			}
		}
		var x = {};

		function E(e, t, r) {
			var a = e.state;
			if (e.stylesOptions.disableGeneration) return t || {};
			a.cacheClasses || (a.cacheClasses = {
				value: null,
				lastProp: null,
				lastJSS: {}
			});
			var n = !1;
			return a.classes !== a.cacheClasses.lastJSS && (a.cacheClasses.lastJSS = a.classes, n = !0), t !== a.cacheClasses.lastProp && (a.cacheClasses.lastProp = t, n = !0), n && (a.cacheClasses.value = o({
				baseClasses: a.cacheClasses.lastJSS,
				newClasses: t,
				Component: r
			})), a.cacheClasses.value
		}

		function N(e, t) {
			var r = e.state,
				a = e.theme,
				i = e.stylesOptions,
				s = e.stylesCreator,
				h = e.name;
			if (!i.disableGeneration) {
				var u = c.get(i.sheetsManager, s, a);
				u || (u = {
					refs: 0,
					staticSheet: null,
					dynamicStyles: null
				}, c.set(i.sheetsManager, s, a, u));
				var m = Object(n.a)({}, s.options, i, {
					theme: a,
					flip: "boolean" === typeof i.flip ? i.flip : "rtl" === a.direction
				});
				m.generateId = m.serverGenerateClassName || m.generateClassName;
				var d = i.sheetsRegistry;
				if (0 === u.refs) {
					var l;
					i.sheetsCache && (l = c.get(i.sheetsCache, s, a));
					var y = s.create(a, h);
					l || ((l = i.jss.createStyleSheet(y, Object(n.a)({
						link: !1
					}, m))).attach(), i.sheetsCache && c.set(i.sheetsCache, s, a, l)), d && d.add(l), u.staticSheet = l, u.dynamicStyles = Object(p.h)(y)
				}
				if (u.dynamicStyles) {
					var g = i.jss.createStyleSheet(u.dynamicStyles, Object(n.a)({
						link: !0
					}, m));
					g.update(t), g.attach(), r.dynamicSheet = g, r.classes = o({
						baseClasses: u.staticSheet.classes,
						newClasses: g.classes
					}), d && d.add(g)
				} else r.classes = u.staticSheet.classes;
				u.refs += 1
			}
		}

		function O(e, t) {
			var r = e.state;
			r.dynamicSheet && r.dynamicSheet.update(t)
		}

		function D(e) {
			var t = e.state,
				r = e.theme,
				a = e.stylesOptions,
				n = e.stylesCreator;
			if (!a.disableGeneration) {
				var i = c.get(a.sheetsManager, n, r);
				i.refs -= 1;
				var s = a.sheetsRegistry;
				0 === i.refs && (c.delete(a.sheetsManager, n, r), a.jss.removeStyleSheet(i.staticSheet), s && s.remove(i.staticSheet)), t.dynamicSheet && (a.jss.removeStyleSheet(t.dynamicSheet), s && s.remove(t.dynamicSheet))
			}
		}

		function T(e, t) {
			var r, a = s.a.useRef([]),
				n = s.a.useMemo((function() {
					return {}
				}), t);
			a.current !== n && (a.current = n, r = e()), s.a.useEffect((function() {
				return function() {
					r && r()
				}
			}), [n])
		}

		function j(e) {
			var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
				r = t.name,
				i = t.classNamePrefix,
				p = t.Component,
				o = t.defaultTheme,
				c = void 0 === o ? x : o,
				u = Object(a.a)(t, ["name", "classNamePrefix", "Component", "defaultTheme"]),
				m = L(e),
				d = r || i || "makeStyles";
			m.options = {
				index: I(),
				name: r,
				meta: d,
				classNamePrefix: d
			};
			var l = function() {
				var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
					t = Object(h.a)() || c,
					a = Object(n.a)({}, s.a.useContext(k), u),
					i = s.a.useRef(),
					o = s.a.useRef();
				T((function() {
					var n = {
						name: r,
						state: {},
						stylesCreator: m,
						stylesOptions: a,
						theme: t
					};
					return N(n, e), o.current = !1, i.current = n,
						function() {
							D(n)
						}
				}), [t, m]), s.a.useEffect((function() {
					o.current && O(i.current, e), o.current = !0
				}));
				var d = E(i.current, e.classes, p);
				return d
			};
			return l
		}
	}, , , , , , , , , , , , , , , , function(e, t, r) {
		"use strict";
		var a = r(1),
			n = r(189),
			i = r(34);
		t.a = function(e) {
			var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
			return Object(n.a)(e, Object(a.a)({
				defaultTheme: i.a
			}, t))
		}
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return s
		}));
		var a = r(1),
			n = r(39);

		function i(e) {
			return e && "object" === Object(n.a)(e) && e.constructor === Object
		}

		function s(e, t) {
			var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {
					clone: !0
				},
				n = r.clone ? Object(a.a)({}, e) : e;
			return i(e) && i(t) && Object.keys(t).forEach((function(a) {
				"__proto__" !== a && (i(t[a]) && a in e ? n[a] = s(e[a], t[a], r) : n[a] = t[a])
			})), n
		}
	}, function(e, t, r) {
		"use strict";
		var a = r(1),
			n = r(35),
			i = r(8),
			s = r(18),
			p = r(0),
			o = r.n(p),
			c = r(11),
			h = r.n(c);
		r(9);

		function u(e) {
			var t, r, a = "";
			if ("string" === typeof e || "number" === typeof e) a += e;
			else if ("object" === typeof e)
				if (Array.isArray(e))
					for (t = 0; t < e.length; t++) e[t] && (r = u(e[t])) && (a && (a += " "), a += r);
				else
					for (t in e) e[t] && (a && (a += " "), a += t);
			return a
		}
		var m = function() {
				for (var e, t, r = 0, a = ""; r < arguments.length;)(e = arguments[r++]) && (t = u(e)) && (a && (a += " "), a += t);
				return a
			},
			d = r(206),
			l = r(28),
			y = r(21),
			g = r.n(y),
			f = r(189);

		function v(e) {
			var t = e.theme,
				r = e.name,
				a = e.props;
			if (!t || !t.props || !t.props[r]) return a;
			var n, i = t.props[r];
			for (n in i) void 0 === a[n] && (a[n] = i[n]);
			return a
		}
		var b = r(208),
			P = function(e) {
				var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
				return function(r) {
					var n = t.defaultTheme,
						s = t.withTheme,
						p = void 0 !== s && s,
						c = t.name,
						h = Object(i.a)(t, ["defaultTheme", "withTheme", "name"]);
					var u = c,
						m = Object(f.a)(e, Object(a.a)({
							defaultTheme: n,
							Component: r,
							name: c || r.displayName,
							classNamePrefix: u
						}, h)),
						d = o.a.forwardRef((function(e, t) {
							e.classes;
							var s, h = e.innerRef,
								u = Object(i.a)(e, ["classes", "innerRef"]),
								d = m(Object(a.a)({}, r.defaultProps, e)),
								l = u;
							return ("string" === typeof c || p) && (s = Object(b.a)() || n, c && (l = v({
								theme: s,
								name: c,
								props: u
							})), p && !l.theme && (l.theme = s)), o.a.createElement(r, Object(a.a)({
								ref: h || t,
								classes: d
							}, l))
						}));
					return g()(d, r), d
				}
			},
			S = r(34);
		var w = function(e, t) {
				return P(e, Object(a.a)({
					defaultTheme: S.a
				}, t))
			},
			k = r(188);

		function _(e) {
			if ("string" !== typeof e) throw new Error(Object(k.a)(7));
			return e.charAt(0).toUpperCase() + e.slice(1)
		}
		var I = r(10),
			q = r(25),
			L = !1,
			x = o.a.createContext(null),
			E = "unmounted",
			N = "exited",
			O = "entering",
			D = "entered",
			T = "exiting",
			j = function(e) {
				function t(t, r) {
					var a;
					a = e.call(this, t, r) || this;
					var n, i = r && !r.isMounting ? t.enter : t.appear;
					return a.appearStatus = null, t.in ? i ? (n = N, a.appearStatus = O) : n = D : n = t.unmountOnExit || t.mountOnEnter ? E : N, a.state = {
						status: n
					}, a.nextCallback = null, a
				}
				Object(q.a)(t, e), t.getDerivedStateFromProps = function(e, t) {
					return e.in && t.status === E ? {
						status: N
					} : null
				};
				var r = t.prototype;
				return r.componentDidMount = function() {
					this.updateStatus(!0, this.appearStatus)
				}, r.componentDidUpdate = function(e) {
					var t = null;
					if (e !== this.props) {
						var r = this.state.status;
						this.props.in ? r !== O && r !== D && (t = O) : r !== O && r !== D || (t = T)
					}
					this.updateStatus(!1, t)
				}, r.componentWillUnmount = function() {
					this.cancelNextCallback()
				}, r.getTimeouts = function() {
					var e, t, r, a = this.props.timeout;
					return e = t = r = a, null != a && "number" !== typeof a && (e = a.exit, t = a.enter, r = void 0 !== a.appear ? a.appear : t), {
						exit: e,
						enter: t,
						appear: r
					}
				}, r.updateStatus = function(e, t) {
					void 0 === e && (e = !1), null !== t ? (this.cancelNextCallback(), t === O ? this.performEnter(e) : this.performExit()) : this.props.unmountOnExit && this.state.status === N && this.setState({
						status: E
					})
				}, r.performEnter = function(e) {
					var t = this,
						r = this.props.enter,
						a = this.context ? this.context.isMounting : e,
						n = this.props.nodeRef ? [a] : [h.a.findDOMNode(this), a],
						i = n[0],
						s = n[1],
						p = this.getTimeouts(),
						o = a ? p.appear : p.enter;
					!e && !r || L ? this.safeSetState({
						status: D
					}, (function() {
						t.props.onEntered(i)
					})) : (this.props.onEnter(i, s), this.safeSetState({
						status: O
					}, (function() {
						t.props.onEntering(i, s), t.onTransitionEnd(o, (function() {
							t.safeSetState({
								status: D
							}, (function() {
								t.props.onEntered(i, s)
							}))
						}))
					})))
				}, r.performExit = function() {
					var e = this,
						t = this.props.exit,
						r = this.getTimeouts(),
						a = this.props.nodeRef ? void 0 : h.a.findDOMNode(this);
					t && !L ? (this.props.onExit(a), this.safeSetState({
						status: T
					}, (function() {
						e.props.onExiting(a), e.onTransitionEnd(r.exit, (function() {
							e.safeSetState({
								status: N
							}, (function() {
								e.props.onExited(a)
							}))
						}))
					}))) : this.safeSetState({
						status: N
					}, (function() {
						e.props.onExited(a)
					}))
				}, r.cancelNextCallback = function() {
					null !== this.nextCallback && (this.nextCallback.cancel(), this.nextCallback = null)
				}, r.safeSetState = function(e, t) {
					t = this.setNextCallback(t), this.setState(e, t)
				}, r.setNextCallback = function(e) {
					var t = this,
						r = !0;
					return this.nextCallback = function(a) {
						r && (r = !1, t.nextCallback = null, e(a))
					}, this.nextCallback.cancel = function() {
						r = !1
					}, this.nextCallback
				}, r.onTransitionEnd = function(e, t) {
					this.setNextCallback(t);
					var r = this.props.nodeRef ? this.props.nodeRef.current : h.a.findDOMNode(this),
						a = null == e && !this.props.addEndListener;
					if (r && !a) {
						if (this.props.addEndListener) {
							var n = this.props.nodeRef ? [this.nextCallback] : [r, this.nextCallback],
								i = n[0],
								s = n[1];
							this.props.addEndListener(i, s)
						}
						null != e && setTimeout(this.nextCallback, e)
					} else setTimeout(this.nextCallback, 0)
				}, r.render = function() {
					var e = this.state.status;
					if (e === E) return null;
					var t = this.props,
						r = t.children,
						a = (t.in, t.mountOnEnter, t.unmountOnExit, t.appear, t.enter, t.exit, t.timeout, t.addEndListener, t.onEnter, t.onEntering, t.onEntered, t.onExit, t.onExiting, t.onExited, t.nodeRef, Object(I.a)(t, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]));
					return o.a.createElement(x.Provider, {
						value: null
					}, "function" === typeof r ? r(e, a) : o.a.cloneElement(o.a.Children.only(r), a))
				}, t
			}(o.a.Component);

		function F() {}
		j.contextType = x, j.propTypes = {}, j.defaultProps = {
			in: !1,
			mountOnEnter: !1,
			unmountOnExit: !1,
			appear: !1,
			enter: !0,
			exit: !0,
			onEnter: F,
			onEntering: F,
			onEntered: F,
			onExit: F,
			onExiting: F,
			onExited: F
		}, j.UNMOUNTED = E, j.EXITED = N, j.ENTERING = O, j.ENTERED = D, j.EXITING = T;
		var C = j;

		function A() {
			return Object(b.a)() || S.a
		}

		function H(e, t) {
			var r = e.timeout,
				a = e.style,
				n = void 0 === a ? {} : a;
			return {
				duration: n.transitionDuration || "number" === typeof r ? r : r[t.mode] || 0,
				delay: n.transitionDelay
			}
		}

		function R(e, t) {
			"function" === typeof e ? e(t) : e && (e.current = t)
		}

		function M(e, t) {
			return p.useMemo((function() {
				return null == e && null == t ? null : function(r) {
					R(e, r), R(t, r)
				}
			}), [e, t])
		}

		function $(e) {
			return "scale(".concat(e, ", ").concat(Math.pow(e, 2), ")")
		}
		var z = {
				entering: {
					opacity: 1,
					transform: $(1)
				},
				entered: {
					opacity: 1,
					transform: "none"
				}
			},
			U = p.forwardRef((function(e, t) {
				var r = e.children,
					s = e.disableStrictModeCompat,
					o = void 0 !== s && s,
					c = e.in,
					h = e.onEnter,
					u = e.onEntered,
					m = e.onEntering,
					d = e.onExit,
					l = e.onExited,
					y = e.onExiting,
					g = e.style,
					f = e.timeout,
					v = void 0 === f ? "auto" : f,
					b = e.TransitionComponent,
					P = void 0 === b ? C : b,
					S = Object(i.a)(e, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]),
					w = p.useRef(),
					k = p.useRef(),
					_ = A(),
					I = _.unstable_strictMode && !o,
					q = p.useRef(null),
					L = M(r.ref, t),
					x = M(I ? q : void 0, L),
					E = function(e) {
						return function(t, r) {
							if (e) {
								var a = I ? [q.current, t] : [t, r],
									i = Object(n.a)(a, 2),
									s = i[0],
									p = i[1];
								void 0 === p ? e(s) : e(s, p)
							}
						}
					},
					N = E(m),
					O = E((function(e, t) {
						! function(e) {
							e.scrollTop
						}(e);
						var r, a = H({
								style: g,
								timeout: v
							}, {
								mode: "enter"
							}),
							n = a.duration,
							i = a.delay;
						"auto" === v ? (r = _.transitions.getAutoHeightDuration(e.clientHeight), k.current = r) : r = n, e.style.transition = [_.transitions.create("opacity", {
							duration: r,
							delay: i
						}), _.transitions.create("transform", {
							duration: .666 * r,
							delay: i
						})].join(","), h && h(e, t)
					})),
					D = E(u),
					T = E(y),
					j = E((function(e) {
						var t, r = H({
								style: g,
								timeout: v
							}, {
								mode: "exit"
							}),
							a = r.duration,
							n = r.delay;
						"auto" === v ? (t = _.transitions.getAutoHeightDuration(e.clientHeight), k.current = t) : t = a, e.style.transition = [_.transitions.create("opacity", {
							duration: t,
							delay: n
						}), _.transitions.create("transform", {
							duration: .666 * t,
							delay: n || .333 * t
						})].join(","), e.style.opacity = "0", e.style.transform = $(.75), d && d(e)
					})),
					F = E(l);
				return p.useEffect((function() {
					return function() {
						clearTimeout(w.current)
					}
				}), []), p.createElement(P, Object(a.a)({
					appear: !0,
					in: c,
					nodeRef: I ? q : void 0,
					onEnter: O,
					onEntered: D,
					onEntering: N,
					onExit: j,
					onExited: F,
					onExiting: T,
					addEndListener: function(e, t) {
						var r = I ? e : t;
						"auto" === v && (w.current = setTimeout(r, k.current || 0))
					},
					timeout: "auto" === v ? null : v
				}, S), (function(e, t) {
					return p.cloneElement(r, Object(a.a)({
						style: Object(a.a)({
							opacity: 0,
							transform: $(.75),
							visibility: "exited" !== e || c ? void 0 : "hidden"
						}, z[e], g, r.props.style),
						ref: x
					}, t))
				}))
			}));
		U.muiSupportAuto = !0;
		var B = U,
			W = r(95);
		var V = "undefined" !== typeof window ? p.useLayoutEffect : p.useEffect;
		var G = p.forwardRef((function(e, t) {
			var r = e.children,
				a = e.container,
				n = e.disablePortal,
				i = void 0 !== n && n,
				s = e.onRendered,
				o = p.useState(null),
				h = o[0],
				u = o[1],
				m = M(p.isValidElement(r) ? r.ref : null, t);
			return V((function() {
				i || u(function(e) {
					return e = "function" === typeof e ? e() : e, c.findDOMNode(e)
				}(a) || document.body)
			}), [a, i]), V((function() {
				if (h && !i) return R(t, h),
					function() {
						R(t, null)
					}
			}), [t, h, i]), V((function() {
				s && (h || i) && s()
			}), [s, h, i]), i ? p.isValidElement(r) ? p.cloneElement(r, {
				ref: m
			}) : r : h ? c.createPortal(r, h) : h
		}));

		function K() {
			for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
			return t.reduce((function(e, t) {
				return null == t ? e : function() {
					for (var r = arguments.length, a = new Array(r), n = 0; n < r; n++) a[n] = arguments[n];
					e.apply(this, a), t.apply(this, a)
				}
			}), (function() {}))
		}

		function Q(e) {
			return "function" === typeof e ? e() : e
		}
		var Y = "undefined" !== typeof window ? p.useLayoutEffect : p.useEffect,
			J = {},
			X = p.forwardRef((function(e, t) {
				var r = e.anchorEl,
					n = e.children,
					s = e.container,
					o = e.disablePortal,
					c = void 0 !== o && o,
					h = e.keepMounted,
					u = void 0 !== h && h,
					m = e.modifiers,
					d = e.open,
					l = e.placement,
					y = void 0 === l ? "bottom" : l,
					g = e.popperOptions,
					f = void 0 === g ? J : g,
					v = e.popperRef,
					P = e.style,
					S = e.transition,
					w = void 0 !== S && S,
					k = Object(i.a)(e, ["anchorEl", "children", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"]),
					_ = p.useRef(null),
					I = M(_, t),
					q = p.useRef(null),
					L = M(q, v),
					x = p.useRef(L);
				Y((function() {
					x.current = L
				}), [L]), p.useImperativeHandle(v, (function() {
					return q.current
				}), []);
				var E = p.useState(!0),
					N = E[0],
					O = E[1],
					D = function(e, t) {
						if ("ltr" === (t && t.direction || "ltr")) return e;
						switch (e) {
							case "bottom-end":
								return "bottom-start";
							case "bottom-start":
								return "bottom-end";
							case "top-end":
								return "top-start";
							case "top-start":
								return "top-end";
							default:
								return e
						}
					}(y, Object(b.a)()),
					T = p.useState(D),
					j = T[0],
					F = T[1];
				p.useEffect((function() {
					q.current && q.current.update()
				}));
				var C = p.useCallback((function() {
						if (_.current && r && d) {
							q.current && (q.current.destroy(), x.current(null));
							var e = function(e) {
									F(e.placement)
								},
								t = (Q(r), new W.a(Q(r), _.current, Object(a.a)({
									placement: D
								}, f, {
									modifiers: Object(a.a)({}, c ? {} : {
										preventOverflow: {
											boundariesElement: "window"
										}
									}, m, f.modifiers),
									onCreate: K(e, f.onCreate),
									onUpdate: K(e, f.onUpdate)
								})));
							x.current(t)
						}
					}), [r, c, m, d, D, f]),
					A = p.useCallback((function(e) {
						R(I, e), C()
					}), [I, C]),
					H = function() {
						q.current && (q.current.destroy(), x.current(null))
					};
				if (p.useEffect((function() {
						return function() {
							H()
						}
					}), []), p.useEffect((function() {
						d || w || H()
					}), [d, w]), !u && !d && (!w || N)) return null;
				var $ = {
					placement: j
				};
				return w && ($.TransitionProps = {
					in: d,
					onEnter: function() {
						O(!1)
					},
					onExited: function() {
						O(!0), H()
					}
				}), p.createElement(G, {
					disablePortal: c,
					container: s
				}, p.createElement("div", Object(a.a)({
					ref: A,
					role: "tooltip"
				}, k, {
					style: Object(a.a)({
						position: "fixed",
						top: 0,
						left: 0,
						display: d || !u || w ? null : "none"
					}, P)
				}), "function" === typeof n ? n($) : n))
			}));
		var Z = !0,
			ee = !1,
			te = null,
			re = {
				text: !0,
				search: !0,
				url: !0,
				tel: !0,
				email: !0,
				password: !0,
				number: !0,
				date: !0,
				month: !0,
				week: !0,
				time: !0,
				datetime: !0,
				"datetime-local": !0
			};

		function ae(e) {
			e.metaKey || e.altKey || e.ctrlKey || (Z = !0)
		}

		function ne() {
			Z = !1
		}

		function ie() {
			"hidden" === this.visibilityState && ee && (Z = !0)
		}

		function se(e) {
			var t = e.target;
			try {
				return t.matches(":focus-visible")
			} catch (r) {}
			return Z || function(e) {
				var t = e.type,
					r = e.tagName;
				return !("INPUT" !== r || !re[t] || e.readOnly) || "TEXTAREA" === r && !e.readOnly || !!e.isContentEditable
			}(t)
		}

		function pe() {
			ee = !0, window.clearTimeout(te), te = window.setTimeout((function() {
				ee = !1
			}), 100)
		}

		function oe() {
			return {
				isFocusVisible: se,
				onBlurVisible: pe,
				ref: p.useCallback((function(e) {
					var t, r = c.findDOMNode(e);
					null != r && ((t = r.ownerDocument).addEventListener("keydown", ae, !0), t.addEventListener("mousedown", ne, !0), t.addEventListener("pointerdown", ne, !0), t.addEventListener("touchstart", ne, !0), t.addEventListener("visibilitychange", ie, !0))
				}), [])
			}
		}

		function ce(e) {
			return Math.round(1e5 * e) / 1e5
		}
		var he = !1,
			ue = null;
		var me = p.forwardRef((function(e, t) {
			var r = e.arrow,
				s = void 0 !== r && r,
				o = e.children,
				h = e.classes,
				u = e.disableFocusListener,
				l = void 0 !== u && u,
				y = e.disableHoverListener,
				g = void 0 !== y && y,
				f = e.disableTouchListener,
				v = void 0 !== f && f,
				b = e.enterDelay,
				P = void 0 === b ? 100 : b,
				S = e.enterNextDelay,
				w = void 0 === S ? 0 : S,
				k = e.enterTouchDelay,
				I = void 0 === k ? 700 : k,
				q = e.id,
				L = e.interactive,
				x = void 0 !== L && L,
				E = e.leaveDelay,
				N = void 0 === E ? 0 : E,
				O = e.leaveTouchDelay,
				D = void 0 === O ? 1500 : O,
				T = e.onClose,
				j = e.onOpen,
				F = e.open,
				C = e.placement,
				H = void 0 === C ? "bottom" : C,
				$ = e.PopperComponent,
				z = void 0 === $ ? X : $,
				U = e.PopperProps,
				W = e.title,
				V = e.TransitionComponent,
				G = void 0 === V ? B : V,
				K = e.TransitionProps,
				Q = Object(i.a)(e, ["arrow", "children", "classes", "disableFocusListener", "disableHoverListener", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "id", "interactive", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "title", "TransitionComponent", "TransitionProps"]),
				Y = A(),
				J = p.useState(),
				Z = J[0],
				ee = J[1],
				te = p.useState(null),
				re = te[0],
				ae = te[1],
				ne = p.useRef(!1),
				ie = p.useRef(),
				se = p.useRef(),
				pe = p.useRef(),
				ce = p.useRef(),
				me = function(e) {
					var t = e.controlled,
						r = e.default,
						a = (e.name, e.state, p.useRef(void 0 !== t).current),
						n = p.useState(r),
						i = n[0],
						s = n[1];
					return [a ? t : i, p.useCallback((function(e) {
						a || s(e)
					}), [])]
				}({
					controlled: F,
					default: !1,
					name: "Tooltip",
					state: "open"
				}),
				de = Object(n.a)(me, 2),
				le = de[0],
				ye = de[1],
				ge = le,
				fe = function(e) {
					var t = p.useState(e),
						r = t[0],
						a = t[1],
						n = e || r;
					return p.useEffect((function() {
						null == r && a("mui-".concat(Math.round(1e5 * Math.random())))
					}), [r]), n
				}(q);
			p.useEffect((function() {
				return function() {
					clearTimeout(ie.current), clearTimeout(se.current), clearTimeout(pe.current), clearTimeout(ce.current)
				}
			}), []);
			var ve = function(e) {
					clearTimeout(ue), he = !0, ye(!0), j && j(e)
				},
				be = function() {
					var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
					return function(t) {
						var r = o.props;
						"mouseover" === t.type && r.onMouseOver && e && r.onMouseOver(t), ne.current && "touchstart" !== t.type || (Z && Z.removeAttribute("title"), clearTimeout(se.current), clearTimeout(pe.current), P || he && w ? (t.persist(), se.current = setTimeout((function() {
							ve(t)
						}), he ? w : P)) : ve(t))
					}
				},
				Pe = oe(),
				Se = Pe.isFocusVisible,
				we = Pe.onBlurVisible,
				ke = Pe.ref,
				_e = p.useState(!1),
				Ie = _e[0],
				qe = _e[1],
				Le = function() {
					Ie && (qe(!1), we())
				},
				xe = function() {
					var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
					return function(t) {
						Z || ee(t.currentTarget), Se(t) && (qe(!0), be()(t));
						var r = o.props;
						r.onFocus && e && r.onFocus(t)
					}
				},
				Ee = function(e) {
					clearTimeout(ue), ue = setTimeout((function() {
						he = !1
					}), 800 + N), ye(!1), T && T(e), clearTimeout(ie.current), ie.current = setTimeout((function() {
						ne.current = !1
					}), Y.transitions.duration.shortest)
				},
				Ne = function() {
					var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
					return function(t) {
						var r = o.props;
						"blur" === t.type && (r.onBlur && e && r.onBlur(t), Le()), "mouseleave" === t.type && r.onMouseLeave && t.currentTarget === Z && r.onMouseLeave(t), clearTimeout(se.current), clearTimeout(pe.current), t.persist(), pe.current = setTimeout((function() {
							Ee(t)
						}), N)
					}
				},
				Oe = function(e) {
					ne.current = !0;
					var t = o.props;
					t.onTouchStart && t.onTouchStart(e)
				},
				De = M(ee, t),
				Te = M(ke, De),
				je = p.useCallback((function(e) {
					R(Te, c.findDOMNode(e))
				}), [Te]),
				Fe = M(o.ref, je);
			"" === W && (ge = !1);
			var Ce = !ge && !g,
				Ae = Object(a.a)({
					"aria-describedby": ge ? fe : null,
					title: Ce && "string" === typeof W ? W : null
				}, Q, o.props, {
					className: m(Q.className, o.props.className),
					onTouchStart: Oe,
					ref: Fe
				}),
				He = {};
			v || (Ae.onTouchStart = function(e) {
				Oe(e), clearTimeout(pe.current), clearTimeout(ie.current), clearTimeout(ce.current), e.persist(), ce.current = setTimeout((function() {
					be()(e)
				}), I)
			}, Ae.onTouchEnd = function(e) {
				o.props.onTouchEnd && o.props.onTouchEnd(e), clearTimeout(ce.current), clearTimeout(pe.current), e.persist(), pe.current = setTimeout((function() {
					Ee(e)
				}), D)
			}), g || (Ae.onMouseOver = be(), Ae.onMouseLeave = Ne(), x && (He.onMouseOver = be(!1), He.onMouseLeave = Ne(!1))), l || (Ae.onFocus = xe(), Ae.onBlur = Ne(), x && (He.onFocus = xe(!1), He.onBlur = Ne(!1)));
			var Re = p.useMemo((function() {
				return Object(d.a)({
					popperOptions: {
						modifiers: {
							arrow: {
								enabled: Boolean(re),
								element: re
							}
						}
					}
				}, U)
			}), [re, U]);
			return p.createElement(p.Fragment, null, p.cloneElement(o, Ae), p.createElement(z, Object(a.a)({
				className: m(h.popper, x && h.popperInteractive, s && h.popperArrow),
				placement: H,
				anchorEl: Z,
				open: !!Z && ge,
				id: Ae["aria-describedby"],
				transition: !0
			}, He, Re), (function(e) {
				var t = e.placement,
					r = e.TransitionProps;
				return p.createElement(G, Object(a.a)({
					timeout: Y.transitions.duration.shorter
				}, r, K), p.createElement("div", {
					className: m(h.tooltip, h["tooltipPlacement".concat(_(t.split("-")[0]))], ne.current && h.touch, s && h.tooltipArrow)
				}, W, s ? p.createElement("span", {
					className: h.arrow,
					ref: ae
				}) : null))
			})))
		}));
		t.a = w((function(e) {
			return {
				popper: {
					zIndex: e.zIndex.tooltip,
					pointerEvents: "none"
				},
				popperInteractive: {
					pointerEvents: "auto"
				},
				popperArrow: {
					'&[x-placement*="bottom"] $arrow': {
						top: 0,
						left: 0,
						marginTop: "-0.71em",
						marginLeft: 4,
						marginRight: 4,
						"&::before": {
							transformOrigin: "0 100%"
						}
					},
					'&[x-placement*="top"] $arrow': {
						bottom: 0,
						left: 0,
						marginBottom: "-0.71em",
						marginLeft: 4,
						marginRight: 4,
						"&::before": {
							transformOrigin: "100% 0"
						}
					},
					'&[x-placement*="right"] $arrow': {
						left: 0,
						marginLeft: "-0.71em",
						height: "1em",
						width: "0.71em",
						marginTop: 4,
						marginBottom: 4,
						"&::before": {
							transformOrigin: "100% 100%"
						}
					},
					'&[x-placement*="left"] $arrow': {
						right: 0,
						marginRight: "-0.71em",
						height: "1em",
						width: "0.71em",
						marginTop: 4,
						marginBottom: 4,
						"&::before": {
							transformOrigin: "0 0"
						}
					}
				},
				tooltip: {
					backgroundColor: Object(l.b)(e.palette.grey[700], .9),
					borderRadius: e.shape.borderRadius,
					color: e.palette.common.white,
					fontFamily: e.typography.fontFamily,
					padding: "4px 8px",
					fontSize: e.typography.pxToRem(10),
					lineHeight: "".concat(ce(1.4), "em"),
					maxWidth: 300,
					wordWrap: "break-word",
					fontWeight: e.typography.fontWeightMedium
				},
				tooltipArrow: {
					position: "relative",
					margin: "0"
				},
				arrow: {
					overflow: "hidden",
					position: "absolute",
					width: "1em",
					height: "0.71em",
					boxSizing: "border-box",
					color: Object(l.b)(e.palette.grey[700], .9),
					"&::before": {
						content: '""',
						margin: "auto",
						display: "block",
						width: "100%",
						height: "100%",
						backgroundColor: "currentColor",
						transform: "rotate(45deg)"
					}
				},
				touch: {
					padding: "8px 16px",
					fontSize: e.typography.pxToRem(14),
					lineHeight: "".concat(ce(16 / 14), "em"),
					fontWeight: e.typography.fontWeightRegular
				},
				tooltipPlacementLeft: Object(s.a)({
					transformOrigin: "right center",
					margin: "0 24px "
				}, e.breakpoints.up("sm"), {
					margin: "0 14px"
				}),
				tooltipPlacementRight: Object(s.a)({
					transformOrigin: "left center",
					margin: "0 24px"
				}, e.breakpoints.up("sm"), {
					margin: "0 14px"
				}),
				tooltipPlacementTop: Object(s.a)({
					transformOrigin: "center bottom",
					margin: "24px 0"
				}, e.breakpoints.up("sm"), {
					margin: "14px 0"
				}),
				tooltipPlacementBottom: Object(s.a)({
					transformOrigin: "center top",
					margin: "24px 0"
				}, e.breakpoints.up("sm"), {
					margin: "14px 0"
				})
			}
		}), {
			name: "MuiTooltip",
			flip: !1
		})(me)
	}, function(e, t, r) {
		"use strict";
		r.d(t, "a", (function() {
			return s
		}));
		var a = r(0),
			n = r.n(a);
		var i = n.a.createContext(null);

		function s() {
			return n.a.useContext(i)
		}
	}]
]);